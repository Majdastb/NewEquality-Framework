// Generated from C:/Users/hp/IdeaProjects/PostgresParser2_Sauvegarde\PostgreSQLParser.g4 by ANTLR 4.9.2


import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PostgreSQLParser extends PostgreSQLParserBase {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Dollar=1, OPEN_PAREN=2, CLOSE_PAREN=3, OPEN_BRACKET=4, CLOSE_BRACKET=5, 
		COMMA=6, SEMI=7, COLON=8, STAR=9, EQUAL=10, DOT=11, PLUS=12, MINUS=13, 
		SLASH=14, CARET=15, LT=16, GT=17, LESS_LESS=18, GREATER_GREATER=19, COLON_EQUALS=20, 
		LESS_EQUALS=21, EQUALS_GREATER=22, GREATER_EQUALS=23, DOT_DOT=24, NOT_EQUALS=25, 
		TYPECAST=26, PERCENT=27, PARAM=28, LAB=29, Operator=30, ALL=31, ANALYSE=32, 
		ANALYZE=33, AND=34, ANY=35, ARRAY=36, AS=37, ASC=38, ASYMMETRIC=39, BOTH=40, 
		BOTTOM=41, C3U=42, C3S=43, C4=44, CASE=45, CAST=46, CHECK=47, COLLATE=48, 
		COLUMN=49, COMPARABILITY=50, CONSTRAINT=51, CREATE=52, CURRENT_CATALOG=53, 
		CURRENT_DATE=54, CURRENT_ROLE=55, CURRENT_TIME=56, CURRENT_TIMESTAMP=57, 
		CURRENT_USER=58, DEFAULT=59, DEFERRABLE=60, DESC=61, DISTINCT=62, DO=63, 
		ELSE=64, EXCEPT=65, FALSE_P=66, FETCH=67, FOR=68, FOREIGN=69, FROM=70, 
		GRANT=71, GROUP_P=72, HAVING=73, IN_P=74, INITIALLY=75, INTERSECT=76, 
		INTO=77, L3U=78, L3S=79, L4=80, LABELS=81, LATERAL_P=82, LATTICE=83, LEADING=84, 
		LIMIT=85, LOCALTIME=86, LOCALTIMESTAMP=87, NOT=88, NULL_P=89, OFFSET=90, 
		ON=91, ONLY=92, OR=93, ORDER=94, ORDERED=95, OTHERWISE=96, PLACING=97, 
		PRIMARY=98, REALITY=99, REFERENCES=100, RETURNING=101, SELECT=102, SESSION_USER=103, 
		SOME=104, SYMMETRIC=105, TABLE=106, THEN=107, TO=108, TOP=109, TRAILING=110, 
		TRUE_P=111, UNION=112, UNIQUE=113, USER=114, USING=115, VARIADIC=116, 
		WHEN=117, WHERE=118, WINDOW=119, WITH=120, AUTHORIZATION=121, BINARY=122, 
		COLLATION=123, CONCURRENTLY=124, CROSS=125, CURRENT_SCHEMA=126, FREEZE=127, 
		FULL=128, ILIKE=129, INNER_P=130, IS=131, ISNULL=132, JOIN=133, LEFT=134, 
		LIKE=135, NATURAL=136, NOTNULL=137, OUTER_P=138, OVER=139, OVERLAPS=140, 
		RIGHT=141, SIMILAR=142, VERBOSE=143, ABORT_P=144, ABSOLUTE_P=145, ACCESS=146, 
		ACTION=147, ADD_P=148, ADMIN=149, AFTER=150, AGGREGATE=151, ALSO=152, 
		ALTER=153, ALWAYS=154, ASSERTION=155, ASSIGNMENT=156, AT=157, ATTRIBUTE=158, 
		BACKWARD=159, BEFORE=160, BEGIN_P=161, BY=162, CACHE=163, CALLED=164, 
		CASCADE=165, CASCADED=166, CATALOG=167, CHAIN=168, CHARACTERISTICS=169, 
		CHECKPOINT=170, CLASS=171, CLOSE=172, CLUSTER=173, COMMENT=174, COMMENTS=175, 
		COMMIT=176, COMMITTED=177, CONFIGURATION=178, CONNECTION=179, CONSTRAINTS=180, 
		CONTENT_P=181, CONTINUE_P=182, CONVERSION_P=183, COPY=184, COST=185, CSV=186, 
		CURSOR=187, CYCLE=188, DATA_P=189, DATABASE=190, DAY_P=191, DEALLOCATE=192, 
		DECLARE=193, DEFAULTS=194, DEFERRED=195, DEFINER=196, DELETE_P=197, DELIMITER=198, 
		DELIMITERS=199, DICTIONARY=200, DISABLE_P=201, DISCARD=202, DOCUMENT_P=203, 
		DOMAIN_P=204, DOUBLE_P=205, DROP=206, EACH=207, ENABLE_P=208, ENCODING=209, 
		ENCRYPTED=210, ENUM_P=211, ESCAPE=212, EVENT=213, EXCLUDE=214, EXCLUDING=215, 
		EXCLUSIVE=216, EXECUTE=217, EXPLAIN=218, EXTENSION=219, EXTERNAL=220, 
		FAMILY=221, FIRST_P=222, FOLLOWING=223, FORCE=224, FORWARD=225, FUNCTION=226, 
		FUNCTIONS=227, GLOBAL=228, GRANTED=229, HANDLER=230, HEADER_P=231, HOLD=232, 
		HOUR_P=233, IDENTITY_P=234, IF_P=235, IMMEDIATE=236, IMMUTABLE=237, IMPLICIT_P=238, 
		INCLUDING=239, INCREMENT=240, INDEX=241, INDEXES=242, INHERIT=243, INHERITS=244, 
		INLINE_P=245, INSENSITIVE=246, INSERT=247, INSTEAD=248, INVOKER=249, ISOLATION=250, 
		KEY=251, LABEL=252, LANGUAGE=253, LARGE_P=254, LAST_P=255, LEAKPROOF=256, 
		LEVEL=257, LISTEN=258, LOAD=259, LOCAL=260, LOCATION=261, LOCK_P=262, 
		MAPPING=263, MATCH=264, MATERIALIZED=265, MAXVALUE=266, MINUTE_P=267, 
		MINVALUE=268, MODE=269, MONTH_P=270, MOVE=271, NAME_P=272, NAMES=273, 
		NEXT=274, NO=275, NOTHING=276, NOTIFY=277, NOWAIT=278, NULLS_P=279, OBJECT_P=280, 
		OF=281, OFF=282, OIDS=283, OPERATOR=284, OPTION=285, OPTIONS=286, OWNED=287, 
		OWNER=288, PARSER=289, PARTIAL=290, PARTITION=291, PASSING=292, PASSWORD=293, 
		PLANS=294, PRECEDING=295, PREPARE=296, PREPARED=297, PRESERVE=298, PRIOR=299, 
		PRIVILEGES=300, PROCEDURAL=301, PROCEDURE=302, PROGRAM=303, QUOTE=304, 
		RANGE=305, READ=306, REASSIGN=307, RECHECK=308, RECURSIVE=309, REF=310, 
		REFRESH=311, REINDEX=312, RELATIVE_P=313, RELEASE=314, RENAME=315, REPEATABLE=316, 
		REPLACE=317, REPLICA=318, RESET=319, RESTART=320, RESTRICT=321, RETURNS=322, 
		REVOKE=323, ROLE=324, ROLLBACK=325, ROWS=326, RULE=327, SAVEPOINT=328, 
		SCHEMA=329, SCROLL=330, SEARCH=331, SECOND_P=332, SECURITY=333, SEQUENCE=334, 
		SEQUENCES=335, SERIALIZABLE=336, SERVER=337, SESSION=338, SET=339, SHARE=340, 
		SHOW=341, SIMPLE=342, SNAPSHOT=343, STABLE=344, STANDALONE_P=345, START=346, 
		STATEMENT=347, STATISTICS=348, STDIN=349, STDOUT=350, STORAGE=351, STRICT_P=352, 
		STRIP_P=353, SYSID=354, SYSTEM_P=355, TABLES=356, TABLESPACE=357, TEMP=358, 
		TEMPLATE=359, TEMPORARY=360, TEXT_P=361, TRANSACTION=362, TRIGGER=363, 
		TRUNCATE=364, TRUSTED=365, TYPE_P=366, TYPES_P=367, UNBOUNDED=368, UNCOMMITTED=369, 
		UNENCRYPTED=370, UNKNOWN=371, UNLISTEN=372, UNLOGGED=373, UNTIL=374, UPDATE=375, 
		VACUUM=376, VALID=377, VALIDATE=378, VALIDATOR=379, VARYING=380, VERSION_P=381, 
		VIEW=382, VOLATILE=383, WHITESPACE_P=384, WITHOUT=385, WORK=386, WRAPPER=387, 
		WRITE=388, XML_P=389, YEAR_P=390, YES_P=391, ZONE=392, BETWEEN=393, BIGINT=394, 
		BIT=395, BOOLEAN_P=396, CHAR_P=397, CHARACTER=398, COALESCE=399, DEC=400, 
		DECIMAL_P=401, EXISTS=402, EXTRACT=403, FLOAT_P=404, GREATEST=405, INOUT=406, 
		INT_P=407, INTEGER=408, INTERVAL=409, LEAST=410, NATIONAL=411, NCHAR=412, 
		NONE=413, NULLIF=414, NUMERIC=415, OVERLAY=416, POSITION=417, PRECISION=418, 
		REAL=419, ROW=420, SETOF=421, SMALLINT=422, SUBSTRING=423, TIME=424, TIMESTAMP=425, 
		TREAT=426, TRIM=427, VALUES=428, VARCHAR=429, XMLATTRIBUTES=430, XMLCONCAT=431, 
		XMLELEMENT=432, XMLEXISTS=433, XMLFOREST=434, XMLPARSE=435, XMLPI=436, 
		XMLROOT=437, XMLSERIALIZE=438, CALL=439, CURRENT_P=440, CATALOG_P=441, 
		ATTACH=442, DETACH=443, EXPRESSION=444, GENERATED=445, LOGGED=446, STORED=447, 
		INCLUDE=448, ROUTINE=449, TRANSFORM=450, IMPORT_P=451, POLICY=452, METHOD=453, 
		REFERENCING=454, NEW=455, OLD=456, VALUE_P=457, SUBSCRIPTION=458, PUBLICATION=459, 
		OUT_P=460, END_P=461, ROUTINES=462, SCHEMAS=463, PROCEDURES=464, INPUT_P=465, 
		SUPPORT=466, PARALLEL=467, SQL_P=468, DEPENDS=469, OVERRIDING=470, CONFLICT=471, 
		SKIP_P=472, LOCKED=473, TIES=474, ROLLUP=475, CUBE=476, GROUPING=477, 
		SETS=478, TABLESAMPLE=479, ORDINALITY=480, XMLTABLE=481, COLUMNS=482, 
		XMLNAMESPACES=483, ROWTYPE=484, NORMALIZED=485, WITHIN=486, FILTER=487, 
		GROUPS=488, OTHERS=489, NFC=490, NFD=491, NFKC=492, NFKD=493, UESCAPE=494, 
		VIEWS=495, NORMALIZE=496, DUMP=497, PRINT_STRICT_PARAMS=498, VARIABLE_CONFLICT=499, 
		ERROR=500, USE_VARIABLE=501, USE_COLUMN=502, ALIAS=503, CONSTANT=504, 
		PERFORM=505, GET=506, DIAGNOSTICS=507, STACKED=508, ELSIF=509, WHILE=510, 
		REVERSE=511, FOREACH=512, SLICE=513, EXIT=514, RETURN=515, QUERY=516, 
		RAISE=517, SQLSTATE=518, DEBUG=519, LOG=520, INFO=521, NOTICE=522, WARNING=523, 
		EXCEPTION=524, ASSERT=525, LOOP=526, OPEN=527, Identifier=528, QuotedIdentifier=529, 
		UnterminatedQuotedIdentifier=530, InvalidQuotedIdentifier=531, InvalidUnterminatedQuotedIdentifier=532, 
		UnicodeQuotedIdentifier=533, UnterminatedUnicodeQuotedIdentifier=534, 
		InvalidUnicodeQuotedIdentifier=535, InvalidUnterminatedUnicodeQuotedIdentifier=536, 
		StringConstant=537, UnterminatedStringConstant=538, UnicodeEscapeStringConstant=539, 
		UnterminatedUnicodeEscapeStringConstant=540, BeginDollarStringConstant=541, 
		BinaryStringConstant=542, UnterminatedBinaryStringConstant=543, InvalidBinaryStringConstant=544, 
		InvalidUnterminatedBinaryStringConstant=545, HexadecimalStringConstant=546, 
		UnterminatedHexadecimalStringConstant=547, InvalidHexadecimalStringConstant=548, 
		InvalidUnterminatedHexadecimalStringConstant=549, Integral=550, NumericFail=551, 
		Numeric=552, PLSQLVARIABLENAME=553, PLSQLIDENTIFIER=554, Whitespace=555, 
		Newline=556, LineComment=557, BlockComment=558, UnterminatedBlockComment=559, 
		MetaCommand=560, EndMetaCommand=561, ErrorCharacter=562, EscapeStringConstant=563, 
		UnterminatedEscapeStringConstant=564, InvalidEscapeStringConstant=565, 
		InvalidUnterminatedEscapeStringConstant=566, AfterEscapeStringConstantMode_NotContinued=567, 
		AfterEscapeStringConstantWithNewlineMode_NotContinued=568, DollarText=569, 
		EndDollarStringConstant=570, AfterEscapeStringConstantWithNewlineMode_Continued=571;
	public static final int
		RULE_root = 0, RULE_plsqlroot = 1, RULE_stmtblock = 2, RULE_stmtmulti = 3, 
		RULE_stmt = 4, RULE_plsqlconsolecommand = 5, RULE_callstmt = 6, RULE_createrolestmt = 7, 
		RULE_opt_with = 8, RULE_optrolelist = 9, RULE_alteroptrolelist = 10, RULE_alteroptroleelem = 11, 
		RULE_createoptroleelem = 12, RULE_createuserstmt = 13, RULE_alterrolestmt = 14, 
		RULE_opt_in_database = 15, RULE_alterrolesetstmt = 16, RULE_droprolestmt = 17, 
		RULE_creategroupstmt = 18, RULE_altergroupstmt = 19, RULE_add_drop = 20, 
		RULE_createlatticestmt = 21, RULE_labellist = 22, RULE_orderedstmt = 23, 
		RULE_orderedlist = 24, RULE_labelordering = 25, RULE_labelpair = 26, RULE_createschemastmt = 27, 
		RULE_optschemaname = 28, RULE_optschemaeltlist = 29, RULE_schema_stmt = 30, 
		RULE_variablesetstmt = 31, RULE_set_rest = 32, RULE_generic_set = 33, 
		RULE_set_rest_more = 34, RULE_var_name = 35, RULE_var_list = 36, RULE_var_value = 37, 
		RULE_iso_level = 38, RULE_opt_boolean_or_string = 39, RULE_zone_value = 40, 
		RULE_opt_encoding = 41, RULE_nonreservedword_or_sconst = 42, RULE_variableresetstmt = 43, 
		RULE_reset_rest = 44, RULE_generic_reset = 45, RULE_setresetclause = 46, 
		RULE_functionsetresetclause = 47, RULE_variableshowstmt = 48, RULE_constraintssetstmt = 49, 
		RULE_constraints_set_list = 50, RULE_constraints_set_mode = 51, RULE_checkpointstmt = 52, 
		RULE_discardstmt = 53, RULE_altertablestmt = 54, RULE_alter_table_cmds = 55, 
		RULE_partition_cmd = 56, RULE_index_partition_cmd = 57, RULE_alter_table_cmd = 58, 
		RULE_attribute_list = 59, RULE_alter_column_default = 60, RULE_opt_drop_behavior = 61, 
		RULE_opt_collate_clause = 62, RULE_alter_using = 63, RULE_replica_identity = 64, 
		RULE_reloptions = 65, RULE_opt_reloptions = 66, RULE_reloption_list = 67, 
		RULE_reloption_elem = 68, RULE_alter_identity_column_option_list = 69, 
		RULE_alter_identity_column_option = 70, RULE_partitionboundspec = 71, 
		RULE_hash_partbound_elem = 72, RULE_hash_partbound = 73, RULE_altercompositetypestmt = 74, 
		RULE_alter_type_cmds = 75, RULE_alter_type_cmd = 76, RULE_closeportalstmt = 77, 
		RULE_copystmt = 78, RULE_copy_from = 79, RULE_opt_program = 80, RULE_copy_file_name = 81, 
		RULE_copy_options = 82, RULE_copy_opt_list = 83, RULE_copy_opt_item = 84, 
		RULE_opt_binary = 85, RULE_copy_delimiter = 86, RULE_opt_using = 87, RULE_copy_generic_opt_list = 88, 
		RULE_copy_generic_opt_elem = 89, RULE_copy_generic_opt_arg = 90, RULE_copy_generic_opt_arg_list = 91, 
		RULE_copy_generic_opt_arg_list_item = 92, RULE_createstmt = 93, RULE_opttemp = 94, 
		RULE_opttableelementlist = 95, RULE_opttypedtableelementlist = 96, RULE_tableelementlist = 97, 
		RULE_typedtableelementlist = 98, RULE_tableelement = 99, RULE_typedtableelement = 100, 
		RULE_columnDef = 101, RULE_columnOptions = 102, RULE_colquallist = 103, 
		RULE_colconstraint = 104, RULE_colconstraintelem = 105, RULE_generated_when = 106, 
		RULE_constraintattr = 107, RULE_tablelikeclause = 108, RULE_tablelikeoptionlist = 109, 
		RULE_tablelikeoption = 110, RULE_tableconstraint = 111, RULE_constraintelem = 112, 
		RULE_opt_no_inherit = 113, RULE_opt_column_list = 114, RULE_columnlist = 115, 
		RULE_columnElem = 116, RULE_opt_c_include = 117, RULE_key_match = 118, 
		RULE_exclusionconstraintlist = 119, RULE_exclusionconstraintelem = 120, 
		RULE_exclusionwhereclause = 121, RULE_key_actions = 122, RULE_key_update = 123, 
		RULE_key_delete = 124, RULE_key_action = 125, RULE_optinherit = 126, RULE_optpartitionspec = 127, 
		RULE_partitionspec = 128, RULE_part_params = 129, RULE_part_elem = 130, 
		RULE_table_access_method_clause = 131, RULE_optwith = 132, RULE_oncommitoption = 133, 
		RULE_opttablespace = 134, RULE_optconstablespace = 135, RULE_existingindex = 136, 
		RULE_createstatsstmt = 137, RULE_alterstatsstmt = 138, RULE_createasstmt = 139, 
		RULE_create_as_target = 140, RULE_opt_with_data = 141, RULE_creatematviewstmt = 142, 
		RULE_create_mv_target = 143, RULE_optnolog = 144, RULE_refreshmatviewstmt = 145, 
		RULE_createseqstmt = 146, RULE_alterseqstmt = 147, RULE_optseqoptlist = 148, 
		RULE_optparenthesizedseqoptlist = 149, RULE_seqoptlist = 150, RULE_seqoptelem = 151, 
		RULE_opt_by = 152, RULE_numericonly = 153, RULE_numericonly_list = 154, 
		RULE_createplangstmt = 155, RULE_opt_trusted = 156, RULE_handler_name = 157, 
		RULE_opt_inline_handler = 158, RULE_validator_clause = 159, RULE_opt_validator = 160, 
		RULE_opt_procedural = 161, RULE_createrealitystmt = 162, RULE_realitylist = 163, 
		RULE_realityelement = 164, RULE_createtablespacestmt = 165, RULE_opttablespaceowner = 166, 
		RULE_droptablespacestmt = 167, RULE_createextensionstmt = 168, RULE_create_extension_opt_list = 169, 
		RULE_create_extension_opt_item = 170, RULE_alterextensionstmt = 171, RULE_alter_extension_opt_list = 172, 
		RULE_alter_extension_opt_item = 173, RULE_alterextensioncontentsstmt = 174, 
		RULE_createfdwstmt = 175, RULE_fdw_option = 176, RULE_fdw_options = 177, 
		RULE_opt_fdw_options = 178, RULE_alterfdwstmt = 179, RULE_create_generic_options = 180, 
		RULE_generic_option_list = 181, RULE_alter_generic_options = 182, RULE_alter_generic_option_list = 183, 
		RULE_alter_generic_option_elem = 184, RULE_generic_option_elem = 185, 
		RULE_generic_option_name = 186, RULE_generic_option_arg = 187, RULE_createforeignserverstmt = 188, 
		RULE_opt_type = 189, RULE_foreign_server_version = 190, RULE_opt_foreign_server_version = 191, 
		RULE_alterforeignserverstmt = 192, RULE_createforeigntablestmt = 193, 
		RULE_importforeignschemastmt = 194, RULE_import_qualification_type = 195, 
		RULE_import_qualification = 196, RULE_createusermappingstmt = 197, RULE_auth_ident = 198, 
		RULE_dropusermappingstmt = 199, RULE_alterusermappingstmt = 200, RULE_createpolicystmt = 201, 
		RULE_alterpolicystmt = 202, RULE_rowsecurityoptionalexpr = 203, RULE_rowsecurityoptionalwithcheck = 204, 
		RULE_rowsecuritydefaulttorole = 205, RULE_rowsecurityoptionaltorole = 206, 
		RULE_rowsecuritydefaultpermissive = 207, RULE_rowsecuritydefaultforcmd = 208, 
		RULE_row_security_cmd = 209, RULE_createamstmt = 210, RULE_am_type = 211, 
		RULE_createtrigstmt = 212, RULE_triggeractiontime = 213, RULE_triggerevents = 214, 
		RULE_triggeroneevent = 215, RULE_triggerreferencing = 216, RULE_triggertransitions = 217, 
		RULE_triggertransition = 218, RULE_transitionoldornew = 219, RULE_transitionrowortable = 220, 
		RULE_transitionrelname = 221, RULE_triggerforspec = 222, RULE_triggerforopteach = 223, 
		RULE_triggerfortype = 224, RULE_triggerwhen = 225, RULE_function_or_procedure = 226, 
		RULE_triggerfuncargs = 227, RULE_triggerfuncarg = 228, RULE_optconstrfromtable = 229, 
		RULE_constraintattributespec = 230, RULE_constraintattributeElem = 231, 
		RULE_createeventtrigstmt = 232, RULE_event_trigger_when_list = 233, RULE_event_trigger_when_item = 234, 
		RULE_event_trigger_value_list = 235, RULE_altereventtrigstmt = 236, RULE_enable_trigger = 237, 
		RULE_createassertionstmt = 238, RULE_definestmt = 239, RULE_definition = 240, 
		RULE_def_list = 241, RULE_def_elem = 242, RULE_def_arg = 243, RULE_old_aggr_definition = 244, 
		RULE_old_aggr_list = 245, RULE_old_aggr_elem = 246, RULE_opt_enum_val_list = 247, 
		RULE_enum_val_list = 248, RULE_alterenumstmt = 249, RULE_opt_if_not_exists = 250, 
		RULE_createopclassstmt = 251, RULE_opclass_item_list = 252, RULE_opclass_item = 253, 
		RULE_opt_default = 254, RULE_opt_opfamily = 255, RULE_opclass_purpose = 256, 
		RULE_opt_recheck = 257, RULE_createopfamilystmt = 258, RULE_alteropfamilystmt = 259, 
		RULE_opclass_drop_list = 260, RULE_opclass_drop = 261, RULE_dropopclassstmt = 262, 
		RULE_dropopfamilystmt = 263, RULE_dropownedstmt = 264, RULE_reassignownedstmt = 265, 
		RULE_dropstmt = 266, RULE_object_type_any_name = 267, RULE_object_type_name = 268, 
		RULE_drop_type_name = 269, RULE_object_type_name_on_any_name = 270, RULE_any_name_list = 271, 
		RULE_any_name = 272, RULE_attrs = 273, RULE_type_name_list = 274, RULE_truncatestmt = 275, 
		RULE_opt_restart_seqs = 276, RULE_commentstmt = 277, RULE_comment_text = 278, 
		RULE_seclabelstmt = 279, RULE_opt_provider = 280, RULE_security_label = 281, 
		RULE_fetchstmt = 282, RULE_fetch_args = 283, RULE_from_in = 284, RULE_opt_from_in = 285, 
		RULE_grantstmt = 286, RULE_revokestmt = 287, RULE_privileges = 288, RULE_privilege_list = 289, 
		RULE_privilege = 290, RULE_privilege_target = 291, RULE_grantee_list = 292, 
		RULE_grantee = 293, RULE_opt_grant_grant_option = 294, RULE_grantrolestmt = 295, 
		RULE_revokerolestmt = 296, RULE_opt_grant_admin_option = 297, RULE_opt_granted_by = 298, 
		RULE_alterdefaultprivilegesstmt = 299, RULE_defacloptionlist = 300, RULE_defacloption = 301, 
		RULE_defaclaction = 302, RULE_defacl_privilege_target = 303, RULE_indexstmt = 304, 
		RULE_opt_unique = 305, RULE_opt_concurrently = 306, RULE_opt_index_name = 307, 
		RULE_access_method_clause = 308, RULE_index_params = 309, RULE_index_elem_options = 310, 
		RULE_index_elem = 311, RULE_opt_include = 312, RULE_index_including_params = 313, 
		RULE_opt_collate = 314, RULE_opt_class = 315, RULE_opt_asc_desc = 316, 
		RULE_opt_nulls_order = 317, RULE_createfunctionstmt = 318, RULE_opt_or_replace = 319, 
		RULE_func_args = 320, RULE_func_args_list = 321, RULE_function_with_argtypes_list = 322, 
		RULE_function_with_argtypes = 323, RULE_func_args_with_defaults = 324, 
		RULE_func_args_with_defaults_list = 325, RULE_func_arg = 326, RULE_arg_class = 327, 
		RULE_param_name = 328, RULE_func_return = 329, RULE_func_type = 330, RULE_func_arg_with_default = 331, 
		RULE_aggr_arg = 332, RULE_aggr_args = 333, RULE_aggr_args_list = 334, 
		RULE_aggregate_with_argtypes = 335, RULE_aggregate_with_argtypes_list = 336, 
		RULE_createfunc_opt_list = 337, RULE_common_func_opt_item = 338, RULE_createfunc_opt_item = 339, 
		RULE_func_as = 340, RULE_transform_type_list = 341, RULE_opt_definition = 342, 
		RULE_table_func_column = 343, RULE_table_func_column_list = 344, RULE_alterfunctionstmt = 345, 
		RULE_alterfunc_opt_list = 346, RULE_opt_restrict = 347, RULE_removefuncstmt = 348, 
		RULE_removeaggrstmt = 349, RULE_removeoperstmt = 350, RULE_oper_argtypes = 351, 
		RULE_any_operator = 352, RULE_operator_with_argtypes_list = 353, RULE_operator_with_argtypes = 354, 
		RULE_dostmt = 355, RULE_dostmt_opt_list = 356, RULE_dostmt_opt_item = 357, 
		RULE_createcaststmt = 358, RULE_cast_context = 359, RULE_dropcaststmt = 360, 
		RULE_opt_if_exists = 361, RULE_createtransformstmt = 362, RULE_transform_element_list = 363, 
		RULE_droptransformstmt = 364, RULE_reindexstmt = 365, RULE_reindex_target_type = 366, 
		RULE_reindex_target_multitable = 367, RULE_reindex_option_list = 368, 
		RULE_reindex_option_elem = 369, RULE_createcompstmt = 370, RULE_altertblspcstmt = 371, 
		RULE_renamestmt = 372, RULE_opt_column = 373, RULE_opt_set_data = 374, 
		RULE_alterobjectdependsstmt = 375, RULE_opt_no = 376, RULE_alterobjectschemastmt = 377, 
		RULE_alteroperatorstmt = 378, RULE_operator_def_list = 379, RULE_operator_def_elem = 380, 
		RULE_operator_def_arg = 381, RULE_altertypestmt = 382, RULE_alterownerstmt = 383, 
		RULE_createpublicationstmt = 384, RULE_opt_publication_for_tables = 385, 
		RULE_publication_for_tables = 386, RULE_alterpublicationstmt = 387, RULE_createsubscriptionstmt = 388, 
		RULE_publication_name_list = 389, RULE_publication_name_item = 390, RULE_altersubscriptionstmt = 391, 
		RULE_dropsubscriptionstmt = 392, RULE_rulestmt = 393, RULE_ruleactionlist = 394, 
		RULE_ruleactionmulti = 395, RULE_ruleactionstmt = 396, RULE_ruleactionstmtOrEmpty = 397, 
		RULE_event = 398, RULE_opt_instead = 399, RULE_notifystmt = 400, RULE_notify_payload = 401, 
		RULE_listenstmt = 402, RULE_unlistenstmt = 403, RULE_transactionstmt = 404, 
		RULE_opt_transaction = 405, RULE_transaction_mode_item = 406, RULE_transaction_mode_list = 407, 
		RULE_transaction_mode_list_or_empty = 408, RULE_opt_transaction_chain = 409, 
		RULE_viewstmt = 410, RULE_opt_check_option = 411, RULE_loadstmt = 412, 
		RULE_createdbstmt = 413, RULE_createdb_opt_list = 414, RULE_createdb_opt_items = 415, 
		RULE_createdb_opt_item = 416, RULE_createdb_opt_name = 417, RULE_opt_equal = 418, 
		RULE_alterdatabasestmt = 419, RULE_alterdatabasesetstmt = 420, RULE_dropdbstmt = 421, 
		RULE_drop_option_list = 422, RULE_drop_option = 423, RULE_altercollationstmt = 424, 
		RULE_altersystemstmt = 425, RULE_createdomainstmt = 426, RULE_alterdomainstmt = 427, 
		RULE_opt_as = 428, RULE_altertsdictionarystmt = 429, RULE_altertsconfigurationstmt = 430, 
		RULE_any_with = 431, RULE_createconversionstmt = 432, RULE_clusterstmt = 433, 
		RULE_cluster_index_specification = 434, RULE_vacuumstmt = 435, RULE_analyzestmt = 436, 
		RULE_vac_analyze_option_list = 437, RULE_analyze_keyword = 438, RULE_vac_analyze_option_elem = 439, 
		RULE_vac_analyze_option_name = 440, RULE_vac_analyze_option_arg = 441, 
		RULE_opt_analyze = 442, RULE_opt_verbose = 443, RULE_opt_full = 444, RULE_opt_freeze = 445, 
		RULE_opt_name_list = 446, RULE_vacuum_relation = 447, RULE_vacuum_relation_list = 448, 
		RULE_opt_vacuum_relation_list = 449, RULE_explainstmt = 450, RULE_explainablestmt = 451, 
		RULE_explain_option_list = 452, RULE_explain_option_elem = 453, RULE_explain_option_name = 454, 
		RULE_explain_option_arg = 455, RULE_preparestmt = 456, RULE_prep_type_clause = 457, 
		RULE_preparablestmt = 458, RULE_executestmt = 459, RULE_execute_param_clause = 460, 
		RULE_deallocatestmt = 461, RULE_insertstmt = 462, RULE_insert_target = 463, 
		RULE_insert_rest = 464, RULE_override_kind = 465, RULE_insert_column_list = 466, 
		RULE_insert_column_item = 467, RULE_opt_on_conflict = 468, RULE_opt_conf_expr = 469, 
		RULE_returning_clause = 470, RULE_deletestmt = 471, RULE_using_clause = 472, 
		RULE_lockstmt = 473, RULE_opt_lock = 474, RULE_lock_type = 475, RULE_opt_nowait = 476, 
		RULE_opt_nowait_or_skip = 477, RULE_updatestmt = 478, RULE_set_clause_list = 479, 
		RULE_set_clause = 480, RULE_set_target = 481, RULE_set_target_list = 482, 
		RULE_declarecursorstmt = 483, RULE_cursor_name = 484, RULE_cursor_options = 485, 
		RULE_opt_hold = 486, RULE_selectstmt = 487, RULE_select_with_parens = 488, 
		RULE_select_no_parens = 489, RULE_select_clause = 490, RULE_simple_select = 491, 
		RULE_using_reality_clause = 492, RULE_reality_name = 493, RULE_set_operator = 494, 
		RULE_set_operator_with_all_or_distinct = 495, RULE_with_clause = 496, 
		RULE_cte_list = 497, RULE_common_table_expr = 498, RULE_opt_materialized = 499, 
		RULE_opt_with_clause = 500, RULE_into_clause = 501, RULE_opt_strict = 502, 
		RULE_opttempTableName = 503, RULE_opt_table = 504, RULE_all_or_distinct = 505, 
		RULE_distinct_clause = 506, RULE_opt_all_clause = 507, RULE_opt_sort_clause = 508, 
		RULE_sort_clause = 509, RULE_sortby_list = 510, RULE_sortby = 511, RULE_select_limit = 512, 
		RULE_opt_select_limit = 513, RULE_limit_clause = 514, RULE_offset_clause = 515, 
		RULE_select_limit_value = 516, RULE_select_offset_value = 517, RULE_select_fetch_first_value = 518, 
		RULE_i_or_f_const = 519, RULE_row_or_rows = 520, RULE_first_or_next = 521, 
		RULE_group_clause = 522, RULE_group_by_list = 523, RULE_group_by_item = 524, 
		RULE_empty_grouping_set = 525, RULE_rollup_clause = 526, RULE_cube_clause = 527, 
		RULE_grouping_sets_clause = 528, RULE_having_clause = 529, RULE_for_locking_clause = 530, 
		RULE_opt_for_locking_clause = 531, RULE_for_locking_items = 532, RULE_for_locking_item = 533, 
		RULE_for_locking_strength = 534, RULE_locked_rels_list = 535, RULE_values_clause = 536, 
		RULE_from_clause = 537, RULE_from_list = 538, RULE_table_ref = 539, RULE_alias_clause = 540, 
		RULE_opt_alias_clause = 541, RULE_func_alias_clause = 542, RULE_join_type = 543, 
		RULE_join_qual = 544, RULE_relation_expr = 545, RULE_relation_expr_list = 546, 
		RULE_relation_expr_opt_alias = 547, RULE_tablesample_clause = 548, RULE_opt_repeatable_clause = 549, 
		RULE_func_table = 550, RULE_rowsfrom_item = 551, RULE_rowsfrom_list = 552, 
		RULE_opt_col_def_list = 553, RULE_opt_ordinality = 554, RULE_where_clause = 555, 
		RULE_where_or_current_clause = 556, RULE_opttablefuncelementlist = 557, 
		RULE_tablefuncelementlist = 558, RULE_tablefuncelement = 559, RULE_xmltable = 560, 
		RULE_xmltable_column_list = 561, RULE_xmltable_column_el = 562, RULE_xmltable_column_option_list = 563, 
		RULE_xmltable_column_option_el = 564, RULE_xml_namespace_list = 565, RULE_xml_namespace_el = 566, 
		RULE_typename = 567, RULE_opt_array_bounds = 568, RULE_simpletypename = 569, 
		RULE_consttypename = 570, RULE_generictype = 571, RULE_opt_type_modifiers = 572, 
		RULE_numeric = 573, RULE_opt_float = 574, RULE_bit = 575, RULE_constbit = 576, 
		RULE_bitwithlength = 577, RULE_bitwithoutlength = 578, RULE_character = 579, 
		RULE_constcharacter = 580, RULE_character_c = 581, RULE_opt_varying = 582, 
		RULE_constdatetime = 583, RULE_constinterval = 584, RULE_opt_timezone = 585, 
		RULE_opt_interval = 586, RULE_interval_second = 587, RULE_opt_escape = 588, 
		RULE_a_expr = 589, RULE_a_expr_qual = 590, RULE_a_expr_lessless = 591, 
		RULE_a_expr_or = 592, RULE_a_expr_and = 593, RULE_a_expr_in = 594, RULE_a_expr_unary_not = 595, 
		RULE_a_expr_isnull = 596, RULE_a_expr_is_not = 597, RULE_a_expr_compare = 598, 
		RULE_a_expr_like = 599, RULE_a_expr_qual_op = 600, RULE_a_expr_unary_qualop = 601, 
		RULE_a_expr_add = 602, RULE_a_expr_mul = 603, RULE_a_expr_caret = 604, 
		RULE_a_expr_unary_sign = 605, RULE_a_expr_at_time_zone = 606, RULE_a_expr_collate = 607, 
		RULE_a_expr_typecast = 608, RULE_b_expr = 609, RULE_c_expr = 610, RULE_plsqlvariablename = 611, 
		RULE_func_application = 612, RULE_func_expr = 613, RULE_func_expr_windowless = 614, 
		RULE_func_expr_common_subexpr = 615, RULE_xml_root_version = 616, RULE_opt_xml_root_standalone = 617, 
		RULE_xml_attributes = 618, RULE_xml_attribute_list = 619, RULE_xml_attribute_el = 620, 
		RULE_document_or_content = 621, RULE_xml_whitespace_option = 622, RULE_xmlexists_argument = 623, 
		RULE_xml_passing_mech = 624, RULE_within_group_clause = 625, RULE_filter_clause = 626, 
		RULE_window_clause = 627, RULE_window_definition_list = 628, RULE_window_definition = 629, 
		RULE_over_clause = 630, RULE_window_specification = 631, RULE_opt_existing_window_name = 632, 
		RULE_opt_partition_clause = 633, RULE_opt_frame_clause = 634, RULE_frame_extent = 635, 
		RULE_frame_bound = 636, RULE_opt_window_exclusion_clause = 637, RULE_row = 638, 
		RULE_explicit_row = 639, RULE_implicit_row = 640, RULE_sub_type = 641, 
		RULE_all_op = 642, RULE_mathop = 643, RULE_qual_op = 644, RULE_qual_all_op = 645, 
		RULE_subquery_Op = 646, RULE_expr_list = 647, RULE_func_arg_list = 648, 
		RULE_func_arg_expr = 649, RULE_type_list = 650, RULE_array_expr = 651, 
		RULE_array_expr_list = 652, RULE_extract_list = 653, RULE_extract_arg = 654, 
		RULE_unicode_normal_form = 655, RULE_overlay_list = 656, RULE_position_list = 657, 
		RULE_substr_list = 658, RULE_trim_list = 659, RULE_in_expr = 660, RULE_case_expr = 661, 
		RULE_when_clause_list = 662, RULE_when_clause = 663, RULE_case_default = 664, 
		RULE_case_arg = 665, RULE_columnref = 666, RULE_indirection_el = 667, 
		RULE_opt_slice_bound = 668, RULE_indirection = 669, RULE_opt_indirection = 670, 
		RULE_opt_target_list = 671, RULE_target_list = 672, RULE_target_el = 673, 
		RULE_qualified_name_list = 674, RULE_qualified_name = 675, RULE_name_list = 676, 
		RULE_name = 677, RULE_attr_name = 678, RULE_file_name = 679, RULE_func_name = 680, 
		RULE_aexprconst = 681, RULE_xconst = 682, RULE_bconst = 683, RULE_fconst = 684, 
		RULE_iconst = 685, RULE_sconst = 686, RULE_anysconst = 687, RULE_opt_uescape = 688, 
		RULE_signediconst = 689, RULE_roleid = 690, RULE_rolespec = 691, RULE_role_list = 692, 
		RULE_colid = 693, RULE_type_function_name = 694, RULE_nonreservedword = 695, 
		RULE_collabel = 696, RULE_identifier = 697, RULE_plsqlidentifier = 698, 
		RULE_unreserved_keyword = 699, RULE_col_name_keyword = 700, RULE_type_func_name_keyword = 701, 
		RULE_reserved_keyword = 702, RULE_pl_function = 703, RULE_comp_options = 704, 
		RULE_comp_option = 705, RULE_sharp = 706, RULE_option_value = 707, RULE_opt_semi = 708, 
		RULE_pl_block = 709, RULE_decl_sect = 710, RULE_decl_start = 711, RULE_decl_stmts = 712, 
		RULE_label_decl = 713, RULE_decl_stmt = 714, RULE_decl_statement = 715, 
		RULE_opt_scrollable = 716, RULE_decl_cursor_query = 717, RULE_decl_cursor_args = 718, 
		RULE_decl_cursor_arglist = 719, RULE_decl_cursor_arg = 720, RULE_decl_is_for = 721, 
		RULE_decl_aliasitem = 722, RULE_decl_varname = 723, RULE_decl_const = 724, 
		RULE_decl_datatype = 725, RULE_decl_collate = 726, RULE_decl_notnull = 727, 
		RULE_decl_defval = 728, RULE_decl_defkey = 729, RULE_assign_operator = 730, 
		RULE_proc_sect = 731, RULE_proc_stmt = 732, RULE_stmt_perform = 733, RULE_stmt_call = 734, 
		RULE_opt_expr_list = 735, RULE_stmt_assign = 736, RULE_stmt_getdiag = 737, 
		RULE_getdiag_area_opt = 738, RULE_getdiag_list = 739, RULE_getdiag_list_item = 740, 
		RULE_getdiag_item = 741, RULE_getdiag_target = 742, RULE_assign_var = 743, 
		RULE_stmt_if = 744, RULE_stmt_elsifs = 745, RULE_stmt_else = 746, RULE_stmt_case = 747, 
		RULE_opt_expr_until_when = 748, RULE_case_when_list = 749, RULE_case_when = 750, 
		RULE_opt_case_else = 751, RULE_stmt_loop = 752, RULE_stmt_while = 753, 
		RULE_stmt_for = 754, RULE_for_control = 755, RULE_opt_for_using_expression = 756, 
		RULE_opt_cursor_parameters = 757, RULE_opt_reverse = 758, RULE_opt_by_expression = 759, 
		RULE_for_variable = 760, RULE_stmt_foreach_a = 761, RULE_foreach_slice = 762, 
		RULE_stmt_exit = 763, RULE_exit_type = 764, RULE_stmt_return = 765, RULE_opt_return_result = 766, 
		RULE_stmt_raise = 767, RULE_opt_stmt_raise_level = 768, RULE_opt_raise_list = 769, 
		RULE_opt_raise_using = 770, RULE_opt_raise_using_elem = 771, RULE_opt_raise_using_elem_list = 772, 
		RULE_stmt_assert = 773, RULE_opt_stmt_assert_message = 774, RULE_loop_body = 775, 
		RULE_stmt_execsql = 776, RULE_stmt_dynexecute = 777, RULE_opt_execute_using = 778, 
		RULE_opt_execute_using_list = 779, RULE_opt_execute_into = 780, RULE_stmt_open = 781, 
		RULE_opt_open_bound_list_item = 782, RULE_opt_open_bound_list = 783, RULE_opt_open_using = 784, 
		RULE_opt_scroll_option = 785, RULE_opt_scroll_option_no = 786, RULE_stmt_fetch = 787, 
		RULE_into_target = 788, RULE_opt_cursor_from = 789, RULE_opt_fetch_direction = 790, 
		RULE_stmt_move = 791, RULE_stmt_close = 792, RULE_stmt_null = 793, RULE_stmt_commit = 794, 
		RULE_stmt_rollback = 795, RULE_plsql_opt_transaction_chain = 796, RULE_stmt_set = 797, 
		RULE_cursor_variable = 798, RULE_exception_sect = 799, RULE_proc_exceptions = 800, 
		RULE_proc_exception = 801, RULE_proc_conditions = 802, RULE_proc_condition = 803, 
		RULE_opt_block_label = 804, RULE_opt_loop_label = 805, RULE_opt_label = 806, 
		RULE_opt_exitcond = 807, RULE_any_identifier = 808, RULE_plsql_unreserved_keyword = 809, 
		RULE_sql_expression = 810, RULE_expr_until_then = 811, RULE_expr_until_semi = 812, 
		RULE_expr_until_rightbracket = 813, RULE_expr_until_loop = 814, RULE_make_execsql_stmt = 815, 
		RULE_opt_returning_clause_into = 816;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "plsqlroot", "stmtblock", "stmtmulti", "stmt", "plsqlconsolecommand", 
			"callstmt", "createrolestmt", "opt_with", "optrolelist", "alteroptrolelist", 
			"alteroptroleelem", "createoptroleelem", "createuserstmt", "alterrolestmt", 
			"opt_in_database", "alterrolesetstmt", "droprolestmt", "creategroupstmt", 
			"altergroupstmt", "add_drop", "createlatticestmt", "labellist", "orderedstmt", 
			"orderedlist", "labelordering", "labelpair", "createschemastmt", "optschemaname", 
			"optschemaeltlist", "schema_stmt", "variablesetstmt", "set_rest", "generic_set", 
			"set_rest_more", "var_name", "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
			"zone_value", "opt_encoding", "nonreservedword_or_sconst", "variableresetstmt", 
			"reset_rest", "generic_reset", "setresetclause", "functionsetresetclause", 
			"variableshowstmt", "constraintssetstmt", "constraints_set_list", "constraints_set_mode", 
			"checkpointstmt", "discardstmt", "altertablestmt", "alter_table_cmds", 
			"partition_cmd", "index_partition_cmd", "alter_table_cmd", "attribute_list", 
			"alter_column_default", "opt_drop_behavior", "opt_collate_clause", "alter_using", 
			"replica_identity", "reloptions", "opt_reloptions", "reloption_list", 
			"reloption_elem", "alter_identity_column_option_list", "alter_identity_column_option", 
			"partitionboundspec", "hash_partbound_elem", "hash_partbound", "altercompositetypestmt", 
			"alter_type_cmds", "alter_type_cmd", "closeportalstmt", "copystmt", "copy_from", 
			"opt_program", "copy_file_name", "copy_options", "copy_opt_list", "copy_opt_item", 
			"opt_binary", "copy_delimiter", "opt_using", "copy_generic_opt_list", 
			"copy_generic_opt_elem", "copy_generic_opt_arg", "copy_generic_opt_arg_list", 
			"copy_generic_opt_arg_list_item", "createstmt", "opttemp", "opttableelementlist", 
			"opttypedtableelementlist", "tableelementlist", "typedtableelementlist", 
			"tableelement", "typedtableelement", "columnDef", "columnOptions", "colquallist", 
			"colconstraint", "colconstraintelem", "generated_when", "constraintattr", 
			"tablelikeclause", "tablelikeoptionlist", "tablelikeoption", "tableconstraint", 
			"constraintelem", "opt_no_inherit", "opt_column_list", "columnlist", 
			"columnElem", "opt_c_include", "key_match", "exclusionconstraintlist", 
			"exclusionconstraintelem", "exclusionwhereclause", "key_actions", "key_update", 
			"key_delete", "key_action", "optinherit", "optpartitionspec", "partitionspec", 
			"part_params", "part_elem", "table_access_method_clause", "optwith", 
			"oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
			"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
			"opt_with_data", "creatematviewstmt", "create_mv_target", "optnolog", 
			"refreshmatviewstmt", "createseqstmt", "alterseqstmt", "optseqoptlist", 
			"optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", "opt_by", "numericonly", 
			"numericonly_list", "createplangstmt", "opt_trusted", "handler_name", 
			"opt_inline_handler", "validator_clause", "opt_validator", "opt_procedural", 
			"createrealitystmt", "realitylist", "realityelement", "createtablespacestmt", 
			"opttablespaceowner", "droptablespacestmt", "createextensionstmt", "create_extension_opt_list", 
			"create_extension_opt_item", "alterextensionstmt", "alter_extension_opt_list", 
			"alter_extension_opt_item", "alterextensioncontentsstmt", "createfdwstmt", 
			"fdw_option", "fdw_options", "opt_fdw_options", "alterfdwstmt", "create_generic_options", 
			"generic_option_list", "alter_generic_options", "alter_generic_option_list", 
			"alter_generic_option_elem", "generic_option_elem", "generic_option_name", 
			"generic_option_arg", "createforeignserverstmt", "opt_type", "foreign_server_version", 
			"opt_foreign_server_version", "alterforeignserverstmt", "createforeigntablestmt", 
			"importforeignschemastmt", "import_qualification_type", "import_qualification", 
			"createusermappingstmt", "auth_ident", "dropusermappingstmt", "alterusermappingstmt", 
			"createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", "rowsecurityoptionalwithcheck", 
			"rowsecuritydefaulttorole", "rowsecurityoptionaltorole", "rowsecuritydefaultpermissive", 
			"rowsecuritydefaultforcmd", "row_security_cmd", "createamstmt", "am_type", 
			"createtrigstmt", "triggeractiontime", "triggerevents", "triggeroneevent", 
			"triggerreferencing", "triggertransitions", "triggertransition", "transitionoldornew", 
			"transitionrowortable", "transitionrelname", "triggerforspec", "triggerforopteach", 
			"triggerfortype", "triggerwhen", "function_or_procedure", "triggerfuncargs", 
			"triggerfuncarg", "optconstrfromtable", "constraintattributespec", "constraintattributeElem", 
			"createeventtrigstmt", "event_trigger_when_list", "event_trigger_when_item", 
			"event_trigger_value_list", "altereventtrigstmt", "enable_trigger", "createassertionstmt", 
			"definestmt", "definition", "def_list", "def_elem", "def_arg", "old_aggr_definition", 
			"old_aggr_list", "old_aggr_elem", "opt_enum_val_list", "enum_val_list", 
			"alterenumstmt", "opt_if_not_exists", "createopclassstmt", "opclass_item_list", 
			"opclass_item", "opt_default", "opt_opfamily", "opclass_purpose", "opt_recheck", 
			"createopfamilystmt", "alteropfamilystmt", "opclass_drop_list", "opclass_drop", 
			"dropopclassstmt", "dropopfamilystmt", "dropownedstmt", "reassignownedstmt", 
			"dropstmt", "object_type_any_name", "object_type_name", "drop_type_name", 
			"object_type_name_on_any_name", "any_name_list", "any_name", "attrs", 
			"type_name_list", "truncatestmt", "opt_restart_seqs", "commentstmt", 
			"comment_text", "seclabelstmt", "opt_provider", "security_label", "fetchstmt", 
			"fetch_args", "from_in", "opt_from_in", "grantstmt", "revokestmt", "privileges", 
			"privilege_list", "privilege", "privilege_target", "grantee_list", "grantee", 
			"opt_grant_grant_option", "grantrolestmt", "revokerolestmt", "opt_grant_admin_option", 
			"opt_granted_by", "alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", 
			"defaclaction", "defacl_privilege_target", "indexstmt", "opt_unique", 
			"opt_concurrently", "opt_index_name", "access_method_clause", "index_params", 
			"index_elem_options", "index_elem", "opt_include", "index_including_params", 
			"opt_collate", "opt_class", "opt_asc_desc", "opt_nulls_order", "createfunctionstmt", 
			"opt_or_replace", "func_args", "func_args_list", "function_with_argtypes_list", 
			"function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
			"func_arg", "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
			"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
			"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
			"createfunc_opt_item", "func_as", "transform_type_list", "opt_definition", 
			"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
			"opt_restrict", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
			"oper_argtypes", "any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
			"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
			"dropcaststmt", "opt_if_exists", "createtransformstmt", "transform_element_list", 
			"droptransformstmt", "reindexstmt", "reindex_target_type", "reindex_target_multitable", 
			"reindex_option_list", "reindex_option_elem", "createcompstmt", "altertblspcstmt", 
			"renamestmt", "opt_column", "opt_set_data", "alterobjectdependsstmt", 
			"opt_no", "alterobjectschemastmt", "alteroperatorstmt", "operator_def_list", 
			"operator_def_elem", "operator_def_arg", "altertypestmt", "alterownerstmt", 
			"createpublicationstmt", "opt_publication_for_tables", "publication_for_tables", 
			"alterpublicationstmt", "createsubscriptionstmt", "publication_name_list", 
			"publication_name_item", "altersubscriptionstmt", "dropsubscriptionstmt", 
			"rulestmt", "ruleactionlist", "ruleactionmulti", "ruleactionstmt", "ruleactionstmtOrEmpty", 
			"event", "opt_instead", "notifystmt", "notify_payload", "listenstmt", 
			"unlistenstmt", "transactionstmt", "opt_transaction", "transaction_mode_item", 
			"transaction_mode_list", "transaction_mode_list_or_empty", "opt_transaction_chain", 
			"viewstmt", "opt_check_option", "loadstmt", "createdbstmt", "createdb_opt_list", 
			"createdb_opt_items", "createdb_opt_item", "createdb_opt_name", "opt_equal", 
			"alterdatabasestmt", "alterdatabasesetstmt", "dropdbstmt", "drop_option_list", 
			"drop_option", "altercollationstmt", "altersystemstmt", "createdomainstmt", 
			"alterdomainstmt", "opt_as", "altertsdictionarystmt", "altertsconfigurationstmt", 
			"any_with", "createconversionstmt", "clusterstmt", "cluster_index_specification", 
			"vacuumstmt", "analyzestmt", "vac_analyze_option_list", "analyze_keyword", 
			"vac_analyze_option_elem", "vac_analyze_option_name", "vac_analyze_option_arg", 
			"opt_analyze", "opt_verbose", "opt_full", "opt_freeze", "opt_name_list", 
			"vacuum_relation", "vacuum_relation_list", "opt_vacuum_relation_list", 
			"explainstmt", "explainablestmt", "explain_option_list", "explain_option_elem", 
			"explain_option_name", "explain_option_arg", "preparestmt", "prep_type_clause", 
			"preparablestmt", "executestmt", "execute_param_clause", "deallocatestmt", 
			"insertstmt", "insert_target", "insert_rest", "override_kind", "insert_column_list", 
			"insert_column_item", "opt_on_conflict", "opt_conf_expr", "returning_clause", 
			"deletestmt", "using_clause", "lockstmt", "opt_lock", "lock_type", "opt_nowait", 
			"opt_nowait_or_skip", "updatestmt", "set_clause_list", "set_clause", 
			"set_target", "set_target_list", "declarecursorstmt", "cursor_name", 
			"cursor_options", "opt_hold", "selectstmt", "select_with_parens", "select_no_parens", 
			"select_clause", "simple_select", "using_reality_clause", "reality_name", 
			"set_operator", "set_operator_with_all_or_distinct", "with_clause", "cte_list", 
			"common_table_expr", "opt_materialized", "opt_with_clause", "into_clause", 
			"opt_strict", "opttempTableName", "opt_table", "all_or_distinct", "distinct_clause", 
			"opt_all_clause", "opt_sort_clause", "sort_clause", "sortby_list", "sortby", 
			"select_limit", "opt_select_limit", "limit_clause", "offset_clause", 
			"select_limit_value", "select_offset_value", "select_fetch_first_value", 
			"i_or_f_const", "row_or_rows", "first_or_next", "group_clause", "group_by_list", 
			"group_by_item", "empty_grouping_set", "rollup_clause", "cube_clause", 
			"grouping_sets_clause", "having_clause", "for_locking_clause", "opt_for_locking_clause", 
			"for_locking_items", "for_locking_item", "for_locking_strength", "locked_rels_list", 
			"values_clause", "from_clause", "from_list", "table_ref", "alias_clause", 
			"opt_alias_clause", "func_alias_clause", "join_type", "join_qual", "relation_expr", 
			"relation_expr_list", "relation_expr_opt_alias", "tablesample_clause", 
			"opt_repeatable_clause", "func_table", "rowsfrom_item", "rowsfrom_list", 
			"opt_col_def_list", "opt_ordinality", "where_clause", "where_or_current_clause", 
			"opttablefuncelementlist", "tablefuncelementlist", "tablefuncelement", 
			"xmltable", "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
			"xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
			"typename", "opt_array_bounds", "simpletypename", "consttypename", "generictype", 
			"opt_type_modifiers", "numeric", "opt_float", "bit", "constbit", "bitwithlength", 
			"bitwithoutlength", "character", "constcharacter", "character_c", "opt_varying", 
			"constdatetime", "constinterval", "opt_timezone", "opt_interval", "interval_second", 
			"opt_escape", "a_expr", "a_expr_qual", "a_expr_lessless", "a_expr_or", 
			"a_expr_and", "a_expr_in", "a_expr_unary_not", "a_expr_isnull", "a_expr_is_not", 
			"a_expr_compare", "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
			"a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", "a_expr_at_time_zone", 
			"a_expr_collate", "a_expr_typecast", "b_expr", "c_expr", "plsqlvariablename", 
			"func_application", "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
			"xml_root_version", "opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", 
			"xml_attribute_el", "document_or_content", "xml_whitespace_option", "xmlexists_argument", 
			"xml_passing_mech", "within_group_clause", "filter_clause", "window_clause", 
			"window_definition_list", "window_definition", "over_clause", "window_specification", 
			"opt_existing_window_name", "opt_partition_clause", "opt_frame_clause", 
			"frame_extent", "frame_bound", "opt_window_exclusion_clause", "row", 
			"explicit_row", "implicit_row", "sub_type", "all_op", "mathop", "qual_op", 
			"qual_all_op", "subquery_Op", "expr_list", "func_arg_list", "func_arg_expr", 
			"type_list", "array_expr", "array_expr_list", "extract_list", "extract_arg", 
			"unicode_normal_form", "overlay_list", "position_list", "substr_list", 
			"trim_list", "in_expr", "case_expr", "when_clause_list", "when_clause", 
			"case_default", "case_arg", "columnref", "indirection_el", "opt_slice_bound", 
			"indirection", "opt_indirection", "opt_target_list", "target_list", "target_el", 
			"qualified_name_list", "qualified_name", "name_list", "name", "attr_name", 
			"file_name", "func_name", "aexprconst", "xconst", "bconst", "fconst", 
			"iconst", "sconst", "anysconst", "opt_uescape", "signediconst", "roleid", 
			"rolespec", "role_list", "colid", "type_function_name", "nonreservedword", 
			"collabel", "identifier", "plsqlidentifier", "unreserved_keyword", "col_name_keyword", 
			"type_func_name_keyword", "reserved_keyword", "pl_function", "comp_options", 
			"comp_option", "sharp", "option_value", "opt_semi", "pl_block", "decl_sect", 
			"decl_start", "decl_stmts", "label_decl", "decl_stmt", "decl_statement", 
			"opt_scrollable", "decl_cursor_query", "decl_cursor_args", "decl_cursor_arglist", 
			"decl_cursor_arg", "decl_is_for", "decl_aliasitem", "decl_varname", "decl_const", 
			"decl_datatype", "decl_collate", "decl_notnull", "decl_defval", "decl_defkey", 
			"assign_operator", "proc_sect", "proc_stmt", "stmt_perform", "stmt_call", 
			"opt_expr_list", "stmt_assign", "stmt_getdiag", "getdiag_area_opt", "getdiag_list", 
			"getdiag_list_item", "getdiag_item", "getdiag_target", "assign_var", 
			"stmt_if", "stmt_elsifs", "stmt_else", "stmt_case", "opt_expr_until_when", 
			"case_when_list", "case_when", "opt_case_else", "stmt_loop", "stmt_while", 
			"stmt_for", "for_control", "opt_for_using_expression", "opt_cursor_parameters", 
			"opt_reverse", "opt_by_expression", "for_variable", "stmt_foreach_a", 
			"foreach_slice", "stmt_exit", "exit_type", "stmt_return", "opt_return_result", 
			"stmt_raise", "opt_stmt_raise_level", "opt_raise_list", "opt_raise_using", 
			"opt_raise_using_elem", "opt_raise_using_elem_list", "stmt_assert", "opt_stmt_assert_message", 
			"loop_body", "stmt_execsql", "stmt_dynexecute", "opt_execute_using", 
			"opt_execute_using_list", "opt_execute_into", "stmt_open", "opt_open_bound_list_item", 
			"opt_open_bound_list", "opt_open_using", "opt_scroll_option", "opt_scroll_option_no", 
			"stmt_fetch", "into_target", "opt_cursor_from", "opt_fetch_direction", 
			"stmt_move", "stmt_close", "stmt_null", "stmt_commit", "stmt_rollback", 
			"plsql_opt_transaction_chain", "stmt_set", "cursor_variable", "exception_sect", 
			"proc_exceptions", "proc_exception", "proc_conditions", "proc_condition", 
			"opt_block_label", "opt_loop_label", "opt_label", "opt_exitcond", "any_identifier", 
			"plsql_unreserved_keyword", "sql_expression", "expr_until_then", "expr_until_semi", 
			"expr_until_rightbracket", "expr_until_loop", "make_execsql_stmt", "opt_returning_clause_into"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
			"'='", "'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", 
			"':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, "'\\\\'", null, null, null, null, null, null, 
			null, null, null, "'''"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
			"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", "SLASH", 
			"CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", 
			"LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", 
			"TYPECAST", "PERCENT", "PARAM", "LAB", "Operator", "ALL", "ANALYSE", 
			"ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", 
			"BOTTOM", "C3U", "C3S", "C4", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", 
			"COMPARABILITY", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", "CURRENT_DATE", 
			"CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
			"DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", "DO", "ELSE", "EXCEPT", 
			"FALSE_P", "FETCH", "FOR", "FOREIGN", "FROM", "GRANT", "GROUP_P", "HAVING", 
			"IN_P", "INITIALLY", "INTERSECT", "INTO", "L3U", "L3S", "L4", "LABELS", 
			"LATERAL_P", "LATTICE", "LEADING", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", 
			"NOT", "NULL_P", "OFFSET", "ON", "ONLY", "OR", "ORDER", "ORDERED", "OTHERWISE", 
			"PLACING", "PRIMARY", "REALITY", "REFERENCES", "RETURNING", "SELECT", 
			"SESSION_USER", "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", "TOP", "TRAILING", 
			"TRUE_P", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", "WHEN", "WHERE", 
			"WINDOW", "WITH", "AUTHORIZATION", "BINARY", "COLLATION", "CONCURRENTLY", 
			"CROSS", "CURRENT_SCHEMA", "FREEZE", "FULL", "ILIKE", "INNER_P", "IS", 
			"ISNULL", "JOIN", "LEFT", "LIKE", "NATURAL", "NOTNULL", "OUTER_P", "OVER", 
			"OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", "ABORT_P", "ABSOLUTE_P", "ACCESS", 
			"ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALSO", "ALTER", "ALWAYS", 
			"ASSERTION", "ASSIGNMENT", "AT", "ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN_P", 
			"BY", "CACHE", "CALLED", "CASCADE", "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", 
			"CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", 
			"COMMITTED", "CONFIGURATION", "CONNECTION", "CONSTRAINTS", "CONTENT_P", 
			"CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CSV", "CURSOR", "CYCLE", 
			"DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", 
			"DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", 
			"DISCARD", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ENABLE_P", 
			"ENCODING", "ENCRYPTED", "ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", 
			"EXCLUSIVE", "EXECUTE", "EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", 
			"FIRST_P", "FOLLOWING", "FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", 
			"GLOBAL", "GRANTED", "HANDLER", "HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", 
			"IF_P", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "INCLUDING", "INCREMENT", 
			"INDEX", "INDEXES", "INHERIT", "INHERITS", "INLINE_P", "INSENSITIVE", 
			"INSERT", "INSTEAD", "INVOKER", "ISOLATION", "KEY", "LABEL", "LANGUAGE", 
			"LARGE_P", "LAST_P", "LEAKPROOF", "LEVEL", "LISTEN", "LOAD", "LOCAL", 
			"LOCATION", "LOCK_P", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", 
			"MINUTE_P", "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", 
			"NEXT", "NO", "NOTHING", "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", "OF", 
			"OFF", "OIDS", "OPERATOR", "OPTION", "OPTIONS", "OWNED", "OWNER", "PARSER", 
			"PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLANS", "PRECEDING", 
			"PREPARE", "PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", 
			"PROCEDURE", "PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", 
			"RECURSIVE", "REF", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", 
			"REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", 
			"REVOKE", "ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", 
			"SCROLL", "SEARCH", "SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", 
			"SERIALIZABLE", "SERVER", "SESSION", "SET", "SHARE", "SHOW", "SIMPLE", 
			"SNAPSHOT", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS", 
			"STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", "SYSID", "SYSTEM_P", 
			"TABLES", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "TRANSACTION", 
			"TRIGGER", "TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
			"UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", 
			"VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VARYING", "VERSION_P", "VIEW", 
			"VOLATILE", "WHITESPACE_P", "WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", 
			"YEAR_P", "YES_P", "ZONE", "BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", 
			"CHARACTER", "COALESCE", "DEC", "DECIMAL_P", "EXISTS", "EXTRACT", "FLOAT_P", 
			"GREATEST", "INOUT", "INT_P", "INTEGER", "INTERVAL", "LEAST", "NATIONAL", 
			"NCHAR", "NONE", "NULLIF", "NUMERIC", "OVERLAY", "POSITION", "PRECISION", 
			"REAL", "ROW", "SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", 
			"TREAT", "TRIM", "VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", 
			"XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", 
			"CALL", "CURRENT_P", "CATALOG_P", "ATTACH", "DETACH", "EXPRESSION", "GENERATED", 
			"LOGGED", "STORED", "INCLUDE", "ROUTINE", "TRANSFORM", "IMPORT_P", "POLICY", 
			"METHOD", "REFERENCING", "NEW", "OLD", "VALUE_P", "SUBSCRIPTION", "PUBLICATION", 
			"OUT_P", "END_P", "ROUTINES", "SCHEMAS", "PROCEDURES", "INPUT_P", "SUPPORT", 
			"PARALLEL", "SQL_P", "DEPENDS", "OVERRIDING", "CONFLICT", "SKIP_P", "LOCKED", 
			"TIES", "ROLLUP", "CUBE", "GROUPING", "SETS", "TABLESAMPLE", "ORDINALITY", 
			"XMLTABLE", "COLUMNS", "XMLNAMESPACES", "ROWTYPE", "NORMALIZED", "WITHIN", 
			"FILTER", "GROUPS", "OTHERS", "NFC", "NFD", "NFKC", "NFKD", "UESCAPE", 
			"VIEWS", "NORMALIZE", "DUMP", "PRINT_STRICT_PARAMS", "VARIABLE_CONFLICT", 
			"ERROR", "USE_VARIABLE", "USE_COLUMN", "ALIAS", "CONSTANT", "PERFORM", 
			"GET", "DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", "REVERSE", "FOREACH", 
			"SLICE", "EXIT", "RETURN", "QUERY", "RAISE", "SQLSTATE", "DEBUG", "LOG", 
			"INFO", "NOTICE", "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", "Identifier", 
			"QuotedIdentifier", "UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", 
			"InvalidUnterminatedQuotedIdentifier", "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
			"InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
			"StringConstant", "UnterminatedStringConstant", "UnicodeEscapeStringConstant", 
			"UnterminatedUnicodeEscapeStringConstant", "BeginDollarStringConstant", 
			"BinaryStringConstant", "UnterminatedBinaryStringConstant", "InvalidBinaryStringConstant", 
			"InvalidUnterminatedBinaryStringConstant", "HexadecimalStringConstant", 
			"UnterminatedHexadecimalStringConstant", "InvalidHexadecimalStringConstant", 
			"InvalidUnterminatedHexadecimalStringConstant", "Integral", "NumericFail", 
			"Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", "Whitespace", "Newline", 
			"LineComment", "BlockComment", "UnterminatedBlockComment", "MetaCommand", 
			"EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", "UnterminatedEscapeStringConstant", 
			"InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
			"AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
			"DollarText", "EndDollarStringConstant", "AfterEscapeStringConstantWithNewlineMode_Continued"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PostgreSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }



	public PostgreSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public StmtblockContext stmtblock() {
			return getRuleContext(StmtblockContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PostgreSQLParser.EOF, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1634);
			stmtblock();
			setState(1635);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlrootContext extends ParserRuleContext {
		public Pl_functionContext pl_function() {
			return getRuleContext(Pl_functionContext.class,0);
		}
		public PlsqlrootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlroot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlroot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlroot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlroot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlrootContext plsqlroot() throws RecognitionException {
		PlsqlrootContext _localctx = new PlsqlrootContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_plsqlroot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1637);
			pl_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtblockContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmtblock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmtblock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmtblock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_stmtblock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			stmtmulti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtmultiContext extends ParserRuleContext {
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmtmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmtmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmtmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtmultiContext stmtmulti() throws RecognitionException {
		StmtmultiContext _localctx = new StmtmultiContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_stmtmulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAREN) | (1L << ANALYSE) | (1L << ANALYZE) | (1L << CREATE) | (1L << DO))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (FETCH - 67)) | (1L << (GRANT - 67)) | (1L << (SELECT - 67)) | (1L << (TABLE - 67)) | (1L << (WITH - 67)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (ABORT_P - 144)) | (1L << (ALTER - 144)) | (1L << (BEGIN_P - 144)) | (1L << (CHECKPOINT - 144)) | (1L << (CLOSE - 144)) | (1L << (CLUSTER - 144)) | (1L << (COMMENT - 144)) | (1L << (COMMIT - 144)) | (1L << (COPY - 144)) | (1L << (DEALLOCATE - 144)) | (1L << (DECLARE - 144)) | (1L << (DELETE_P - 144)) | (1L << (DISCARD - 144)) | (1L << (DROP - 144)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (EXECUTE - 217)) | (1L << (EXPLAIN - 217)) | (1L << (INSERT - 217)) | (1L << (LISTEN - 217)) | (1L << (LOAD - 217)) | (1L << (LOCK_P - 217)) | (1L << (MOVE - 217)) | (1L << (NOTIFY - 217)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (PREPARE - 296)) | (1L << (REASSIGN - 296)) | (1L << (REFRESH - 296)) | (1L << (REINDEX - 296)) | (1L << (RELEASE - 296)) | (1L << (RESET - 296)) | (1L << (REVOKE - 296)) | (1L << (ROLLBACK - 296)) | (1L << (SAVEPOINT - 296)) | (1L << (SECURITY - 296)) | (1L << (SET - 296)) | (1L << (SHOW - 296)) | (1L << (START - 296)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (TRUNCATE - 364)) | (1L << (UNLISTEN - 364)) | (1L << (UPDATE - 364)) | (1L << (VACUUM - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (VALUES - 428)) | (1L << (CALL - 428)) | (1L << (IMPORT_P - 428)) | (1L << (END_P - 428)))) != 0) || _la==MetaCommand) {
				{
				{
				setState(1641);
				stmt();
				setState(1643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(1642);
					match(SEMI);
					}
				}

				}
				}
				setState(1649);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public AltereventtrigstmtContext altereventtrigstmt() {
			return getRuleContext(AltereventtrigstmtContext.class,0);
		}
		public AltercollationstmtContext altercollationstmt() {
			return getRuleContext(AltercollationstmtContext.class,0);
		}
		public AlterdatabasestmtContext alterdatabasestmt() {
			return getRuleContext(AlterdatabasestmtContext.class,0);
		}
		public AlterdatabasesetstmtContext alterdatabasesetstmt() {
			return getRuleContext(AlterdatabasesetstmtContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
			return getRuleContext(AlterdefaultprivilegesstmtContext.class,0);
		}
		public AlterdomainstmtContext alterdomainstmt() {
			return getRuleContext(AlterdomainstmtContext.class,0);
		}
		public AlterenumstmtContext alterenumstmt() {
			return getRuleContext(AlterenumstmtContext.class,0);
		}
		public AlterextensionstmtContext alterextensionstmt() {
			return getRuleContext(AlterextensionstmtContext.class,0);
		}
		public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
			return getRuleContext(AlterextensioncontentsstmtContext.class,0);
		}
		public AlterfdwstmtContext alterfdwstmt() {
			return getRuleContext(AlterfdwstmtContext.class,0);
		}
		public AlterforeignserverstmtContext alterforeignserverstmt() {
			return getRuleContext(AlterforeignserverstmtContext.class,0);
		}
		public AlterfunctionstmtContext alterfunctionstmt() {
			return getRuleContext(AlterfunctionstmtContext.class,0);
		}
		public AltergroupstmtContext altergroupstmt() {
			return getRuleContext(AltergroupstmtContext.class,0);
		}
		public AlterobjectdependsstmtContext alterobjectdependsstmt() {
			return getRuleContext(AlterobjectdependsstmtContext.class,0);
		}
		public AlterobjectschemastmtContext alterobjectschemastmt() {
			return getRuleContext(AlterobjectschemastmtContext.class,0);
		}
		public AlterownerstmtContext alterownerstmt() {
			return getRuleContext(AlterownerstmtContext.class,0);
		}
		public AlteroperatorstmtContext alteroperatorstmt() {
			return getRuleContext(AlteroperatorstmtContext.class,0);
		}
		public AltertypestmtContext altertypestmt() {
			return getRuleContext(AltertypestmtContext.class,0);
		}
		public AlterpolicystmtContext alterpolicystmt() {
			return getRuleContext(AlterpolicystmtContext.class,0);
		}
		public AlterseqstmtContext alterseqstmt() {
			return getRuleContext(AlterseqstmtContext.class,0);
		}
		public AltersystemstmtContext altersystemstmt() {
			return getRuleContext(AltersystemstmtContext.class,0);
		}
		public AltertablestmtContext altertablestmt() {
			return getRuleContext(AltertablestmtContext.class,0);
		}
		public AltertblspcstmtContext altertblspcstmt() {
			return getRuleContext(AltertblspcstmtContext.class,0);
		}
		public AltercompositetypestmtContext altercompositetypestmt() {
			return getRuleContext(AltercompositetypestmtContext.class,0);
		}
		public AlterpublicationstmtContext alterpublicationstmt() {
			return getRuleContext(AlterpublicationstmtContext.class,0);
		}
		public AlterrolesetstmtContext alterrolesetstmt() {
			return getRuleContext(AlterrolesetstmtContext.class,0);
		}
		public AlterrolestmtContext alterrolestmt() {
			return getRuleContext(AlterrolestmtContext.class,0);
		}
		public AltersubscriptionstmtContext altersubscriptionstmt() {
			return getRuleContext(AltersubscriptionstmtContext.class,0);
		}
		public AlterstatsstmtContext alterstatsstmt() {
			return getRuleContext(AlterstatsstmtContext.class,0);
		}
		public AltertsconfigurationstmtContext altertsconfigurationstmt() {
			return getRuleContext(AltertsconfigurationstmtContext.class,0);
		}
		public AltertsdictionarystmtContext altertsdictionarystmt() {
			return getRuleContext(AltertsdictionarystmtContext.class,0);
		}
		public AlterusermappingstmtContext alterusermappingstmt() {
			return getRuleContext(AlterusermappingstmtContext.class,0);
		}
		public AnalyzestmtContext analyzestmt() {
			return getRuleContext(AnalyzestmtContext.class,0);
		}
		public CallstmtContext callstmt() {
			return getRuleContext(CallstmtContext.class,0);
		}
		public CheckpointstmtContext checkpointstmt() {
			return getRuleContext(CheckpointstmtContext.class,0);
		}
		public CloseportalstmtContext closeportalstmt() {
			return getRuleContext(CloseportalstmtContext.class,0);
		}
		public ClusterstmtContext clusterstmt() {
			return getRuleContext(ClusterstmtContext.class,0);
		}
		public CommentstmtContext commentstmt() {
			return getRuleContext(CommentstmtContext.class,0);
		}
		public ConstraintssetstmtContext constraintssetstmt() {
			return getRuleContext(ConstraintssetstmtContext.class,0);
		}
		public CopystmtContext copystmt() {
			return getRuleContext(CopystmtContext.class,0);
		}
		public CreateamstmtContext createamstmt() {
			return getRuleContext(CreateamstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreateassertionstmtContext createassertionstmt() {
			return getRuleContext(CreateassertionstmtContext.class,0);
		}
		public CreatecaststmtContext createcaststmt() {
			return getRuleContext(CreatecaststmtContext.class,0);
		}
		public CreatecompstmtContext createcompstmt() {
			return getRuleContext(CreatecompstmtContext.class,0);
		}
		public CreateconversionstmtContext createconversionstmt() {
			return getRuleContext(CreateconversionstmtContext.class,0);
		}
		public CreatedomainstmtContext createdomainstmt() {
			return getRuleContext(CreatedomainstmtContext.class,0);
		}
		public CreateextensionstmtContext createextensionstmt() {
			return getRuleContext(CreateextensionstmtContext.class,0);
		}
		public CreatefdwstmtContext createfdwstmt() {
			return getRuleContext(CreatefdwstmtContext.class,0);
		}
		public CreateforeignserverstmtContext createforeignserverstmt() {
			return getRuleContext(CreateforeignserverstmtContext.class,0);
		}
		public CreateforeigntablestmtContext createforeigntablestmt() {
			return getRuleContext(CreateforeigntablestmtContext.class,0);
		}
		public CreatefunctionstmtContext createfunctionstmt() {
			return getRuleContext(CreatefunctionstmtContext.class,0);
		}
		public CreategroupstmtContext creategroupstmt() {
			return getRuleContext(CreategroupstmtContext.class,0);
		}
		public CreatelatticestmtContext createlatticestmt() {
			return getRuleContext(CreatelatticestmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public CreateopclassstmtContext createopclassstmt() {
			return getRuleContext(CreateopclassstmtContext.class,0);
		}
		public CreateopfamilystmtContext createopfamilystmt() {
			return getRuleContext(CreateopfamilystmtContext.class,0);
		}
		public CreatepublicationstmtContext createpublicationstmt() {
			return getRuleContext(CreatepublicationstmtContext.class,0);
		}
		public AlteropfamilystmtContext alteropfamilystmt() {
			return getRuleContext(AlteropfamilystmtContext.class,0);
		}
		public CreatepolicystmtContext createpolicystmt() {
			return getRuleContext(CreatepolicystmtContext.class,0);
		}
		public CreateplangstmtContext createplangstmt() {
			return getRuleContext(CreateplangstmtContext.class,0);
		}
		public CreaterealitystmtContext createrealitystmt() {
			return getRuleContext(CreaterealitystmtContext.class,0);
		}
		public CreateschemastmtContext createschemastmt() {
			return getRuleContext(CreateschemastmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public CreatesubscriptionstmtContext createsubscriptionstmt() {
			return getRuleContext(CreatesubscriptionstmtContext.class,0);
		}
		public CreatestatsstmtContext createstatsstmt() {
			return getRuleContext(CreatestatsstmtContext.class,0);
		}
		public CreatetablespacestmtContext createtablespacestmt() {
			return getRuleContext(CreatetablespacestmtContext.class,0);
		}
		public CreatetransformstmtContext createtransformstmt() {
			return getRuleContext(CreatetransformstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public CreateeventtrigstmtContext createeventtrigstmt() {
			return getRuleContext(CreateeventtrigstmtContext.class,0);
		}
		public CreaterolestmtContext createrolestmt() {
			return getRuleContext(CreaterolestmtContext.class,0);
		}
		public CreateuserstmtContext createuserstmt() {
			return getRuleContext(CreateuserstmtContext.class,0);
		}
		public CreateusermappingstmtContext createusermappingstmt() {
			return getRuleContext(CreateusermappingstmtContext.class,0);
		}
		public CreatedbstmtContext createdbstmt() {
			return getRuleContext(CreatedbstmtContext.class,0);
		}
		public DeallocatestmtContext deallocatestmt() {
			return getRuleContext(DeallocatestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public DefinestmtContext definestmt() {
			return getRuleContext(DefinestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DiscardstmtContext discardstmt() {
			return getRuleContext(DiscardstmtContext.class,0);
		}
		public DostmtContext dostmt() {
			return getRuleContext(DostmtContext.class,0);
		}
		public DropcaststmtContext dropcaststmt() {
			return getRuleContext(DropcaststmtContext.class,0);
		}
		public DropopclassstmtContext dropopclassstmt() {
			return getRuleContext(DropopclassstmtContext.class,0);
		}
		public DropopfamilystmtContext dropopfamilystmt() {
			return getRuleContext(DropopfamilystmtContext.class,0);
		}
		public DropownedstmtContext dropownedstmt() {
			return getRuleContext(DropownedstmtContext.class,0);
		}
		public DropstmtContext dropstmt() {
			return getRuleContext(DropstmtContext.class,0);
		}
		public DropsubscriptionstmtContext dropsubscriptionstmt() {
			return getRuleContext(DropsubscriptionstmtContext.class,0);
		}
		public DroptablespacestmtContext droptablespacestmt() {
			return getRuleContext(DroptablespacestmtContext.class,0);
		}
		public DroptransformstmtContext droptransformstmt() {
			return getRuleContext(DroptransformstmtContext.class,0);
		}
		public DroprolestmtContext droprolestmt() {
			return getRuleContext(DroprolestmtContext.class,0);
		}
		public DropusermappingstmtContext dropusermappingstmt() {
			return getRuleContext(DropusermappingstmtContext.class,0);
		}
		public DropdbstmtContext dropdbstmt() {
			return getRuleContext(DropdbstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainstmtContext explainstmt() {
			return getRuleContext(ExplainstmtContext.class,0);
		}
		public FetchstmtContext fetchstmt() {
			return getRuleContext(FetchstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public GrantrolestmtContext grantrolestmt() {
			return getRuleContext(GrantrolestmtContext.class,0);
		}
		public ImportforeignschemastmtContext importforeignschemastmt() {
			return getRuleContext(ImportforeignschemastmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public ListenstmtContext listenstmt() {
			return getRuleContext(ListenstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public LoadstmtContext loadstmt() {
			return getRuleContext(LoadstmtContext.class,0);
		}
		public LockstmtContext lockstmt() {
			return getRuleContext(LockstmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public PreparestmtContext preparestmt() {
			return getRuleContext(PreparestmtContext.class,0);
		}
		public ReassignownedstmtContext reassignownedstmt() {
			return getRuleContext(ReassignownedstmtContext.class,0);
		}
		public ReindexstmtContext reindexstmt() {
			return getRuleContext(ReindexstmtContext.class,0);
		}
		public RemoveaggrstmtContext removeaggrstmt() {
			return getRuleContext(RemoveaggrstmtContext.class,0);
		}
		public RemovefuncstmtContext removefuncstmt() {
			return getRuleContext(RemovefuncstmtContext.class,0);
		}
		public RemoveoperstmtContext removeoperstmt() {
			return getRuleContext(RemoveoperstmtContext.class,0);
		}
		public RenamestmtContext renamestmt() {
			return getRuleContext(RenamestmtContext.class,0);
		}
		public RevokestmtContext revokestmt() {
			return getRuleContext(RevokestmtContext.class,0);
		}
		public RevokerolestmtContext revokerolestmt() {
			return getRuleContext(RevokerolestmtContext.class,0);
		}
		public RulestmtContext rulestmt() {
			return getRuleContext(RulestmtContext.class,0);
		}
		public SeclabelstmtContext seclabelstmt() {
			return getRuleContext(SeclabelstmtContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TransactionstmtContext transactionstmt() {
			return getRuleContext(TransactionstmtContext.class,0);
		}
		public TruncatestmtContext truncatestmt() {
			return getRuleContext(TruncatestmtContext.class,0);
		}
		public UnlistenstmtContext unlistenstmt() {
			return getRuleContext(UnlistenstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public VacuumstmtContext vacuumstmt() {
			return getRuleContext(VacuumstmtContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public VariablesetstmtContext variablesetstmt() {
			return getRuleContext(VariablesetstmtContext.class,0);
		}
		public VariableshowstmtContext variableshowstmt() {
			return getRuleContext(VariableshowstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public PlsqlconsolecommandContext plsqlconsolecommand() {
			return getRuleContext(PlsqlconsolecommandContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_stmt);
		try {
			setState(1777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1650);
				altereventtrigstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1651);
				altercollationstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1652);
				alterdatabasestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1653);
				alterdatabasesetstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1654);
				alterdefaultprivilegesstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1655);
				alterdomainstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1656);
				alterenumstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1657);
				alterextensionstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1658);
				alterextensioncontentsstmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1659);
				alterfdwstmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1660);
				alterforeignserverstmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1661);
				alterfunctionstmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1662);
				altergroupstmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1663);
				alterobjectdependsstmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1664);
				alterobjectschemastmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1665);
				alterownerstmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1666);
				alteroperatorstmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1667);
				altertypestmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1668);
				alterpolicystmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1669);
				alterseqstmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1670);
				altersystemstmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1671);
				altertablestmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1672);
				altertblspcstmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1673);
				altercompositetypestmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1674);
				alterpublicationstmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1675);
				alterrolesetstmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1676);
				alterrolestmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1677);
				altersubscriptionstmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1678);
				alterstatsstmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1679);
				altertsconfigurationstmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1680);
				altertsdictionarystmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1681);
				alterusermappingstmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1682);
				analyzestmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1683);
				callstmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1684);
				checkpointstmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1685);
				closeportalstmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1686);
				clusterstmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1687);
				commentstmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1688);
				constraintssetstmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1689);
				copystmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1690);
				createamstmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1691);
				createasstmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1692);
				createassertionstmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1693);
				createcaststmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1694);
				createcompstmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1695);
				createconversionstmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1696);
				createdomainstmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1697);
				createextensionstmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1698);
				createfdwstmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1699);
				createforeignserverstmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1700);
				createforeigntablestmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1701);
				createfunctionstmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1702);
				creategroupstmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1703);
				createlatticestmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1704);
				creatematviewstmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1705);
				createopclassstmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1706);
				createopfamilystmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1707);
				createpublicationstmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1708);
				alteropfamilystmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1709);
				createpolicystmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1710);
				createplangstmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1711);
				createrealitystmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1712);
				createschemastmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1713);
				createseqstmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1714);
				createstmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1715);
				createsubscriptionstmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1716);
				createstatsstmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1717);
				createtablespacestmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1718);
				createtransformstmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1719);
				createtrigstmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1720);
				createeventtrigstmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1721);
				createrolestmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1722);
				createuserstmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1723);
				createusermappingstmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1724);
				createdbstmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1725);
				deallocatestmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1726);
				declarecursorstmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1727);
				definestmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1728);
				deletestmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1729);
				discardstmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1730);
				dostmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1731);
				dropcaststmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1732);
				dropopclassstmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1733);
				dropopfamilystmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1734);
				dropownedstmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1735);
				dropstmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1736);
				dropsubscriptionstmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1737);
				droptablespacestmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1738);
				droptransformstmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1739);
				droprolestmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1740);
				dropusermappingstmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1741);
				dropdbstmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1742);
				executestmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1743);
				explainstmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1744);
				fetchstmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1745);
				grantstmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1746);
				grantrolestmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1747);
				importforeignschemastmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1748);
				indexstmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1749);
				insertstmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1750);
				listenstmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1751);
				refreshmatviewstmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1752);
				loadstmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1753);
				lockstmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1754);
				notifystmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1755);
				preparestmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1756);
				reassignownedstmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1757);
				reindexstmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1758);
				removeaggrstmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1759);
				removefuncstmt();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1760);
				removeoperstmt();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1761);
				renamestmt();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1762);
				revokestmt();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1763);
				revokerolestmt();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1764);
				rulestmt();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1765);
				seclabelstmt();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1766);
				selectstmt();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1767);
				transactionstmt();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1768);
				truncatestmt();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1769);
				unlistenstmt();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1770);
				updatestmt();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1771);
				vacuumstmt();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1772);
				variableresetstmt();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1773);
				variablesetstmt();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(1774);
				variableshowstmt();
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(1775);
				viewstmt();
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(1776);
				plsqlconsolecommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlconsolecommandContext extends ParserRuleContext {
		public TerminalNode MetaCommand() { return getToken(PostgreSQLParser.MetaCommand, 0); }
		public TerminalNode EndMetaCommand() { return getToken(PostgreSQLParser.EndMetaCommand, 0); }
		public PlsqlconsolecommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlconsolecommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlconsolecommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlconsolecommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlconsolecommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlconsolecommandContext plsqlconsolecommand() throws RecognitionException {
		PlsqlconsolecommandContext _localctx = new PlsqlconsolecommandContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_plsqlconsolecommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1779);
			match(MetaCommand);
			setState(1781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EndMetaCommand) {
				{
				setState(1780);
				match(EndMetaCommand);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallstmtContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCallstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCallstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCallstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallstmtContext callstmt() throws RecognitionException {
		CallstmtContext _localctx = new CallstmtContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_callstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1783);
			match(CALL);
			setState(1784);
			func_application();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreaterolestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreaterolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreaterolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreaterolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreaterolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreaterolestmtContext createrolestmt() throws RecognitionException {
		CreaterolestmtContext _localctx = new CreaterolestmtContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_createrolestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			match(CREATE);
			setState(1787);
			match(ROLE);
			setState(1788);
			roleid();
			setState(1789);
			opt_with();
			setState(1790);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Opt_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_withContext opt_with() throws RecognitionException {
		Opt_withContext _localctx = new Opt_withContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_opt_with);
		try {
			setState(1794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1792);
				match(WITH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptrolelistContext extends ParserRuleContext {
		public List<CreateoptroleelemContext> createoptroleelem() {
			return getRuleContexts(CreateoptroleelemContext.class);
		}
		public CreateoptroleelemContext createoptroleelem(int i) {
			return getRuleContext(CreateoptroleelemContext.class,i);
		}
		public OptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optrolelist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptrolelist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptrolelist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptrolelist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptrolelistContext optrolelist() throws RecognitionException {
		OptrolelistContext _localctx = new OptrolelistContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_optrolelist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1799);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1796);
					createoptroleelem();
					}
					} 
				}
				setState(1801);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteroptrolelistContext extends ParserRuleContext {
		public List<AlteroptroleelemContext> alteroptroleelem() {
			return getRuleContexts(AlteroptroleelemContext.class);
		}
		public AlteroptroleelemContext alteroptroleelem(int i) {
			return getRuleContext(AlteroptroleelemContext.class,i);
		}
		public AlteroptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptrolelist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroptrolelist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroptrolelist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroptrolelist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptrolelistContext alteroptrolelist() throws RecognitionException {
		AlteroptrolelistContext _localctx = new AlteroptrolelistContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alteroptrolelist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1805);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1802);
					alteroptroleelem();
					}
					} 
				}
				setState(1807);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteroptroleelemContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlteroptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptroleelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroptroleelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroptroleelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroptroleelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptroleelemContext alteroptroleelem() throws RecognitionException {
		AlteroptroleelemContext _localctx = new AlteroptroleelemContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alteroptroleelem);
		int _la;
		try {
			setState(1826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PASSWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1808);
				match(PASSWORD);
				setState(1811);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(1809);
					sconst();
					}
					break;
				case NULL_P:
					{
					setState(1810);
					match(NULL_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTED:
			case UNENCRYPTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1813);
				_la = _input.LA(1);
				if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1814);
				match(PASSWORD);
				setState(1815);
				sconst();
				}
				break;
			case INHERIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1816);
				match(INHERIT);
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(1817);
				match(CONNECTION);
				setState(1818);
				match(LIMIT);
				setState(1819);
				signediconst();
				}
				break;
			case VALID:
				enterOuterAlt(_localctx, 5);
				{
				setState(1820);
				match(VALID);
				setState(1821);
				match(UNTIL);
				setState(1822);
				sconst();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1823);
				match(USER);
				setState(1824);
				role_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 7);
				{
				setState(1825);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateoptroleelemContext extends ParserRuleContext {
		public AlteroptroleelemContext alteroptroleelem() {
			return getRuleContext(AlteroptroleelemContext.class,0);
		}
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public CreateoptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createoptroleelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateoptroleelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateoptroleelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateoptroleelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateoptroleelemContext createoptroleelem() throws RecognitionException {
		CreateoptroleelemContext _localctx = new CreateoptroleelemContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createoptroleelem);
		int _la;
		try {
			setState(1838);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case USER:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONNECTION:
			case CONTINUE_P:
			case CURSOR:
			case ENCRYPTED:
			case FIRST_P:
			case FORWARD:
			case INHERIT:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PASSWORD:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case UNENCRYPTED:
			case VALID:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1828);
				alteroptroleelem();
				}
				break;
			case SYSID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1829);
				match(SYSID);
				setState(1830);
				iconst();
				}
				break;
			case ADMIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1831);
				match(ADMIN);
				setState(1832);
				role_list();
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1833);
				match(ROLE);
				setState(1834);
				role_list();
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(1835);
				match(IN_P);
				setState(1836);
				_la = _input.LA(1);
				if ( !(_la==GROUP_P || _la==ROLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1837);
				role_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateuserstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreateuserstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createuserstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateuserstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateuserstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateuserstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateuserstmtContext createuserstmt() throws RecognitionException {
		CreateuserstmtContext _localctx = new CreateuserstmtContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createuserstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1840);
			match(CREATE);
			setState(1841);
			match(USER);
			setState(1842);
			roleid();
			setState(1843);
			opt_with();
			setState(1844);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterrolestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public AlteroptrolelistContext alteroptrolelist() {
			return getRuleContext(AlteroptrolelistContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public AlterrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterrolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterrolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterrolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterrolestmtContext alterrolestmt() throws RecognitionException {
		AlterrolestmtContext _localctx = new AlterrolestmtContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterrolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1846);
			match(ALTER);
			setState(1847);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1848);
			rolespec();
			setState(1849);
			opt_with();
			setState(1850);
			alteroptrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_in_databaseContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_in_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_in_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_in_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_in_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_in_databaseContext opt_in_database() throws RecognitionException {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_opt_in_database);
		try {
			setState(1856);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESET:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1853);
				match(IN_P);
				setState(1854);
				match(DATABASE);
				setState(1855);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterrolesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_in_databaseContext opt_in_database() {
			return getRuleContext(Opt_in_databaseContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public AlterrolesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterrolesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterrolesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterrolesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterrolesetstmtContext alterrolesetstmt() throws RecognitionException {
		AlterrolesetstmtContext _localctx = new AlterrolesetstmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterrolesetstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1858);
			match(ALTER);
			setState(1859);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(1860);
				match(ALL);
				}
			}

			setState(1863);
			rolespec();
			setState(1864);
			opt_in_database();
			setState(1865);
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DroprolestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DroprolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droprolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroprolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroprolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroprolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroprolestmtContext droprolestmt() throws RecognitionException {
		DroprolestmtContext _localctx = new DroprolestmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_droprolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1867);
			match(DROP);
			setState(1868);
			_la = _input.LA(1);
			if ( !(_la==GROUP_P || _la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1869);
				match(IF_P);
				setState(1870);
				match(EXISTS);
				}
				break;
			}
			setState(1873);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreategroupstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreategroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creategroupstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreategroupstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreategroupstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreategroupstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreategroupstmtContext creategroupstmt() throws RecognitionException {
		CreategroupstmtContext _localctx = new CreategroupstmtContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_creategroupstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1875);
			match(CREATE);
			setState(1876);
			match(GROUP_P);
			setState(1877);
			roleid();
			setState(1878);
			opt_with();
			setState(1879);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltergroupstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public AltergroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altergroupstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltergroupstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltergroupstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltergroupstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltergroupstmtContext altergroupstmt() throws RecognitionException {
		AltergroupstmtContext _localctx = new AltergroupstmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_altergroupstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1881);
			match(ALTER);
			setState(1882);
			match(GROUP_P);
			setState(1883);
			rolespec();
			setState(1884);
			add_drop();
			setState(1885);
			match(USER);
			setState(1886);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_dropContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAdd_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAdd_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAdd_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_dropContext add_drop() throws RecognitionException {
		Add_dropContext _localctx = new Add_dropContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_add_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1888);
			_la = _input.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatelatticestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode LATTICE() { return getToken(PostgreSQLParser.LATTICE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode LABELS() { return getToken(PostgreSQLParser.LABELS, 0); }
		public LabellistContext labellist() {
			return getRuleContext(LabellistContext.class,0);
		}
		public TerminalNode ORDERED() { return getToken(PostgreSQLParser.ORDERED, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public OrderedstmtContext orderedstmt() {
			return getRuleContext(OrderedstmtContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public CreatelatticestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createlatticestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatelatticestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatelatticestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatelatticestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatelatticestmtContext createlatticestmt() throws RecognitionException {
		CreatelatticestmtContext _localctx = new CreatelatticestmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createlatticestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1890);
			match(CREATE);
			setState(1891);
			match(LATTICE);
			setState(1892);
			qualified_name();
			setState(1896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1893);
				match(ON);
				setState(1894);
				match(ATTRIBUTE);
				setState(1895);
				qualified_name();
				}
			}

			setState(1898);
			match(USING);
			setState(1899);
			match(LABELS);
			setState(1900);
			labellist();
			setState(1901);
			match(ORDERED);
			setState(1902);
			match(AS);
			setState(1903);
			orderedstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabellistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TerminalNode> LAB() { return getTokens(PostgreSQLParser.LAB); }
		public TerminalNode LAB(int i) {
			return getToken(PostgreSQLParser.LAB, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public LabellistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labellist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLabellist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLabellist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLabellist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabellistContext labellist() throws RecognitionException {
		LabellistContext _localctx = new LabellistContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_labellist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1905);
			match(OPEN_PAREN);
			setState(1906);
			match(LAB);
			setState(1911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1907);
				match(COMMA);
				setState(1908);
				match(LAB);
				}
				}
				setState(1913);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1914);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderedstmtContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OrderedlistContext orderedlist() {
			return getRuleContext(OrderedlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OrderedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOrderedstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOrderedstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOrderedstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedstmtContext orderedstmt() throws RecognitionException {
		OrderedstmtContext _localctx = new OrderedstmtContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_orderedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1916);
			match(OPEN_PAREN);
			setState(1917);
			orderedlist();
			setState(1918);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderedlistContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(PostgreSQLParser.TOP, 0); }
		public List<TerminalNode> LAB() { return getTokens(PostgreSQLParser.LAB); }
		public TerminalNode LAB(int i) {
			return getToken(PostgreSQLParser.LAB, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode BOTTOM() { return getToken(PostgreSQLParser.BOTTOM, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public LabelorderingContext labelordering() {
			return getRuleContext(LabelorderingContext.class,0);
		}
		public OrderedlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOrderedlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOrderedlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOrderedlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedlistContext orderedlist() throws RecognitionException {
		OrderedlistContext _localctx = new OrderedlistContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_orderedlist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1920);
			match(TOP);
			setState(1921);
			match(LAB);
			setState(1922);
			match(COMMA);
			setState(1923);
			match(BOTTOM);
			setState(1924);
			match(LAB);
			setState(1925);
			match(COMMA);
			setState(1926);
			match(ORDER);
			setState(1927);
			labelordering();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelorderingContext extends ParserRuleContext {
		public List<LabelpairContext> labelpair() {
			return getRuleContexts(LabelpairContext.class);
		}
		public LabelpairContext labelpair(int i) {
			return getRuleContext(LabelpairContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public LabelorderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelordering; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLabelordering(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLabelordering(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLabelordering(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelorderingContext labelordering() throws RecognitionException {
		LabelorderingContext _localctx = new LabelorderingContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_labelordering);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LAB) {
				{
				setState(1929);
				labelpair();
				setState(1934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1930);
					match(COMMA);
					setState(1931);
					labelpair();
					}
					}
					setState(1936);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelpairContext extends ParserRuleContext {
		public List<TerminalNode> LAB() { return getTokens(PostgreSQLParser.LAB); }
		public TerminalNode LAB(int i) {
			return getToken(PostgreSQLParser.LAB, i);
		}
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public LabelpairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelpair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLabelpair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLabelpair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLabelpair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelpairContext labelpair() throws RecognitionException {
		LabelpairContext _localctx = new LabelpairContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_labelpair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1939);
			match(LAB);
			setState(1940);
			match(LT);
			setState(1941);
			match(LAB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateschemastmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public OptschemaeltlistContext optschemaeltlist() {
			return getRuleContext(OptschemaeltlistContext.class,0);
		}
		public OptschemanameContext optschemaname() {
			return getRuleContext(OptschemanameContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateschemastmtContext createschemastmt() throws RecognitionException {
		CreateschemastmtContext _localctx = new CreateschemastmtContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_createschemastmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1943);
			match(CREATE);
			setState(1944);
			match(SCHEMA);
			setState(1948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				setState(1945);
				match(IF_P);
				setState(1946);
				match(NOT);
				setState(1947);
				match(EXISTS);
				}
				break;
			}
			setState(1955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(1950);
				optschemaname();
				setState(1951);
				match(AUTHORIZATION);
				setState(1952);
				rolespec();
				}
				break;
			case 2:
				{
				setState(1954);
				colid();
				}
				break;
			}
			setState(1957);
			optschemaeltlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptschemanameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public OptschemanameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptschemaname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptschemaname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptschemaname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptschemanameContext optschemaname() throws RecognitionException {
		OptschemanameContext _localctx = new OptschemanameContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_optschemaname);
		try {
			setState(1961);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1959);
				colid();
				}
				break;
			case AUTHORIZATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptschemaeltlistContext extends ParserRuleContext {
		public List<Schema_stmtContext> schema_stmt() {
			return getRuleContexts(Schema_stmtContext.class);
		}
		public Schema_stmtContext schema_stmt(int i) {
			return getRuleContext(Schema_stmtContext.class,i);
		}
		public OptschemaeltlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaeltlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptschemaeltlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptschemaeltlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptschemaeltlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptschemaeltlistContext optschemaeltlist() throws RecognitionException {
		OptschemaeltlistContext _localctx = new OptschemaeltlistContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_optschemaeltlist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1966);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1963);
					schema_stmt();
					}
					} 
				}
				setState(1968);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_stmtContext extends ParserRuleContext {
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSchema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSchema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSchema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_stmtContext schema_stmt() throws RecognitionException {
		Schema_stmtContext _localctx = new Schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_schema_stmt);
		try {
			setState(1975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1969);
				createstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1970);
				indexstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1971);
				createseqstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1972);
				createtrigstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1973);
				grantstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1974);
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariablesetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public VariablesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variablesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariablesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariablesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariablesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariablesetstmtContext variablesetstmt() throws RecognitionException {
		VariablesetstmtContext _localctx = new VariablesetstmtContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_variablesetstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1977);
			match(SET);
			setState(1979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1978);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1981);
			set_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_restContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_restContext set_rest() throws RecognitionException {
		Set_restContext _localctx = new Set_restContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_set_rest);
		try {
			setState(1991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1983);
				match(TRANSACTION);
				setState(1984);
				transaction_mode_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1985);
				match(SESSION);
				setState(1986);
				match(CHARACTERISTICS);
				setState(1987);
				match(AS);
				setState(1988);
				match(TRANSACTION);
				setState(1989);
				transaction_mode_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1990);
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_setContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Generic_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_setContext generic_set() throws RecognitionException {
		Generic_setContext _localctx = new Generic_setContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_generic_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1993);
			var_name();
			setState(1994);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1995);
			var_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_rest_moreContext extends ParserRuleContext {
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Zone_valueContext zone_value() {
			return getRuleContext(Zone_valueContext.class,0);
		}
		public TerminalNode CATALOG_P() { return getToken(PostgreSQLParser.CATALOG_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public Opt_encodingContext opt_encoding() {
			return getRuleContext(Opt_encodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest_more; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_rest_more(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_rest_more(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_rest_more(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_rest_moreContext set_rest_more() throws RecognitionException {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_set_rest_more);
		try {
			setState(2022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1997);
				generic_set();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1998);
				var_name();
				setState(1999);
				match(FROM);
				setState(2000);
				match(CURRENT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2002);
				match(TIME);
				setState(2003);
				match(ZONE);
				setState(2004);
				zone_value();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2005);
				match(CATALOG_P);
				setState(2006);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2007);
				match(SCHEMA);
				setState(2008);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2009);
				match(NAMES);
				setState(2010);
				opt_encoding();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2011);
				match(ROLE);
				setState(2012);
				nonreservedword_or_sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2013);
				match(SESSION);
				setState(2014);
				match(AUTHORIZATION);
				setState(2015);
				nonreservedword_or_sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2016);
				match(XML_P);
				setState(2017);
				match(OPTION);
				setState(2018);
				document_or_content();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2019);
				match(TRANSACTION);
				setState(2020);
				match(SNAPSHOT);
				setState(2021);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_nameContext extends ParserRuleContext {
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		Var_nameContext _localctx = new Var_nameContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_var_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2024);
			colid();
			setState(2029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(2025);
				match(DOT);
				setState(2026);
				colid();
				}
				}
				setState(2031);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_listContext extends ParserRuleContext {
		public List<Var_valueContext> var_value() {
			return getRuleContexts(Var_valueContext.class);
		}
		public Var_valueContext var_value(int i) {
			return getRuleContext(Var_valueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		Var_listContext _localctx = new Var_listContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_var_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2032);
			var_value();
			setState(2037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2033);
				match(COMMA);
				setState(2034);
				var_value();
				}
				}
				setState(2039);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_valueContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_valueContext var_value() throws RecognitionException {
		Var_valueContext _localctx = new Var_valueContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_var_value);
		try {
			setState(2042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2040);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(2041);
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Iso_levelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iso_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIso_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIso_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIso_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iso_levelContext iso_level() throws RecognitionException {
		Iso_levelContext _localctx = new Iso_levelContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_iso_level);
		int _la;
		try {
			setState(2049);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(2044);
				match(READ);
				setState(2045);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED || _la==UNCOMMITTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REPEATABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2046);
				match(REPEATABLE);
				setState(2047);
				match(READ);
				}
				break;
			case SERIALIZABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2048);
				match(SERIALIZABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_boolean_or_stringContext extends ParserRuleContext {
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_boolean_or_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_boolean_or_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_boolean_or_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_boolean_or_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_boolean_or_stringContext opt_boolean_or_string() throws RecognitionException {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_opt_boolean_or_string);
		try {
			setState(2055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(2051);
				match(TRUE_P);
				}
				break;
			case FALSE_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2052);
				match(FALSE_P);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(2053);
				match(ON);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(2054);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_valueContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterZone_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitZone_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitZone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Zone_valueContext zone_value() throws RecognitionException {
		Zone_valueContext _localctx = new Zone_valueContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_zone_value);
		try {
			setState(2072);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2057);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2058);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2059);
				constinterval();
				setState(2060);
				sconst();
				setState(2061);
				opt_interval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2063);
				constinterval();
				setState(2064);
				match(OPEN_PAREN);
				setState(2065);
				iconst();
				setState(2066);
				match(CLOSE_PAREN);
				setState(2067);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2069);
				numericonly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2070);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2071);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_encodingContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_encodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_encoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_encoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_encoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_encodingContext opt_encoding() throws RecognitionException {
		Opt_encodingContext _localctx = new Opt_encodingContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_opt_encoding);
		try {
			setState(2077);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2074);
				sconst();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2075);
				match(DEFAULT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CALLED:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case COST:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case EXTERNAL:
			case IMMUTABLE:
			case INSERT:
			case LANGUAGE:
			case LEAKPROOF:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case STABLE:
			case START:
			case STRICT_P:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VOLATILE:
			case VALUES:
			case CALL:
			case TRANSFORM:
			case IMPORT_P:
			case END_P:
			case SUPPORT:
			case PARALLEL:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nonreservedword_or_sconstContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Nonreservedword_or_sconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword_or_sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNonreservedword_or_sconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNonreservedword_or_sconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNonreservedword_or_sconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nonreservedword_or_sconstContext nonreservedword_or_sconst() throws RecognitionException {
		Nonreservedword_or_sconstContext _localctx = new Nonreservedword_or_sconstContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_nonreservedword_or_sconst);
		try {
			setState(2081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2079);
				nonreservedword();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(2080);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableresetstmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Reset_restContext reset_rest() {
			return getRuleContext(Reset_restContext.class,0);
		}
		public VariableresetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableresetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariableresetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariableresetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariableresetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableresetstmtContext variableresetstmt() throws RecognitionException {
		VariableresetstmtContext _localctx = new VariableresetstmtContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_variableresetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2083);
			match(RESET);
			setState(2084);
			reset_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reset_restContext extends ParserRuleContext {
		public Generic_resetContext generic_reset() {
			return getRuleContext(Generic_resetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Reset_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReset_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReset_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReset_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reset_restContext reset_rest() throws RecognitionException {
		Reset_restContext _localctx = new Reset_restContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_reset_rest);
		try {
			setState(2094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2086);
				generic_reset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2087);
				match(TIME);
				setState(2088);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2089);
				match(TRANSACTION);
				setState(2090);
				match(ISOLATION);
				setState(2091);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2092);
				match(SESSION);
				setState(2093);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_resetContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Generic_resetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_reset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_reset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_reset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_reset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_resetContext generic_reset() throws RecognitionException {
		Generic_resetContext _localctx = new Generic_resetContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_generic_reset);
		try {
			setState(2098);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2096);
				var_name();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2097);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public SetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setresetclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSetresetclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSetresetclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSetresetclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetresetclauseContext setresetclause() throws RecognitionException {
		SetresetclauseContext _localctx = new SetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_setresetclause);
		try {
			setState(2103);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2100);
				match(SET);
				setState(2101);
				set_rest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2102);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionsetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public FunctionsetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionsetresetclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunctionsetresetclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunctionsetresetclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunctionsetresetclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionsetresetclauseContext functionsetresetclause() throws RecognitionException {
		FunctionsetresetclauseContext _localctx = new FunctionsetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_functionsetresetclause);
		try {
			setState(2108);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2105);
				match(SET);
				setState(2106);
				set_rest_more();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2107);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableshowstmtContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public VariableshowstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableshowstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariableshowstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariableshowstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariableshowstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableshowstmtContext variableshowstmt() throws RecognitionException {
		VariableshowstmtContext _localctx = new VariableshowstmtContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_variableshowstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2110);
			match(SHOW);
			setState(2120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				setState(2111);
				var_name();
				}
				break;
			case 2:
				{
				setState(2112);
				match(TIME);
				setState(2113);
				match(ZONE);
				}
				break;
			case 3:
				{
				setState(2114);
				match(TRANSACTION);
				setState(2115);
				match(ISOLATION);
				setState(2116);
				match(LEVEL);
				}
				break;
			case 4:
				{
				setState(2117);
				match(SESSION);
				setState(2118);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				{
				setState(2119);
				match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintssetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public Constraints_set_listContext constraints_set_list() {
			return getRuleContext(Constraints_set_listContext.class,0);
		}
		public Constraints_set_modeContext constraints_set_mode() {
			return getRuleContext(Constraints_set_modeContext.class,0);
		}
		public ConstraintssetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintssetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintssetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintssetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintssetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintssetstmtContext constraintssetstmt() throws RecognitionException {
		ConstraintssetstmtContext _localctx = new ConstraintssetstmtContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_constraintssetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2122);
			match(SET);
			setState(2123);
			match(CONSTRAINTS);
			setState(2124);
			constraints_set_list();
			setState(2125);
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_listContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraints_set_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraints_set_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraints_set_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_listContext constraints_set_list() throws RecognitionException {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_constraints_set_list);
		try {
			setState(2129);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2127);
				match(ALL);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2128);
				qualified_name_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_modeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraints_set_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraints_set_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraints_set_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_modeContext constraints_set_mode() throws RecognitionException {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_constraints_set_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2131);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckpointstmtContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public CheckpointstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpointstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCheckpointstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCheckpointstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCheckpointstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckpointstmtContext checkpointstmt() throws RecognitionException {
		CheckpointstmtContext _localctx = new CheckpointstmtContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_checkpointstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2133);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardstmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public DiscardstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDiscardstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDiscardstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDiscardstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardstmtContext discardstmt() throws RecognitionException {
		DiscardstmtContext _localctx = new DiscardstmtContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_discardstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2135);
			match(DISCARD);
			setState(2136);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==PLANS || _la==SEQUENCES || _la==TEMP || _la==TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertablestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Partition_cmdContext partition_cmd() {
			return getRuleContext(Partition_cmdContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLParser.TABLESPACE, i);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext index_partition_cmd() {
			return getRuleContext(Index_partition_cmdContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public AltertablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertablestmtContext altertablestmt() throws RecognitionException {
		AltertablestmtContext _localctx = new AltertablestmtContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_altertablestmt);
		int _la;
		try {
			setState(2247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2138);
				match(ALTER);
				setState(2139);
				match(TABLE);
				setState(2142);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(2140);
					match(IF_P);
					setState(2141);
					match(EXISTS);
					}
					break;
				}
				setState(2144);
				relation_expr();
				setState(2147);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					setState(2145);
					alter_table_cmds();
					}
					break;
				case ATTACH:
				case DETACH:
					{
					setState(2146);
					partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2149);
				match(ALTER);
				setState(2150);
				match(TABLE);
				setState(2151);
				match(ALL);
				setState(2152);
				match(IN_P);
				setState(2153);
				match(TABLESPACE);
				setState(2154);
				name();
				setState(2158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(2155);
					match(OWNED);
					setState(2156);
					match(BY);
					setState(2157);
					role_list();
					}
				}

				setState(2160);
				match(SET);
				setState(2161);
				match(TABLESPACE);
				setState(2162);
				name();
				setState(2163);
				opt_nowait();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2165);
				match(ALTER);
				setState(2166);
				match(INDEX);
				setState(2169);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(2167);
					match(IF_P);
					setState(2168);
					match(EXISTS);
					}
					break;
				}
				setState(2171);
				qualified_name();
				setState(2174);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					setState(2172);
					alter_table_cmds();
					}
					break;
				case ATTACH:
					{
					setState(2173);
					index_partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2176);
				match(ALTER);
				setState(2177);
				match(INDEX);
				setState(2178);
				match(ALL);
				setState(2179);
				match(IN_P);
				setState(2180);
				match(TABLESPACE);
				setState(2181);
				name();
				setState(2185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(2182);
					match(OWNED);
					setState(2183);
					match(BY);
					setState(2184);
					role_list();
					}
				}

				setState(2187);
				match(SET);
				setState(2188);
				match(TABLESPACE);
				setState(2189);
				name();
				setState(2190);
				opt_nowait();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2192);
				match(ALTER);
				setState(2193);
				match(SEQUENCE);
				setState(2196);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(2194);
					match(IF_P);
					setState(2195);
					match(EXISTS);
					}
					break;
				}
				setState(2198);
				qualified_name();
				setState(2199);
				alter_table_cmds();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2201);
				match(ALTER);
				setState(2202);
				match(VIEW);
				setState(2205);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(2203);
					match(IF_P);
					setState(2204);
					match(EXISTS);
					}
					break;
				}
				setState(2207);
				qualified_name();
				setState(2208);
				alter_table_cmds();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2210);
				match(ALTER);
				setState(2211);
				match(MATERIALIZED);
				setState(2212);
				match(VIEW);
				setState(2215);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(2213);
					match(IF_P);
					setState(2214);
					match(EXISTS);
					}
					break;
				}
				setState(2217);
				qualified_name();
				setState(2218);
				alter_table_cmds();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2220);
				match(ALTER);
				setState(2221);
				match(MATERIALIZED);
				setState(2222);
				match(VIEW);
				setState(2223);
				match(ALL);
				setState(2224);
				match(IN_P);
				setState(2225);
				match(TABLESPACE);
				setState(2226);
				name();
				setState(2230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(2227);
					match(OWNED);
					setState(2228);
					match(BY);
					setState(2229);
					role_list();
					}
				}

				setState(2232);
				match(SET);
				setState(2233);
				match(TABLESPACE);
				setState(2234);
				name();
				setState(2235);
				opt_nowait();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2237);
				match(ALTER);
				setState(2238);
				match(FOREIGN);
				setState(2239);
				match(TABLE);
				setState(2242);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(2240);
					match(IF_P);
					setState(2241);
					match(EXISTS);
					}
					break;
				}
				setState(2244);
				relation_expr();
				setState(2245);
				alter_table_cmds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdsContext extends ParserRuleContext {
		public List<Alter_table_cmdContext> alter_table_cmd() {
			return getRuleContexts(Alter_table_cmdContext.class);
		}
		public Alter_table_cmdContext alter_table_cmd(int i) {
			return getRuleContext(Alter_table_cmdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdsContext alter_table_cmds() throws RecognitionException {
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_alter_table_cmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2249);
			alter_table_cmd();
			setState(2254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2250);
				match(COMMA);
				setState(2251);
				alter_table_cmd();
				}
				}
				setState(2256);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public Partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartition_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartition_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartition_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_cmdContext partition_cmd() throws RecognitionException {
		Partition_cmdContext _localctx = new Partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_partition_cmd);
		try {
			setState(2265);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2257);
				match(ATTACH);
				setState(2258);
				match(PARTITION);
				setState(2259);
				qualified_name();
				setState(2260);
				partitionboundspec();
				}
				break;
			case DETACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2262);
				match(DETACH);
				setState(2263);
				match(PARTITION);
				setState(2264);
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_partition_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_partition_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_partition_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_partition_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_partition_cmdContext index_partition_cmd() throws RecognitionException {
		Index_partition_cmdContext _localctx = new Index_partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_index_partition_cmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2267);
			match(ATTACH);
			setState(2268);
			match(PARTITION);
			setState(2269);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode LATTICE() { return getToken(PostgreSQLParser.LATTICE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public Attribute_listContext attribute_list() {
			return getRuleContext(Attribute_listContext.class,0);
		}
		public TerminalNode L3U() { return getToken(PostgreSQLParser.L3U, 0); }
		public TerminalNode L3S() { return getToken(PostgreSQLParser.L3S, 0); }
		public TerminalNode L4() { return getToken(PostgreSQLParser.L4, 0); }
		public TerminalNode COMPARABILITY() { return getToken(PostgreSQLParser.COMPARABILITY, 0); }
		public TerminalNode C3U() { return getToken(PostgreSQLParser.C3U, 0); }
		public TerminalNode C3S() { return getToken(PostgreSQLParser.C3S, 0); }
		public TerminalNode C4() { return getToken(PostgreSQLParser.C4, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return getRuleContext(Alter_identity_column_option_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_usingContext alter_using() {
			return getRuleContext(Alter_usingContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Replica_identityContext replica_identity() {
			return getRuleContext(Replica_identityContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdContext alter_table_cmd() throws RecognitionException {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_table_cmd);
		try {
			setState(2573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2271);
				match(ADD_P);
				setState(2272);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2273);
				match(ADD_P);
				setState(2274);
				match(IF_P);
				setState(2275);
				match(NOT);
				setState(2276);
				match(EXISTS);
				setState(2277);
				columnDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2278);
				match(ADD_P);
				setState(2279);
				match(COLUMN);
				setState(2280);
				columnDef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2281);
				match(ADD_P);
				setState(2282);
				match(COLUMN);
				setState(2283);
				match(IF_P);
				setState(2284);
				match(NOT);
				setState(2285);
				match(EXISTS);
				setState(2286);
				columnDef();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2287);
				match(ADD_P);
				setState(2288);
				match(LATTICE);
				setState(2289);
				qualified_name();
				setState(2290);
				match(ON);
				setState(2291);
				match(ATTRIBUTE);
				setState(2292);
				attribute_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2294);
				match(ADD_P);
				setState(2295);
				match(LATTICE);
				setState(2296);
				match(L3U);
				setState(2297);
				match(ON);
				setState(2298);
				match(ATTRIBUTE);
				setState(2299);
				attribute_list();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2300);
				match(ADD_P);
				setState(2301);
				match(LATTICE);
				setState(2302);
				match(L3S);
				setState(2303);
				match(ON);
				setState(2304);
				match(ATTRIBUTE);
				setState(2305);
				attribute_list();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2306);
				match(ADD_P);
				setState(2307);
				match(LATTICE);
				setState(2308);
				match(L4);
				setState(2309);
				match(ON);
				setState(2310);
				match(ATTRIBUTE);
				setState(2311);
				attribute_list();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2312);
				match(ADD_P);
				setState(2313);
				match(COMPARABILITY);
				setState(2314);
				qualified_name();
				setState(2315);
				match(ON);
				setState(2316);
				match(ATTRIBUTE);
				setState(2317);
				attribute_list();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2319);
				match(ADD_P);
				setState(2320);
				match(COMPARABILITY);
				setState(2321);
				match(C3U);
				setState(2322);
				match(ON);
				setState(2323);
				match(ATTRIBUTE);
				setState(2324);
				attribute_list();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2325);
				match(ADD_P);
				setState(2326);
				match(COMPARABILITY);
				setState(2327);
				match(C3S);
				setState(2328);
				match(ON);
				setState(2329);
				match(ATTRIBUTE);
				setState(2330);
				attribute_list();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2331);
				match(ADD_P);
				setState(2332);
				match(COMPARABILITY);
				setState(2333);
				match(C4);
				setState(2334);
				match(ON);
				setState(2335);
				match(ATTRIBUTE);
				setState(2336);
				attribute_list();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2337);
				match(ALTER);
				setState(2338);
				opt_column();
				setState(2339);
				colid();
				setState(2340);
				alter_column_default();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2342);
				match(ALTER);
				setState(2343);
				opt_column();
				setState(2344);
				colid();
				setState(2345);
				match(DROP);
				setState(2346);
				match(NOT);
				setState(2347);
				match(NULL_P);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2349);
				match(ALTER);
				setState(2350);
				opt_column();
				setState(2351);
				colid();
				setState(2352);
				match(SET);
				setState(2353);
				match(NOT);
				setState(2354);
				match(NULL_P);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2356);
				match(ALTER);
				setState(2357);
				opt_column();
				setState(2358);
				colid();
				setState(2359);
				match(DROP);
				setState(2360);
				match(EXPRESSION);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2362);
				match(ALTER);
				setState(2363);
				opt_column();
				setState(2364);
				colid();
				setState(2365);
				match(DROP);
				setState(2366);
				match(EXPRESSION);
				setState(2367);
				match(IF_P);
				setState(2368);
				match(EXISTS);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2370);
				match(ALTER);
				setState(2371);
				opt_column();
				setState(2372);
				colid();
				setState(2373);
				match(SET);
				setState(2374);
				match(STATISTICS);
				setState(2375);
				signediconst();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2377);
				match(ALTER);
				setState(2378);
				opt_column();
				setState(2379);
				iconst();
				setState(2380);
				match(SET);
				setState(2381);
				match(STATISTICS);
				setState(2382);
				signediconst();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2384);
				match(ALTER);
				setState(2385);
				opt_column();
				setState(2386);
				colid();
				setState(2387);
				match(SET);
				setState(2388);
				reloptions();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2390);
				match(ALTER);
				setState(2391);
				opt_column();
				setState(2392);
				colid();
				setState(2393);
				match(RESET);
				setState(2394);
				reloptions();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2396);
				match(ALTER);
				setState(2397);
				opt_column();
				setState(2398);
				colid();
				setState(2399);
				match(SET);
				setState(2400);
				match(STORAGE);
				setState(2401);
				colid();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2403);
				match(ALTER);
				setState(2404);
				opt_column();
				setState(2405);
				colid();
				setState(2406);
				match(ADD_P);
				setState(2407);
				match(GENERATED);
				setState(2408);
				generated_when();
				setState(2409);
				match(AS);
				setState(2410);
				match(IDENTITY_P);
				setState(2411);
				optparenthesizedseqoptlist();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2413);
				match(ALTER);
				setState(2414);
				opt_column();
				setState(2415);
				colid();
				setState(2416);
				alter_identity_column_option_list();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2418);
				match(ALTER);
				setState(2419);
				opt_column();
				setState(2420);
				colid();
				setState(2421);
				match(DROP);
				setState(2422);
				match(IDENTITY_P);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2424);
				match(ALTER);
				setState(2425);
				opt_column();
				setState(2426);
				colid();
				setState(2427);
				match(DROP);
				setState(2428);
				match(IDENTITY_P);
				setState(2429);
				match(IF_P);
				setState(2430);
				match(EXISTS);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2432);
				match(DROP);
				setState(2433);
				opt_column();
				setState(2434);
				match(IF_P);
				setState(2435);
				match(EXISTS);
				setState(2436);
				colid();
				setState(2437);
				opt_drop_behavior();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2439);
				match(DROP);
				setState(2440);
				opt_column();
				setState(2441);
				colid();
				setState(2442);
				opt_drop_behavior();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2444);
				match(ALTER);
				setState(2445);
				opt_column();
				setState(2446);
				colid();
				setState(2447);
				opt_set_data();
				setState(2448);
				match(TYPE_P);
				setState(2449);
				typename();
				setState(2450);
				opt_collate_clause();
				setState(2451);
				alter_using();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2453);
				match(ALTER);
				setState(2454);
				opt_column();
				setState(2455);
				colid();
				setState(2456);
				alter_generic_options();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2458);
				match(ADD_P);
				setState(2459);
				tableconstraint();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2460);
				match(ALTER);
				setState(2461);
				match(CONSTRAINT);
				setState(2462);
				name();
				setState(2463);
				constraintattributespec();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2465);
				match(VALIDATE);
				setState(2466);
				match(CONSTRAINT);
				setState(2467);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2468);
				match(DROP);
				setState(2469);
				match(CONSTRAINT);
				setState(2470);
				match(IF_P);
				setState(2471);
				match(EXISTS);
				setState(2472);
				name();
				setState(2473);
				opt_drop_behavior();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2475);
				match(DROP);
				setState(2476);
				match(CONSTRAINT);
				setState(2477);
				name();
				setState(2478);
				opt_drop_behavior();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2480);
				match(SET);
				setState(2481);
				match(WITHOUT);
				setState(2482);
				match(OIDS);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2483);
				match(CLUSTER);
				setState(2484);
				match(ON);
				setState(2485);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2486);
				match(SET);
				setState(2487);
				match(WITHOUT);
				setState(2488);
				match(CLUSTER);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2489);
				match(SET);
				setState(2490);
				match(LOGGED);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2491);
				match(SET);
				setState(2492);
				match(UNLOGGED);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2493);
				match(ENABLE_P);
				setState(2494);
				match(TRIGGER);
				setState(2495);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2496);
				match(ENABLE_P);
				setState(2497);
				match(ALWAYS);
				setState(2498);
				match(TRIGGER);
				setState(2499);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2500);
				match(ENABLE_P);
				setState(2501);
				match(REPLICA);
				setState(2502);
				match(TRIGGER);
				setState(2503);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2504);
				match(ENABLE_P);
				setState(2505);
				match(TRIGGER);
				setState(2506);
				match(ALL);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2507);
				match(ENABLE_P);
				setState(2508);
				match(TRIGGER);
				setState(2509);
				match(USER);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2510);
				match(DISABLE_P);
				setState(2511);
				match(TRIGGER);
				setState(2512);
				name();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2513);
				match(DISABLE_P);
				setState(2514);
				match(TRIGGER);
				setState(2515);
				match(ALL);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2516);
				match(DISABLE_P);
				setState(2517);
				match(TRIGGER);
				setState(2518);
				match(USER);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2519);
				match(ENABLE_P);
				setState(2520);
				match(RULE);
				setState(2521);
				name();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2522);
				match(ENABLE_P);
				setState(2523);
				match(ALWAYS);
				setState(2524);
				match(RULE);
				setState(2525);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2526);
				match(ENABLE_P);
				setState(2527);
				match(REPLICA);
				setState(2528);
				match(RULE);
				setState(2529);
				name();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2530);
				match(DISABLE_P);
				setState(2531);
				match(RULE);
				setState(2532);
				name();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2533);
				match(INHERIT);
				setState(2534);
				qualified_name();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(2535);
				match(NO);
				setState(2536);
				match(INHERIT);
				setState(2537);
				qualified_name();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(2538);
				match(OF);
				setState(2539);
				any_name();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(2540);
				match(NOT);
				setState(2541);
				match(OF);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(2542);
				match(OWNER);
				setState(2543);
				match(TO);
				setState(2544);
				rolespec();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(2545);
				match(SET);
				setState(2546);
				match(TABLESPACE);
				setState(2547);
				name();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(2548);
				match(SET);
				setState(2549);
				reloptions();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(2550);
				match(RESET);
				setState(2551);
				reloptions();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(2552);
				match(REPLICA);
				setState(2553);
				match(IDENTITY_P);
				setState(2554);
				replica_identity();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(2555);
				match(ENABLE_P);
				setState(2556);
				match(ROW);
				setState(2557);
				match(LEVEL);
				setState(2558);
				match(SECURITY);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(2559);
				match(DISABLE_P);
				setState(2560);
				match(ROW);
				setState(2561);
				match(LEVEL);
				setState(2562);
				match(SECURITY);
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(2563);
				match(FORCE);
				setState(2564);
				match(ROW);
				setState(2565);
				match(LEVEL);
				setState(2566);
				match(SECURITY);
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(2567);
				match(NO);
				setState(2568);
				match(FORCE);
				setState(2569);
				match(ROW);
				setState(2570);
				match(LEVEL);
				setState(2571);
				match(SECURITY);
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(2572);
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_listContext extends ParserRuleContext {
		public List<Attr_nameContext> attr_name() {
			return getRuleContexts(Attr_nameContext.class);
		}
		public Attr_nameContext attr_name(int i) {
			return getRuleContext(Attr_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAttribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAttribute_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAttribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_listContext attribute_list() throws RecognitionException {
		Attribute_listContext _localctx = new Attribute_listContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_attribute_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2575);
			attr_name();
			setState(2580);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2576);
					match(COMMA);
					setState(2577);
					attr_name();
					}
					} 
				}
				setState(2582);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_defaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_column_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_column_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_column_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_defaultContext alter_column_default() throws RecognitionException {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alter_column_default);
		try {
			setState(2588);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2583);
				match(SET);
				setState(2584);
				match(DEFAULT);
				setState(2585);
				a_expr();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2586);
				match(DROP);
				setState(2587);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_drop_behaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_drop_behavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_drop_behavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_drop_behavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_drop_behavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_drop_behaviorContext opt_drop_behavior() throws RecognitionException {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_opt_drop_behavior);
		try {
			setState(2593);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2590);
				match(CASCADE);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2591);
				match(RESTRICT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collate_clauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_collate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_collate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_collate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collate_clauseContext opt_collate_clause() throws RecognitionException {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_opt_collate_clause);
		try {
			setState(2598);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLLATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2595);
				match(COLLATE);
				setState(2596);
				any_name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_usingContext alter_using() throws RecognitionException {
		Alter_usingContext _localctx = new Alter_usingContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alter_using);
		try {
			setState(2603);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2600);
				match(USING);
				setState(2601);
				a_expr();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replica_identityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Replica_identityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replica_identity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReplica_identity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReplica_identity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReplica_identity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replica_identityContext replica_identity() throws RecognitionException {
		Replica_identityContext _localctx = new Replica_identityContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_replica_identity);
		try {
			setState(2611);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2605);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2606);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2607);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(2608);
				match(USING);
				setState(2609);
				match(INDEX);
				setState(2610);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2613);
			match(OPEN_PAREN);
			setState(2614);
			reloption_list();
			setState(2615);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reloptionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_reloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_reloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_reloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reloptionsContext opt_reloptions() throws RecognitionException {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_opt_reloptions);
		try {
			setState(2620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2617);
				match(WITH);
				setState(2618);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reloption_listContext extends ParserRuleContext {
		public List<Reloption_elemContext> reloption_elem() {
			return getRuleContexts(Reloption_elemContext.class);
		}
		public Reloption_elemContext reloption_elem(int i) {
			return getRuleContext(Reloption_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloption_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloption_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloption_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_listContext reloption_list() throws RecognitionException {
		Reloption_listContext _localctx = new Reloption_listContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_reloption_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2622);
			reloption_elem();
			setState(2627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2623);
				match(COMMA);
				setState(2624);
				reloption_elem();
				}
				}
				setState(2629);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reloption_elemContext extends ParserRuleContext {
		public List<CollabelContext> collabel() {
			return getRuleContexts(CollabelContext.class);
		}
		public CollabelContext collabel(int i) {
			return getRuleContext(CollabelContext.class,i);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Reloption_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloption_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloption_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloption_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_elemContext reloption_elem() throws RecognitionException {
		Reloption_elemContext _localctx = new Reloption_elemContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_reloption_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			collabel();
			setState(2639);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				{
				setState(2631);
				match(EQUAL);
				setState(2632);
				def_arg();
				}
				break;
			case DOT:
				{
				setState(2633);
				match(DOT);
				setState(2634);
				collabel();
				setState(2637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(2635);
					match(EQUAL);
					setState(2636);
					def_arg();
					}
				}

				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_identity_column_option_listContext extends ParserRuleContext {
		public List<Alter_identity_column_optionContext> alter_identity_column_option() {
			return getRuleContexts(Alter_identity_column_optionContext.class);
		}
		public Alter_identity_column_optionContext alter_identity_column_option(int i) {
			return getRuleContext(Alter_identity_column_optionContext.class,i);
		}
		public Alter_identity_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_identity_column_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_identity_column_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_identity_column_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_identity_column_option_listContext alter_identity_column_option_list() throws RecognitionException {
		Alter_identity_column_option_listContext _localctx = new Alter_identity_column_option_listContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alter_identity_column_option_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2642); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2641);
					alter_identity_column_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2644); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,64,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_identity_column_optionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SeqoptelemContext seqoptelem() {
			return getRuleContext(SeqoptelemContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public Alter_identity_column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_identity_column_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_identity_column_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_identity_column_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_identity_column_optionContext alter_identity_column_option() throws RecognitionException {
		Alter_identity_column_optionContext _localctx = new Alter_identity_column_optionContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alter_identity_column_option);
		try {
			setState(2658);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTART:
				enterOuterAlt(_localctx, 1);
				{
				setState(2646);
				match(RESTART);
				setState(2650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(2647);
					opt_with();
					setState(2648);
					numericonly();
					}
					break;
				}
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2652);
				match(SET);
				setState(2656);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NO:
				case OWNED:
				case RESTART:
				case SEQUENCE:
				case START:
					{
					setState(2653);
					seqoptelem();
					}
					break;
				case GENERATED:
					{
					setState(2654);
					match(GENERATED);
					setState(2655);
					generated_when();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionboundspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public Hash_partboundContext hash_partbound() {
			return getRuleContext(Hash_partboundContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public PartitionboundspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionboundspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartitionboundspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartitionboundspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartitionboundspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionboundspecContext partitionboundspec() throws RecognitionException {
		PartitionboundspecContext _localctx = new PartitionboundspecContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_partitionboundspec);
		try {
			setState(2686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2660);
				match(FOR);
				setState(2661);
				match(VALUES);
				setState(2662);
				match(WITH);
				setState(2663);
				match(OPEN_PAREN);
				setState(2664);
				hash_partbound();
				setState(2665);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2667);
				match(FOR);
				setState(2668);
				match(VALUES);
				setState(2669);
				match(IN_P);
				setState(2670);
				match(OPEN_PAREN);
				setState(2671);
				expr_list();
				setState(2672);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2674);
				match(FOR);
				setState(2675);
				match(VALUES);
				setState(2676);
				match(FROM);
				setState(2677);
				match(OPEN_PAREN);
				setState(2678);
				expr_list();
				setState(2679);
				match(CLOSE_PAREN);
				setState(2680);
				match(TO);
				setState(2681);
				match(OPEN_PAREN);
				setState(2682);
				expr_list();
				setState(2683);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2685);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partbound_elemContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Hash_partbound_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHash_partbound_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHash_partbound_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHash_partbound_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partbound_elemContext hash_partbound_elem() throws RecognitionException {
		Hash_partbound_elemContext _localctx = new Hash_partbound_elemContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_hash_partbound_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2688);
			nonreservedword();
			setState(2689);
			iconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partboundContext extends ParserRuleContext {
		public List<Hash_partbound_elemContext> hash_partbound_elem() {
			return getRuleContexts(Hash_partbound_elemContext.class);
		}
		public Hash_partbound_elemContext hash_partbound_elem(int i) {
			return getRuleContext(Hash_partbound_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Hash_partboundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHash_partbound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHash_partbound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHash_partbound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partboundContext hash_partbound() throws RecognitionException {
		Hash_partboundContext _localctx = new Hash_partboundContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_hash_partbound);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2691);
			hash_partbound_elem();
			setState(2696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2692);
				match(COMMA);
				setState(2693);
				hash_partbound_elem();
				}
				}
				setState(2698);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltercompositetypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public AltercompositetypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercompositetypestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltercompositetypestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltercompositetypestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltercompositetypestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltercompositetypestmtContext altercompositetypestmt() throws RecognitionException {
		AltercompositetypestmtContext _localctx = new AltercompositetypestmtContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_altercompositetypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2699);
			match(ALTER);
			setState(2700);
			match(TYPE_P);
			setState(2701);
			any_name();
			setState(2702);
			alter_type_cmds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_cmdsContext extends ParserRuleContext {
		public List<Alter_type_cmdContext> alter_type_cmd() {
			return getRuleContexts(Alter_type_cmdContext.class);
		}
		public Alter_type_cmdContext alter_type_cmd(int i) {
			return getRuleContext(Alter_type_cmdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdsContext alter_type_cmds() throws RecognitionException {
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_alter_type_cmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2704);
			alter_type_cmd();
			setState(2709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2705);
				match(COMMA);
				setState(2706);
				alter_type_cmd();
				}
				}
				setState(2711);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TablefuncelementContext tablefuncelement() {
			return getRuleContext(TablefuncelementContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdContext alter_type_cmd() throws RecognitionException {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_alter_type_cmd);
		try {
			setState(2735);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(2712);
				match(ADD_P);
				setState(2713);
				match(ATTRIBUTE);
				setState(2714);
				tablefuncelement();
				setState(2715);
				opt_drop_behavior();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2717);
				match(DROP);
				setState(2718);
				match(ATTRIBUTE);
				setState(2721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					setState(2719);
					match(IF_P);
					setState(2720);
					match(EXISTS);
					}
					break;
				}
				setState(2723);
				colid();
				setState(2724);
				opt_drop_behavior();
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2726);
				match(ALTER);
				setState(2727);
				match(ATTRIBUTE);
				setState(2728);
				colid();
				setState(2729);
				opt_set_data();
				setState(2730);
				match(TYPE_P);
				setState(2731);
				typename();
				setState(2732);
				opt_collate_clause();
				setState(2733);
				opt_drop_behavior();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseportalstmtContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public CloseportalstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeportalstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCloseportalstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCloseportalstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCloseportalstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseportalstmtContext closeportalstmt() throws RecognitionException {
		CloseportalstmtContext _localctx = new CloseportalstmtContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_closeportalstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2737);
			match(CLOSE);
			setState(2740);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(2738);
				cursor_name();
				}
				break;
			case ALL:
				{
				setState(2739);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopystmtContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public Opt_binaryContext opt_binary() {
			return getRuleContext(Opt_binaryContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Copy_fromContext copy_from() {
			return getRuleContext(Copy_fromContext.class,0);
		}
		public Opt_programContext opt_program() {
			return getRuleContext(Opt_programContext.class,0);
		}
		public Copy_file_nameContext copy_file_name() {
			return getRuleContext(Copy_file_nameContext.class,0);
		}
		public Copy_delimiterContext copy_delimiter() {
			return getRuleContext(Copy_delimiterContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public CopystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopystmtContext copystmt() throws RecognitionException {
		CopystmtContext _localctx = new CopystmtContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_copystmt);
		try {
			setState(2764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2742);
				match(COPY);
				setState(2743);
				opt_binary();
				setState(2744);
				qualified_name();
				setState(2745);
				opt_column_list();
				setState(2746);
				copy_from();
				setState(2747);
				opt_program();
				setState(2748);
				copy_file_name();
				setState(2749);
				copy_delimiter();
				setState(2750);
				opt_with();
				setState(2751);
				copy_options();
				setState(2752);
				where_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2754);
				match(COPY);
				setState(2755);
				match(OPEN_PAREN);
				setState(2756);
				preparablestmt();
				setState(2757);
				match(CLOSE_PAREN);
				setState(2758);
				match(TO);
				setState(2759);
				opt_program();
				setState(2760);
				copy_file_name();
				setState(2761);
				opt_with();
				setState(2762);
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_fromContext copy_from() throws RecognitionException {
		Copy_fromContext _localctx = new Copy_fromContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_copy_from);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2766);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_programContext extends ParserRuleContext {
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public Opt_programContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_program(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_program(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_program(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_programContext opt_program() throws RecognitionException {
		Opt_programContext _localctx = new Opt_programContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_opt_program);
		try {
			setState(2770);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROGRAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(2768);
				match(PROGRAM);
				}
				break;
			case STDIN:
			case STDOUT:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_file_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_file_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_file_nameContext copy_file_name() throws RecognitionException {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_copy_file_name);
		try {
			setState(2775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2772);
				sconst();
				}
				break;
			case STDIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2773);
				match(STDIN);
				}
				break;
			case STDOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2774);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_optionsContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_copy_options);
		try {
			setState(2782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2777);
				copy_opt_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2778);
				match(OPEN_PAREN);
				setState(2779);
				copy_generic_opt_list();
				setState(2780);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_opt_listContext extends ParserRuleContext {
		public List<Copy_opt_itemContext> copy_opt_item() {
			return getRuleContexts(Copy_opt_itemContext.class);
		}
		public Copy_opt_itemContext copy_opt_item(int i) {
			return getRuleContext(Copy_opt_itemContext.class,i);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_listContext copy_opt_list() throws RecognitionException {
		Copy_opt_listContext _localctx = new Copy_opt_listContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_copy_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (NULL_P - 89)) | (1L << (BINARY - 89)) | (1L << (FREEZE - 89)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (CSV - 186)) | (1L << (DELIMITER - 186)) | (1L << (ENCODING - 186)) | (1L << (ESCAPE - 186)) | (1L << (FORCE - 186)) | (1L << (HEADER_P - 186)))) != 0) || _la==QUOTE) {
				{
				{
				setState(2784);
				copy_opt_item();
				}
				}
				setState(2789);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_opt_itemContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_itemContext copy_opt_item() throws RecognitionException {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_copy_opt_item);
		try {
			setState(2825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2790);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2791);
				match(FREEZE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2792);
				match(DELIMITER);
				setState(2793);
				opt_as();
				setState(2794);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2796);
				match(NULL_P);
				setState(2797);
				opt_as();
				setState(2798);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2800);
				match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2801);
				match(HEADER_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2802);
				match(QUOTE);
				setState(2803);
				opt_as();
				setState(2804);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2806);
				match(ESCAPE);
				setState(2807);
				opt_as();
				setState(2808);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2810);
				match(FORCE);
				setState(2811);
				match(QUOTE);
				setState(2812);
				columnlist();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2813);
				match(FORCE);
				setState(2814);
				match(QUOTE);
				setState(2815);
				match(STAR);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2816);
				match(FORCE);
				setState(2817);
				match(NOT);
				setState(2818);
				match(NULL_P);
				setState(2819);
				columnlist();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2820);
				match(FORCE);
				setState(2821);
				match(NULL_P);
				setState(2822);
				columnlist();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2823);
				match(ENCODING);
				setState(2824);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_binaryContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_binary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_binary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_binary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_binary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_binaryContext opt_binary() throws RecognitionException {
		Opt_binaryContext _localctx = new Opt_binaryContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_opt_binary);
		try {
			setState(2829);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2827);
				match(BINARY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_delimiterContext extends ParserRuleContext {
		public Opt_usingContext opt_using() {
			return getRuleContext(Opt_usingContext.class,0);
		}
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_delimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_delimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_delimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_delimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_delimiterContext copy_delimiter() throws RecognitionException {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_copy_delimiter);
		try {
			setState(2836);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
			case DELIMITERS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2831);
				opt_using();
				setState(2832);
				match(DELIMITERS);
				setState(2833);
				sconst();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NULL_P:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case BINARY:
			case FREEZE:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case CSV:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DELIMITER:
			case DISCARD:
			case DROP:
			case ENCODING:
			case ESCAPE:
			case EXECUTE:
			case EXPLAIN:
			case FORCE:
			case HEADER_P:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case QUOTE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_usingContext opt_using() throws RecognitionException {
		Opt_usingContext _localctx = new Opt_usingContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_opt_using);
		try {
			setState(2840);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2838);
				match(USING);
				}
				break;
			case DELIMITERS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_listContext extends ParserRuleContext {
		public List<Copy_generic_opt_elemContext> copy_generic_opt_elem() {
			return getRuleContexts(Copy_generic_opt_elemContext.class);
		}
		public Copy_generic_opt_elemContext copy_generic_opt_elem(int i) {
			return getRuleContext(Copy_generic_opt_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_listContext copy_generic_opt_list() throws RecognitionException {
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_copy_generic_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2842);
			copy_generic_opt_elem();
			setState(2847);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2843);
				match(COMMA);
				setState(2844);
				copy_generic_opt_elem();
				}
				}
				setState(2849);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return getRuleContext(Copy_generic_opt_argContext.class,0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_elemContext copy_generic_opt_elem() throws RecognitionException {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_copy_generic_opt_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2850);
			collabel();
			setState(2851);
			copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_argContext copy_generic_opt_arg() throws RecognitionException {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_copy_generic_opt_arg);
		try {
			setState(2861);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2853);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(2854);
				numericonly();
				}
				break;
			case STAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(2855);
				match(STAR);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				setState(2856);
				match(OPEN_PAREN);
				setState(2857);
				copy_generic_opt_arg_list();
				setState(2858);
				match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_listContext extends ParserRuleContext {
		public List<Copy_generic_opt_arg_list_itemContext> copy_generic_opt_arg_list_item() {
			return getRuleContexts(Copy_generic_opt_arg_list_itemContext.class);
		}
		public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item(int i) {
			return getRuleContext(Copy_generic_opt_arg_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() throws RecognitionException {
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_copy_generic_opt_arg_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2863);
			copy_generic_opt_arg_list_item();
			setState(2868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2864);
				match(COMMA);
				setState(2865);
				copy_generic_opt_arg_list_item();
				}
				}
				setState(2870);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() throws RecognitionException {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_copy_generic_opt_arg_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2871);
			opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public OptpartitionspecContext optpartitionspec() {
			return getRuleContext(OptpartitionspecContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatestmtContext createstmt() throws RecognitionException {
		CreatestmtContext _localctx = new CreatestmtContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_createstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2873);
			match(CREATE);
			setState(2874);
			opttemp();
			setState(2875);
			match(TABLE);
			setState(2879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				setState(2876);
				match(IF_P);
				setState(2877);
				match(NOT);
				setState(2878);
				match(EXISTS);
				}
				break;
			}
			setState(2881);
			qualified_name();
			setState(2912);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				{
				setState(2882);
				match(OPEN_PAREN);
				setState(2883);
				opttableelementlist();
				setState(2884);
				match(CLOSE_PAREN);
				setState(2885);
				optinherit();
				setState(2886);
				optpartitionspec();
				setState(2887);
				table_access_method_clause();
				setState(2888);
				optwith();
				setState(2889);
				oncommitoption();
				setState(2890);
				opttablespace();
				}
				break;
			case OF:
				{
				setState(2892);
				match(OF);
				setState(2893);
				any_name();
				setState(2894);
				opttypedtableelementlist();
				setState(2895);
				optpartitionspec();
				setState(2896);
				table_access_method_clause();
				setState(2897);
				optwith();
				setState(2898);
				oncommitoption();
				setState(2899);
				opttablespace();
				}
				break;
			case PARTITION:
				{
				setState(2901);
				match(PARTITION);
				setState(2902);
				match(OF);
				setState(2903);
				qualified_name();
				setState(2904);
				opttypedtableelementlist();
				setState(2905);
				partitionboundspec();
				setState(2906);
				optpartitionspec();
				setState(2907);
				table_access_method_clause();
				setState(2908);
				optwith();
				setState(2909);
				oncommitoption();
				setState(2910);
				opttablespace();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttempContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OpttempContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttemp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttemp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttemp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttemp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttempContext opttemp() throws RecognitionException {
		OpttempContext _localctx = new OpttempContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_opttemp);
		int _la;
		try {
			setState(2922);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TEMPORARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2914);
				match(TEMPORARY);
				}
				break;
			case TEMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2915);
				match(TEMP);
				}
				break;
			case LOCAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2916);
				match(LOCAL);
				setState(2917);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case GLOBAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2918);
				match(GLOBAL);
				setState(2919);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				enterOuterAlt(_localctx, 5);
				{
				setState(2920);
				match(UNLOGGED);
				}
				break;
			case TABLE:
			case RECURSIVE:
			case SEQUENCE:
			case VIEW:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttableelementlistContext extends ParserRuleContext {
		public TableelementlistContext tableelementlist() {
			return getRuleContext(TableelementlistContext.class,0);
		}
		public OpttableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttableelementlistContext opttableelementlist() throws RecognitionException {
		OpttableelementlistContext _localctx = new OpttableelementlistContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_opttableelementlist);
		try {
			setState(2926);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case FOREIGN:
			case PRIMARY:
			case TABLE:
			case UNIQUE:
			case IS:
			case LIKE:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2924);
				tableelementlist();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttypedtableelementlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TypedtableelementlistContext typedtableelementlist() {
			return getRuleContext(TypedtableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttypedtableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttypedtableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttypedtableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttypedtableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttypedtableelementlistContext opttypedtableelementlist() throws RecognitionException {
		OpttypedtableelementlistContext _localctx = new OpttypedtableelementlistContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_opttypedtableelementlist);
		try {
			setState(2933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2928);
				match(OPEN_PAREN);
				setState(2929);
				typedtableelementlist();
				setState(2930);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableelementlistContext extends ParserRuleContext {
		public List<TableelementContext> tableelement() {
			return getRuleContexts(TableelementContext.class);
		}
		public TableelementContext tableelement(int i) {
			return getRuleContext(TableelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableelementlistContext tableelementlist() throws RecognitionException {
		TableelementlistContext _localctx = new TableelementlistContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_tableelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2935);
			tableelement();
			setState(2940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2936);
				match(COMMA);
				setState(2937);
				tableelement();
				}
				}
				setState(2942);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedtableelementlistContext extends ParserRuleContext {
		public List<TypedtableelementContext> typedtableelement() {
			return getRuleContexts(TypedtableelementContext.class);
		}
		public TypedtableelementContext typedtableelement(int i) {
			return getRuleContext(TypedtableelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypedtableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypedtableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypedtableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableelementlistContext typedtableelementlist() throws RecognitionException {
		TypedtableelementlistContext _localctx = new TypedtableelementlistContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_typedtableelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2943);
			typedtableelement();
			setState(2948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2944);
				match(COMMA);
				setState(2945);
				typedtableelement();
				}
				}
				setState(2950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableelementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TablelikeclauseContext tablelikeclause() {
			return getRuleContext(TablelikeclauseContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableelementContext tableelement() throws RecognitionException {
		TableelementContext _localctx = new TableelementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_tableelement);
		try {
			setState(2954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2951);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2952);
				tablelikeclause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2953);
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedtableelementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TypedtableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypedtableelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypedtableelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypedtableelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableelementContext typedtableelement() throws RecognitionException {
		TypedtableelementContext _localctx = new TypedtableelementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_typedtableelement);
		try {
			setState(2958);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2956);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2957);
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_columnDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			colid();
			setState(2961);
			typename();
			setState(2962);
			create_generic_options();
			setState(2963);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_columnOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2965);
			colid();
			setState(2968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2966);
				match(WITH);
				setState(2967);
				match(OPTIONS);
				}
			}

			setState(2970);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColquallistContext extends ParserRuleContext {
		public List<ColconstraintContext> colconstraint() {
			return getRuleContexts(ColconstraintContext.class);
		}
		public ColconstraintContext colconstraint(int i) {
			return getRuleContext(ColconstraintContext.class,i);
		}
		public ColquallistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colquallist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColquallist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColquallist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColquallist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColquallistContext colquallist() throws RecognitionException {
		ColquallistContext _localctx = new ColquallistContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_colquallist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHECK) | (1L << COLLATE) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DEFERRABLE))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (INITIALLY - 75)) | (1L << (NOT - 75)) | (1L << (NULL_P - 75)) | (1L << (PRIMARY - 75)) | (1L << (REFERENCES - 75)) | (1L << (UNIQUE - 75)))) != 0) || _la==GENERATED) {
				{
				{
				setState(2972);
				colconstraint();
				}
				}
				setState(2977);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColconstraintelemContext colconstraintelem() {
			return getRuleContext(ColconstraintelemContext.class,0);
		}
		public ConstraintattrContext constraintattr() {
			return getRuleContext(ConstraintattrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ColconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColconstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColconstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColconstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintContext colconstraint() throws RecognitionException {
		ColconstraintContext _localctx = new ColconstraintContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_colconstraint);
		try {
			setState(2986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2978);
				match(CONSTRAINT);
				setState(2979);
				name();
				setState(2980);
				colconstraintelem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2982);
				colconstraintelem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2983);
				constraintattr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2984);
				match(COLLATE);
				setState(2985);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColconstraintelemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_no_inheritContext opt_no_inherit() {
			return getRuleContext(Opt_no_inheritContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ColconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColconstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColconstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColconstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintelemContext colconstraintelem() throws RecognitionException {
		ColconstraintelemContext _localctx = new ColconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_colconstraintelem);
		try {
			setState(3026);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2988);
				match(NOT);
				setState(2989);
				match(NULL_P);
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2990);
				match(NULL_P);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2991);
				match(UNIQUE);
				setState(2992);
				opt_definition();
				setState(2993);
				optconstablespace();
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 4);
				{
				setState(2995);
				match(PRIMARY);
				setState(2996);
				match(KEY);
				setState(2997);
				opt_definition();
				setState(2998);
				optconstablespace();
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 5);
				{
				setState(3000);
				match(CHECK);
				setState(3001);
				match(OPEN_PAREN);
				setState(3002);
				a_expr();
				setState(3003);
				match(CLOSE_PAREN);
				setState(3004);
				opt_no_inherit();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3006);
				match(DEFAULT);
				setState(3007);
				b_expr(0);
				}
				break;
			case GENERATED:
				enterOuterAlt(_localctx, 7);
				{
				setState(3008);
				match(GENERATED);
				setState(3009);
				generated_when();
				setState(3010);
				match(AS);
				setState(3018);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IDENTITY_P:
					{
					setState(3011);
					match(IDENTITY_P);
					setState(3012);
					optparenthesizedseqoptlist();
					}
					break;
				case OPEN_PAREN:
					{
					setState(3013);
					match(OPEN_PAREN);
					setState(3014);
					a_expr();
					setState(3015);
					match(CLOSE_PAREN);
					setState(3016);
					match(STORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 8);
				{
				setState(3020);
				match(REFERENCES);
				setState(3021);
				qualified_name();
				setState(3022);
				opt_column_list();
				setState(3023);
				key_match();
				setState(3024);
				key_actions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generated_whenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Generated_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generated_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGenerated_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGenerated_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGenerated_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generated_whenContext generated_when() throws RecognitionException {
		Generated_whenContext _localctx = new Generated_whenContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_generated_when);
		try {
			setState(3031);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3028);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3029);
				match(BY);
				setState(3030);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintattrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public ConstraintattrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattrContext constraintattr() throws RecognitionException {
		ConstraintattrContext _localctx = new ConstraintattrContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_constraintattr);
		int _la;
		try {
			setState(3038);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3033);
				match(DEFERRABLE);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3034);
				match(NOT);
				setState(3035);
				match(DEFERRABLE);
				}
				break;
			case INITIALLY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3036);
				match(INITIALLY);
				setState(3037);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablelikeclauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TablelikeoptionlistContext tablelikeoptionlist() {
			return getRuleContext(TablelikeoptionlistContext.class,0);
		}
		public TablelikeclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeclauseContext tablelikeclause() throws RecognitionException {
		TablelikeclauseContext _localctx = new TablelikeclauseContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_tablelikeclause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3040);
			match(LIKE);
			setState(3041);
			qualified_name();
			setState(3042);
			tablelikeoptionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablelikeoptionlistContext extends ParserRuleContext {
		public List<TablelikeoptionContext> tablelikeoption() {
			return getRuleContexts(TablelikeoptionContext.class);
		}
		public TablelikeoptionContext tablelikeoption(int i) {
			return getRuleContext(TablelikeoptionContext.class,i);
		}
		public List<TerminalNode> INCLUDING() { return getTokens(PostgreSQLParser.INCLUDING); }
		public TerminalNode INCLUDING(int i) {
			return getToken(PostgreSQLParser.INCLUDING, i);
		}
		public List<TerminalNode> EXCLUDING() { return getTokens(PostgreSQLParser.EXCLUDING); }
		public TerminalNode EXCLUDING(int i) {
			return getToken(PostgreSQLParser.EXCLUDING, i);
		}
		public TablelikeoptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoptionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeoptionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeoptionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeoptionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeoptionlistContext tablelikeoptionlist() throws RecognitionException {
		TablelikeoptionlistContext _localctx = new TablelikeoptionlistContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_tablelikeoptionlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCLUDING || _la==INCLUDING) {
				{
				{
				setState(3044);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3045);
				tablelikeoption();
				}
				}
				setState(3050);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablelikeoptionContext extends ParserRuleContext {
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TablelikeoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeoption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeoption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeoption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeoptionContext tablelikeoption() throws RecognitionException {
		TablelikeoptionContext _localctx = new TablelikeoptionContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_tablelikeoption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3051);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (COMMENTS - 175)) | (1L << (CONSTRAINTS - 175)) | (1L << (DEFAULTS - 175)) | (1L << (IDENTITY_P - 175)))) != 0) || _la==INDEXES || _la==STATISTICS || _la==STORAGE || _la==GENERATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintelemContext constraintelem() {
			return getRuleContext(ConstraintelemContext.class,0);
		}
		public TableconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableconstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableconstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableconstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableconstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableconstraintContext tableconstraint() throws RecognitionException {
		TableconstraintContext _localctx = new TableconstraintContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_tableconstraint);
		try {
			setState(3058);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3053);
				match(CONSTRAINT);
				setState(3054);
				name();
				setState(3055);
				constraintelem();
				}
				break;
			case CHECK:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
			case EXCLUDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3057);
				constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintelemContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public Opt_c_includeContext opt_c_include() {
			return getRuleContext(Opt_c_includeContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public ExistingindexContext existingindex() {
			return getRuleContext(ExistingindexContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public ExclusionconstraintlistContext exclusionconstraintlist() {
			return getRuleContext(ExclusionconstraintlistContext.class,0);
		}
		public ExclusionwhereclauseContext exclusionwhereclause() {
			return getRuleContext(ExclusionwhereclauseContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ConstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintelemContext constraintelem() throws RecognitionException {
		ConstraintelemContext _localctx = new ConstraintelemContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_constraintelem);
		try {
			setState(3118);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(3060);
				match(CHECK);
				setState(3061);
				match(OPEN_PAREN);
				setState(3062);
				a_expr();
				setState(3063);
				match(CLOSE_PAREN);
				setState(3064);
				constraintattributespec();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3066);
				match(UNIQUE);
				setState(3078);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(3067);
					match(OPEN_PAREN);
					setState(3068);
					columnlist();
					setState(3069);
					match(CLOSE_PAREN);
					setState(3070);
					opt_c_include();
					setState(3071);
					opt_definition();
					setState(3072);
					optconstablespace();
					setState(3073);
					constraintattributespec();
					}
					break;
				case USING:
					{
					setState(3075);
					existingindex();
					setState(3076);
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3080);
				match(PRIMARY);
				setState(3081);
				match(KEY);
				setState(3093);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(3082);
					match(OPEN_PAREN);
					setState(3083);
					columnlist();
					setState(3084);
					match(CLOSE_PAREN);
					setState(3085);
					opt_c_include();
					setState(3086);
					opt_definition();
					setState(3087);
					optconstablespace();
					setState(3088);
					constraintattributespec();
					}
					break;
				case USING:
					{
					setState(3090);
					existingindex();
					setState(3091);
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EXCLUDE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3095);
				match(EXCLUDE);
				setState(3096);
				access_method_clause();
				setState(3097);
				match(OPEN_PAREN);
				setState(3098);
				exclusionconstraintlist();
				setState(3099);
				match(CLOSE_PAREN);
				setState(3100);
				opt_c_include();
				setState(3101);
				opt_definition();
				setState(3102);
				optconstablespace();
				setState(3103);
				exclusionwhereclause();
				setState(3104);
				constraintattributespec();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 5);
				{
				setState(3106);
				match(FOREIGN);
				setState(3107);
				match(KEY);
				setState(3108);
				match(OPEN_PAREN);
				setState(3109);
				columnlist();
				setState(3110);
				match(CLOSE_PAREN);
				setState(3111);
				match(REFERENCES);
				setState(3112);
				qualified_name();
				setState(3113);
				opt_column_list();
				setState(3114);
				key_match();
				setState(3115);
				key_actions();
				setState(3116);
				constraintattributespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_no_inheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no_inherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_no_inherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_no_inherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_no_inherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_no_inheritContext opt_no_inherit() throws RecognitionException {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_opt_no_inherit);
		try {
			setState(3123);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3120);
				match(NO);
				setState(3121);
				match(INHERIT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_column_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_column_listContext opt_column_list() throws RecognitionException {
		Opt_column_listContext _localctx = new Opt_column_listContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_opt_column_list);
		try {
			setState(3130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3125);
				match(OPEN_PAREN);
				setState(3126);
				columnlist();
				setState(3127);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnlistContext extends ParserRuleContext {
		public List<ColumnElemContext> columnElem() {
			return getRuleContexts(ColumnElemContext.class);
		}
		public ColumnElemContext columnElem(int i) {
			return getRuleContext(ColumnElemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public ColumnlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnlistContext columnlist() throws RecognitionException {
		ColumnlistContext _localctx = new ColumnlistContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_columnlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3132);
			columnElem();
			setState(3137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3133);
				match(COMMA);
				setState(3134);
				columnElem();
				}
				}
				setState(3139);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3140);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_c_includeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_c_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_c_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_c_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_c_include(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_c_include(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_c_includeContext opt_c_include() throws RecognitionException {
		Opt_c_includeContext _localctx = new Opt_c_includeContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_opt_c_include);
		try {
			setState(3148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCLUDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3142);
				match(INCLUDE);
				setState(3143);
				match(OPEN_PAREN);
				setState(3144);
				columnlist();
				setState(3145);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case USING:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_matchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_match(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_matchContext key_match() throws RecognitionException {
		Key_matchContext _localctx = new Key_matchContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_key_match);
		int _la;
		try {
			setState(3153);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3150);
				match(MATCH);
				setState(3151);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case ON:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionconstraintlistContext extends ParserRuleContext {
		public List<ExclusionconstraintelemContext> exclusionconstraintelem() {
			return getRuleContexts(ExclusionconstraintelemContext.class);
		}
		public ExclusionconstraintelemContext exclusionconstraintelem(int i) {
			return getRuleContext(ExclusionconstraintelemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public ExclusionconstraintlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionconstraintlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionconstraintlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionconstraintlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintlistContext exclusionconstraintlist() throws RecognitionException {
		ExclusionconstraintlistContext _localctx = new ExclusionconstraintlistContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_exclusionconstraintlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3155);
			exclusionconstraintelem();
			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3156);
				match(COMMA);
				setState(3157);
				exclusionconstraintelem();
				}
				}
				setState(3162);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionconstraintelemContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionconstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionconstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionconstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintelemContext exclusionconstraintelem() throws RecognitionException {
		ExclusionconstraintelemContext _localctx = new ExclusionconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_exclusionconstraintelem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3163);
			index_elem();
			setState(3164);
			match(WITH);
			setState(3171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(3165);
				any_operator();
				}
				break;
			case 2:
				{
				setState(3166);
				match(OPERATOR);
				setState(3167);
				match(OPEN_PAREN);
				setState(3168);
				any_operator();
				setState(3169);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionwhereclauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionwhereclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionwhereclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionwhereclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionwhereclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionwhereclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionwhereclauseContext exclusionwhereclause() throws RecognitionException {
		ExclusionwhereclauseContext _localctx = new ExclusionwhereclauseContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_exclusionwhereclause);
		try {
			setState(3179);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3173);
				match(WHERE);
				setState(3174);
				match(OPEN_PAREN);
				setState(3175);
				a_expr();
				setState(3176);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionsContext extends ParserRuleContext {
		public Key_updateContext key_update() {
			return getRuleContext(Key_updateContext.class,0);
		}
		public Key_deleteContext key_delete() {
			return getRuleContext(Key_deleteContext.class,0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_actions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_actions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionsContext key_actions() throws RecognitionException {
		Key_actionsContext _localctx = new Key_actionsContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_key_actions);
		try {
			setState(3190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3181);
				key_update();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3182);
				key_delete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3183);
				key_update();
				setState(3184);
				key_delete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3186);
				key_delete();
				setState(3187);
				key_update();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_updateContext key_update() throws RecognitionException {
		Key_updateContext _localctx = new Key_updateContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_key_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3192);
			match(ON);
			setState(3193);
			match(UPDATE);
			setState(3194);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_deleteContext key_delete() throws RecognitionException {
		Key_deleteContext _localctx = new Key_deleteContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_key_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3196);
			match(ON);
			setState(3197);
			match(DELETE_P);
			setState(3198);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionContext key_action() throws RecognitionException {
		Key_actionContext _localctx = new Key_actionContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_key_action);
		int _la;
		try {
			setState(3206);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3200);
				match(NO);
				setState(3201);
				match(ACTION);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3202);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3203);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(3204);
				match(SET);
				setState(3205);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NULL_P) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptinheritContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optinherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptinherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptinherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptinherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptinheritContext optinherit() throws RecognitionException {
		OptinheritContext _localctx = new OptinheritContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_optinherit);
		try {
			setState(3214);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INHERITS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3208);
				match(INHERITS);
				setState(3209);
				match(OPEN_PAREN);
				setState(3210);
				qualified_name_list();
				setState(3211);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PARTITION:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SERVER:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptpartitionspecContext extends ParserRuleContext {
		public PartitionspecContext partitionspec() {
			return getRuleContext(PartitionspecContext.class,0);
		}
		public OptpartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optpartitionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptpartitionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptpartitionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptpartitionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptpartitionspecContext optpartitionspec() throws RecognitionException {
		OptpartitionspecContext _localctx = new OptpartitionspecContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_optpartitionspec);
		try {
			setState(3218);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(3216);
				partitionspec();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionspecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Part_paramsContext part_params() {
			return getRuleContext(Part_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartitionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartitionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartitionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionspecContext partitionspec() throws RecognitionException {
		PartitionspecContext _localctx = new PartitionspecContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_partitionspec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3220);
			match(PARTITION);
			setState(3221);
			match(BY);
			setState(3222);
			colid();
			setState(3223);
			match(OPEN_PAREN);
			setState(3224);
			part_params();
			setState(3225);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Part_paramsContext extends ParserRuleContext {
		public List<Part_elemContext> part_elem() {
			return getRuleContexts(Part_elemContext.class);
		}
		public Part_elemContext part_elem(int i) {
			return getRuleContext(Part_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Part_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPart_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPart_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPart_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Part_paramsContext part_params() throws RecognitionException {
		Part_paramsContext _localctx = new Part_paramsContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_part_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3227);
			part_elem();
			setState(3232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3228);
				match(COMMA);
				setState(3229);
				part_elem();
				}
				}
				setState(3234);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Part_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Part_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPart_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPart_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPart_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Part_elemContext part_elem() throws RecognitionException {
		Part_elemContext _localctx = new Part_elemContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_part_elem);
		try {
			setState(3249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3235);
				colid();
				setState(3236);
				opt_collate();
				setState(3237);
				opt_class();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3239);
				func_expr_windowless();
				setState(3240);
				opt_collate();
				setState(3241);
				opt_class();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3243);
				match(OPEN_PAREN);
				setState(3244);
				a_expr();
				setState(3245);
				match(CLOSE_PAREN);
				setState(3246);
				opt_collate();
				setState(3247);
				opt_class();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Table_access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_access_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_access_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_access_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_access_method_clauseContext table_access_method_clause() throws RecognitionException {
		Table_access_method_clauseContext _localctx = new Table_access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_table_access_method_clause);
		try {
			setState(3254);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3251);
				match(USING);
				setState(3252);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptwithContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public OptwithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optwith; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptwith(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptwith(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptwith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptwithContext optwith() throws RecognitionException {
		OptwithContext _localctx = new OptwithContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_optwith);
		try {
			setState(3261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3256);
				match(WITH);
				setState(3257);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3258);
				match(WITHOUT);
				setState(3259);
				match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OncommitoptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public OncommitoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oncommitoption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOncommitoption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOncommitoption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOncommitoption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OncommitoptionContext oncommitoption() throws RecognitionException {
		OncommitoptionContext _localctx = new OncommitoptionContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_oncommitoption);
		try {
			setState(3273);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3263);
				match(ON);
				setState(3264);
				match(COMMIT);
				setState(3270);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DROP:
					{
					setState(3265);
					match(DROP);
					}
					break;
				case DELETE_P:
					{
					setState(3266);
					match(DELETE_P);
					setState(3267);
					match(ROWS);
					}
					break;
				case PRESERVE:
					{
					setState(3268);
					match(PRESERVE);
					setState(3269);
					match(ROWS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablespaceContext opttablespace() throws RecognitionException {
		OpttablespaceContext _localctx = new OpttablespaceContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_opttablespace);
		try {
			setState(3278);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3275);
				match(TABLESPACE);
				setState(3276);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptconstablespaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptconstablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptconstablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptconstablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptconstablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptconstablespaceContext optconstablespace() throws RecognitionException {
		OptconstablespaceContext _localctx = new OptconstablespaceContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_optconstablespace);
		try {
			setState(3285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3280);
				match(USING);
				setState(3281);
				match(INDEX);
				setState(3282);
				match(TABLESPACE);
				setState(3283);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingindexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistingindexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingindex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExistingindex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExistingindex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExistingindex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingindexContext existingindex() throws RecognitionException {
		ExistingindexContext _localctx = new ExistingindexContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_existingindex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3287);
			match(USING);
			setState(3288);
			match(INDEX);
			setState(3289);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatestatsstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstatsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatestatsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatestatsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatestatsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatestatsstmtContext createstatsstmt() throws RecognitionException {
		CreatestatsstmtContext _localctx = new CreatestatsstmtContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_createstatsstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3291);
			match(CREATE);
			setState(3292);
			match(STATISTICS);
			setState(3296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				setState(3293);
				match(IF_P);
				setState(3294);
				match(NOT);
				setState(3295);
				match(EXISTS);
				}
				break;
			}
			setState(3298);
			any_name();
			setState(3299);
			opt_name_list();
			setState(3300);
			match(ON);
			setState(3301);
			expr_list();
			setState(3302);
			match(FROM);
			setState(3303);
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterstatsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public List<TerminalNode> STATISTICS() { return getTokens(PostgreSQLParser.STATISTICS); }
		public TerminalNode STATISTICS(int i) {
			return getToken(PostgreSQLParser.STATISTICS, i);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterstatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterstatsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterstatsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterstatsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterstatsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterstatsstmtContext alterstatsstmt() throws RecognitionException {
		AlterstatsstmtContext _localctx = new AlterstatsstmtContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_alterstatsstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3305);
			match(ALTER);
			setState(3306);
			match(STATISTICS);
			setState(3309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(3307);
				match(IF_P);
				setState(3308);
				match(EXISTS);
				}
				break;
			}
			setState(3311);
			any_name();
			setState(3312);
			match(SET);
			setState(3313);
			match(STATISTICS);
			setState(3314);
			signediconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateasstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateasstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createasstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateasstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateasstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateasstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateasstmtContext createasstmt() throws RecognitionException {
		CreateasstmtContext _localctx = new CreateasstmtContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_createasstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3316);
			match(CREATE);
			setState(3317);
			opttemp();
			setState(3318);
			match(TABLE);
			setState(3322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(3319);
				match(IF_P);
				setState(3320);
				match(NOT);
				setState(3321);
				match(EXISTS);
				}
				break;
			}
			setState(3324);
			create_as_target();
			setState(3325);
			match(AS);
			setState(3326);
			selectstmt();
			setState(3327);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_as_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_as_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_as_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_as_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_as_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_as_targetContext create_as_target() throws RecognitionException {
		Create_as_targetContext _localctx = new Create_as_targetContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_create_as_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3329);
			qualified_name();
			setState(3330);
			opt_column_list();
			setState(3331);
			table_access_method_clause();
			setState(3332);
			optwith();
			setState(3333);
			oncommitoption();
			setState(3334);
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_dataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_dataContext opt_with_data() throws RecognitionException {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_opt_with_data);
		try {
			setState(3343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3336);
				match(WITH);
				setState(3340);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATA_P:
					{
					setState(3337);
					match(DATA_P);
					}
					break;
				case NO:
					{
					setState(3338);
					match(NO);
					setState(3339);
					match(DATA_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatematviewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OptnologContext optnolog() {
			return getRuleContext(OptnologContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Create_mv_targetContext create_mv_target() {
			return getRuleContext(Create_mv_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatematviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creatematviewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatematviewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatematviewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatematviewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatematviewstmtContext creatematviewstmt() throws RecognitionException {
		CreatematviewstmtContext _localctx = new CreatematviewstmtContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_creatematviewstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3345);
			match(CREATE);
			setState(3346);
			optnolog();
			setState(3347);
			match(MATERIALIZED);
			setState(3348);
			match(VIEW);
			setState(3352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				setState(3349);
				match(IF_P);
				setState(3350);
				match(NOT);
				setState(3351);
				match(EXISTS);
				}
				break;
			}
			setState(3354);
			create_mv_target();
			setState(3355);
			match(AS);
			setState(3356);
			selectstmt();
			setState(3357);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_mv_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_mv_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mv_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_mv_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_mv_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_mv_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_mv_targetContext create_mv_target() throws RecognitionException {
		Create_mv_targetContext _localctx = new Create_mv_targetContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_create_mv_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3359);
			qualified_name();
			setState(3360);
			opt_column_list();
			setState(3361);
			table_access_method_clause();
			setState(3362);
			opt_reloptions();
			setState(3363);
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptnologContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OptnologContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optnolog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptnolog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptnolog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptnolog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptnologContext optnolog() throws RecognitionException {
		OptnologContext _localctx = new OptnologContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_optnolog);
		try {
			setState(3367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNLOGGED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3365);
				match(UNLOGGED);
				}
				break;
			case MATERIALIZED:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshmatviewstmtContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public RefreshmatviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshmatviewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRefreshmatviewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRefreshmatviewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRefreshmatviewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshmatviewstmtContext refreshmatviewstmt() throws RecognitionException {
		RefreshmatviewstmtContext _localctx = new RefreshmatviewstmtContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_refreshmatviewstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3369);
			match(REFRESH);
			setState(3370);
			match(MATERIALIZED);
			setState(3371);
			match(VIEW);
			setState(3372);
			opt_concurrently();
			setState(3373);
			qualified_name();
			setState(3374);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateseqstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptseqoptlistContext optseqoptlist() {
			return getRuleContext(OptseqoptlistContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createseqstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateseqstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateseqstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateseqstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateseqstmtContext createseqstmt() throws RecognitionException {
		CreateseqstmtContext _localctx = new CreateseqstmtContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_createseqstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3376);
			match(CREATE);
			setState(3377);
			opttemp();
			setState(3378);
			match(SEQUENCE);
			setState(3382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(3379);
				match(IF_P);
				setState(3380);
				match(NOT);
				setState(3381);
				match(EXISTS);
				}
				break;
			}
			setState(3384);
			qualified_name();
			setState(3385);
			optseqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterseqstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterseqstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterseqstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterseqstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterseqstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterseqstmtContext alterseqstmt() throws RecognitionException {
		AlterseqstmtContext _localctx = new AlterseqstmtContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_alterseqstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3387);
			match(ALTER);
			setState(3388);
			match(SEQUENCE);
			setState(3391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(3389);
				match(IF_P);
				setState(3390);
				match(EXISTS);
				}
				break;
			}
			setState(3393);
			qualified_name();
			setState(3394);
			seqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptseqoptlistContext extends ParserRuleContext {
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public OptseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optseqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptseqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptseqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptseqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptseqoptlistContext optseqoptlist() throws RecognitionException {
		OptseqoptlistContext _localctx = new OptseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_optseqoptlist);
		try {
			setState(3398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3396);
				seqoptlist();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptparenthesizedseqoptlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptparenthesizedseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optparenthesizedseqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptparenthesizedseqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptparenthesizedseqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptparenthesizedseqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() throws RecognitionException {
		OptparenthesizedseqoptlistContext _localctx = new OptparenthesizedseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_optparenthesizedseqoptlist);
		try {
			setState(3405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3400);
				match(OPEN_PAREN);
				setState(3401);
				seqoptlist();
				setState(3402);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqoptlistContext extends ParserRuleContext {
		public List<SeqoptelemContext> seqoptelem() {
			return getRuleContexts(SeqoptelemContext.class);
		}
		public SeqoptelemContext seqoptelem(int i) {
			return getRuleContext(SeqoptelemContext.class,i);
		}
		public SeqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqoptlistContext seqoptlist() throws RecognitionException {
		SeqoptlistContext _localctx = new SeqoptlistContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_seqoptlist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3408); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3407);
					seqoptelem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3410); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,138,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqoptelemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public Opt_byContext opt_by() {
			return getRuleContext(Opt_byContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public SeqoptelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeqoptelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeqoptelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeqoptelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqoptelemContext seqoptelem() throws RecognitionException {
		SeqoptelemContext _localctx = new SeqoptelemContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_seqoptelem);
		int _la;
		try {
			setState(3442);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3412);
				match(AS);
				setState(3413);
				simpletypename();
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3414);
				match(CACHE);
				setState(3415);
				numericonly();
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3416);
				match(CYCLE);
				}
				break;
			case INCREMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3417);
				match(INCREMENT);
				setState(3418);
				opt_by();
				setState(3419);
				numericonly();
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3421);
				match(MAXVALUE);
				setState(3422);
				numericonly();
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3423);
				match(MINVALUE);
				setState(3424);
				numericonly();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 7);
				{
				setState(3425);
				match(NO);
				setState(3426);
				_la = _input.LA(1);
				if ( !(_la==CYCLE || _la==MAXVALUE || _la==MINVALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OWNED:
				enterOuterAlt(_localctx, 8);
				{
				setState(3427);
				match(OWNED);
				setState(3428);
				match(BY);
				setState(3429);
				any_name();
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 9);
				{
				setState(3430);
				match(SEQUENCE);
				setState(3431);
				match(NAME_P);
				setState(3432);
				any_name();
				}
				break;
			case START:
				enterOuterAlt(_localctx, 10);
				{
				setState(3433);
				match(START);
				setState(3434);
				opt_with();
				setState(3435);
				numericonly();
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 11);
				{
				setState(3437);
				match(RESTART);
				setState(3438);
				opt_with();
				setState(3440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS || _la==Integral || _la==Numeric) {
					{
					setState(3439);
					numericonly();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_byContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_byContext opt_by() throws RecognitionException {
		Opt_byContext _localctx = new Opt_byContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_opt_by);
		try {
			setState(3446);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3444);
				match(BY);
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericonlyContext extends ParserRuleContext {
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public NumericonlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumericonly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumericonly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumericonly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericonlyContext numericonly() throws RecognitionException {
		NumericonlyContext _localctx = new NumericonlyContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_numericonly);
		try {
			setState(3454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3448);
				fconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3449);
				match(PLUS);
				setState(3450);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3451);
				match(MINUS);
				setState(3452);
				fconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3453);
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numericonly_listContext extends ParserRuleContext {
		public List<NumericonlyContext> numericonly() {
			return getRuleContexts(NumericonlyContext.class);
		}
		public NumericonlyContext numericonly(int i) {
			return getRuleContext(NumericonlyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Numericonly_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumericonly_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumericonly_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumericonly_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numericonly_listContext numericonly_list() throws RecognitionException {
		Numericonly_listContext _localctx = new Numericonly_listContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_numericonly_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3456);
			numericonly();
			setState(3461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3457);
				match(COMMA);
				setState(3458);
				numericonly();
				}
				}
				setState(3463);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateplangstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public Opt_trustedContext opt_trusted() {
			return getRuleContext(Opt_trustedContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext opt_inline_handler() {
			return getRuleContext(Opt_inline_handlerContext.class,0);
		}
		public Opt_validatorContext opt_validator() {
			return getRuleContext(Opt_validatorContext.class,0);
		}
		public CreateplangstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createplangstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateplangstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateplangstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateplangstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateplangstmtContext createplangstmt() throws RecognitionException {
		CreateplangstmtContext _localctx = new CreateplangstmtContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_createplangstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3464);
			match(CREATE);
			setState(3465);
			opt_or_replace();
			setState(3466);
			opt_trusted();
			setState(3467);
			opt_procedural();
			setState(3468);
			match(LANGUAGE);
			setState(3469);
			name();
			setState(3475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HANDLER) {
				{
				setState(3470);
				match(HANDLER);
				setState(3471);
				handler_name();
				setState(3472);
				opt_inline_handler();
				setState(3473);
				opt_validator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_trustedContext extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_trusted; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_trusted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_trusted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_trusted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_trustedContext opt_trusted() throws RecognitionException {
		Opt_trustedContext _localctx = new Opt_trustedContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_opt_trusted);
		try {
			setState(3479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUSTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3477);
				match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHandler_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHandler_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHandler_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_nameContext handler_name() throws RecognitionException {
		Handler_nameContext _localctx = new Handler_nameContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_handler_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3481);
			name();
			setState(3483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(3482);
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_inline_handlerContext extends ParserRuleContext {
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_inline_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_inline_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_inline_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_inline_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_inline_handlerContext opt_inline_handler() throws RecognitionException {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_opt_inline_handler);
		try {
			setState(3488);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INLINE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3485);
				match(INLINE_P);
				setState(3486);
				handler_name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALIDATOR:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Validator_clauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValidator_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValidator_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValidator_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Validator_clauseContext validator_clause() throws RecognitionException {
		Validator_clauseContext _localctx = new Validator_clauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_validator_clause);
		try {
			setState(3494);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3490);
				match(VALIDATOR);
				setState(3491);
				handler_name();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3492);
				match(NO);
				setState(3493);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_validatorContext extends ParserRuleContext {
		public Validator_clauseContext validator_clause() {
			return getRuleContext(Validator_clauseContext.class,0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_validator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_validator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_validator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_validator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_validatorContext opt_validator() throws RecognitionException {
		Opt_validatorContext _localctx = new Opt_validatorContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_opt_validator);
		try {
			setState(3498);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3496);
				validator_clause();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_proceduralContext extends ParserRuleContext {
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_procedural; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_procedural(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_procedural(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_procedural(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_proceduralContext opt_procedural() throws RecognitionException {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_opt_procedural);
		try {
			setState(3502);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3500);
				match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreaterealitystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode REALITY() { return getToken(PostgreSQLParser.REALITY, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public RealitylistContext realitylist() {
			return getRuleContext(RealitylistContext.class,0);
		}
		public CreaterealitystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createrealitystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreaterealitystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreaterealitystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreaterealitystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreaterealitystmtContext createrealitystmt() throws RecognitionException {
		CreaterealitystmtContext _localctx = new CreaterealitystmtContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_createrealitystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3504);
			match(CREATE);
			setState(3505);
			match(REALITY);
			setState(3506);
			qualified_name();
			setState(3507);
			match(ON);
			setState(3508);
			match(TABLE);
			setState(3509);
			qualified_name();
			setState(3510);
			match(AS);
			setState(3511);
			realitylist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RealitylistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<RealityelementContext> realityelement() {
			return getRuleContexts(RealityelementContext.class);
		}
		public RealityelementContext realityelement(int i) {
			return getRuleContext(RealityelementContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public RealitylistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_realitylist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRealitylist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRealitylist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRealitylist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RealitylistContext realitylist() throws RecognitionException {
		RealitylistContext _localctx = new RealitylistContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_realitylist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3513);
			match(OPEN_PAREN);
			setState(3514);
			realityelement();
			setState(3519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3515);
				match(COMMA);
				setState(3516);
				realityelement();
				}
				}
				setState(3521);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3522);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RealityelementContext extends ParserRuleContext {
		public TerminalNode LAB() { return getToken(PostgreSQLParser.LAB, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TOP() { return getToken(PostgreSQLParser.TOP, 0); }
		public TerminalNode OTHERWISE() { return getToken(PostgreSQLParser.OTHERWISE, 0); }
		public RealityelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_realityelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRealityelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRealityelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRealityelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RealityelementContext realityelement() throws RecognitionException {
		RealityelementContext _localctx = new RealityelementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_realityelement);
		try {
			setState(3530);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAB:
				enterOuterAlt(_localctx, 1);
				{
				setState(3524);
				match(LAB);
				setState(3525);
				match(ON);
				setState(3526);
				match(ATTRIBUTE);
				setState(3527);
				qualified_name();
				}
				break;
			case TOP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3528);
				match(TOP);
				setState(3529);
				match(OTHERWISE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatetablespacestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttablespaceownerContext opttablespaceowner() {
			return getRuleContext(OpttablespaceownerContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public CreatetablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtablespacestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetablespacestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetablespacestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetablespacestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetablespacestmtContext createtablespacestmt() throws RecognitionException {
		CreatetablespacestmtContext _localctx = new CreatetablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_createtablespacestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			match(CREATE);
			setState(3533);
			match(TABLESPACE);
			setState(3534);
			name();
			setState(3535);
			opttablespaceowner();
			setState(3536);
			match(LOCATION);
			setState(3537);
			sconst();
			setState(3538);
			opt_reloptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttablespaceownerContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public OpttablespaceownerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespaceowner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablespaceowner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablespaceowner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablespaceowner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablespaceownerContext opttablespaceowner() throws RecognitionException {
		OpttablespaceownerContext _localctx = new OpttablespaceownerContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_opttablespaceowner);
		try {
			setState(3543);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OWNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3540);
				match(OWNER);
				setState(3541);
				rolespec();
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DroptablespacestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DroptablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptablespacestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroptablespacestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroptablespacestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroptablespacestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroptablespacestmtContext droptablespacestmt() throws RecognitionException {
		DroptablespacestmtContext _localctx = new DroptablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_droptablespacestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3545);
			match(DROP);
			setState(3546);
			match(TABLESPACE);
			setState(3549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(3547);
				match(IF_P);
				setState(3548);
				match(EXISTS);
				}
				break;
			}
			setState(3551);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateextensionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createextensionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateextensionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateextensionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateextensionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateextensionstmtContext createextensionstmt() throws RecognitionException {
		CreateextensionstmtContext _localctx = new CreateextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_createextensionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3553);
			match(CREATE);
			setState(3554);
			match(EXTENSION);
			setState(3558);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				setState(3555);
				match(IF_P);
				setState(3556);
				match(NOT);
				setState(3557);
				match(EXISTS);
				}
				break;
			}
			setState(3560);
			name();
			setState(3561);
			opt_with();
			setState(3562);
			create_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_opt_listContext extends ParserRuleContext {
		public List<Create_extension_opt_itemContext> create_extension_opt_item() {
			return getRuleContexts(Create_extension_opt_itemContext.class);
		}
		public Create_extension_opt_itemContext create_extension_opt_item(int i) {
			return getRuleContext(Create_extension_opt_itemContext.class,i);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_listContext create_extension_opt_list() throws RecognitionException {
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_create_extension_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FROM || _la==CASCADE || _la==SCHEMA || _la==VERSION_P) {
				{
				{
				setState(3564);
				create_extension_opt_item();
				}
				}
				setState(3569);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_itemContext create_extension_opt_item() throws RecognitionException {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_create_extension_opt_item);
		try {
			setState(3577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3570);
				match(SCHEMA);
				setState(3571);
				name();
				}
				break;
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(3572);
				match(VERSION_P);
				setState(3573);
				nonreservedword_or_sconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(3574);
				match(FROM);
				setState(3575);
				nonreservedword_or_sconst();
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3576);
				match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterextensionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public AlterextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterextensionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterextensionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterextensionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterextensionstmtContext alterextensionstmt() throws RecognitionException {
		AlterextensionstmtContext _localctx = new AlterextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_alterextensionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3579);
			match(ALTER);
			setState(3580);
			match(EXTENSION);
			setState(3581);
			name();
			setState(3582);
			match(UPDATE);
			setState(3583);
			alter_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_opt_listContext extends ParserRuleContext {
		public List<Alter_extension_opt_itemContext> alter_extension_opt_item() {
			return getRuleContexts(Alter_extension_opt_itemContext.class);
		}
		public Alter_extension_opt_itemContext alter_extension_opt_item(int i) {
			return getRuleContext(Alter_extension_opt_itemContext.class,i);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_listContext alter_extension_opt_list() throws RecognitionException {
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_extension_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TO) {
				{
				{
				setState(3585);
				alter_extension_opt_item();
				}
				}
				setState(3590);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_itemContext alter_extension_opt_item() throws RecognitionException {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_alter_extension_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			match(TO);
			setState(3592);
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterextensioncontentsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterextensioncontentsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensioncontentsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterextensioncontentsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterextensioncontentsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterextensioncontentsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterextensioncontentsstmtContext alterextensioncontentsstmt() throws RecognitionException {
		AlterextensioncontentsstmtContext _localctx = new AlterextensioncontentsstmtContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_alterextensioncontentsstmt);
		try {
			setState(3698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3594);
				match(ALTER);
				setState(3595);
				match(EXTENSION);
				setState(3596);
				name();
				setState(3597);
				add_drop();
				setState(3598);
				object_type_name();
				setState(3599);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3601);
				match(ALTER);
				setState(3602);
				match(EXTENSION);
				setState(3603);
				name();
				setState(3604);
				add_drop();
				setState(3605);
				object_type_any_name();
				setState(3606);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3608);
				match(ALTER);
				setState(3609);
				match(EXTENSION);
				setState(3610);
				name();
				setState(3611);
				add_drop();
				setState(3612);
				match(AGGREGATE);
				setState(3613);
				aggregate_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3615);
				match(ALTER);
				setState(3616);
				match(EXTENSION);
				setState(3617);
				name();
				setState(3618);
				add_drop();
				setState(3619);
				match(CAST);
				setState(3620);
				match(OPEN_PAREN);
				setState(3621);
				typename();
				setState(3622);
				match(AS);
				setState(3623);
				typename();
				setState(3624);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3626);
				match(ALTER);
				setState(3627);
				match(EXTENSION);
				setState(3628);
				name();
				setState(3629);
				add_drop();
				setState(3630);
				match(DOMAIN_P);
				setState(3631);
				typename();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3633);
				match(ALTER);
				setState(3634);
				match(EXTENSION);
				setState(3635);
				name();
				setState(3636);
				add_drop();
				setState(3637);
				match(FUNCTION);
				setState(3638);
				function_with_argtypes();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3640);
				match(ALTER);
				setState(3641);
				match(EXTENSION);
				setState(3642);
				name();
				setState(3643);
				add_drop();
				setState(3644);
				match(OPERATOR);
				setState(3645);
				operator_with_argtypes();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3647);
				match(ALTER);
				setState(3648);
				match(EXTENSION);
				setState(3649);
				name();
				setState(3650);
				add_drop();
				setState(3651);
				match(OPERATOR);
				setState(3652);
				match(CLASS);
				setState(3653);
				any_name();
				setState(3654);
				match(USING);
				setState(3655);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3657);
				match(ALTER);
				setState(3658);
				match(EXTENSION);
				setState(3659);
				name();
				setState(3660);
				add_drop();
				setState(3661);
				match(OPERATOR);
				setState(3662);
				match(FAMILY);
				setState(3663);
				any_name();
				setState(3664);
				match(USING);
				setState(3665);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3667);
				match(ALTER);
				setState(3668);
				match(EXTENSION);
				setState(3669);
				name();
				setState(3670);
				add_drop();
				setState(3671);
				match(PROCEDURE);
				setState(3672);
				function_with_argtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3674);
				match(ALTER);
				setState(3675);
				match(EXTENSION);
				setState(3676);
				name();
				setState(3677);
				add_drop();
				setState(3678);
				match(ROUTINE);
				setState(3679);
				function_with_argtypes();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3681);
				match(ALTER);
				setState(3682);
				match(EXTENSION);
				setState(3683);
				name();
				setState(3684);
				add_drop();
				setState(3685);
				match(TRANSFORM);
				setState(3686);
				match(FOR);
				setState(3687);
				typename();
				setState(3688);
				match(LANGUAGE);
				setState(3689);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3691);
				match(ALTER);
				setState(3692);
				match(EXTENSION);
				setState(3693);
				name();
				setState(3694);
				add_drop();
				setState(3695);
				match(TYPE_P);
				setState(3696);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefdwstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreatefdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfdwstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefdwstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefdwstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefdwstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefdwstmtContext createfdwstmt() throws RecognitionException {
		CreatefdwstmtContext _localctx = new CreatefdwstmtContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_createfdwstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3700);
			match(CREATE);
			setState(3701);
			match(FOREIGN);
			setState(3702);
			match(DATA_P);
			setState(3703);
			match(WRAPPER);
			setState(3704);
			name();
			setState(3705);
			opt_fdw_options();
			setState(3706);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFdw_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFdw_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFdw_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionContext fdw_option() throws RecognitionException {
		Fdw_optionContext _localctx = new Fdw_optionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_fdw_option);
		try {
			setState(3716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3708);
				match(HANDLER);
				setState(3709);
				handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3710);
				match(NO);
				setState(3711);
				match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3712);
				match(VALIDATOR);
				setState(3713);
				handler_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3714);
				match(NO);
				setState(3715);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionsContext extends ParserRuleContext {
		public List<Fdw_optionContext> fdw_option() {
			return getRuleContexts(Fdw_optionContext.class);
		}
		public Fdw_optionContext fdw_option(int i) {
			return getRuleContext(Fdw_optionContext.class,i);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionsContext fdw_options() throws RecognitionException {
		Fdw_optionsContext _localctx = new Fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_fdw_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3719); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3718);
				fdw_option();
				}
				}
				setState(3721); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==HANDLER || _la==NO || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_fdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_fdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_fdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fdw_optionsContext opt_fdw_options() throws RecognitionException {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_opt_fdw_options);
		try {
			setState(3725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HANDLER:
			case NO:
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3723);
				fdw_options();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case OPTIONS:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterfdwstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public AlterfdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfdwstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfdwstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfdwstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfdwstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfdwstmtContext alterfdwstmt() throws RecognitionException {
		AlterfdwstmtContext _localctx = new AlterfdwstmtContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_alterfdwstmt);
		try {
			setState(3742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3727);
				match(ALTER);
				setState(3728);
				match(FOREIGN);
				setState(3729);
				match(DATA_P);
				setState(3730);
				match(WRAPPER);
				setState(3731);
				name();
				setState(3732);
				opt_fdw_options();
				setState(3733);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3735);
				match(ALTER);
				setState(3736);
				match(FOREIGN);
				setState(3737);
				match(DATA_P);
				setState(3738);
				match(WRAPPER);
				setState(3739);
				name();
				setState(3740);
				fdw_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_generic_optionsContext create_generic_options() throws RecognitionException {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_create_generic_options);
		try {
			setState(3750);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPTIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3744);
				match(OPTIONS);
				setState(3745);
				match(OPEN_PAREN);
				setState(3746);
				generic_option_list();
				setState(3747);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_listContext extends ParserRuleContext {
		public List<Generic_option_elemContext> generic_option_elem() {
			return getRuleContexts(Generic_option_elemContext.class);
		}
		public Generic_option_elemContext generic_option_elem(int i) {
			return getRuleContext(Generic_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_listContext generic_option_list() throws RecognitionException {
		Generic_option_listContext _localctx = new Generic_option_listContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_generic_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3752);
			generic_option_elem();
			setState(3757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3753);
				match(COMMA);
				setState(3754);
				generic_option_elem();
				}
				}
				setState(3759);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_optionsContext alter_generic_options() throws RecognitionException {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_alter_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3760);
			match(OPTIONS);
			setState(3761);
			match(OPEN_PAREN);
			setState(3762);
			alter_generic_option_list();
			setState(3763);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_option_listContext extends ParserRuleContext {
		public List<Alter_generic_option_elemContext> alter_generic_option_elem() {
			return getRuleContexts(Alter_generic_option_elemContext.class);
		}
		public Alter_generic_option_elemContext alter_generic_option_elem(int i) {
			return getRuleContext(Alter_generic_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_listContext alter_generic_option_list() throws RecognitionException {
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_alter_generic_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3765);
			alter_generic_option_elem();
			setState(3770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3766);
				match(COMMA);
				setState(3767);
				alter_generic_option_elem();
				}
				}
				setState(3772);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_option_elemContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_elemContext alter_generic_option_elem() throws RecognitionException {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_alter_generic_option_elem);
		try {
			setState(3780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3773);
				generic_option_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3774);
				match(SET);
				setState(3775);
				generic_option_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3776);
				match(ADD_P);
				setState(3777);
				generic_option_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3778);
				match(DROP);
				setState(3779);
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_elemContext extends ParserRuleContext {
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Generic_option_argContext generic_option_arg() {
			return getRuleContext(Generic_option_argContext.class,0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_elemContext generic_option_elem() throws RecognitionException {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_generic_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3782);
			generic_option_name();
			setState(3783);
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_nameContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_nameContext generic_option_name() throws RecognitionException {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_generic_option_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3785);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_argContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_argContext generic_option_arg() throws RecognitionException {
		Generic_option_argContext _localctx = new Generic_option_argContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_generic_option_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3787);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Opt_typeContext opt_type() {
			return getRuleContext(Opt_typeContext.class,0);
		}
		public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return getRuleContext(Opt_foreign_server_versionContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeignserverstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateforeignserverstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateforeignserverstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateforeignserverstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateforeignserverstmtContext createforeignserverstmt() throws RecognitionException {
		CreateforeignserverstmtContext _localctx = new CreateforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_createforeignserverstmt);
		try {
			setState(3814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3789);
				match(CREATE);
				setState(3790);
				match(SERVER);
				setState(3791);
				name();
				setState(3792);
				opt_type();
				setState(3793);
				opt_foreign_server_version();
				setState(3794);
				match(FOREIGN);
				setState(3795);
				match(DATA_P);
				setState(3796);
				match(WRAPPER);
				setState(3797);
				name();
				setState(3798);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3800);
				match(CREATE);
				setState(3801);
				match(SERVER);
				setState(3802);
				match(IF_P);
				setState(3803);
				match(NOT);
				setState(3804);
				match(EXISTS);
				setState(3805);
				name();
				setState(3806);
				opt_type();
				setState(3807);
				opt_foreign_server_version();
				setState(3808);
				match(FOREIGN);
				setState(3809);
				match(DATA_P);
				setState(3810);
				match(WRAPPER);
				setState(3811);
				name();
				setState(3812);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_typeContext extends ParserRuleContext {
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_typeContext opt_type() throws RecognitionException {
		Opt_typeContext _localctx = new Opt_typeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_opt_type);
		try {
			setState(3819);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TYPE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3816);
				match(TYPE_P);
				setState(3817);
				sconst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_server_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterForeign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitForeign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitForeign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_server_versionContext foreign_server_version() throws RecognitionException {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_foreign_server_version);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3821);
			match(VERSION_P);
			setState(3824);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				{
				setState(3822);
				sconst();
				}
				break;
			case NULL_P:
				{
				setState(3823);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_foreign_server_versionContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_foreign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_foreign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_foreign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_foreign_server_versionContext opt_foreign_server_version() throws RecognitionException {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_opt_foreign_server_version);
		try {
			setState(3828);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSION_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3826);
				foreign_server_version();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public AlterforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterforeignserverstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterforeignserverstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterforeignserverstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterforeignserverstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterforeignserverstmtContext alterforeignserverstmt() throws RecognitionException {
		AlterforeignserverstmtContext _localctx = new AlterforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alterforeignserverstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3830);
			match(ALTER);
			setState(3831);
			match(SERVER);
			setState(3832);
			name();
			setState(3838);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPTIONS:
				{
				setState(3833);
				alter_generic_options();
				}
				break;
			case VERSION_P:
				{
				setState(3834);
				foreign_server_version();
				setState(3836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3835);
					alter_generic_options();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateforeigntablestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public CreateforeigntablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeigntablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateforeigntablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateforeigntablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateforeigntablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateforeigntablestmtContext createforeigntablestmt() throws RecognitionException {
		CreateforeigntablestmtContext _localctx = new CreateforeigntablestmtContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_createforeigntablestmt);
		try {
			setState(3896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3840);
				match(CREATE);
				setState(3841);
				match(FOREIGN);
				setState(3842);
				match(TABLE);
				setState(3843);
				qualified_name();
				setState(3844);
				match(OPEN_PAREN);
				setState(3845);
				opttableelementlist();
				setState(3846);
				match(CLOSE_PAREN);
				setState(3847);
				optinherit();
				setState(3848);
				match(SERVER);
				setState(3849);
				name();
				setState(3850);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3852);
				match(CREATE);
				setState(3853);
				match(FOREIGN);
				setState(3854);
				match(TABLE);
				setState(3855);
				match(IF_P);
				setState(3856);
				match(NOT);
				setState(3857);
				match(EXISTS);
				setState(3858);
				qualified_name();
				setState(3859);
				match(OPEN_PAREN);
				setState(3860);
				opttableelementlist();
				setState(3861);
				match(CLOSE_PAREN);
				setState(3862);
				optinherit();
				setState(3863);
				match(SERVER);
				setState(3864);
				name();
				setState(3865);
				create_generic_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3867);
				match(CREATE);
				setState(3868);
				match(FOREIGN);
				setState(3869);
				match(TABLE);
				setState(3870);
				qualified_name();
				setState(3871);
				match(PARTITION);
				setState(3872);
				match(OF);
				setState(3873);
				qualified_name();
				setState(3874);
				opttypedtableelementlist();
				setState(3875);
				partitionboundspec();
				setState(3876);
				match(SERVER);
				setState(3877);
				name();
				setState(3878);
				create_generic_options();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3880);
				match(CREATE);
				setState(3881);
				match(FOREIGN);
				setState(3882);
				match(TABLE);
				setState(3883);
				match(IF_P);
				setState(3884);
				match(NOT);
				setState(3885);
				match(EXISTS);
				setState(3886);
				qualified_name();
				setState(3887);
				match(PARTITION);
				setState(3888);
				match(OF);
				setState(3889);
				qualified_name();
				setState(3890);
				opttypedtableelementlist();
				setState(3891);
				partitionboundspec();
				setState(3892);
				match(SERVER);
				setState(3893);
				name();
				setState(3894);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportforeignschemastmtContext extends ParserRuleContext {
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Import_qualificationContext import_qualification() {
			return getRuleContext(Import_qualificationContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ImportforeignschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importforeignschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImportforeignschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImportforeignschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImportforeignschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportforeignschemastmtContext importforeignschemastmt() throws RecognitionException {
		ImportforeignschemastmtContext _localctx = new ImportforeignschemastmtContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_importforeignschemastmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3898);
			match(IMPORT_P);
			setState(3899);
			match(FOREIGN);
			setState(3900);
			match(SCHEMA);
			setState(3901);
			name();
			setState(3902);
			import_qualification();
			setState(3903);
			match(FROM);
			setState(3904);
			match(SERVER);
			setState(3905);
			name();
			setState(3906);
			match(INTO);
			setState(3907);
			name();
			setState(3908);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Import_qualification_typeContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public Import_qualification_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_qualification_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_qualification_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_qualification_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_qualification_typeContext import_qualification_type() throws RecognitionException {
		Import_qualification_typeContext _localctx = new Import_qualification_typeContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_import_qualification_type);
		try {
			setState(3913);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3910);
				match(LIMIT);
				setState(3911);
				match(TO);
				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3912);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Import_qualificationContext extends ParserRuleContext {
		public Import_qualification_typeContext import_qualification_type() {
			return getRuleContext(Import_qualification_typeContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Import_qualificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_qualification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_qualification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_qualification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_qualificationContext import_qualification() throws RecognitionException {
		Import_qualificationContext _localctx = new Import_qualificationContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_import_qualification);
		try {
			setState(3921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCEPT:
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3915);
				import_qualification_type();
				setState(3916);
				match(OPEN_PAREN);
				setState(3917);
				relation_expr_list();
				setState(3918);
				match(CLOSE_PAREN);
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateusermappingstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateusermappingstmtContext createusermappingstmt() throws RecognitionException {
		CreateusermappingstmtContext _localctx = new CreateusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_createusermappingstmt);
		try {
			setState(3944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3923);
				match(CREATE);
				setState(3924);
				match(USER);
				setState(3925);
				match(MAPPING);
				setState(3926);
				match(FOR);
				setState(3927);
				auth_ident();
				setState(3928);
				match(SERVER);
				setState(3929);
				name();
				setState(3930);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3932);
				match(CREATE);
				setState(3933);
				match(USER);
				setState(3934);
				match(MAPPING);
				setState(3935);
				match(IF_P);
				setState(3936);
				match(NOT);
				setState(3937);
				match(EXISTS);
				setState(3938);
				match(FOR);
				setState(3939);
				auth_ident();
				setState(3940);
				match(SERVER);
				setState(3941);
				name();
				setState(3942);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_identContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_ident; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAuth_ident(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAuth_ident(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAuth_ident(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_identContext auth_ident() throws RecognitionException {
		Auth_identContext _localctx = new Auth_identContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_auth_ident);
		try {
			setState(3948);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3946);
				rolespec();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3947);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropusermappingstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropusermappingstmtContext dropusermappingstmt() throws RecognitionException {
		DropusermappingstmtContext _localctx = new DropusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_dropusermappingstmt);
		try {
			setState(3968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3950);
				match(DROP);
				setState(3951);
				match(USER);
				setState(3952);
				match(MAPPING);
				setState(3953);
				match(FOR);
				setState(3954);
				auth_ident();
				setState(3955);
				match(SERVER);
				setState(3956);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3958);
				match(DROP);
				setState(3959);
				match(USER);
				setState(3960);
				match(MAPPING);
				setState(3961);
				match(IF_P);
				setState(3962);
				match(EXISTS);
				setState(3963);
				match(FOR);
				setState(3964);
				auth_ident();
				setState(3965);
				match(SERVER);
				setState(3966);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterusermappingstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterusermappingstmtContext alterusermappingstmt() throws RecognitionException {
		AlterusermappingstmtContext _localctx = new AlterusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_alterusermappingstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3970);
			match(ALTER);
			setState(3971);
			match(USER);
			setState(3972);
			match(MAPPING);
			setState(3973);
			match(FOR);
			setState(3974);
			auth_ident();
			setState(3975);
			match(SERVER);
			setState(3976);
			name();
			setState(3977);
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatepolicystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
			return getRuleContext(RowsecuritydefaultpermissiveContext.class,0);
		}
		public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
			return getRuleContext(RowsecuritydefaultforcmdContext.class,0);
		}
		public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
			return getRuleContext(RowsecuritydefaulttoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public CreatepolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpolicystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatepolicystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatepolicystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatepolicystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatepolicystmtContext createpolicystmt() throws RecognitionException {
		CreatepolicystmtContext _localctx = new CreatepolicystmtContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_createpolicystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3979);
			match(CREATE);
			setState(3980);
			match(POLICY);
			setState(3981);
			name();
			setState(3982);
			match(ON);
			setState(3983);
			qualified_name();
			setState(3984);
			rowsecuritydefaultpermissive();
			setState(3985);
			rowsecuritydefaultforcmd();
			setState(3986);
			rowsecuritydefaulttorole();
			setState(3987);
			rowsecurityoptionalexpr();
			setState(3988);
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterpolicystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
			return getRuleContext(RowsecurityoptionaltoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public AlterpolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpolicystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterpolicystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterpolicystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterpolicystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterpolicystmtContext alterpolicystmt() throws RecognitionException {
		AlterpolicystmtContext _localctx = new AlterpolicystmtContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_alterpolicystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3990);
			match(ALTER);
			setState(3991);
			match(POLICY);
			setState(3992);
			name();
			setState(3993);
			match(ON);
			setState(3994);
			qualified_name();
			setState(3995);
			rowsecurityoptionaltorole();
			setState(3996);
			rowsecurityoptionalexpr();
			setState(3997);
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecurityoptionalexprContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionalexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionalexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionalexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionalexprContext rowsecurityoptionalexpr() throws RecognitionException {
		RowsecurityoptionalexprContext _localctx = new RowsecurityoptionalexprContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_rowsecurityoptionalexpr);
		try {
			setState(4005);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3999);
				match(USING);
				setState(4000);
				match(OPEN_PAREN);
				setState(4001);
				a_expr();
				setState(4002);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecurityoptionalwithcheckContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalwithcheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalwithcheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionalwithcheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionalwithcheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionalwithcheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() throws RecognitionException {
		RowsecurityoptionalwithcheckContext _localctx = new RowsecurityoptionalwithcheckContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_rowsecurityoptionalwithcheck);
		try {
			setState(4014);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4007);
				match(WITH);
				setState(4008);
				match(CHECK);
				setState(4009);
				match(OPEN_PAREN);
				setState(4010);
				a_expr();
				setState(4011);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecuritydefaulttoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecuritydefaulttoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaulttorole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaulttorole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaulttorole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaulttorole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() throws RecognitionException {
		RowsecuritydefaulttoroleContext _localctx = new RowsecuritydefaulttoroleContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_rowsecuritydefaulttorole);
		try {
			setState(4019);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4016);
				match(TO);
				setState(4017);
				role_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecurityoptionaltoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecurityoptionaltoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionaltorole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionaltorole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionaltorole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionaltorole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() throws RecognitionException {
		RowsecurityoptionaltoroleContext _localctx = new RowsecurityoptionaltoroleContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_rowsecurityoptionaltorole);
		try {
			setState(4024);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4021);
				match(TO);
				setState(4022);
				role_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecuritydefaultpermissiveContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultpermissive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaultpermissive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaultpermissive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaultpermissive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() throws RecognitionException {
		RowsecuritydefaultpermissiveContext _localctx = new RowsecuritydefaultpermissiveContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_rowsecuritydefaultpermissive);
		try {
			setState(4029);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4026);
				match(AS);
				setState(4027);
				identifier();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecuritydefaultforcmdContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Row_security_cmdContext row_security_cmd() {
			return getRuleContext(Row_security_cmdContext.class,0);
		}
		public RowsecuritydefaultforcmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultforcmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaultforcmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaultforcmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaultforcmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() throws RecognitionException {
		RowsecuritydefaultforcmdContext _localctx = new RowsecuritydefaultforcmdContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_rowsecuritydefaultforcmd);
		try {
			setState(4034);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4031);
				match(FOR);
				setState(4032);
				row_security_cmd();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_security_cmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Row_security_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_security_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow_security_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow_security_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow_security_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_security_cmdContext row_security_cmd() throws RecognitionException {
		Row_security_cmdContext _localctx = new Row_security_cmdContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_row_security_cmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4036);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateamstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Am_typeContext am_type() {
			return getRuleContext(Am_typeContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public CreateamstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createamstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateamstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateamstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateamstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateamstmtContext createamstmt() throws RecognitionException {
		CreateamstmtContext _localctx = new CreateamstmtContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_createamstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4038);
			match(CREATE);
			setState(4039);
			match(ACCESS);
			setState(4040);
			match(METHOD);
			setState(4041);
			name();
			setState(4042);
			match(TYPE_P);
			setState(4043);
			am_type();
			setState(4044);
			match(HANDLER);
			setState(4045);
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Am_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Am_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_am_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAm_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAm_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAm_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Am_typeContext am_type() throws RecognitionException {
		Am_typeContext _localctx = new Am_typeContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_am_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4047);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatetrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggeractiontimeContext triggeractiontime() {
			return getRuleContext(TriggeractiontimeContext.class,0);
		}
		public TriggereventsContext triggerevents() {
			return getRuleContext(TriggereventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TriggerreferencingContext triggerreferencing() {
			return getRuleContext(TriggerreferencingContext.class,0);
		}
		public TriggerforspecContext triggerforspec() {
			return getRuleContext(TriggerforspecContext.class,0);
		}
		public TriggerwhenContext triggerwhen() {
			return getRuleContext(TriggerwhenContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TriggerfuncargsContext triggerfuncargs() {
			return getRuleContext(TriggerfuncargsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public OptconstrfromtableContext optconstrfromtable() {
			return getRuleContext(OptconstrfromtableContext.class,0);
		}
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public CreatetrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetrigstmtContext createtrigstmt() throws RecognitionException {
		CreatetrigstmtContext _localctx = new CreatetrigstmtContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_createtrigstmt);
		try {
			setState(4087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4049);
				match(CREATE);
				setState(4050);
				match(TRIGGER);
				setState(4051);
				name();
				setState(4052);
				triggeractiontime();
				setState(4053);
				triggerevents();
				setState(4054);
				match(ON);
				setState(4055);
				qualified_name();
				setState(4056);
				triggerreferencing();
				setState(4057);
				triggerforspec();
				setState(4058);
				triggerwhen();
				setState(4059);
				match(EXECUTE);
				setState(4060);
				function_or_procedure();
				setState(4061);
				func_name();
				setState(4062);
				match(OPEN_PAREN);
				setState(4063);
				triggerfuncargs();
				setState(4064);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4066);
				match(CREATE);
				setState(4067);
				match(CONSTRAINT);
				setState(4068);
				match(TRIGGER);
				setState(4069);
				name();
				setState(4070);
				match(AFTER);
				setState(4071);
				triggerevents();
				setState(4072);
				match(ON);
				setState(4073);
				qualified_name();
				setState(4074);
				optconstrfromtable();
				setState(4075);
				constraintattributespec();
				setState(4076);
				match(FOR);
				setState(4077);
				match(EACH);
				setState(4078);
				match(ROW);
				setState(4079);
				triggerwhen();
				setState(4080);
				match(EXECUTE);
				setState(4081);
				function_or_procedure();
				setState(4082);
				func_name();
				setState(4083);
				match(OPEN_PAREN);
				setState(4084);
				triggerfuncargs();
				setState(4085);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggeractiontimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TriggeractiontimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeractiontime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggeractiontime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggeractiontime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggeractiontime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeractiontimeContext triggeractiontime() throws RecognitionException {
		TriggeractiontimeContext _localctx = new TriggeractiontimeContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_triggeractiontime);
		try {
			setState(4093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4089);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4090);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(4091);
				match(INSTEAD);
				setState(4092);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggereventsContext extends ParserRuleContext {
		public List<TriggeroneeventContext> triggeroneevent() {
			return getRuleContexts(TriggeroneeventContext.class);
		}
		public TriggeroneeventContext triggeroneevent(int i) {
			return getRuleContext(TriggeroneeventContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public TriggereventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerevents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerevents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerevents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerevents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggereventsContext triggerevents() throws RecognitionException {
		TriggereventsContext _localctx = new TriggereventsContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_triggerevents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4095);
			triggeroneevent();
			setState(4100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(4096);
				match(OR);
				setState(4097);
				triggeroneevent();
				}
				}
				setState(4102);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggeroneeventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TriggeroneeventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeroneevent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggeroneevent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggeroneevent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggeroneevent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeroneeventContext triggeroneevent() throws RecognitionException {
		TriggeroneeventContext _localctx = new TriggeroneeventContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_triggeroneevent);
		try {
			setState(4110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4103);
				match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4104);
				match(DELETE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4105);
				match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4106);
				match(UPDATE);
				setState(4107);
				match(OF);
				setState(4108);
				columnlist();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4109);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerreferencingContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TriggertransitionsContext triggertransitions() {
			return getRuleContext(TriggertransitionsContext.class,0);
		}
		public TriggerreferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerreferencing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerreferencing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerreferencing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerreferencing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerreferencingContext triggerreferencing() throws RecognitionException {
		TriggerreferencingContext _localctx = new TriggerreferencingContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_triggerreferencing);
		try {
			setState(4115);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFERENCING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4112);
				match(REFERENCING);
				setState(4113);
				triggertransitions();
				}
				break;
			case FOR:
			case WHEN:
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggertransitionsContext extends ParserRuleContext {
		public List<TriggertransitionContext> triggertransition() {
			return getRuleContexts(TriggertransitionContext.class);
		}
		public TriggertransitionContext triggertransition(int i) {
			return getRuleContext(TriggertransitionContext.class,i);
		}
		public TriggertransitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggertransitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggertransitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggertransitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggertransitionsContext triggertransitions() throws RecognitionException {
		TriggertransitionsContext _localctx = new TriggertransitionsContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_triggertransitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4118); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4117);
				triggertransition();
				}
				}
				setState(4120); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NEW || _la==OLD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggertransitionContext extends ParserRuleContext {
		public TransitionoldornewContext transitionoldornew() {
			return getRuleContext(TransitionoldornewContext.class,0);
		}
		public TransitionrowortableContext transitionrowortable() {
			return getRuleContext(TransitionrowortableContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TransitionrelnameContext transitionrelname() {
			return getRuleContext(TransitionrelnameContext.class,0);
		}
		public TriggertransitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggertransition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggertransition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggertransition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggertransitionContext triggertransition() throws RecognitionException {
		TriggertransitionContext _localctx = new TriggertransitionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_triggertransition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4122);
			transitionoldornew();
			setState(4123);
			transitionrowortable();
			setState(4124);
			opt_as();
			setState(4125);
			transitionrelname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionoldornewContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TransitionoldornewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionoldornew; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionoldornew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionoldornew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionoldornew(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionoldornewContext transitionoldornew() throws RecognitionException {
		TransitionoldornewContext _localctx = new TransitionoldornewContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_transitionoldornew);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4127);
			_la = _input.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionrowortableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TransitionrowortableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrowortable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionrowortable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionrowortable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionrowortable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionrowortableContext transitionrowortable() throws RecognitionException {
		TransitionrowortableContext _localctx = new TransitionrowortableContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_transitionrowortable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4129);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionrelnameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TransitionrelnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrelname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionrelname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionrelname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionrelname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionrelnameContext transitionrelname() throws RecognitionException {
		TransitionrelnameContext _localctx = new TransitionrelnameContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_transitionrelname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4131);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerforspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TriggerforopteachContext triggerforopteach() {
			return getRuleContext(TriggerforopteachContext.class,0);
		}
		public TriggerfortypeContext triggerfortype() {
			return getRuleContext(TriggerfortypeContext.class,0);
		}
		public TriggerforspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerforspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerforspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerforspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerforspecContext triggerforspec() throws RecognitionException {
		TriggerforspecContext _localctx = new TriggerforspecContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_triggerforspec);
		try {
			setState(4138);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4133);
				match(FOR);
				setState(4134);
				triggerforopteach();
				setState(4135);
				triggerfortype();
				}
				break;
			case WHEN:
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerforopteachContext extends ParserRuleContext {
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TriggerforopteachContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforopteach; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerforopteach(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerforopteach(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerforopteach(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerforopteachContext triggerforopteach() throws RecognitionException {
		TriggerforopteachContext _localctx = new TriggerforopteachContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_triggerforopteach);
		try {
			setState(4142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4140);
				match(EACH);
				}
				break;
			case STATEMENT:
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerfortypeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TriggerfortypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfortype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfortype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfortype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfortype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfortypeContext triggerfortype() throws RecognitionException {
		TriggerfortypeContext _localctx = new TriggerfortypeContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_triggerfortype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4144);
			_la = _input.LA(1);
			if ( !(_la==STATEMENT || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerwhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerwhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerwhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerwhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerwhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerwhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerwhenContext triggerwhen() throws RecognitionException {
		TriggerwhenContext _localctx = new TriggerwhenContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_triggerwhen);
		try {
			setState(4152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4146);
				match(WHEN);
				setState(4147);
				match(OPEN_PAREN);
				setState(4148);
				a_expr();
				setState(4149);
				match(CLOSE_PAREN);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_or_procedureContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public Function_or_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_or_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_or_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_or_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_or_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_or_procedureContext function_or_procedure() throws RecognitionException {
		Function_or_procedureContext _localctx = new Function_or_procedureContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_function_or_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4154);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerfuncargsContext extends ParserRuleContext {
		public List<TriggerfuncargContext> triggerfuncarg() {
			return getRuleContexts(TriggerfuncargContext.class);
		}
		public TriggerfuncargContext triggerfuncarg(int i) {
			return getRuleContext(TriggerfuncargContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TriggerfuncargsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncargs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfuncargs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfuncargs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfuncargs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfuncargsContext triggerfuncargs() throws RecognitionException {
		TriggerfuncargsContext _localctx = new TriggerfuncargsContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_triggerfuncargs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				setState(4156);
				triggerfuncarg();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4160);
				match(COMMA);
				setState(4161);
				triggerfuncarg();
				}
				}
				setState(4166);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerfuncargContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TriggerfuncargContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncarg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfuncarg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfuncarg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfuncarg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfuncargContext triggerfuncarg() throws RecognitionException {
		TriggerfuncargContext _localctx = new TriggerfuncargContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_triggerfuncarg);
		try {
			setState(4171);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(4167);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(4168);
				fconst();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(4169);
				sconst();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4170);
				collabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptconstrfromtableContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptconstrfromtableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstrfromtable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptconstrfromtable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptconstrfromtable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptconstrfromtable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptconstrfromtableContext optconstrfromtable() throws RecognitionException {
		OptconstrfromtableContext _localctx = new OptconstrfromtableContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_optconstrfromtable);
		try {
			setState(4176);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4173);
				match(FROM);
				setState(4174);
				qualified_name();
				}
				break;
			case DEFERRABLE:
			case FOR:
			case INITIALLY:
			case NOT:
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintattributespecContext extends ParserRuleContext {
		public List<ConstraintattributeElemContext> constraintattributeElem() {
			return getRuleContexts(ConstraintattributeElemContext.class);
		}
		public ConstraintattributeElemContext constraintattributeElem(int i) {
			return getRuleContext(ConstraintattributeElemContext.class,i);
		}
		public ConstraintattributespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributespec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattributespec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattributespec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattributespec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattributespecContext constraintattributespec() throws RecognitionException {
		ConstraintattributespecContext _localctx = new ConstraintattributespecContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_constraintattributespec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (DEFERRABLE - 60)) | (1L << (INITIALLY - 60)) | (1L << (NOT - 60)))) != 0) || _la==NO) {
				{
				{
				setState(4178);
				constraintattributeElem();
				}
				}
				setState(4183);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintattributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public ConstraintattributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributeElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattributeElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattributeElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattributeElemContext constraintattributeElem() throws RecognitionException {
		ConstraintattributeElemContext _localctx = new ConstraintattributeElemContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_constraintattributeElem);
		try {
			setState(4195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4184);
				match(NOT);
				setState(4185);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4186);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4187);
				match(INITIALLY);
				setState(4188);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4189);
				match(INITIALLY);
				setState(4190);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4191);
				match(NOT);
				setState(4192);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4193);
				match(NO);
				setState(4194);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateeventtrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Event_trigger_when_listContext event_trigger_when_list() {
			return getRuleContext(Event_trigger_when_listContext.class,0);
		}
		public CreateeventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createeventtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateeventtrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateeventtrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateeventtrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateeventtrigstmtContext createeventtrigstmt() throws RecognitionException {
		CreateeventtrigstmtContext _localctx = new CreateeventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_createeventtrigstmt);
		try {
			setState(4223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4197);
				match(CREATE);
				setState(4198);
				match(EVENT);
				setState(4199);
				match(TRIGGER);
				setState(4200);
				name();
				setState(4201);
				match(ON);
				setState(4202);
				collabel();
				setState(4203);
				match(EXECUTE);
				setState(4204);
				function_or_procedure();
				setState(4205);
				func_name();
				setState(4206);
				match(OPEN_PAREN);
				setState(4207);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4209);
				match(CREATE);
				setState(4210);
				match(EVENT);
				setState(4211);
				match(TRIGGER);
				setState(4212);
				name();
				setState(4213);
				match(ON);
				setState(4214);
				collabel();
				setState(4215);
				match(WHEN);
				setState(4216);
				event_trigger_when_list();
				setState(4217);
				match(EXECUTE);
				setState(4218);
				function_or_procedure();
				setState(4219);
				func_name();
				setState(4220);
				match(OPEN_PAREN);
				setState(4221);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_trigger_when_listContext extends ParserRuleContext {
		public List<Event_trigger_when_itemContext> event_trigger_when_item() {
			return getRuleContexts(Event_trigger_when_itemContext.class);
		}
		public Event_trigger_when_itemContext event_trigger_when_item(int i) {
			return getRuleContext(Event_trigger_when_itemContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public Event_trigger_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_when_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_when_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_when_listContext event_trigger_when_list() throws RecognitionException {
		Event_trigger_when_listContext _localctx = new Event_trigger_when_listContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_event_trigger_when_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4225);
			event_trigger_when_item();
			setState(4230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(4226);
				match(AND);
				setState(4227);
				event_trigger_when_item();
				}
				}
				setState(4232);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_trigger_when_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Event_trigger_value_listContext event_trigger_value_list() {
			return getRuleContext(Event_trigger_value_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Event_trigger_when_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_when_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_when_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_when_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_when_itemContext event_trigger_when_item() throws RecognitionException {
		Event_trigger_when_itemContext _localctx = new Event_trigger_when_itemContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_event_trigger_when_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4233);
			colid();
			setState(4234);
			match(IN_P);
			setState(4235);
			match(OPEN_PAREN);
			setState(4236);
			event_trigger_value_list();
			setState(4237);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_trigger_value_listContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Event_trigger_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_value_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_value_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_value_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_value_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_value_listContext event_trigger_value_list() throws RecognitionException {
		Event_trigger_value_listContext _localctx = new Event_trigger_value_listContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_event_trigger_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4239);
			sconst();
			setState(4244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4240);
				match(COMMA);
				setState(4241);
				sconst();
				}
				}
				setState(4246);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltereventtrigstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public AltereventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altereventtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltereventtrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltereventtrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltereventtrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltereventtrigstmtContext altereventtrigstmt() throws RecognitionException {
		AltereventtrigstmtContext _localctx = new AltereventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_altereventtrigstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4247);
			match(ALTER);
			setState(4248);
			match(EVENT);
			setState(4249);
			match(TRIGGER);
			setState(4250);
			name();
			setState(4251);
			enable_trigger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_triggerContext extends ParserRuleContext {
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEnable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEnable_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEnable_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_enable_trigger);
		try {
			setState(4259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4253);
				match(ENABLE_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4254);
				match(ENABLE_P);
				setState(4255);
				match(REPLICA);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4256);
				match(ENABLE_P);
				setState(4257);
				match(ALWAYS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4258);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateassertionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public CreateassertionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createassertionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateassertionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateassertionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateassertionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateassertionstmtContext createassertionstmt() throws RecognitionException {
		CreateassertionstmtContext _localctx = new CreateassertionstmtContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_createassertionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4261);
			match(CREATE);
			setState(4262);
			match(ASSERTION);
			setState(4263);
			any_name();
			setState(4264);
			match(CHECK);
			setState(4265);
			match(OPEN_PAREN);
			setState(4266);
			a_expr();
			setState(4267);
			match(CLOSE_PAREN);
			setState(4268);
			constraintattributespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Old_aggr_definitionContext old_aggr_definition() {
			return getRuleContext(Old_aggr_definitionContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttablefuncelementlistContext opttablefuncelementlist() {
			return getRuleContext(OpttablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public Opt_enum_val_listContext opt_enum_val_list() {
			return getRuleContext(Opt_enum_val_listContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public DefinestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefinestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefinestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefinestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinestmtContext definestmt() throws RecognitionException {
		DefinestmtContext _localctx = new DefinestmtContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_definestmt);
		try {
			setState(4376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4270);
				match(CREATE);
				setState(4271);
				opt_or_replace();
				setState(4272);
				match(AGGREGATE);
				setState(4273);
				func_name();
				setState(4274);
				aggr_args();
				setState(4275);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4277);
				match(CREATE);
				setState(4278);
				opt_or_replace();
				setState(4279);
				match(AGGREGATE);
				setState(4280);
				func_name();
				setState(4281);
				old_aggr_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4283);
				match(CREATE);
				setState(4284);
				match(OPERATOR);
				setState(4285);
				any_operator();
				setState(4286);
				definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4288);
				match(CREATE);
				setState(4289);
				match(TYPE_P);
				setState(4290);
				any_name();
				setState(4291);
				definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4293);
				match(CREATE);
				setState(4294);
				match(TYPE_P);
				setState(4295);
				any_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4296);
				match(CREATE);
				setState(4297);
				match(TYPE_P);
				setState(4298);
				any_name();
				setState(4299);
				match(AS);
				setState(4300);
				match(OPEN_PAREN);
				setState(4301);
				opttablefuncelementlist();
				setState(4302);
				match(CLOSE_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4304);
				match(CREATE);
				setState(4305);
				match(TYPE_P);
				setState(4306);
				any_name();
				setState(4307);
				match(AS);
				setState(4308);
				match(ENUM_P);
				setState(4309);
				match(OPEN_PAREN);
				setState(4310);
				opt_enum_val_list();
				setState(4311);
				match(CLOSE_PAREN);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4313);
				match(CREATE);
				setState(4314);
				match(TYPE_P);
				setState(4315);
				any_name();
				setState(4316);
				match(AS);
				setState(4317);
				match(RANGE);
				setState(4318);
				definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4320);
				match(CREATE);
				setState(4321);
				match(TEXT_P);
				setState(4322);
				match(SEARCH);
				setState(4323);
				match(PARSER);
				setState(4324);
				any_name();
				setState(4325);
				definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4327);
				match(CREATE);
				setState(4328);
				match(TEXT_P);
				setState(4329);
				match(SEARCH);
				setState(4330);
				match(DICTIONARY);
				setState(4331);
				any_name();
				setState(4332);
				definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4334);
				match(CREATE);
				setState(4335);
				match(TEXT_P);
				setState(4336);
				match(SEARCH);
				setState(4337);
				match(TEMPLATE);
				setState(4338);
				any_name();
				setState(4339);
				definition();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4341);
				match(CREATE);
				setState(4342);
				match(TEXT_P);
				setState(4343);
				match(SEARCH);
				setState(4344);
				match(CONFIGURATION);
				setState(4345);
				any_name();
				setState(4346);
				definition();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4348);
				match(CREATE);
				setState(4349);
				match(COLLATION);
				setState(4350);
				any_name();
				setState(4351);
				definition();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4353);
				match(CREATE);
				setState(4354);
				match(COLLATION);
				setState(4355);
				match(IF_P);
				setState(4356);
				match(NOT);
				setState(4357);
				match(EXISTS);
				setState(4358);
				any_name();
				setState(4359);
				definition();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4361);
				match(CREATE);
				setState(4362);
				match(COLLATION);
				setState(4363);
				any_name();
				setState(4364);
				match(FROM);
				setState(4365);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4367);
				match(CREATE);
				setState(4368);
				match(COLLATION);
				setState(4369);
				match(IF_P);
				setState(4370);
				match(NOT);
				setState(4371);
				match(EXISTS);
				setState(4372);
				any_name();
				setState(4373);
				match(FROM);
				setState(4374);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4378);
			match(OPEN_PAREN);
			setState(4379);
			def_list();
			setState(4380);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_listContext extends ParserRuleContext {
		public List<Def_elemContext> def_elem() {
			return getRuleContexts(Def_elemContext.class);
		}
		public Def_elemContext def_elem(int i) {
			return getRuleContext(Def_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_listContext def_list() throws RecognitionException {
		Def_listContext _localctx = new Def_listContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_def_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4382);
			def_elem();
			setState(4387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4383);
				match(COMMA);
				setState(4384);
				def_elem();
				}
				}
				setState(4389);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_elemContext def_elem() throws RecognitionException {
		Def_elemContext _localctx = new Def_elemContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_def_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4390);
			collabel();
			setState(4393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(4391);
				match(EQUAL);
				setState(4392);
				def_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_argContext def_arg() throws RecognitionException {
		Def_argContext _localctx = new Def_argContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_def_arg);
		try {
			setState(4401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4395);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4396);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4397);
				qual_all_op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4398);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4399);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4400);
				match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_definitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_definitionContext old_aggr_definition() throws RecognitionException {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_old_aggr_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4403);
			match(OPEN_PAREN);
			setState(4404);
			old_aggr_list();
			setState(4405);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_listContext extends ParserRuleContext {
		public List<Old_aggr_elemContext> old_aggr_elem() {
			return getRuleContexts(Old_aggr_elemContext.class);
		}
		public Old_aggr_elemContext old_aggr_elem(int i) {
			return getRuleContext(Old_aggr_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_listContext old_aggr_list() throws RecognitionException {
		Old_aggr_listContext _localctx = new Old_aggr_listContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_old_aggr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4407);
			old_aggr_elem();
			setState(4412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4408);
				match(COMMA);
				setState(4409);
				old_aggr_elem();
				}
				}
				setState(4414);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_elemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_elemContext old_aggr_elem() throws RecognitionException {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_old_aggr_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4415);
			identifier();
			setState(4416);
			match(EQUAL);
			setState(4417);
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_enum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_enum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_enum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_enum_val_listContext opt_enum_val_list() throws RecognitionException {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_opt_enum_val_list);
		try {
			setState(4421);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4419);
				enum_val_list();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_val_listContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEnum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEnum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEnum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_val_listContext enum_val_list() throws RecognitionException {
		Enum_val_listContext _localctx = new Enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_enum_val_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4423);
			sconst();
			setState(4428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4424);
				match(COMMA);
				setState(4425);
				sconst();
				}
				}
				setState(4430);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterenumstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_if_not_existsContext opt_if_not_exists() {
			return getRuleContext(Opt_if_not_existsContext.class,0);
		}
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public AlterenumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterenumstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterenumstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterenumstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterenumstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterenumstmtContext alterenumstmt() throws RecognitionException {
		AlterenumstmtContext _localctx = new AlterenumstmtContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_alterenumstmt);
		try {
			setState(4468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4431);
				match(ALTER);
				setState(4432);
				match(TYPE_P);
				setState(4433);
				any_name();
				setState(4434);
				match(ADD_P);
				setState(4435);
				match(VALUE_P);
				setState(4436);
				opt_if_not_exists();
				setState(4437);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4439);
				match(ALTER);
				setState(4440);
				match(TYPE_P);
				setState(4441);
				any_name();
				setState(4442);
				match(ADD_P);
				setState(4443);
				match(VALUE_P);
				setState(4444);
				opt_if_not_exists();
				setState(4445);
				sconst();
				setState(4446);
				match(BEFORE);
				setState(4447);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4449);
				match(ALTER);
				setState(4450);
				match(TYPE_P);
				setState(4451);
				any_name();
				setState(4452);
				match(ADD_P);
				setState(4453);
				match(VALUE_P);
				setState(4454);
				opt_if_not_exists();
				setState(4455);
				sconst();
				setState(4456);
				match(AFTER);
				setState(4457);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4459);
				match(ALTER);
				setState(4460);
				match(TYPE_P);
				setState(4461);
				any_name();
				setState(4462);
				match(RENAME);
				setState(4463);
				match(VALUE_P);
				setState(4464);
				sconst();
				setState(4465);
				match(TO);
				setState(4466);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_not_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_not_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_not_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_if_not_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_if_not_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_if_not_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_not_existsContext opt_if_not_exists() throws RecognitionException {
		Opt_if_not_existsContext _localctx = new Opt_if_not_existsContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_opt_if_not_exists);
		try {
			setState(4474);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4470);
				match(IF_P);
				setState(4471);
				match(NOT);
				setState(4472);
				match(EXISTS);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateopclassstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_opfamilyContext opt_opfamily() {
			return getRuleContext(Opt_opfamilyContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public CreateopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopclassstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateopclassstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateopclassstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateopclassstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateopclassstmtContext createopclassstmt() throws RecognitionException {
		CreateopclassstmtContext _localctx = new CreateopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_createopclassstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4476);
			match(CREATE);
			setState(4477);
			match(OPERATOR);
			setState(4478);
			match(CLASS);
			setState(4479);
			any_name();
			setState(4480);
			opt_default();
			setState(4481);
			match(FOR);
			setState(4482);
			match(TYPE_P);
			setState(4483);
			typename();
			setState(4484);
			match(USING);
			setState(4485);
			name();
			setState(4486);
			opt_opfamily();
			setState(4487);
			match(AS);
			setState(4488);
			opclass_item_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_item_listContext extends ParserRuleContext {
		public List<Opclass_itemContext> opclass_item() {
			return getRuleContexts(Opclass_itemContext.class);
		}
		public Opclass_itemContext opclass_item(int i) {
			return getRuleContext(Opclass_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_item_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_item_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_item_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_item_listContext opclass_item_list() throws RecognitionException {
		Opclass_item_listContext _localctx = new Opclass_item_listContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_opclass_item_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4490);
			opclass_item();
			setState(4495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4491);
				match(COMMA);
				setState(4492);
				opclass_item();
				}
				}
				setState(4497);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_itemContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Opclass_purposeContext opclass_purpose() {
			return getRuleContext(Opclass_purposeContext.class,0);
		}
		public Opt_recheckContext opt_recheck() {
			return getRuleContext(Opt_recheckContext.class,0);
		}
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_itemContext opclass_item() throws RecognitionException {
		Opclass_itemContext _localctx = new Opclass_itemContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_opclass_item);
		try {
			setState(4523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4498);
				match(OPERATOR);
				setState(4499);
				iconst();
				setState(4500);
				any_operator();
				setState(4501);
				opclass_purpose();
				setState(4502);
				opt_recheck();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4504);
				match(OPERATOR);
				setState(4505);
				iconst();
				setState(4506);
				operator_with_argtypes();
				setState(4507);
				opclass_purpose();
				setState(4508);
				opt_recheck();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4510);
				match(FUNCTION);
				setState(4511);
				iconst();
				setState(4512);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4514);
				match(FUNCTION);
				setState(4515);
				iconst();
				setState(4516);
				match(OPEN_PAREN);
				setState(4517);
				type_list();
				setState(4518);
				match(CLOSE_PAREN);
				setState(4519);
				function_with_argtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4521);
				match(STORAGE);
				setState(4522);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_defaultContext opt_default() throws RecognitionException {
		Opt_defaultContext _localctx = new Opt_defaultContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_opt_default);
		try {
			setState(4527);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4525);
				match(DEFAULT);
				}
				break;
			case FOR:
			case CONVERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_opfamilyContext extends ParserRuleContext {
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_opfamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_opfamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_opfamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_opfamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_opfamilyContext opt_opfamily() throws RecognitionException {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_opt_opfamily);
		try {
			setState(4532);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4529);
				match(FAMILY);
				setState(4530);
				any_name();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_purposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_purpose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_purpose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_purpose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_purpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_purposeContext opclass_purpose() throws RecognitionException {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_opclass_purpose);
		try {
			setState(4541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4534);
				match(FOR);
				setState(4535);
				match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4536);
				match(FOR);
				setState(4537);
				match(ORDER);
				setState(4538);
				match(BY);
				setState(4539);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_recheckContext extends ParserRuleContext {
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_recheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_recheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_recheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_recheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_recheckContext opt_recheck() throws RecognitionException {
		Opt_recheckContext _localctx = new Opt_recheckContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_opt_recheck);
		try {
			setState(4545);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(4543);
				match(RECHECK);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateopfamilystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateopfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateopfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateopfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateopfamilystmtContext createopfamilystmt() throws RecognitionException {
		CreateopfamilystmtContext _localctx = new CreateopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_createopfamilystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4547);
			match(CREATE);
			setState(4548);
			match(OPERATOR);
			setState(4549);
			match(FAMILY);
			setState(4550);
			any_name();
			setState(4551);
			match(USING);
			setState(4552);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteropfamilystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public AlteropfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteropfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteropfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteropfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteropfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteropfamilystmtContext alteropfamilystmt() throws RecognitionException {
		AlteropfamilystmtContext _localctx = new AlteropfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_alteropfamilystmt);
		try {
			setState(4572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4554);
				match(ALTER);
				setState(4555);
				match(OPERATOR);
				setState(4556);
				match(FAMILY);
				setState(4557);
				any_name();
				setState(4558);
				match(USING);
				setState(4559);
				name();
				setState(4560);
				match(ADD_P);
				setState(4561);
				opclass_item_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4563);
				match(ALTER);
				setState(4564);
				match(OPERATOR);
				setState(4565);
				match(FAMILY);
				setState(4566);
				any_name();
				setState(4567);
				match(USING);
				setState(4568);
				name();
				setState(4569);
				match(DROP);
				setState(4570);
				opclass_drop_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_drop_listContext extends ParserRuleContext {
		public List<Opclass_dropContext> opclass_drop() {
			return getRuleContexts(Opclass_dropContext.class);
		}
		public Opclass_dropContext opclass_drop(int i) {
			return getRuleContext(Opclass_dropContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_drop_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_drop_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_drop_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_drop_listContext opclass_drop_list() throws RecognitionException {
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_opclass_drop_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4574);
			opclass_drop();
			setState(4579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4575);
				match(COMMA);
				setState(4576);
				opclass_drop();
				}
				}
				setState(4581);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_dropContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_dropContext opclass_drop() throws RecognitionException {
		Opclass_dropContext _localctx = new Opclass_dropContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_opclass_drop);
		try {
			setState(4594);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4582);
				match(OPERATOR);
				setState(4583);
				iconst();
				setState(4584);
				match(OPEN_PAREN);
				setState(4585);
				type_list();
				setState(4586);
				match(CLOSE_PAREN);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4588);
				match(FUNCTION);
				setState(4589);
				iconst();
				setState(4590);
				match(OPEN_PAREN);
				setState(4591);
				type_list();
				setState(4592);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropopclassstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopclassstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropopclassstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropopclassstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropopclassstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropopclassstmtContext dropopclassstmt() throws RecognitionException {
		DropopclassstmtContext _localctx = new DropopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_dropopclassstmt);
		try {
			setState(4614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4596);
				match(DROP);
				setState(4597);
				match(OPERATOR);
				setState(4598);
				match(CLASS);
				setState(4599);
				any_name();
				setState(4600);
				match(USING);
				setState(4601);
				name();
				setState(4602);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4604);
				match(DROP);
				setState(4605);
				match(OPERATOR);
				setState(4606);
				match(CLASS);
				setState(4607);
				match(IF_P);
				setState(4608);
				match(EXISTS);
				setState(4609);
				any_name();
				setState(4610);
				match(USING);
				setState(4611);
				name();
				setState(4612);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropopfamilystmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropopfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropopfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropopfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropopfamilystmtContext dropopfamilystmt() throws RecognitionException {
		DropopfamilystmtContext _localctx = new DropopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_dropopfamilystmt);
		try {
			setState(4634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4616);
				match(DROP);
				setState(4617);
				match(OPERATOR);
				setState(4618);
				match(FAMILY);
				setState(4619);
				any_name();
				setState(4620);
				match(USING);
				setState(4621);
				name();
				setState(4622);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4624);
				match(DROP);
				setState(4625);
				match(OPERATOR);
				setState(4626);
				match(FAMILY);
				setState(4627);
				match(IF_P);
				setState(4628);
				match(EXISTS);
				setState(4629);
				any_name();
				setState(4630);
				match(USING);
				setState(4631);
				name();
				setState(4632);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropownedstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropownedstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropownedstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropownedstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropownedstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropownedstmtContext dropownedstmt() throws RecognitionException {
		DropownedstmtContext _localctx = new DropownedstmtContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_dropownedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4636);
			match(DROP);
			setState(4637);
			match(OWNED);
			setState(4638);
			match(BY);
			setState(4639);
			role_list();
			setState(4640);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReassignownedstmtContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public ReassignownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignownedstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReassignownedstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReassignownedstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReassignownedstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignownedstmtContext reassignownedstmt() throws RecognitionException {
		ReassignownedstmtContext _localctx = new ReassignownedstmtContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_reassignownedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4642);
			match(REASSIGN);
			setState(4643);
			match(OWNED);
			setState(4644);
			match(BY);
			setState(4645);
			role_list();
			setState(4646);
			match(TO);
			setState(4647);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Type_name_listContext type_name_list() {
			return getRuleContext(Type_name_listContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public DropstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropstmtContext dropstmt() throws RecognitionException {
		DropstmtContext _localctx = new DropstmtContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_dropstmt);
		try {
			setState(4727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4649);
				match(DROP);
				setState(4650);
				object_type_any_name();
				setState(4651);
				match(IF_P);
				setState(4652);
				match(EXISTS);
				setState(4653);
				any_name_list();
				setState(4654);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4656);
				match(DROP);
				setState(4657);
				object_type_any_name();
				setState(4658);
				any_name_list();
				setState(4659);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4661);
				match(DROP);
				setState(4662);
				drop_type_name();
				setState(4663);
				match(IF_P);
				setState(4664);
				match(EXISTS);
				setState(4665);
				name_list();
				setState(4666);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4668);
				match(DROP);
				setState(4669);
				drop_type_name();
				setState(4670);
				name_list();
				setState(4671);
				opt_drop_behavior();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4673);
				match(DROP);
				setState(4674);
				object_type_name_on_any_name();
				setState(4675);
				name();
				setState(4676);
				match(ON);
				setState(4677);
				any_name();
				setState(4678);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4680);
				match(DROP);
				setState(4681);
				object_type_name_on_any_name();
				setState(4682);
				match(IF_P);
				setState(4683);
				match(EXISTS);
				setState(4684);
				name();
				setState(4685);
				match(ON);
				setState(4686);
				any_name();
				setState(4687);
				opt_drop_behavior();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4689);
				match(DROP);
				setState(4690);
				match(TYPE_P);
				setState(4691);
				type_name_list();
				setState(4692);
				opt_drop_behavior();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4694);
				match(DROP);
				setState(4695);
				match(TYPE_P);
				setState(4696);
				match(IF_P);
				setState(4697);
				match(EXISTS);
				setState(4698);
				type_name_list();
				setState(4699);
				opt_drop_behavior();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4701);
				match(DROP);
				setState(4702);
				match(DOMAIN_P);
				setState(4703);
				type_name_list();
				setState(4704);
				opt_drop_behavior();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4706);
				match(DROP);
				setState(4707);
				match(DOMAIN_P);
				setState(4708);
				match(IF_P);
				setState(4709);
				match(EXISTS);
				setState(4710);
				type_name_list();
				setState(4711);
				opt_drop_behavior();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4713);
				match(DROP);
				setState(4714);
				match(INDEX);
				setState(4715);
				match(CONCURRENTLY);
				setState(4716);
				any_name_list();
				setState(4717);
				opt_drop_behavior();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4719);
				match(DROP);
				setState(4720);
				match(INDEX);
				setState(4721);
				match(CONCURRENTLY);
				setState(4722);
				match(IF_P);
				setState(4723);
				match(EXISTS);
				setState(4724);
				any_name_list();
				setState(4725);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_any_nameContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public Object_type_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_any_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_any_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_any_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_any_nameContext object_type_any_name() throws RecognitionException {
		Object_type_any_nameContext _localctx = new Object_type_any_nameContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_object_type_any_name);
		try {
			setState(4752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4729);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4730);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4731);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4732);
				match(MATERIALIZED);
				setState(4733);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4734);
				match(INDEX);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4735);
				match(FOREIGN);
				setState(4736);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4737);
				match(COLLATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4738);
				match(CONVERSION_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4739);
				match(STATISTICS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4740);
				match(TEXT_P);
				setState(4741);
				match(SEARCH);
				setState(4742);
				match(PARSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4743);
				match(TEXT_P);
				setState(4744);
				match(SEARCH);
				setState(4745);
				match(DICTIONARY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4746);
				match(TEXT_P);
				setState(4747);
				match(SEARCH);
				setState(4748);
				match(TEMPLATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4749);
				match(TEXT_P);
				setState(4750);
				match(SEARCH);
				setState(4751);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_nameContext extends ParserRuleContext {
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_nameContext object_type_name() throws RecognitionException {
		Object_type_nameContext _localctx = new Object_type_nameContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_object_type_name);
		try {
			setState(4759);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOREIGN:
			case ACCESS:
			case EVENT:
			case EXTENSION:
			case LANGUAGE:
			case PROCEDURAL:
			case SCHEMA:
			case SERVER:
			case PUBLICATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(4754);
				drop_type_name();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4755);
				match(DATABASE);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4756);
				match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(4757);
				match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4758);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_type_nameContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public Drop_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_type_nameContext drop_type_name() throws RecognitionException {
		Drop_type_nameContext _localctx = new Drop_type_nameContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_drop_type_name);
		try {
			setState(4775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4761);
				match(ACCESS);
				setState(4762);
				match(METHOD);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4763);
				match(EVENT);
				setState(4764);
				match(TRIGGER);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4765);
				match(EXTENSION);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4766);
				match(FOREIGN);
				setState(4767);
				match(DATA_P);
				setState(4768);
				match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4769);
				opt_procedural();
				setState(4770);
				match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(4772);
				match(PUBLICATION);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 7);
				{
				setState(4773);
				match(SCHEMA);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 8);
				{
				setState(4774);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_name_on_any_nameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Object_type_name_on_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name_on_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_name_on_any_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_name_on_any_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_name_on_any_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_name_on_any_nameContext object_type_name_on_any_name() throws RecognitionException {
		Object_type_name_on_any_nameContext _localctx = new Object_type_name_on_any_nameContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_object_type_name_on_any_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4777);
			_la = _input.LA(1);
			if ( !(_la==RULE || _la==TRIGGER || _la==POLICY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_name_listContext extends ParserRuleContext {
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Any_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_name_listContext any_name_list() throws RecognitionException {
		Any_name_listContext _localctx = new Any_name_listContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_any_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4779);
			any_name();
			setState(4784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4780);
				match(COMMA);
				setState(4781);
				any_name();
				}
				}
				setState(4786);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_nameContext any_name() throws RecognitionException {
		Any_nameContext _localctx = new Any_nameContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_any_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4787);
			colid();
			setState(4789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4788);
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public List<Attr_nameContext> attr_name() {
			return getRuleContexts(Attr_nameContext.class);
		}
		public Attr_nameContext attr_name(int i) {
			return getRuleContext(Attr_nameContext.class,i);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		AttrsContext _localctx = new AttrsContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_attrs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4791);
			match(DOT);
			setState(4793); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4792);
					attr_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4795); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_name_listContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_name_listContext type_name_list() throws RecognitionException {
		Type_name_listContext _localctx = new Type_name_listContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_type_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4797);
			typename();
			setState(4802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4798);
				match(COMMA);
				setState(4799);
				typename();
				}
				}
				setState(4804);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncatestmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_restart_seqsContext opt_restart_seqs() {
			return getRuleContext(Opt_restart_seqsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TruncatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTruncatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTruncatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTruncatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncatestmtContext truncatestmt() throws RecognitionException {
		TruncatestmtContext _localctx = new TruncatestmtContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_truncatestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4805);
			match(TRUNCATE);
			setState(4806);
			opt_table();
			setState(4807);
			relation_expr_list();
			setState(4808);
			opt_restart_seqs();
			setState(4809);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_restart_seqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restart_seqs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_restart_seqs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_restart_seqs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_restart_seqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restart_seqsContext opt_restart_seqs() throws RecognitionException {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_opt_restart_seqs);
		try {
			setState(4816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTINUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4811);
				match(CONTINUE_P);
				setState(4812);
				match(IDENTITY_P);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(4813);
				match(RESTART);
				setState(4814);
				match(IDENTITY_P);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentstmtContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Comment_textContext comment_text() {
			return getRuleContext(Comment_textContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CommentstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommentstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommentstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommentstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentstmtContext commentstmt() throws RecognitionException {
		CommentstmtContext _localctx = new CommentstmtContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_commentstmt);
		try {
			setState(4965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4818);
				match(COMMENT);
				setState(4819);
				match(ON);
				setState(4820);
				object_type_any_name();
				setState(4821);
				any_name();
				setState(4822);
				match(IS);
				setState(4823);
				comment_text();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4825);
				match(COMMENT);
				setState(4826);
				match(ON);
				setState(4827);
				match(COLUMN);
				setState(4828);
				any_name();
				setState(4829);
				match(IS);
				setState(4830);
				comment_text();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4832);
				match(COMMENT);
				setState(4833);
				match(ON);
				setState(4834);
				object_type_name();
				setState(4835);
				name();
				setState(4836);
				match(IS);
				setState(4837);
				comment_text();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4839);
				match(COMMENT);
				setState(4840);
				match(ON);
				setState(4841);
				match(TYPE_P);
				setState(4842);
				typename();
				setState(4843);
				match(IS);
				setState(4844);
				comment_text();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4846);
				match(COMMENT);
				setState(4847);
				match(ON);
				setState(4848);
				match(DOMAIN_P);
				setState(4849);
				typename();
				setState(4850);
				match(IS);
				setState(4851);
				comment_text();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4853);
				match(COMMENT);
				setState(4854);
				match(ON);
				setState(4855);
				match(AGGREGATE);
				setState(4856);
				aggregate_with_argtypes();
				setState(4857);
				match(IS);
				setState(4858);
				comment_text();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4860);
				match(COMMENT);
				setState(4861);
				match(ON);
				setState(4862);
				match(FUNCTION);
				setState(4863);
				function_with_argtypes();
				setState(4864);
				match(IS);
				setState(4865);
				comment_text();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4867);
				match(COMMENT);
				setState(4868);
				match(ON);
				setState(4869);
				match(OPERATOR);
				setState(4870);
				operator_with_argtypes();
				setState(4871);
				match(IS);
				setState(4872);
				comment_text();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4874);
				match(COMMENT);
				setState(4875);
				match(ON);
				setState(4876);
				match(CONSTRAINT);
				setState(4877);
				name();
				setState(4878);
				match(ON);
				setState(4879);
				any_name();
				setState(4880);
				match(IS);
				setState(4881);
				comment_text();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4883);
				match(COMMENT);
				setState(4884);
				match(ON);
				setState(4885);
				match(CONSTRAINT);
				setState(4886);
				name();
				setState(4887);
				match(ON);
				setState(4888);
				match(DOMAIN_P);
				setState(4889);
				any_name();
				setState(4890);
				match(IS);
				setState(4891);
				comment_text();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4893);
				match(COMMENT);
				setState(4894);
				match(ON);
				setState(4895);
				object_type_name_on_any_name();
				setState(4896);
				name();
				setState(4897);
				match(ON);
				setState(4898);
				any_name();
				setState(4899);
				match(IS);
				setState(4900);
				comment_text();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4902);
				match(COMMENT);
				setState(4903);
				match(ON);
				setState(4904);
				match(PROCEDURE);
				setState(4905);
				function_with_argtypes();
				setState(4906);
				match(IS);
				setState(4907);
				comment_text();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4909);
				match(COMMENT);
				setState(4910);
				match(ON);
				setState(4911);
				match(ROUTINE);
				setState(4912);
				function_with_argtypes();
				setState(4913);
				match(IS);
				setState(4914);
				comment_text();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4916);
				match(COMMENT);
				setState(4917);
				match(ON);
				setState(4918);
				match(TRANSFORM);
				setState(4919);
				match(FOR);
				setState(4920);
				typename();
				setState(4921);
				match(LANGUAGE);
				setState(4922);
				name();
				setState(4923);
				match(IS);
				setState(4924);
				comment_text();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4926);
				match(COMMENT);
				setState(4927);
				match(ON);
				setState(4928);
				match(OPERATOR);
				setState(4929);
				match(CLASS);
				setState(4930);
				any_name();
				setState(4931);
				match(USING);
				setState(4932);
				name();
				setState(4933);
				match(IS);
				setState(4934);
				comment_text();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4936);
				match(COMMENT);
				setState(4937);
				match(ON);
				setState(4938);
				match(OPERATOR);
				setState(4939);
				match(FAMILY);
				setState(4940);
				any_name();
				setState(4941);
				match(USING);
				setState(4942);
				name();
				setState(4943);
				match(IS);
				setState(4944);
				comment_text();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4946);
				match(COMMENT);
				setState(4947);
				match(ON);
				setState(4948);
				match(LARGE_P);
				setState(4949);
				match(OBJECT_P);
				setState(4950);
				numericonly();
				setState(4951);
				match(IS);
				setState(4952);
				comment_text();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4954);
				match(COMMENT);
				setState(4955);
				match(ON);
				setState(4956);
				match(CAST);
				setState(4957);
				match(OPEN_PAREN);
				setState(4958);
				typename();
				setState(4959);
				match(AS);
				setState(4960);
				typename();
				setState(4961);
				match(CLOSE_PAREN);
				setState(4962);
				match(IS);
				setState(4963);
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_textContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_text; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComment_text(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComment_text(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComment_text(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_textContext comment_text() throws RecognitionException {
		Comment_textContext _localctx = new Comment_textContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_comment_text);
		try {
			setState(4969);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4967);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4968);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeclabelstmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public Opt_providerContext opt_provider() {
			return getRuleContext(Opt_providerContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public SeclabelstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seclabelstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeclabelstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeclabelstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeclabelstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeclabelstmtContext seclabelstmt() throws RecognitionException {
		SeclabelstmtContext _localctx = new SeclabelstmtContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_seclabelstmt);
		try {
			setState(5062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4971);
				match(SECURITY);
				setState(4972);
				match(LABEL);
				setState(4973);
				opt_provider();
				setState(4974);
				match(ON);
				setState(4975);
				object_type_any_name();
				setState(4976);
				any_name();
				setState(4977);
				match(IS);
				setState(4978);
				security_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4980);
				match(SECURITY);
				setState(4981);
				match(LABEL);
				setState(4982);
				opt_provider();
				setState(4983);
				match(ON);
				setState(4984);
				match(COLUMN);
				setState(4985);
				any_name();
				setState(4986);
				match(IS);
				setState(4987);
				security_label();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4989);
				match(SECURITY);
				setState(4990);
				match(LABEL);
				setState(4991);
				opt_provider();
				setState(4992);
				match(ON);
				setState(4993);
				object_type_name();
				setState(4994);
				name();
				setState(4995);
				match(IS);
				setState(4996);
				security_label();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4998);
				match(SECURITY);
				setState(4999);
				match(LABEL);
				setState(5000);
				opt_provider();
				setState(5001);
				match(ON);
				setState(5002);
				match(TYPE_P);
				setState(5003);
				typename();
				setState(5004);
				match(IS);
				setState(5005);
				security_label();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5007);
				match(SECURITY);
				setState(5008);
				match(LABEL);
				setState(5009);
				opt_provider();
				setState(5010);
				match(ON);
				setState(5011);
				match(DOMAIN_P);
				setState(5012);
				typename();
				setState(5013);
				match(IS);
				setState(5014);
				security_label();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5016);
				match(SECURITY);
				setState(5017);
				match(LABEL);
				setState(5018);
				opt_provider();
				setState(5019);
				match(ON);
				setState(5020);
				match(AGGREGATE);
				setState(5021);
				aggregate_with_argtypes();
				setState(5022);
				match(IS);
				setState(5023);
				security_label();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5025);
				match(SECURITY);
				setState(5026);
				match(LABEL);
				setState(5027);
				opt_provider();
				setState(5028);
				match(ON);
				setState(5029);
				match(FUNCTION);
				setState(5030);
				function_with_argtypes();
				setState(5031);
				match(IS);
				setState(5032);
				security_label();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5034);
				match(SECURITY);
				setState(5035);
				match(LABEL);
				setState(5036);
				opt_provider();
				setState(5037);
				match(ON);
				setState(5038);
				match(LARGE_P);
				setState(5039);
				match(OBJECT_P);
				setState(5040);
				numericonly();
				setState(5041);
				match(IS);
				setState(5042);
				security_label();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5044);
				match(SECURITY);
				setState(5045);
				match(LABEL);
				setState(5046);
				opt_provider();
				setState(5047);
				match(ON);
				setState(5048);
				match(PROCEDURE);
				setState(5049);
				function_with_argtypes();
				setState(5050);
				match(IS);
				setState(5051);
				security_label();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5053);
				match(SECURITY);
				setState(5054);
				match(LABEL);
				setState(5055);
				opt_provider();
				setState(5056);
				match(ON);
				setState(5057);
				match(ROUTINE);
				setState(5058);
				function_with_argtypes();
				setState(5059);
				match(IS);
				setState(5060);
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_providerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Opt_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_providerContext opt_provider() throws RecognitionException {
		Opt_providerContext _localctx = new Opt_providerContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_opt_provider);
		try {
			setState(5067);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5064);
				match(FOR);
				setState(5065);
				nonreservedword_or_sconst();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_labelContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSecurity_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSecurity_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSecurity_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_security_label);
		try {
			setState(5071);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(5069);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5070);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchstmtContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public Fetch_argsContext fetch_args() {
			return getRuleContext(Fetch_argsContext.class,0);
		}
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public FetchstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetchstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetchstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetchstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchstmtContext fetchstmt() throws RecognitionException {
		FetchstmtContext _localctx = new FetchstmtContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_fetchstmt);
		try {
			setState(5077);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5073);
				match(FETCH);
				setState(5074);
				fetch_args();
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5075);
				match(MOVE);
				setState(5076);
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_argsContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public Opt_from_inContext opt_from_in() {
			return getRuleContext(Opt_from_inContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetch_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetch_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetch_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_argsContext fetch_args() throws RecognitionException {
		Fetch_argsContext _localctx = new Fetch_argsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_fetch_args);
		try {
			setState(5145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5079);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5080);
				from_in();
				setState(5081);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5083);
				match(NEXT);
				setState(5084);
				opt_from_in();
				setState(5085);
				cursor_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5087);
				match(PRIOR);
				setState(5088);
				opt_from_in();
				setState(5089);
				cursor_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5091);
				match(FIRST_P);
				setState(5092);
				opt_from_in();
				setState(5093);
				cursor_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5095);
				match(LAST_P);
				setState(5096);
				opt_from_in();
				setState(5097);
				cursor_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5099);
				match(ABSOLUTE_P);
				setState(5100);
				signediconst();
				setState(5101);
				opt_from_in();
				setState(5102);
				cursor_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5104);
				match(RELATIVE_P);
				setState(5105);
				signediconst();
				setState(5106);
				opt_from_in();
				setState(5107);
				cursor_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5109);
				signediconst();
				setState(5110);
				opt_from_in();
				setState(5111);
				cursor_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5113);
				match(ALL);
				setState(5114);
				opt_from_in();
				setState(5115);
				cursor_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5117);
				match(FORWARD);
				setState(5118);
				opt_from_in();
				setState(5119);
				cursor_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5121);
				match(FORWARD);
				setState(5122);
				signediconst();
				setState(5123);
				opt_from_in();
				setState(5124);
				cursor_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5126);
				match(FORWARD);
				setState(5127);
				match(ALL);
				setState(5128);
				opt_from_in();
				setState(5129);
				cursor_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5131);
				match(BACKWARD);
				setState(5132);
				opt_from_in();
				setState(5133);
				cursor_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5135);
				match(BACKWARD);
				setState(5136);
				signediconst();
				setState(5137);
				opt_from_in();
				setState(5138);
				cursor_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5140);
				match(BACKWARD);
				setState(5141);
				match(ALL);
				setState(5142);
				opt_from_in();
				setState(5143);
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_inContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5147);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_from_inContext extends ParserRuleContext {
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_from_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_from_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_from_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_from_inContext opt_from_in() throws RecognitionException {
		Opt_from_inContext _localctx = new Opt_from_inContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_opt_from_in);
		try {
			setState(5151);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5149);
				from_in();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantstmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public GrantstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantstmtContext grantstmt() throws RecognitionException {
		GrantstmtContext _localctx = new GrantstmtContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_grantstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5153);
			match(GRANT);
			setState(5154);
			privileges();
			setState(5155);
			match(ON);
			setState(5156);
			privilege_target();
			setState(5157);
			match(TO);
			setState(5158);
			grantee_list();
			setState(5159);
			opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevokestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevokestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevokestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokestmtContext revokestmt() throws RecognitionException {
		RevokestmtContext _localctx = new RevokestmtContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_revokestmt);
		try {
			setState(5180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5161);
				match(REVOKE);
				setState(5162);
				privileges();
				setState(5163);
				match(ON);
				setState(5164);
				privilege_target();
				setState(5165);
				match(FROM);
				setState(5166);
				grantee_list();
				setState(5167);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5169);
				match(REVOKE);
				setState(5170);
				match(GRANT);
				setState(5171);
				match(OPTION);
				setState(5172);
				match(FOR);
				setState(5173);
				privileges();
				setState(5174);
				match(ON);
				setState(5175);
				privilege_target();
				setState(5176);
				match(FROM);
				setState(5177);
				grantee_list();
				setState(5178);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_privileges);
		try {
			setState(5197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5182);
				privilege_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5183);
				match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5184);
				match(ALL);
				setState(5185);
				match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5186);
				match(ALL);
				setState(5187);
				match(OPEN_PAREN);
				setState(5188);
				columnlist();
				setState(5189);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5191);
				match(ALL);
				setState(5192);
				match(PRIVILEGES);
				setState(5193);
				match(OPEN_PAREN);
				setState(5194);
				columnlist();
				setState(5195);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_listContext extends ParserRuleContext {
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_listContext privilege_list() throws RecognitionException {
		Privilege_listContext _localctx = new Privilege_listContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_privilege_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5199);
			privilege();
			setState(5204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5200);
				match(COMMA);
				setState(5201);
				privilege();
				}
				}
				setState(5206);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_privilege);
		try {
			setState(5216);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5207);
				match(SELECT);
				setState(5208);
				opt_column_list();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(5209);
				match(REFERENCES);
				setState(5210);
				opt_column_list();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5211);
				match(CREATE);
				setState(5212);
				opt_column_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5213);
				colid();
				setState(5214);
				opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_targetContext extends ParserRuleContext {
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public Numericonly_listContext numericonly_list() {
			return getRuleContext(Numericonly_listContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_targetContext privilege_target() throws RecognitionException {
		Privilege_targetContext _localctx = new Privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_privilege_target);
		try {
			setState(5276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5218);
				qualified_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5219);
				match(TABLE);
				setState(5220);
				qualified_name_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5221);
				match(SEQUENCE);
				setState(5222);
				qualified_name_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5223);
				match(FOREIGN);
				setState(5224);
				match(DATA_P);
				setState(5225);
				match(WRAPPER);
				setState(5226);
				name_list();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5227);
				match(FOREIGN);
				setState(5228);
				match(SERVER);
				setState(5229);
				name_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5230);
				match(FUNCTION);
				setState(5231);
				function_with_argtypes_list();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5232);
				match(PROCEDURE);
				setState(5233);
				function_with_argtypes_list();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5234);
				match(ROUTINE);
				setState(5235);
				function_with_argtypes_list();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5236);
				match(DATABASE);
				setState(5237);
				name_list();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5238);
				match(DOMAIN_P);
				setState(5239);
				any_name_list();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5240);
				match(LANGUAGE);
				setState(5241);
				name_list();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5242);
				match(LARGE_P);
				setState(5243);
				match(OBJECT_P);
				setState(5244);
				numericonly_list();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5245);
				match(SCHEMA);
				setState(5246);
				name_list();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5247);
				match(TABLESPACE);
				setState(5248);
				name_list();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5249);
				match(TYPE_P);
				setState(5250);
				any_name_list();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5251);
				match(ALL);
				setState(5252);
				match(TABLES);
				setState(5253);
				match(IN_P);
				setState(5254);
				match(SCHEMA);
				setState(5255);
				name_list();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5256);
				match(ALL);
				setState(5257);
				match(SEQUENCES);
				setState(5258);
				match(IN_P);
				setState(5259);
				match(SCHEMA);
				setState(5260);
				name_list();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5261);
				match(ALL);
				setState(5262);
				match(FUNCTIONS);
				setState(5263);
				match(IN_P);
				setState(5264);
				match(SCHEMA);
				setState(5265);
				name_list();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5266);
				match(ALL);
				setState(5267);
				match(PROCEDURES);
				setState(5268);
				match(IN_P);
				setState(5269);
				match(SCHEMA);
				setState(5270);
				name_list();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5271);
				match(ALL);
				setState(5272);
				match(ROUTINES);
				setState(5273);
				match(IN_P);
				setState(5274);
				match(SCHEMA);
				setState(5275);
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grantee_listContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantee_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantee_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantee_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grantee_listContext grantee_list() throws RecognitionException {
		Grantee_listContext _localctx = new Grantee_listContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_grantee_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5278);
			grantee();
			setState(5283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5279);
				match(COMMA);
				setState(5280);
				grantee();
				}
				}
				setState(5285);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_grantee);
		try {
			setState(5289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5286);
				rolespec();
				}
				break;
			case GROUP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5287);
				match(GROUP_P);
				setState(5288);
				rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_grant_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_grant_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_grant_grant_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_grant_grant_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_grant_grant_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_grant_optionContext opt_grant_grant_option() throws RecognitionException {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_opt_grant_grant_option);
		try {
			setState(5295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5291);
				match(WITH);
				setState(5292);
				match(GRANT);
				setState(5293);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantrolestmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return getRuleContext(Opt_grant_admin_optionContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public GrantrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantrolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantrolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantrolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantrolestmtContext grantrolestmt() throws RecognitionException {
		GrantrolestmtContext _localctx = new GrantrolestmtContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_grantrolestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5297);
			match(GRANT);
			setState(5298);
			privilege_list();
			setState(5299);
			match(TO);
			setState(5300);
			role_list();
			setState(5301);
			opt_grant_admin_option();
			setState(5302);
			opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokerolestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokerolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokerolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevokerolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevokerolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevokerolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokerolestmtContext revokerolestmt() throws RecognitionException {
		RevokerolestmtContext _localctx = new RevokerolestmtContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_revokerolestmt);
		try {
			setState(5321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5304);
				match(REVOKE);
				setState(5305);
				privilege_list();
				setState(5306);
				match(FROM);
				setState(5307);
				role_list();
				setState(5308);
				opt_granted_by();
				setState(5309);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5311);
				match(REVOKE);
				setState(5312);
				match(ADMIN);
				setState(5313);
				match(OPTION);
				setState(5314);
				match(FOR);
				setState(5315);
				privilege_list();
				setState(5316);
				match(FROM);
				setState(5317);
				role_list();
				setState(5318);
				opt_granted_by();
				setState(5319);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_admin_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_admin_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_grant_admin_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_grant_admin_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_grant_admin_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_admin_optionContext opt_grant_admin_option() throws RecognitionException {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_opt_grant_admin_option);
		try {
			setState(5327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5323);
				match(WITH);
				setState(5324);
				match(ADMIN);
				setState(5325);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_granted_byContext extends ParserRuleContext {
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_granted_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_granted_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_granted_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_granted_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_granted_byContext opt_granted_by() throws RecognitionException {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_opt_granted_by);
		try {
			setState(5333);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5329);
				match(GRANTED);
				setState(5330);
				match(BY);
				setState(5331);
				rolespec();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdefaultprivilegesstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public DefacloptionlistContext defacloptionlist() {
			return getRuleContext(DefacloptionlistContext.class,0);
		}
		public DefaclactionContext defaclaction() {
			return getRuleContext(DefaclactionContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdefaultprivilegesstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdefaultprivilegesstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdefaultprivilegesstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdefaultprivilegesstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() throws RecognitionException {
		AlterdefaultprivilegesstmtContext _localctx = new AlterdefaultprivilegesstmtContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_alterdefaultprivilegesstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5335);
			match(ALTER);
			setState(5336);
			match(DEFAULT);
			setState(5337);
			match(PRIVILEGES);
			setState(5338);
			defacloptionlist();
			setState(5339);
			defaclaction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefacloptionlistContext extends ParserRuleContext {
		public List<DefacloptionContext> defacloption() {
			return getRuleContexts(DefacloptionContext.class);
		}
		public DefacloptionContext defacloption(int i) {
			return getRuleContext(DefacloptionContext.class,i);
		}
		public DefacloptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloptionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacloptionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacloptionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacloptionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefacloptionlistContext defacloptionlist() throws RecognitionException {
		DefacloptionlistContext _localctx = new DefacloptionlistContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_defacloptionlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==IN_P) {
				{
				{
				setState(5341);
				defacloption();
				}
				}
				setState(5346);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefacloptionContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public DefacloptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacloption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacloption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacloption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefacloptionContext defacloption() throws RecognitionException {
		DefacloptionContext _localctx = new DefacloptionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_defacloption);
		try {
			setState(5356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5347);
				match(IN_P);
				setState(5348);
				match(SCHEMA);
				setState(5349);
				name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5350);
				match(FOR);
				setState(5351);
				match(ROLE);
				setState(5352);
				role_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5353);
				match(FOR);
				setState(5354);
				match(USER);
				setState(5355);
				role_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaclactionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Defacl_privilege_targetContext defacl_privilege_target() {
			return getRuleContext(Defacl_privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public DefaclactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaclaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefaclaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefaclaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefaclaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaclactionContext defaclaction() throws RecognitionException {
		DefaclactionContext _localctx = new DefaclactionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_defaclaction);
		try {
			setState(5385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5358);
				match(GRANT);
				setState(5359);
				privileges();
				setState(5360);
				match(ON);
				setState(5361);
				defacl_privilege_target();
				setState(5362);
				match(TO);
				setState(5363);
				grantee_list();
				setState(5364);
				opt_grant_grant_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5366);
				match(REVOKE);
				setState(5367);
				privileges();
				setState(5368);
				match(ON);
				setState(5369);
				defacl_privilege_target();
				setState(5370);
				match(FROM);
				setState(5371);
				grantee_list();
				setState(5372);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5374);
				match(REVOKE);
				setState(5375);
				match(GRANT);
				setState(5376);
				match(OPTION);
				setState(5377);
				match(FOR);
				setState(5378);
				privileges();
				setState(5379);
				match(ON);
				setState(5380);
				defacl_privilege_target();
				setState(5381);
				match(FROM);
				setState(5382);
				grantee_list();
				setState(5383);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Defacl_privilege_targetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacl_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacl_privilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacl_privilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacl_privilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Defacl_privilege_targetContext defacl_privilege_target() throws RecognitionException {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_defacl_privilege_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5387);
			_la = _input.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (SEQUENCES - 335)) | (1L << (TABLES - 335)) | (1L << (TYPES_P - 335)))) != 0) || _la==ROUTINES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_uniqueContext opt_unique() {
			return getRuleContext(Opt_uniqueContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Opt_index_nameContext opt_index_name() {
			return getRuleContext(Opt_index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext opt_include() {
			return getRuleContext(Opt_includeContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IndexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndexstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndexstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndexstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexstmtContext indexstmt() throws RecognitionException {
		IndexstmtContext _localctx = new IndexstmtContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_indexstmt);
		try {
			setState(5424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5389);
				match(CREATE);
				setState(5390);
				opt_unique();
				setState(5391);
				match(INDEX);
				setState(5392);
				opt_concurrently();
				setState(5393);
				opt_index_name();
				setState(5394);
				match(ON);
				setState(5395);
				relation_expr();
				setState(5396);
				access_method_clause();
				setState(5397);
				match(OPEN_PAREN);
				setState(5398);
				index_params();
				setState(5399);
				match(CLOSE_PAREN);
				setState(5400);
				opt_include();
				setState(5401);
				opt_reloptions();
				setState(5402);
				opttablespace();
				setState(5403);
				where_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5405);
				match(CREATE);
				setState(5406);
				opt_unique();
				setState(5407);
				match(INDEX);
				setState(5408);
				opt_concurrently();
				setState(5409);
				match(IF_P);
				setState(5410);
				match(NOT);
				setState(5411);
				match(EXISTS);
				setState(5412);
				name();
				setState(5413);
				match(ON);
				setState(5414);
				relation_expr();
				setState(5415);
				access_method_clause();
				setState(5416);
				match(OPEN_PAREN);
				setState(5417);
				index_params();
				setState(5418);
				match(CLOSE_PAREN);
				setState(5419);
				opt_include();
				setState(5420);
				opt_reloptions();
				setState(5421);
				opttablespace();
				setState(5422);
				where_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uniqueContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_unique; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_unique(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_unique(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_unique(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uniqueContext opt_unique() throws RecognitionException {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_opt_unique);
		try {
			setState(5428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5426);
				match(UNIQUE);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_concurrentlyContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_concurrently; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_concurrently(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_concurrently(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_concurrently(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_concurrentlyContext opt_concurrently() throws RecognitionException {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_opt_concurrently);
		try {
			setState(5432);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCURRENTLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5430);
				match(CONCURRENTLY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case ON:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_index_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_index_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_index_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_index_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_index_nameContext opt_index_name() throws RecognitionException {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_opt_index_name);
		try {
			setState(5436);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5434);
				name();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAccess_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAccess_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAccess_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_method_clauseContext access_method_clause() throws RecognitionException {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_access_method_clause);
		try {
			setState(5441);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5438);
				match(USING);
				setState(5439);
				name();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_paramsContext extends ParserRuleContext {
		public List<Index_elemContext> index_elem() {
			return getRuleContexts(Index_elemContext.class);
		}
		public Index_elemContext index_elem(int i) {
			return getRuleContext(Index_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_paramsContext index_params() throws RecognitionException {
		Index_paramsContext _localctx = new Index_paramsContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_index_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5443);
			index_elem();
			setState(5448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5444);
				match(COMMA);
				setState(5445);
				index_elem();
				}
				}
				setState(5450);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_elem_optionsContext extends ParserRuleContext {
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Index_elem_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_elem_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_elem_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_elem_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elem_optionsContext index_elem_options() throws RecognitionException {
		Index_elem_optionsContext _localctx = new Index_elem_optionsContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_index_elem_options);
		try {
			setState(5462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5451);
				opt_collate();
				setState(5452);
				opt_class();
				setState(5453);
				opt_asc_desc();
				setState(5454);
				opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5456);
				opt_collate();
				setState(5457);
				any_name();
				setState(5458);
				reloptions();
				setState(5459);
				opt_asc_desc();
				setState(5460);
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Index_elem_optionsContext index_elem_options() {
			return getRuleContext(Index_elem_optionsContext.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Index_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elemContext index_elem() throws RecognitionException {
		Index_elemContext _localctx = new Index_elemContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_index_elem);
		try {
			setState(5475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5464);
				colid();
				setState(5465);
				index_elem_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5467);
				func_expr_windowless();
				setState(5468);
				index_elem_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5470);
				match(OPEN_PAREN);
				setState(5471);
				a_expr();
				setState(5472);
				match(CLOSE_PAREN);
				setState(5473);
				index_elem_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_includeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_including_paramsContext index_including_params() {
			return getRuleContext(Index_including_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_include(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_include(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_includeContext opt_include() throws RecognitionException {
		Opt_includeContext _localctx = new Opt_includeContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_opt_include);
		try {
			setState(5483);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCLUDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5477);
				match(INCLUDE);
				setState(5478);
				match(OPEN_PAREN);
				setState(5479);
				index_including_params();
				setState(5480);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_including_paramsContext extends ParserRuleContext {
		public List<Index_elemContext> index_elem() {
			return getRuleContexts(Index_elemContext.class);
		}
		public Index_elemContext index_elem(int i) {
			return getRuleContext(Index_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Index_including_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_including_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_including_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_including_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_including_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_including_paramsContext index_including_params() throws RecognitionException {
		Index_including_paramsContext _localctx = new Index_including_paramsContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_index_including_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5485);
			index_elem();
			setState(5490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5486);
				match(COMMA);
				setState(5487);
				index_elem();
				}
				}
				setState(5492);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collateContext opt_collate() throws RecognitionException {
		Opt_collateContext _localctx = new Opt_collateContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_opt_collate);
		try {
			setState(5496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5493);
				match(COLLATE);
				setState(5494);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_classContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_classContext opt_class() throws RecognitionException {
		Opt_classContext _localctx = new Opt_classContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_opt_class);
		try {
			setState(5500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5498);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asc_descContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asc_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_asc_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_asc_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_asc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asc_descContext opt_asc_desc() throws RecognitionException {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_opt_asc_desc);
		try {
			setState(5505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC:
				enterOuterAlt(_localctx, 1);
				{
				setState(5502);
				match(ASC);
				}
				break;
			case DESC:
				enterOuterAlt(_localctx, 2);
				{
				setState(5503);
				match(DESC);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nulls_orderContext extends ParserRuleContext {
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nulls_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nulls_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nulls_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nulls_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nulls_orderContext opt_nulls_order() throws RecognitionException {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_opt_nulls_order);
		try {
			setState(5512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5507);
				match(NULLS_P);
				setState(5508);
				match(FIRST_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5509);
				match(NULLS_P);
				setState(5510);
				match(LAST_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefunctionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_args_with_defaultsContext func_args_with_defaults() {
			return getRuleContext(Func_args_with_defaultsContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatefunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunctionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunctionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunctionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunctionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefunctionstmtContext createfunctionstmt() throws RecognitionException {
		CreatefunctionstmtContext _localctx = new CreatefunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_createfunctionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5514);
			match(CREATE);
			setState(5515);
			opt_or_replace();
			setState(5516);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5517);
			func_name();
			setState(5518);
			func_args_with_defaults();
			setState(5528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(5519);
				match(RETURNS);
				setState(5526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(5520);
					func_return();
					}
					break;
				case 2:
					{
					setState(5521);
					match(TABLE);
					setState(5522);
					match(OPEN_PAREN);
					setState(5523);
					table_func_column_list();
					setState(5524);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			setState(5530);
			createfunc_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_or_replaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_or_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_or_replace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_or_replace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_or_replace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_or_replaceContext opt_or_replace() throws RecognitionException {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_opt_or_replace);
		try {
			setState(5535);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5532);
				match(OR);
				setState(5533);
				match(REPLACE);
				}
				break;
			case AGGREGATE:
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case PROCEDURE:
			case RULE:
			case TRUSTED:
			case TRANSFORM:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argsContext func_args() throws RecognitionException {
		Func_argsContext _localctx = new Func_argsContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_func_args);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5537);
			match(OPEN_PAREN);
			setState(5539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (FETCH - 67)) | (1L << (IN_P - 67)) | (1L << (TABLE - 67)) | (1L << (VARIADIC - 67)) | (1L << (AUTHORIZATION - 67)) | (1L << (BINARY - 67)) | (1L << (COLLATION - 67)) | (1L << (CONCURRENTLY - 67)) | (1L << (CROSS - 67)) | (1L << (CURRENT_SCHEMA - 67)) | (1L << (FREEZE - 67)) | (1L << (FULL - 67)) | (1L << (ILIKE - 67)) | (1L << (INNER_P - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (IS - 131)) | (1L << (ISNULL - 131)) | (1L << (JOIN - 131)) | (1L << (LEFT - 131)) | (1L << (LIKE - 131)) | (1L << (NATURAL - 131)) | (1L << (NOTNULL - 131)) | (1L << (OUTER_P - 131)) | (1L << (OVER - 131)) | (1L << (OVERLAPS - 131)) | (1L << (RIGHT - 131)) | (1L << (SIMILAR - 131)) | (1L << (VERBOSE - 131)) | (1L << (ABORT_P - 131)) | (1L << (ABSOLUTE_P - 131)) | (1L << (ACCESS - 131)) | (1L << (ACTION - 131)) | (1L << (ADD_P - 131)) | (1L << (ADMIN - 131)) | (1L << (AFTER - 131)) | (1L << (AGGREGATE - 131)) | (1L << (ALSO - 131)) | (1L << (ALTER - 131)) | (1L << (ALWAYS - 131)) | (1L << (ASSERTION - 131)) | (1L << (ASSIGNMENT - 131)) | (1L << (AT - 131)) | (1L << (ATTRIBUTE - 131)) | (1L << (BACKWARD - 131)) | (1L << (BEFORE - 131)) | (1L << (BEGIN_P - 131)) | (1L << (BY - 131)) | (1L << (CACHE - 131)) | (1L << (CALLED - 131)) | (1L << (CASCADE - 131)) | (1L << (CASCADED - 131)) | (1L << (CHAIN - 131)) | (1L << (CHARACTERISTICS - 131)) | (1L << (CHECKPOINT - 131)) | (1L << (CLASS - 131)) | (1L << (CLOSE - 131)) | (1L << (CLUSTER - 131)) | (1L << (COMMENT - 131)) | (1L << (COMMENTS - 131)) | (1L << (COMMIT - 131)) | (1L << (COMMITTED - 131)) | (1L << (CONFIGURATION - 131)) | (1L << (CONNECTION - 131)) | (1L << (CONSTRAINTS - 131)) | (1L << (CONTENT_P - 131)) | (1L << (CONTINUE_P - 131)) | (1L << (CONVERSION_P - 131)) | (1L << (COPY - 131)) | (1L << (COST - 131)) | (1L << (CSV - 131)) | (1L << (CURSOR - 131)) | (1L << (CYCLE - 131)) | (1L << (DATA_P - 131)) | (1L << (DATABASE - 131)) | (1L << (DAY_P - 131)) | (1L << (DEALLOCATE - 131)) | (1L << (DECLARE - 131)) | (1L << (DEFAULTS - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (DEFERRED - 195)) | (1L << (DEFINER - 195)) | (1L << (DELETE_P - 195)) | (1L << (DELIMITER - 195)) | (1L << (DELIMITERS - 195)) | (1L << (DICTIONARY - 195)) | (1L << (DISABLE_P - 195)) | (1L << (DISCARD - 195)) | (1L << (DOCUMENT_P - 195)) | (1L << (DOMAIN_P - 195)) | (1L << (DOUBLE_P - 195)) | (1L << (DROP - 195)) | (1L << (EACH - 195)) | (1L << (ENABLE_P - 195)) | (1L << (ENCODING - 195)) | (1L << (ENCRYPTED - 195)) | (1L << (ENUM_P - 195)) | (1L << (ESCAPE - 195)) | (1L << (EVENT - 195)) | (1L << (EXCLUDE - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXCLUSIVE - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FAMILY - 195)) | (1L << (FIRST_P - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (FORWARD - 195)) | (1L << (FUNCTION - 195)) | (1L << (FUNCTIONS - 195)) | (1L << (GLOBAL - 195)) | (1L << (GRANTED - 195)) | (1L << (HANDLER - 195)) | (1L << (HEADER_P - 195)) | (1L << (HOLD - 195)) | (1L << (HOUR_P - 195)) | (1L << (IDENTITY_P - 195)) | (1L << (IF_P - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (IMMUTABLE - 195)) | (1L << (IMPLICIT_P - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDEX - 195)) | (1L << (INDEXES - 195)) | (1L << (INHERIT - 195)) | (1L << (INHERITS - 195)) | (1L << (INLINE_P - 195)) | (1L << (INSENSITIVE - 195)) | (1L << (INSERT - 195)) | (1L << (INSTEAD - 195)) | (1L << (INVOKER - 195)) | (1L << (ISOLATION - 195)) | (1L << (KEY - 195)) | (1L << (LABEL - 195)) | (1L << (LANGUAGE - 195)) | (1L << (LARGE_P - 195)) | (1L << (LAST_P - 195)) | (1L << (LEAKPROOF - 195)) | (1L << (LEVEL - 195)) | (1L << (LISTEN - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (LOAD - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCATION - 259)) | (1L << (LOCK_P - 259)) | (1L << (MAPPING - 259)) | (1L << (MATCH - 259)) | (1L << (MATERIALIZED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINUTE_P - 259)) | (1L << (MINVALUE - 259)) | (1L << (MODE - 259)) | (1L << (MONTH_P - 259)) | (1L << (MOVE - 259)) | (1L << (NAME_P - 259)) | (1L << (NAMES - 259)) | (1L << (NEXT - 259)) | (1L << (NO - 259)) | (1L << (NOTHING - 259)) | (1L << (NOTIFY - 259)) | (1L << (NOWAIT - 259)) | (1L << (NULLS_P - 259)) | (1L << (OBJECT_P - 259)) | (1L << (OF - 259)) | (1L << (OFF - 259)) | (1L << (OIDS - 259)) | (1L << (OPERATOR - 259)) | (1L << (OPTION - 259)) | (1L << (OPTIONS - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARSER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PASSWORD - 259)) | (1L << (PLANS - 259)) | (1L << (PRECEDING - 259)) | (1L << (PREPARE - 259)) | (1L << (PREPARED - 259)) | (1L << (PRESERVE - 259)) | (1L << (PRIOR - 259)) | (1L << (PRIVILEGES - 259)) | (1L << (PROCEDURAL - 259)) | (1L << (PROCEDURE - 259)) | (1L << (PROGRAM - 259)) | (1L << (QUOTE - 259)) | (1L << (RANGE - 259)) | (1L << (READ - 259)) | (1L << (REASSIGN - 259)) | (1L << (RECHECK - 259)) | (1L << (RECURSIVE - 259)) | (1L << (REF - 259)) | (1L << (REFRESH - 259)) | (1L << (REINDEX - 259)) | (1L << (RELATIVE_P - 259)) | (1L << (RELEASE - 259)) | (1L << (RENAME - 259)) | (1L << (REPEATABLE - 259)) | (1L << (REPLACE - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (RETURNS - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (REVOKE - 323)) | (1L << (ROLE - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROWS - 323)) | (1L << (RULE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCROLL - 323)) | (1L << (SEARCH - 323)) | (1L << (SECOND_P - 323)) | (1L << (SECURITY - 323)) | (1L << (SEQUENCE - 323)) | (1L << (SEQUENCES - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERVER - 323)) | (1L << (SESSION - 323)) | (1L << (SET - 323)) | (1L << (SHARE - 323)) | (1L << (SHOW - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (STABLE - 323)) | (1L << (STANDALONE_P - 323)) | (1L << (START - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATISTICS - 323)) | (1L << (STDIN - 323)) | (1L << (STDOUT - 323)) | (1L << (STORAGE - 323)) | (1L << (STRICT_P - 323)) | (1L << (STRIP_P - 323)) | (1L << (SYSID - 323)) | (1L << (SYSTEM_P - 323)) | (1L << (TABLES - 323)) | (1L << (TABLESPACE - 323)) | (1L << (TEMP - 323)) | (1L << (TEMPLATE - 323)) | (1L << (TEMPORARY - 323)) | (1L << (TEXT_P - 323)) | (1L << (TRANSACTION - 323)) | (1L << (TRIGGER - 323)) | (1L << (TRUNCATE - 323)) | (1L << (TRUSTED - 323)) | (1L << (TYPE_P - 323)) | (1L << (TYPES_P - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNENCRYPTED - 323)) | (1L << (UNKNOWN - 323)) | (1L << (UNLISTEN - 323)) | (1L << (UNLOGGED - 323)) | (1L << (UNTIL - 323)) | (1L << (UPDATE - 323)) | (1L << (VACUUM - 323)) | (1L << (VALID - 323)) | (1L << (VALIDATE - 323)) | (1L << (VALIDATOR - 323)) | (1L << (VARYING - 323)) | (1L << (VERSION_P - 323)) | (1L << (VIEW - 323)) | (1L << (VOLATILE - 323)) | (1L << (WHITESPACE_P - 323)) | (1L << (WITHOUT - 323)) | (1L << (WORK - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (WRAPPER - 387)) | (1L << (WRITE - 387)) | (1L << (XML_P - 387)) | (1L << (YEAR_P - 387)) | (1L << (YES_P - 387)) | (1L << (ZONE - 387)) | (1L << (BETWEEN - 387)) | (1L << (BIGINT - 387)) | (1L << (BIT - 387)) | (1L << (BOOLEAN_P - 387)) | (1L << (CHAR_P - 387)) | (1L << (CHARACTER - 387)) | (1L << (COALESCE - 387)) | (1L << (DEC - 387)) | (1L << (DECIMAL_P - 387)) | (1L << (EXISTS - 387)) | (1L << (EXTRACT - 387)) | (1L << (FLOAT_P - 387)) | (1L << (GREATEST - 387)) | (1L << (INOUT - 387)) | (1L << (INT_P - 387)) | (1L << (INTEGER - 387)) | (1L << (INTERVAL - 387)) | (1L << (LEAST - 387)) | (1L << (NATIONAL - 387)) | (1L << (NCHAR - 387)) | (1L << (NONE - 387)) | (1L << (NULLIF - 387)) | (1L << (NUMERIC - 387)) | (1L << (OVERLAY - 387)) | (1L << (POSITION - 387)) | (1L << (PRECISION - 387)) | (1L << (REAL - 387)) | (1L << (ROW - 387)) | (1L << (SETOF - 387)) | (1L << (SMALLINT - 387)) | (1L << (SUBSTRING - 387)) | (1L << (TIME - 387)) | (1L << (TIMESTAMP - 387)) | (1L << (TREAT - 387)) | (1L << (TRIM - 387)) | (1L << (VALUES - 387)) | (1L << (VARCHAR - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCONCAT - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (CALL - 387)) | (1L << (CURRENT_P - 387)) | (1L << (CATALOG_P - 387)) | (1L << (ATTACH - 387)) | (1L << (DETACH - 387)) | (1L << (EXPRESSION - 387)) | (1L << (GENERATED - 387)) | (1L << (LOGGED - 387)) | (1L << (STORED - 387)) | (1L << (INCLUDE - 387)) | (1L << (ROUTINE - 387)) | (1L << (TRANSFORM - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (IMPORT_P - 451)) | (1L << (POLICY - 451)) | (1L << (METHOD - 451)) | (1L << (REFERENCING - 451)) | (1L << (NEW - 451)) | (1L << (OLD - 451)) | (1L << (VALUE_P - 451)) | (1L << (SUBSCRIPTION - 451)) | (1L << (PUBLICATION - 451)) | (1L << (OUT_P - 451)) | (1L << (ROUTINES - 451)) | (1L << (SCHEMAS - 451)) | (1L << (PROCEDURES - 451)) | (1L << (INPUT_P - 451)) | (1L << (SUPPORT - 451)) | (1L << (PARALLEL - 451)) | (1L << (SQL_P - 451)) | (1L << (DEPENDS - 451)) | (1L << (OVERRIDING - 451)) | (1L << (CONFLICT - 451)) | (1L << (SKIP_P - 451)) | (1L << (LOCKED - 451)) | (1L << (TIES - 451)) | (1L << (ROLLUP - 451)) | (1L << (CUBE - 451)) | (1L << (GROUPING - 451)) | (1L << (SETS - 451)) | (1L << (TABLESAMPLE - 451)) | (1L << (ORDINALITY - 451)) | (1L << (XMLTABLE - 451)) | (1L << (COLUMNS - 451)) | (1L << (XMLNAMESPACES - 451)) | (1L << (ROWTYPE - 451)) | (1L << (NORMALIZED - 451)) | (1L << (WITHIN - 451)) | (1L << (FILTER - 451)) | (1L << (GROUPS - 451)) | (1L << (OTHERS - 451)) | (1L << (NFC - 451)) | (1L << (NFD - 451)) | (1L << (NFKC - 451)) | (1L << (NFKD - 451)) | (1L << (UESCAPE - 451)) | (1L << (VIEWS - 451)) | (1L << (NORMALIZE - 451)) | (1L << (DUMP - 451)) | (1L << (PRINT_STRICT_PARAMS - 451)) | (1L << (VARIABLE_CONFLICT - 451)) | (1L << (ERROR - 451)) | (1L << (USE_VARIABLE - 451)) | (1L << (USE_COLUMN - 451)) | (1L << (ALIAS - 451)) | (1L << (CONSTANT - 451)) | (1L << (PERFORM - 451)) | (1L << (GET - 451)) | (1L << (DIAGNOSTICS - 451)) | (1L << (STACKED - 451)) | (1L << (ELSIF - 451)) | (1L << (REVERSE - 451)) | (1L << (SLICE - 451)) | (1L << (EXIT - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (RETURN - 515)) | (1L << (QUERY - 515)) | (1L << (RAISE - 515)) | (1L << (SQLSTATE - 515)) | (1L << (DEBUG - 515)) | (1L << (LOG - 515)) | (1L << (INFO - 515)) | (1L << (NOTICE - 515)) | (1L << (WARNING - 515)) | (1L << (EXCEPTION - 515)) | (1L << (ASSERT - 515)) | (1L << (OPEN - 515)) | (1L << (Identifier - 515)) | (1L << (QuotedIdentifier - 515)) | (1L << (UnicodeQuotedIdentifier - 515)) | (1L << (PLSQLVARIABLENAME - 515)) | (1L << (PLSQLIDENTIFIER - 515)))) != 0)) {
				{
				setState(5538);
				func_args_list();
				}
			}

			setState(5541);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_listContext extends ParserRuleContext {
		public List<Func_argContext> func_arg() {
			return getRuleContexts(Func_argContext.class);
		}
		public Func_argContext func_arg(int i) {
			return getRuleContext(Func_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_listContext func_args_list() throws RecognitionException {
		Func_args_listContext _localctx = new Func_args_listContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_func_args_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5543);
			func_arg();
			setState(5548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5544);
				match(COMMA);
				setState(5545);
				func_arg();
				}
				}
				setState(5550);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_with_argtypes_listContext extends ParserRuleContext {
		public List<Function_with_argtypesContext> function_with_argtypes() {
			return getRuleContexts(Function_with_argtypesContext.class);
		}
		public Function_with_argtypesContext function_with_argtypes(int i) {
			return getRuleContext(Function_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypes_listContext function_with_argtypes_list() throws RecognitionException {
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_function_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5551);
			function_with_argtypes();
			setState(5556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5552);
				match(COMMA);
				setState(5553);
				function_with_argtypes();
				}
				}
				setState(5558);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypesContext function_with_argtypes() throws RecognitionException {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_function_with_argtypes);
		int _la;
		try {
			setState(5567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5559);
				func_name();
				setState(5560);
				func_args();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5562);
				type_func_name_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5563);
				colid();
				setState(5565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_BRACKET || _la==DOT) {
					{
					setState(5564);
					indirection();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaultsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_with_defaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_with_defaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_with_defaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaultsContext func_args_with_defaults() throws RecognitionException {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_func_args_with_defaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5569);
			match(OPEN_PAREN);
			setState(5571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (FETCH - 67)) | (1L << (IN_P - 67)) | (1L << (TABLE - 67)) | (1L << (VARIADIC - 67)) | (1L << (AUTHORIZATION - 67)) | (1L << (BINARY - 67)) | (1L << (COLLATION - 67)) | (1L << (CONCURRENTLY - 67)) | (1L << (CROSS - 67)) | (1L << (CURRENT_SCHEMA - 67)) | (1L << (FREEZE - 67)) | (1L << (FULL - 67)) | (1L << (ILIKE - 67)) | (1L << (INNER_P - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (IS - 131)) | (1L << (ISNULL - 131)) | (1L << (JOIN - 131)) | (1L << (LEFT - 131)) | (1L << (LIKE - 131)) | (1L << (NATURAL - 131)) | (1L << (NOTNULL - 131)) | (1L << (OUTER_P - 131)) | (1L << (OVER - 131)) | (1L << (OVERLAPS - 131)) | (1L << (RIGHT - 131)) | (1L << (SIMILAR - 131)) | (1L << (VERBOSE - 131)) | (1L << (ABORT_P - 131)) | (1L << (ABSOLUTE_P - 131)) | (1L << (ACCESS - 131)) | (1L << (ACTION - 131)) | (1L << (ADD_P - 131)) | (1L << (ADMIN - 131)) | (1L << (AFTER - 131)) | (1L << (AGGREGATE - 131)) | (1L << (ALSO - 131)) | (1L << (ALTER - 131)) | (1L << (ALWAYS - 131)) | (1L << (ASSERTION - 131)) | (1L << (ASSIGNMENT - 131)) | (1L << (AT - 131)) | (1L << (ATTRIBUTE - 131)) | (1L << (BACKWARD - 131)) | (1L << (BEFORE - 131)) | (1L << (BEGIN_P - 131)) | (1L << (BY - 131)) | (1L << (CACHE - 131)) | (1L << (CALLED - 131)) | (1L << (CASCADE - 131)) | (1L << (CASCADED - 131)) | (1L << (CHAIN - 131)) | (1L << (CHARACTERISTICS - 131)) | (1L << (CHECKPOINT - 131)) | (1L << (CLASS - 131)) | (1L << (CLOSE - 131)) | (1L << (CLUSTER - 131)) | (1L << (COMMENT - 131)) | (1L << (COMMENTS - 131)) | (1L << (COMMIT - 131)) | (1L << (COMMITTED - 131)) | (1L << (CONFIGURATION - 131)) | (1L << (CONNECTION - 131)) | (1L << (CONSTRAINTS - 131)) | (1L << (CONTENT_P - 131)) | (1L << (CONTINUE_P - 131)) | (1L << (CONVERSION_P - 131)) | (1L << (COPY - 131)) | (1L << (COST - 131)) | (1L << (CSV - 131)) | (1L << (CURSOR - 131)) | (1L << (CYCLE - 131)) | (1L << (DATA_P - 131)) | (1L << (DATABASE - 131)) | (1L << (DAY_P - 131)) | (1L << (DEALLOCATE - 131)) | (1L << (DECLARE - 131)) | (1L << (DEFAULTS - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (DEFERRED - 195)) | (1L << (DEFINER - 195)) | (1L << (DELETE_P - 195)) | (1L << (DELIMITER - 195)) | (1L << (DELIMITERS - 195)) | (1L << (DICTIONARY - 195)) | (1L << (DISABLE_P - 195)) | (1L << (DISCARD - 195)) | (1L << (DOCUMENT_P - 195)) | (1L << (DOMAIN_P - 195)) | (1L << (DOUBLE_P - 195)) | (1L << (DROP - 195)) | (1L << (EACH - 195)) | (1L << (ENABLE_P - 195)) | (1L << (ENCODING - 195)) | (1L << (ENCRYPTED - 195)) | (1L << (ENUM_P - 195)) | (1L << (ESCAPE - 195)) | (1L << (EVENT - 195)) | (1L << (EXCLUDE - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXCLUSIVE - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FAMILY - 195)) | (1L << (FIRST_P - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (FORWARD - 195)) | (1L << (FUNCTION - 195)) | (1L << (FUNCTIONS - 195)) | (1L << (GLOBAL - 195)) | (1L << (GRANTED - 195)) | (1L << (HANDLER - 195)) | (1L << (HEADER_P - 195)) | (1L << (HOLD - 195)) | (1L << (HOUR_P - 195)) | (1L << (IDENTITY_P - 195)) | (1L << (IF_P - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (IMMUTABLE - 195)) | (1L << (IMPLICIT_P - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDEX - 195)) | (1L << (INDEXES - 195)) | (1L << (INHERIT - 195)) | (1L << (INHERITS - 195)) | (1L << (INLINE_P - 195)) | (1L << (INSENSITIVE - 195)) | (1L << (INSERT - 195)) | (1L << (INSTEAD - 195)) | (1L << (INVOKER - 195)) | (1L << (ISOLATION - 195)) | (1L << (KEY - 195)) | (1L << (LABEL - 195)) | (1L << (LANGUAGE - 195)) | (1L << (LARGE_P - 195)) | (1L << (LAST_P - 195)) | (1L << (LEAKPROOF - 195)) | (1L << (LEVEL - 195)) | (1L << (LISTEN - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (LOAD - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCATION - 259)) | (1L << (LOCK_P - 259)) | (1L << (MAPPING - 259)) | (1L << (MATCH - 259)) | (1L << (MATERIALIZED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINUTE_P - 259)) | (1L << (MINVALUE - 259)) | (1L << (MODE - 259)) | (1L << (MONTH_P - 259)) | (1L << (MOVE - 259)) | (1L << (NAME_P - 259)) | (1L << (NAMES - 259)) | (1L << (NEXT - 259)) | (1L << (NO - 259)) | (1L << (NOTHING - 259)) | (1L << (NOTIFY - 259)) | (1L << (NOWAIT - 259)) | (1L << (NULLS_P - 259)) | (1L << (OBJECT_P - 259)) | (1L << (OF - 259)) | (1L << (OFF - 259)) | (1L << (OIDS - 259)) | (1L << (OPERATOR - 259)) | (1L << (OPTION - 259)) | (1L << (OPTIONS - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARSER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PASSWORD - 259)) | (1L << (PLANS - 259)) | (1L << (PRECEDING - 259)) | (1L << (PREPARE - 259)) | (1L << (PREPARED - 259)) | (1L << (PRESERVE - 259)) | (1L << (PRIOR - 259)) | (1L << (PRIVILEGES - 259)) | (1L << (PROCEDURAL - 259)) | (1L << (PROCEDURE - 259)) | (1L << (PROGRAM - 259)) | (1L << (QUOTE - 259)) | (1L << (RANGE - 259)) | (1L << (READ - 259)) | (1L << (REASSIGN - 259)) | (1L << (RECHECK - 259)) | (1L << (RECURSIVE - 259)) | (1L << (REF - 259)) | (1L << (REFRESH - 259)) | (1L << (REINDEX - 259)) | (1L << (RELATIVE_P - 259)) | (1L << (RELEASE - 259)) | (1L << (RENAME - 259)) | (1L << (REPEATABLE - 259)) | (1L << (REPLACE - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (RETURNS - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (REVOKE - 323)) | (1L << (ROLE - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROWS - 323)) | (1L << (RULE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCROLL - 323)) | (1L << (SEARCH - 323)) | (1L << (SECOND_P - 323)) | (1L << (SECURITY - 323)) | (1L << (SEQUENCE - 323)) | (1L << (SEQUENCES - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERVER - 323)) | (1L << (SESSION - 323)) | (1L << (SET - 323)) | (1L << (SHARE - 323)) | (1L << (SHOW - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (STABLE - 323)) | (1L << (STANDALONE_P - 323)) | (1L << (START - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATISTICS - 323)) | (1L << (STDIN - 323)) | (1L << (STDOUT - 323)) | (1L << (STORAGE - 323)) | (1L << (STRICT_P - 323)) | (1L << (STRIP_P - 323)) | (1L << (SYSID - 323)) | (1L << (SYSTEM_P - 323)) | (1L << (TABLES - 323)) | (1L << (TABLESPACE - 323)) | (1L << (TEMP - 323)) | (1L << (TEMPLATE - 323)) | (1L << (TEMPORARY - 323)) | (1L << (TEXT_P - 323)) | (1L << (TRANSACTION - 323)) | (1L << (TRIGGER - 323)) | (1L << (TRUNCATE - 323)) | (1L << (TRUSTED - 323)) | (1L << (TYPE_P - 323)) | (1L << (TYPES_P - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNENCRYPTED - 323)) | (1L << (UNKNOWN - 323)) | (1L << (UNLISTEN - 323)) | (1L << (UNLOGGED - 323)) | (1L << (UNTIL - 323)) | (1L << (UPDATE - 323)) | (1L << (VACUUM - 323)) | (1L << (VALID - 323)) | (1L << (VALIDATE - 323)) | (1L << (VALIDATOR - 323)) | (1L << (VARYING - 323)) | (1L << (VERSION_P - 323)) | (1L << (VIEW - 323)) | (1L << (VOLATILE - 323)) | (1L << (WHITESPACE_P - 323)) | (1L << (WITHOUT - 323)) | (1L << (WORK - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (WRAPPER - 387)) | (1L << (WRITE - 387)) | (1L << (XML_P - 387)) | (1L << (YEAR_P - 387)) | (1L << (YES_P - 387)) | (1L << (ZONE - 387)) | (1L << (BETWEEN - 387)) | (1L << (BIGINT - 387)) | (1L << (BIT - 387)) | (1L << (BOOLEAN_P - 387)) | (1L << (CHAR_P - 387)) | (1L << (CHARACTER - 387)) | (1L << (COALESCE - 387)) | (1L << (DEC - 387)) | (1L << (DECIMAL_P - 387)) | (1L << (EXISTS - 387)) | (1L << (EXTRACT - 387)) | (1L << (FLOAT_P - 387)) | (1L << (GREATEST - 387)) | (1L << (INOUT - 387)) | (1L << (INT_P - 387)) | (1L << (INTEGER - 387)) | (1L << (INTERVAL - 387)) | (1L << (LEAST - 387)) | (1L << (NATIONAL - 387)) | (1L << (NCHAR - 387)) | (1L << (NONE - 387)) | (1L << (NULLIF - 387)) | (1L << (NUMERIC - 387)) | (1L << (OVERLAY - 387)) | (1L << (POSITION - 387)) | (1L << (PRECISION - 387)) | (1L << (REAL - 387)) | (1L << (ROW - 387)) | (1L << (SETOF - 387)) | (1L << (SMALLINT - 387)) | (1L << (SUBSTRING - 387)) | (1L << (TIME - 387)) | (1L << (TIMESTAMP - 387)) | (1L << (TREAT - 387)) | (1L << (TRIM - 387)) | (1L << (VALUES - 387)) | (1L << (VARCHAR - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCONCAT - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (CALL - 387)) | (1L << (CURRENT_P - 387)) | (1L << (CATALOG_P - 387)) | (1L << (ATTACH - 387)) | (1L << (DETACH - 387)) | (1L << (EXPRESSION - 387)) | (1L << (GENERATED - 387)) | (1L << (LOGGED - 387)) | (1L << (STORED - 387)) | (1L << (INCLUDE - 387)) | (1L << (ROUTINE - 387)) | (1L << (TRANSFORM - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (IMPORT_P - 451)) | (1L << (POLICY - 451)) | (1L << (METHOD - 451)) | (1L << (REFERENCING - 451)) | (1L << (NEW - 451)) | (1L << (OLD - 451)) | (1L << (VALUE_P - 451)) | (1L << (SUBSCRIPTION - 451)) | (1L << (PUBLICATION - 451)) | (1L << (OUT_P - 451)) | (1L << (ROUTINES - 451)) | (1L << (SCHEMAS - 451)) | (1L << (PROCEDURES - 451)) | (1L << (INPUT_P - 451)) | (1L << (SUPPORT - 451)) | (1L << (PARALLEL - 451)) | (1L << (SQL_P - 451)) | (1L << (DEPENDS - 451)) | (1L << (OVERRIDING - 451)) | (1L << (CONFLICT - 451)) | (1L << (SKIP_P - 451)) | (1L << (LOCKED - 451)) | (1L << (TIES - 451)) | (1L << (ROLLUP - 451)) | (1L << (CUBE - 451)) | (1L << (GROUPING - 451)) | (1L << (SETS - 451)) | (1L << (TABLESAMPLE - 451)) | (1L << (ORDINALITY - 451)) | (1L << (XMLTABLE - 451)) | (1L << (COLUMNS - 451)) | (1L << (XMLNAMESPACES - 451)) | (1L << (ROWTYPE - 451)) | (1L << (NORMALIZED - 451)) | (1L << (WITHIN - 451)) | (1L << (FILTER - 451)) | (1L << (GROUPS - 451)) | (1L << (OTHERS - 451)) | (1L << (NFC - 451)) | (1L << (NFD - 451)) | (1L << (NFKC - 451)) | (1L << (NFKD - 451)) | (1L << (UESCAPE - 451)) | (1L << (VIEWS - 451)) | (1L << (NORMALIZE - 451)) | (1L << (DUMP - 451)) | (1L << (PRINT_STRICT_PARAMS - 451)) | (1L << (VARIABLE_CONFLICT - 451)) | (1L << (ERROR - 451)) | (1L << (USE_VARIABLE - 451)) | (1L << (USE_COLUMN - 451)) | (1L << (ALIAS - 451)) | (1L << (CONSTANT - 451)) | (1L << (PERFORM - 451)) | (1L << (GET - 451)) | (1L << (DIAGNOSTICS - 451)) | (1L << (STACKED - 451)) | (1L << (ELSIF - 451)) | (1L << (REVERSE - 451)) | (1L << (SLICE - 451)) | (1L << (EXIT - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (RETURN - 515)) | (1L << (QUERY - 515)) | (1L << (RAISE - 515)) | (1L << (SQLSTATE - 515)) | (1L << (DEBUG - 515)) | (1L << (LOG - 515)) | (1L << (INFO - 515)) | (1L << (NOTICE - 515)) | (1L << (WARNING - 515)) | (1L << (EXCEPTION - 515)) | (1L << (ASSERT - 515)) | (1L << (OPEN - 515)) | (1L << (Identifier - 515)) | (1L << (QuotedIdentifier - 515)) | (1L << (UnicodeQuotedIdentifier - 515)) | (1L << (PLSQLVARIABLENAME - 515)) | (1L << (PLSQLIDENTIFIER - 515)))) != 0)) {
				{
				setState(5570);
				func_args_with_defaults_list();
				}
			}

			setState(5573);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaults_listContext extends ParserRuleContext {
		public List<Func_arg_with_defaultContext> func_arg_with_default() {
			return getRuleContexts(Func_arg_with_defaultContext.class);
		}
		public Func_arg_with_defaultContext func_arg_with_default(int i) {
			return getRuleContext(Func_arg_with_defaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_with_defaults_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_with_defaults_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_with_defaults_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaults_listContext func_args_with_defaults_list() throws RecognitionException {
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_func_args_with_defaults_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5575);
			func_arg_with_default();
			setState(5580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5576);
				match(COMMA);
				setState(5577);
				func_arg_with_default();
				}
				}
				setState(5582);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_argContext extends ParserRuleContext {
		public Arg_classContext arg_class() {
			return getRuleContext(Arg_classContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argContext func_arg() throws RecognitionException {
		Func_argContext _localctx = new Func_argContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_func_arg);
		try {
			setState(5596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5583);
				arg_class();
				setState(5585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
				case 1:
					{
					setState(5584);
					param_name();
					}
					break;
				}
				setState(5587);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5589);
				param_name();
				setState(5591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					setState(5590);
					arg_class();
					}
					break;
				}
				setState(5593);
				func_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5595);
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_classContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArg_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArg_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArg_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_classContext arg_class() throws RecognitionException {
		Arg_classContext _localctx = new Arg_classContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_arg_class);
		try {
			setState(5605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5598);
				match(IN_P);
				setState(5600);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(5599);
					match(OUT_P);
					}
					break;
				}
				}
				break;
			case OUT_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5602);
				match(OUT_P);
				}
				break;
			case INOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5603);
				match(INOUT);
				}
				break;
			case VARIADIC:
				enterOuterAlt(_localctx, 4);
				{
				setState(5604);
				match(VARIADIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterParam_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitParam_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5607);
			type_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_returnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_func_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5609);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_typeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_typeContext func_type() throws RecognitionException {
		Func_typeContext _localctx = new Func_typeContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_func_type);
		try {
			setState(5623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5611);
				typename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5612);
				type_function_name();
				setState(5613);
				attrs();
				setState(5614);
				match(PERCENT);
				setState(5615);
				match(TYPE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5617);
				match(SETOF);
				setState(5618);
				type_function_name();
				setState(5619);
				attrs();
				setState(5620);
				match(PERCENT);
				setState(5621);
				match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_with_defaultContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_with_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_with_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_with_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_with_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_with_defaultContext func_arg_with_default() throws RecognitionException {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_func_arg_with_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5625);
			func_arg();
			setState(5628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL || _la==DEFAULT) {
				{
				setState(5626);
				_la = _input.LA(1);
				if ( !(_la==EQUAL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5627);
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Aggr_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argContext aggr_arg() throws RecognitionException {
		Aggr_argContext _localctx = new Aggr_argContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_aggr_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5630);
			func_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public List<Aggr_args_listContext> aggr_args_list() {
			return getRuleContexts(Aggr_args_listContext.class);
		}
		public Aggr_args_listContext aggr_args_list(int i) {
			return getRuleContext(Aggr_args_listContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Aggr_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argsContext aggr_args() throws RecognitionException {
		Aggr_argsContext _localctx = new Aggr_argsContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_aggr_args);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5632);
			match(OPEN_PAREN);
			setState(5643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(5633);
				match(STAR);
				}
				break;
			case 2:
				{
				setState(5634);
				aggr_args_list();
				}
				break;
			case 3:
				{
				setState(5635);
				match(ORDER);
				setState(5636);
				match(BY);
				setState(5637);
				aggr_args_list();
				}
				break;
			case 4:
				{
				setState(5638);
				aggr_args_list();
				setState(5639);
				match(ORDER);
				setState(5640);
				match(BY);
				setState(5641);
				aggr_args_list();
				}
				break;
			}
			setState(5645);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_args_listContext extends ParserRuleContext {
		public List<Aggr_argContext> aggr_arg() {
			return getRuleContexts(Aggr_argContext.class);
		}
		public Aggr_argContext aggr_arg(int i) {
			return getRuleContext(Aggr_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Aggr_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_args_listContext aggr_args_list() throws RecognitionException {
		Aggr_args_listContext _localctx = new Aggr_args_listContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_aggr_args_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5647);
			aggr_arg();
			setState(5652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5648);
				match(COMMA);
				setState(5649);
				aggr_arg();
				}
				}
				setState(5654);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Aggregate_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_with_argtypesContext aggregate_with_argtypes() throws RecognitionException {
		Aggregate_with_argtypesContext _localctx = new Aggregate_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_aggregate_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5655);
			func_name();
			setState(5656);
			aggr_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_with_argtypes_listContext extends ParserRuleContext {
		public List<Aggregate_with_argtypesContext> aggregate_with_argtypes() {
			return getRuleContexts(Aggregate_with_argtypesContext.class);
		}
		public Aggregate_with_argtypesContext aggregate_with_argtypes(int i) {
			return getRuleContext(Aggregate_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Aggregate_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() throws RecognitionException {
		Aggregate_with_argtypes_listContext _localctx = new Aggregate_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_aggregate_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5658);
			aggregate_with_argtypes();
			setState(5663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5659);
				match(COMMA);
				setState(5660);
				aggregate_with_argtypes();
				}
				}
				setState(5665);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_listContext extends ParserRuleContext {
		public List<Createfunc_opt_itemContext> createfunc_opt_item() {
			return getRuleContexts(Createfunc_opt_itemContext.class);
		}
		public Createfunc_opt_itemContext createfunc_opt_item(int i) {
			return getRuleContext(Createfunc_opt_itemContext.class,i);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_listContext createfunc_opt_list() throws RecognitionException {
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_createfunc_opt_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5667); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(5666);
					createfunc_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5669); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,290,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );

			                ParseRoutineBody(_localctx);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_func_opt_itemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<TerminalNode> NULL_P() { return getTokens(PostgreSQLParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(PostgreSQLParser.NULL_P, i);
		}
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public FunctionsetresetclauseContext functionsetresetclause() {
			return getRuleContext(FunctionsetresetclauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_func_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommon_func_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommon_func_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommon_func_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_func_opt_itemContext common_func_opt_item() throws RecognitionException {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_common_func_opt_item);
		try {
			setState(5708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5673);
				match(CALLED);
				setState(5674);
				match(ON);
				setState(5675);
				match(NULL_P);
				setState(5676);
				match(INPUT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5677);
				match(RETURNS);
				setState(5678);
				match(NULL_P);
				setState(5679);
				match(ON);
				setState(5680);
				match(NULL_P);
				setState(5681);
				match(INPUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5682);
				match(STRICT_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5683);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5684);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5685);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5686);
				match(EXTERNAL);
				setState(5687);
				match(SECURITY);
				setState(5688);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5689);
				match(EXTERNAL);
				setState(5690);
				match(SECURITY);
				setState(5691);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5692);
				match(SECURITY);
				setState(5693);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5694);
				match(SECURITY);
				setState(5695);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5696);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5697);
				match(NOT);
				setState(5698);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5699);
				match(COST);
				setState(5700);
				numericonly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5701);
				match(ROWS);
				setState(5702);
				numericonly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5703);
				match(SUPPORT);
				setState(5704);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5705);
				functionsetresetclause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5706);
				match(PARALLEL);
				setState(5707);
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_itemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Func_asContext func_as() {
			return getRuleContext(Func_asContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public Transform_type_listContext transform_type_list() {
			return getRuleContext(Transform_type_listContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunc_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunc_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunc_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_itemContext createfunc_opt_item() throws RecognitionException {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_createfunc_opt_item);
		try {
			setState(5718);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5710);
				match(AS);
				setState(5711);
				func_as();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5712);
				match(LANGUAGE);
				setState(5713);
				nonreservedword_or_sconst();
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 3);
				{
				setState(5714);
				match(TRANSFORM);
				setState(5715);
				transform_type_list();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(5716);
				match(WINDOW);
				}
				break;
			case NOT:
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
			case SUPPORT:
			case PARALLEL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5717);
				common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_asContext extends ParserRuleContext {
		public ParserRuleContext Definition;
		public SconstContext def;
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_asContext func_as() throws RecognitionException {
		Func_asContext _localctx = new Func_asContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_func_as);
		try {
			setState(5725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5720);
				((Func_asContext)_localctx).def = sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5721);
				sconst();
				setState(5722);
				match(COMMA);
				setState(5723);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transform_type_listContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(PostgreSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(PostgreSQLParser.FOR, i);
		}
		public List<TerminalNode> TYPE_P() { return getTokens(PostgreSQLParser.TYPE_P); }
		public TerminalNode TYPE_P(int i) {
			return getToken(PostgreSQLParser.TYPE_P, i);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Transform_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransform_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransform_type_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransform_type_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transform_type_listContext transform_type_list() throws RecognitionException {
		Transform_type_listContext _localctx = new Transform_type_listContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_transform_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5727);
			match(FOR);
			setState(5728);
			match(TYPE_P);
			setState(5729);
			typename();
			setState(5736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5730);
				match(COMMA);
				setState(5731);
				match(FOR);
				setState(5732);
				match(TYPE_P);
				setState(5733);
				typename();
				}
				}
				setState(5738);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_definitionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Opt_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_definitionContext opt_definition() throws RecognitionException {
		Opt_definitionContext _localctx = new Opt_definitionContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_opt_definition);
		try {
			setState(5742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5739);
				match(WITH);
				setState(5740);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_columnContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_func_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_func_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_func_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_columnContext table_func_column() throws RecognitionException {
		Table_func_columnContext _localctx = new Table_func_columnContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_table_func_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5744);
			param_name();
			setState(5745);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_column_listContext extends ParserRuleContext {
		public List<Table_func_columnContext> table_func_column() {
			return getRuleContexts(Table_func_columnContext.class);
		}
		public Table_func_columnContext table_func_column(int i) {
			return getRuleContext(Table_func_columnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_func_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_func_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_func_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_column_listContext table_func_column_list() throws RecognitionException {
		Table_func_column_listContext _localctx = new Table_func_column_listContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_table_func_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5747);
			table_func_column();
			setState(5752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5748);
				match(COMMA);
				setState(5749);
				table_func_column();
				}
				}
				setState(5754);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterfunctionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Opt_restrictContext opt_restrict() {
			return getRuleContext(Opt_restrictContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public AlterfunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunctionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfunctionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfunctionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfunctionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfunctionstmtContext alterfunctionstmt() throws RecognitionException {
		AlterfunctionstmtContext _localctx = new AlterfunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_alterfunctionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5755);
			match(ALTER);
			setState(5756);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5757);
			function_with_argtypes();
			setState(5758);
			alterfunc_opt_list();
			setState(5759);
			opt_restrict();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterfunc_opt_listContext extends ParserRuleContext {
		public List<Common_func_opt_itemContext> common_func_opt_item() {
			return getRuleContexts(Common_func_opt_itemContext.class);
		}
		public Common_func_opt_itemContext common_func_opt_item(int i) {
			return getRuleContext(Common_func_opt_itemContext.class,i);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterfunc_opt_listContext alterfunc_opt_list() throws RecognitionException {
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_alterfunc_opt_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5762); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(5761);
					common_func_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5764); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,297,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_restrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_restrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_restrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_restrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restrictContext opt_restrict() throws RecognitionException {
		Opt_restrictContext _localctx = new Opt_restrictContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_opt_restrict);
		try {
			setState(5768);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5766);
				match(RESTRICT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemovefuncstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public RemovefuncstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removefuncstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemovefuncstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemovefuncstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemovefuncstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemovefuncstmtContext removefuncstmt() throws RecognitionException {
		RemovefuncstmtContext _localctx = new RemovefuncstmtContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_removefuncstmt);
		try {
			setState(5806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5770);
				match(DROP);
				setState(5771);
				match(FUNCTION);
				setState(5772);
				function_with_argtypes_list();
				setState(5773);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5775);
				match(DROP);
				setState(5776);
				match(FUNCTION);
				setState(5777);
				match(IF_P);
				setState(5778);
				match(EXISTS);
				setState(5779);
				function_with_argtypes_list();
				setState(5780);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5782);
				match(DROP);
				setState(5783);
				match(PROCEDURE);
				setState(5784);
				function_with_argtypes_list();
				setState(5785);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5787);
				match(DROP);
				setState(5788);
				match(PROCEDURE);
				setState(5789);
				match(IF_P);
				setState(5790);
				match(EXISTS);
				setState(5791);
				function_with_argtypes_list();
				setState(5792);
				opt_drop_behavior();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5794);
				match(DROP);
				setState(5795);
				match(ROUTINE);
				setState(5796);
				function_with_argtypes_list();
				setState(5797);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5799);
				match(DROP);
				setState(5800);
				match(ROUTINE);
				setState(5801);
				match(IF_P);
				setState(5802);
				match(EXISTS);
				setState(5803);
				function_with_argtypes_list();
				setState(5804);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveaggrstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return getRuleContext(Aggregate_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveaggrstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeaggrstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemoveaggrstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemoveaggrstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemoveaggrstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveaggrstmtContext removeaggrstmt() throws RecognitionException {
		RemoveaggrstmtContext _localctx = new RemoveaggrstmtContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_removeaggrstmt);
		try {
			setState(5820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5808);
				match(DROP);
				setState(5809);
				match(AGGREGATE);
				setState(5810);
				aggregate_with_argtypes_list();
				setState(5811);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5813);
				match(DROP);
				setState(5814);
				match(AGGREGATE);
				setState(5815);
				match(IF_P);
				setState(5816);
				match(EXISTS);
				setState(5817);
				aggregate_with_argtypes_list();
				setState(5818);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveoperstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return getRuleContext(Operator_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveoperstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeoperstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemoveoperstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemoveoperstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemoveoperstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveoperstmtContext removeoperstmt() throws RecognitionException {
		RemoveoperstmtContext _localctx = new RemoveoperstmtContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_removeoperstmt);
		try {
			setState(5834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5822);
				match(DROP);
				setState(5823);
				match(OPERATOR);
				setState(5824);
				operator_with_argtypes_list();
				setState(5825);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5827);
				match(DROP);
				setState(5828);
				match(OPERATOR);
				setState(5829);
				match(IF_P);
				setState(5830);
				match(EXISTS);
				setState(5831);
				operator_with_argtypes_list();
				setState(5832);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Oper_argtypesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOper_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOper_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOper_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oper_argtypesContext oper_argtypes() throws RecognitionException {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_oper_argtypes);
		try {
			setState(5858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5836);
				match(OPEN_PAREN);
				setState(5837);
				typename();
				setState(5838);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5840);
				match(OPEN_PAREN);
				setState(5841);
				typename();
				setState(5842);
				match(COMMA);
				setState(5843);
				typename();
				setState(5844);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5846);
				match(OPEN_PAREN);
				setState(5847);
				match(NONE);
				setState(5848);
				match(COMMA);
				setState(5849);
				typename();
				setState(5850);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5852);
				match(OPEN_PAREN);
				setState(5853);
				typename();
				setState(5854);
				match(COMMA);
				setState(5855);
				match(NONE);
				setState(5856);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_operatorContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_operatorContext any_operator() throws RecognitionException {
		Any_operatorContext _localctx = new Any_operatorContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_any_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO))) != 0) || _la==FETCH || _la==TABLE || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (IS - 131)) | (1L << (OUTER_P - 131)) | (1L << (OVER - 131)) | (1L << (ABORT_P - 131)) | (1L << (ABSOLUTE_P - 131)) | (1L << (ACCESS - 131)) | (1L << (ACTION - 131)) | (1L << (ADD_P - 131)) | (1L << (ADMIN - 131)) | (1L << (AFTER - 131)) | (1L << (AGGREGATE - 131)) | (1L << (ALSO - 131)) | (1L << (ALTER - 131)) | (1L << (ALWAYS - 131)) | (1L << (ASSERTION - 131)) | (1L << (ASSIGNMENT - 131)) | (1L << (AT - 131)) | (1L << (ATTRIBUTE - 131)) | (1L << (BACKWARD - 131)) | (1L << (BEFORE - 131)) | (1L << (BEGIN_P - 131)) | (1L << (BY - 131)) | (1L << (CACHE - 131)) | (1L << (CALLED - 131)) | (1L << (CASCADE - 131)) | (1L << (CASCADED - 131)) | (1L << (CHAIN - 131)) | (1L << (CHARACTERISTICS - 131)) | (1L << (CHECKPOINT - 131)) | (1L << (CLASS - 131)) | (1L << (CLOSE - 131)) | (1L << (CLUSTER - 131)) | (1L << (COMMENT - 131)) | (1L << (COMMENTS - 131)) | (1L << (COMMIT - 131)) | (1L << (COMMITTED - 131)) | (1L << (CONFIGURATION - 131)) | (1L << (CONNECTION - 131)) | (1L << (CONSTRAINTS - 131)) | (1L << (CONTENT_P - 131)) | (1L << (CONTINUE_P - 131)) | (1L << (CONVERSION_P - 131)) | (1L << (COPY - 131)) | (1L << (COST - 131)) | (1L << (CSV - 131)) | (1L << (CURSOR - 131)) | (1L << (CYCLE - 131)) | (1L << (DATA_P - 131)) | (1L << (DATABASE - 131)) | (1L << (DAY_P - 131)) | (1L << (DEALLOCATE - 131)) | (1L << (DECLARE - 131)) | (1L << (DEFAULTS - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (DEFERRED - 195)) | (1L << (DEFINER - 195)) | (1L << (DELETE_P - 195)) | (1L << (DELIMITER - 195)) | (1L << (DELIMITERS - 195)) | (1L << (DICTIONARY - 195)) | (1L << (DISABLE_P - 195)) | (1L << (DISCARD - 195)) | (1L << (DOCUMENT_P - 195)) | (1L << (DOMAIN_P - 195)) | (1L << (DOUBLE_P - 195)) | (1L << (DROP - 195)) | (1L << (EACH - 195)) | (1L << (ENABLE_P - 195)) | (1L << (ENCODING - 195)) | (1L << (ENCRYPTED - 195)) | (1L << (ENUM_P - 195)) | (1L << (ESCAPE - 195)) | (1L << (EVENT - 195)) | (1L << (EXCLUDE - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXCLUSIVE - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FAMILY - 195)) | (1L << (FIRST_P - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (FORWARD - 195)) | (1L << (FUNCTION - 195)) | (1L << (FUNCTIONS - 195)) | (1L << (GLOBAL - 195)) | (1L << (GRANTED - 195)) | (1L << (HANDLER - 195)) | (1L << (HEADER_P - 195)) | (1L << (HOLD - 195)) | (1L << (HOUR_P - 195)) | (1L << (IDENTITY_P - 195)) | (1L << (IF_P - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (IMMUTABLE - 195)) | (1L << (IMPLICIT_P - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDEX - 195)) | (1L << (INDEXES - 195)) | (1L << (INHERIT - 195)) | (1L << (INHERITS - 195)) | (1L << (INLINE_P - 195)) | (1L << (INSENSITIVE - 195)) | (1L << (INSERT - 195)) | (1L << (INSTEAD - 195)) | (1L << (INVOKER - 195)) | (1L << (ISOLATION - 195)) | (1L << (KEY - 195)) | (1L << (LABEL - 195)) | (1L << (LANGUAGE - 195)) | (1L << (LARGE_P - 195)) | (1L << (LAST_P - 195)) | (1L << (LEAKPROOF - 195)) | (1L << (LEVEL - 195)) | (1L << (LISTEN - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (LOAD - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCATION - 259)) | (1L << (LOCK_P - 259)) | (1L << (MAPPING - 259)) | (1L << (MATCH - 259)) | (1L << (MATERIALIZED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINUTE_P - 259)) | (1L << (MINVALUE - 259)) | (1L << (MODE - 259)) | (1L << (MONTH_P - 259)) | (1L << (MOVE - 259)) | (1L << (NAME_P - 259)) | (1L << (NAMES - 259)) | (1L << (NEXT - 259)) | (1L << (NO - 259)) | (1L << (NOTHING - 259)) | (1L << (NOTIFY - 259)) | (1L << (NOWAIT - 259)) | (1L << (NULLS_P - 259)) | (1L << (OBJECT_P - 259)) | (1L << (OF - 259)) | (1L << (OFF - 259)) | (1L << (OIDS - 259)) | (1L << (OPERATOR - 259)) | (1L << (OPTION - 259)) | (1L << (OPTIONS - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARSER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PASSWORD - 259)) | (1L << (PLANS - 259)) | (1L << (PRECEDING - 259)) | (1L << (PREPARE - 259)) | (1L << (PREPARED - 259)) | (1L << (PRESERVE - 259)) | (1L << (PRIOR - 259)) | (1L << (PRIVILEGES - 259)) | (1L << (PROCEDURAL - 259)) | (1L << (PROCEDURE - 259)) | (1L << (PROGRAM - 259)) | (1L << (QUOTE - 259)) | (1L << (RANGE - 259)) | (1L << (READ - 259)) | (1L << (REASSIGN - 259)) | (1L << (RECHECK - 259)) | (1L << (RECURSIVE - 259)) | (1L << (REF - 259)) | (1L << (REFRESH - 259)) | (1L << (REINDEX - 259)) | (1L << (RELATIVE_P - 259)) | (1L << (RELEASE - 259)) | (1L << (RENAME - 259)) | (1L << (REPEATABLE - 259)) | (1L << (REPLACE - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (RETURNS - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (REVOKE - 323)) | (1L << (ROLE - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROWS - 323)) | (1L << (RULE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCROLL - 323)) | (1L << (SEARCH - 323)) | (1L << (SECOND_P - 323)) | (1L << (SECURITY - 323)) | (1L << (SEQUENCE - 323)) | (1L << (SEQUENCES - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERVER - 323)) | (1L << (SESSION - 323)) | (1L << (SET - 323)) | (1L << (SHARE - 323)) | (1L << (SHOW - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (STABLE - 323)) | (1L << (STANDALONE_P - 323)) | (1L << (START - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATISTICS - 323)) | (1L << (STDIN - 323)) | (1L << (STDOUT - 323)) | (1L << (STORAGE - 323)) | (1L << (STRICT_P - 323)) | (1L << (STRIP_P - 323)) | (1L << (SYSID - 323)) | (1L << (SYSTEM_P - 323)) | (1L << (TABLES - 323)) | (1L << (TABLESPACE - 323)) | (1L << (TEMP - 323)) | (1L << (TEMPLATE - 323)) | (1L << (TEMPORARY - 323)) | (1L << (TEXT_P - 323)) | (1L << (TRANSACTION - 323)) | (1L << (TRIGGER - 323)) | (1L << (TRUNCATE - 323)) | (1L << (TRUSTED - 323)) | (1L << (TYPE_P - 323)) | (1L << (TYPES_P - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNENCRYPTED - 323)) | (1L << (UNKNOWN - 323)) | (1L << (UNLISTEN - 323)) | (1L << (UNLOGGED - 323)) | (1L << (UNTIL - 323)) | (1L << (UPDATE - 323)) | (1L << (VACUUM - 323)) | (1L << (VALID - 323)) | (1L << (VALIDATE - 323)) | (1L << (VALIDATOR - 323)) | (1L << (VARYING - 323)) | (1L << (VERSION_P - 323)) | (1L << (VIEW - 323)) | (1L << (VOLATILE - 323)) | (1L << (WHITESPACE_P - 323)) | (1L << (WITHOUT - 323)) | (1L << (WORK - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (WRAPPER - 387)) | (1L << (WRITE - 387)) | (1L << (XML_P - 387)) | (1L << (YEAR_P - 387)) | (1L << (YES_P - 387)) | (1L << (ZONE - 387)) | (1L << (BETWEEN - 387)) | (1L << (BIGINT - 387)) | (1L << (BIT - 387)) | (1L << (BOOLEAN_P - 387)) | (1L << (CHAR_P - 387)) | (1L << (CHARACTER - 387)) | (1L << (COALESCE - 387)) | (1L << (DEC - 387)) | (1L << (DECIMAL_P - 387)) | (1L << (EXISTS - 387)) | (1L << (EXTRACT - 387)) | (1L << (FLOAT_P - 387)) | (1L << (GREATEST - 387)) | (1L << (INOUT - 387)) | (1L << (INT_P - 387)) | (1L << (INTEGER - 387)) | (1L << (INTERVAL - 387)) | (1L << (LEAST - 387)) | (1L << (NATIONAL - 387)) | (1L << (NCHAR - 387)) | (1L << (NONE - 387)) | (1L << (NULLIF - 387)) | (1L << (NUMERIC - 387)) | (1L << (OVERLAY - 387)) | (1L << (POSITION - 387)) | (1L << (PRECISION - 387)) | (1L << (REAL - 387)) | (1L << (ROW - 387)) | (1L << (SETOF - 387)) | (1L << (SMALLINT - 387)) | (1L << (SUBSTRING - 387)) | (1L << (TIME - 387)) | (1L << (TIMESTAMP - 387)) | (1L << (TREAT - 387)) | (1L << (TRIM - 387)) | (1L << (VALUES - 387)) | (1L << (VARCHAR - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCONCAT - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (CALL - 387)) | (1L << (CURRENT_P - 387)) | (1L << (CATALOG_P - 387)) | (1L << (ATTACH - 387)) | (1L << (DETACH - 387)) | (1L << (EXPRESSION - 387)) | (1L << (GENERATED - 387)) | (1L << (LOGGED - 387)) | (1L << (STORED - 387)) | (1L << (INCLUDE - 387)) | (1L << (ROUTINE - 387)) | (1L << (TRANSFORM - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (IMPORT_P - 451)) | (1L << (POLICY - 451)) | (1L << (METHOD - 451)) | (1L << (REFERENCING - 451)) | (1L << (NEW - 451)) | (1L << (OLD - 451)) | (1L << (VALUE_P - 451)) | (1L << (SUBSCRIPTION - 451)) | (1L << (PUBLICATION - 451)) | (1L << (OUT_P - 451)) | (1L << (ROUTINES - 451)) | (1L << (SCHEMAS - 451)) | (1L << (PROCEDURES - 451)) | (1L << (INPUT_P - 451)) | (1L << (SUPPORT - 451)) | (1L << (PARALLEL - 451)) | (1L << (SQL_P - 451)) | (1L << (DEPENDS - 451)) | (1L << (OVERRIDING - 451)) | (1L << (CONFLICT - 451)) | (1L << (SKIP_P - 451)) | (1L << (LOCKED - 451)) | (1L << (TIES - 451)) | (1L << (ROLLUP - 451)) | (1L << (CUBE - 451)) | (1L << (GROUPING - 451)) | (1L << (SETS - 451)) | (1L << (ORDINALITY - 451)) | (1L << (XMLTABLE - 451)) | (1L << (COLUMNS - 451)) | (1L << (XMLNAMESPACES - 451)) | (1L << (ROWTYPE - 451)) | (1L << (NORMALIZED - 451)) | (1L << (WITHIN - 451)) | (1L << (FILTER - 451)) | (1L << (GROUPS - 451)) | (1L << (OTHERS - 451)) | (1L << (NFC - 451)) | (1L << (NFD - 451)) | (1L << (NFKC - 451)) | (1L << (NFKD - 451)) | (1L << (UESCAPE - 451)) | (1L << (VIEWS - 451)) | (1L << (NORMALIZE - 451)) | (1L << (DUMP - 451)) | (1L << (PRINT_STRICT_PARAMS - 451)) | (1L << (VARIABLE_CONFLICT - 451)) | (1L << (ERROR - 451)) | (1L << (USE_VARIABLE - 451)) | (1L << (USE_COLUMN - 451)) | (1L << (ALIAS - 451)) | (1L << (CONSTANT - 451)) | (1L << (PERFORM - 451)) | (1L << (GET - 451)) | (1L << (DIAGNOSTICS - 451)) | (1L << (STACKED - 451)) | (1L << (ELSIF - 451)) | (1L << (REVERSE - 451)) | (1L << (SLICE - 451)) | (1L << (EXIT - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (RETURN - 515)) | (1L << (QUERY - 515)) | (1L << (RAISE - 515)) | (1L << (SQLSTATE - 515)) | (1L << (DEBUG - 515)) | (1L << (LOG - 515)) | (1L << (INFO - 515)) | (1L << (NOTICE - 515)) | (1L << (WARNING - 515)) | (1L << (EXCEPTION - 515)) | (1L << (ASSERT - 515)) | (1L << (OPEN - 515)) | (1L << (Identifier - 515)) | (1L << (QuotedIdentifier - 515)) | (1L << (UnicodeQuotedIdentifier - 515)) | (1L << (PLSQLVARIABLENAME - 515)) | (1L << (PLSQLIDENTIFIER - 515)))) != 0)) {
				{
				{
				setState(5860);
				colid();
				setState(5861);
				match(DOT);
				}
				}
				setState(5867);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5868);
			all_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_with_argtypes_listContext extends ParserRuleContext {
		public List<Operator_with_argtypesContext> operator_with_argtypes() {
			return getRuleContexts(Operator_with_argtypesContext.class);
		}
		public Operator_with_argtypesContext operator_with_argtypes(int i) {
			return getRuleContext(Operator_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_with_argtypes_listContext operator_with_argtypes_list() throws RecognitionException {
		Operator_with_argtypes_listContext _localctx = new Operator_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_operator_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5870);
			operator_with_argtypes();
			setState(5875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5871);
				match(COMMA);
				setState(5872);
				operator_with_argtypes();
				}
				}
				setState(5877);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_with_argtypesContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Operator_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_with_argtypesContext operator_with_argtypes() throws RecognitionException {
		Operator_with_argtypesContext _localctx = new Operator_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_operator_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5878);
			any_operator();
			setState(5879);
			oper_argtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public DostmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtContext dostmt() throws RecognitionException {
		DostmtContext _localctx = new DostmtContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_dostmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5881);
			match(DO);
			setState(5882);
			dostmt_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dostmt_opt_listContext extends ParserRuleContext {
		public List<Dostmt_opt_itemContext> dostmt_opt_item() {
			return getRuleContexts(Dostmt_opt_itemContext.class);
		}
		public Dostmt_opt_itemContext dostmt_opt_item(int i) {
			return getRuleContext(Dostmt_opt_itemContext.class,i);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_listContext dostmt_opt_list() throws RecognitionException {
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_dostmt_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5885); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5884);
				dostmt_opt_item();
				}
				}
				setState(5887); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==LANGUAGE || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (StringConstant - 537)) | (1L << (UnicodeEscapeStringConstant - 537)) | (1L << (BeginDollarStringConstant - 537)) | (1L << (EscapeStringConstant - 537)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dostmt_opt_itemContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_itemContext dostmt_opt_item() throws RecognitionException {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_dostmt_opt_item);
		try {
			setState(5892);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(5889);
				sconst();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5890);
				match(LANGUAGE);
				setState(5891);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatecaststmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Cast_contextContext cast_context() {
			return getRuleContext(Cast_contextContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public CreatecaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createcaststmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatecaststmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatecaststmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatecaststmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatecaststmtContext createcaststmt() throws RecognitionException {
		CreatecaststmtContext _localctx = new CreatecaststmtContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_createcaststmt);
		try {
			setState(5928);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5894);
				match(CREATE);
				setState(5895);
				match(CAST);
				setState(5896);
				match(OPEN_PAREN);
				setState(5897);
				typename();
				setState(5898);
				match(AS);
				setState(5899);
				typename();
				setState(5900);
				match(CLOSE_PAREN);
				setState(5901);
				match(WITH);
				setState(5902);
				match(FUNCTION);
				setState(5903);
				function_with_argtypes();
				setState(5904);
				cast_context();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5906);
				match(CREATE);
				setState(5907);
				match(CAST);
				setState(5908);
				match(OPEN_PAREN);
				setState(5909);
				typename();
				setState(5910);
				match(AS);
				setState(5911);
				typename();
				setState(5912);
				match(CLOSE_PAREN);
				setState(5913);
				match(WITHOUT);
				setState(5914);
				match(FUNCTION);
				setState(5915);
				cast_context();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5917);
				match(CREATE);
				setState(5918);
				match(CAST);
				setState(5919);
				match(OPEN_PAREN);
				setState(5920);
				typename();
				setState(5921);
				match(AS);
				setState(5922);
				typename();
				setState(5923);
				match(CLOSE_PAREN);
				setState(5924);
				match(WITH);
				setState(5925);
				match(INOUT);
				setState(5926);
				cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_contextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_context; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCast_context(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCast_context(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCast_context(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_contextContext cast_context() throws RecognitionException {
		Cast_contextContext _localctx = new Cast_contextContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_cast_context);
		try {
			setState(5935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5930);
				match(AS);
				setState(5931);
				match(IMPLICIT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5932);
				match(AS);
				setState(5933);
				match(ASSIGNMENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropcaststmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropcaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropcaststmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropcaststmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropcaststmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropcaststmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropcaststmtContext dropcaststmt() throws RecognitionException {
		DropcaststmtContext _localctx = new DropcaststmtContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_dropcaststmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5937);
			match(DROP);
			setState(5938);
			match(CAST);
			setState(5939);
			opt_if_exists();
			setState(5940);
			match(OPEN_PAREN);
			setState(5941);
			typename();
			setState(5942);
			match(AS);
			setState(5943);
			typename();
			setState(5944);
			match(CLOSE_PAREN);
			setState(5945);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_if_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_if_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_if_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_existsContext opt_if_exists() throws RecognitionException {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_opt_if_exists);
		try {
			setState(5950);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5947);
				match(IF_P);
				setState(5948);
				match(EXISTS);
				}
				break;
			case OPEN_PAREN:
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatetransformstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Transform_element_listContext transform_element_list() {
			return getRuleContext(Transform_element_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatetransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtransformstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetransformstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetransformstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetransformstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetransformstmtContext createtransformstmt() throws RecognitionException {
		CreatetransformstmtContext _localctx = new CreatetransformstmtContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_createtransformstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5952);
			match(CREATE);
			setState(5953);
			opt_or_replace();
			setState(5954);
			match(TRANSFORM);
			setState(5955);
			match(FOR);
			setState(5956);
			typename();
			setState(5957);
			match(LANGUAGE);
			setState(5958);
			name();
			setState(5959);
			match(OPEN_PAREN);
			setState(5960);
			transform_element_list();
			setState(5961);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transform_element_listContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<TerminalNode> SQL_P() { return getTokens(PostgreSQLParser.SQL_P); }
		public TerminalNode SQL_P(int i) {
			return getToken(PostgreSQLParser.SQL_P, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(PostgreSQLParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(PostgreSQLParser.FUNCTION, i);
		}
		public List<Function_with_argtypesContext> function_with_argtypes() {
			return getRuleContexts(Function_with_argtypesContext.class);
		}
		public Function_with_argtypesContext function_with_argtypes(int i) {
			return getRuleContext(Function_with_argtypesContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Transform_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_element_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransform_element_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransform_element_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransform_element_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transform_element_listContext transform_element_list() throws RecognitionException {
		Transform_element_listContext _localctx = new Transform_element_listContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_transform_element_list);
		try {
			setState(5997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5963);
				match(FROM);
				setState(5964);
				match(SQL_P);
				setState(5965);
				match(WITH);
				setState(5966);
				match(FUNCTION);
				setState(5967);
				function_with_argtypes();
				setState(5968);
				match(COMMA);
				setState(5969);
				match(TO);
				setState(5970);
				match(SQL_P);
				setState(5971);
				match(WITH);
				setState(5972);
				match(FUNCTION);
				setState(5973);
				function_with_argtypes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5975);
				match(TO);
				setState(5976);
				match(SQL_P);
				setState(5977);
				match(WITH);
				setState(5978);
				match(FUNCTION);
				setState(5979);
				function_with_argtypes();
				setState(5980);
				match(COMMA);
				setState(5981);
				match(FROM);
				setState(5982);
				match(SQL_P);
				setState(5983);
				match(WITH);
				setState(5984);
				match(FUNCTION);
				setState(5985);
				function_with_argtypes();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5987);
				match(FROM);
				setState(5988);
				match(SQL_P);
				setState(5989);
				match(WITH);
				setState(5990);
				match(FUNCTION);
				setState(5991);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5992);
				match(TO);
				setState(5993);
				match(SQL_P);
				setState(5994);
				match(WITH);
				setState(5995);
				match(FUNCTION);
				setState(5996);
				function_with_argtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DroptransformstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DroptransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptransformstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroptransformstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroptransformstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroptransformstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroptransformstmtContext droptransformstmt() throws RecognitionException {
		DroptransformstmtContext _localctx = new DroptransformstmtContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_droptransformstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5999);
			match(DROP);
			setState(6000);
			match(TRANSFORM);
			setState(6001);
			opt_if_exists();
			setState(6002);
			match(FOR);
			setState(6003);
			typename();
			setState(6004);
			match(LANGUAGE);
			setState(6005);
			name();
			setState(6006);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexstmtContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public Reindex_target_typeContext reindex_target_type() {
			return getRuleContext(Reindex_target_typeContext.class,0);
		}
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Reindex_target_multitableContext reindex_target_multitable() {
			return getRuleContext(Reindex_target_multitableContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Reindex_option_listContext reindex_option_list() {
			return getRuleContext(Reindex_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReindexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindexstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindexstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindexstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexstmtContext reindexstmt() throws RecognitionException {
		ReindexstmtContext _localctx = new ReindexstmtContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_reindexstmt);
		try {
			setState(6034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6008);
				match(REINDEX);
				setState(6009);
				reindex_target_type();
				setState(6010);
				opt_concurrently();
				setState(6011);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6013);
				match(REINDEX);
				setState(6014);
				reindex_target_multitable();
				setState(6015);
				opt_concurrently();
				setState(6016);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6018);
				match(REINDEX);
				setState(6019);
				match(OPEN_PAREN);
				setState(6020);
				reindex_option_list();
				setState(6021);
				match(CLOSE_PAREN);
				setState(6022);
				reindex_target_type();
				setState(6023);
				opt_concurrently();
				setState(6024);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6026);
				match(REINDEX);
				setState(6027);
				match(OPEN_PAREN);
				setState(6028);
				reindex_option_list();
				setState(6029);
				match(CLOSE_PAREN);
				setState(6030);
				reindex_target_multitable();
				setState(6031);
				opt_concurrently();
				setState(6032);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_target_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Reindex_target_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_target_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_target_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_target_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_target_typeContext reindex_target_type() throws RecognitionException {
		Reindex_target_typeContext _localctx = new Reindex_target_typeContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_reindex_target_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6036);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_target_multitableContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public Reindex_target_multitableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_multitable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_target_multitable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_target_multitable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_target_multitable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_target_multitableContext reindex_target_multitable() throws RecognitionException {
		Reindex_target_multitableContext _localctx = new Reindex_target_multitableContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_reindex_target_multitable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6038);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_option_listContext extends ParserRuleContext {
		public List<Reindex_option_elemContext> reindex_option_elem() {
			return getRuleContexts(Reindex_option_elemContext.class);
		}
		public Reindex_option_elemContext reindex_option_elem(int i) {
			return getRuleContext(Reindex_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Reindex_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_option_listContext reindex_option_list() throws RecognitionException {
		Reindex_option_listContext _localctx = new Reindex_option_listContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_reindex_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6040);
			reindex_option_elem();
			setState(6045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6041);
				match(COMMA);
				setState(6042);
				reindex_option_elem();
				}
				}
				setState(6047);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_option_elemContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Reindex_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_option_elemContext reindex_option_elem() throws RecognitionException {
		Reindex_option_elemContext _localctx = new Reindex_option_elemContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_reindex_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6048);
			match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatecompstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode COMPARABILITY() { return getToken(PostgreSQLParser.COMPARABILITY, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode LATTICE() { return getToken(PostgreSQLParser.LATTICE, 0); }
		public LabellistContext labellist() {
			return getRuleContext(LabellistContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OTHERWISE() { return getToken(PostgreSQLParser.OTHERWISE, 0); }
		public List<TerminalNode> LAB() { return getTokens(PostgreSQLParser.LAB); }
		public TerminalNode LAB(int i) {
			return getToken(PostgreSQLParser.LAB, i);
		}
		public List<TerminalNode> CASE() { return getTokens(PostgreSQLParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PostgreSQLParser.CASE, i);
		}
		public List<TerminalNode> COLON() { return getTokens(PostgreSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(PostgreSQLParser.COLON, i);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public CreatecompstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createcompstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatecompstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatecompstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatecompstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatecompstmtContext createcompstmt() throws RecognitionException {
		CreatecompstmtContext _localctx = new CreatecompstmtContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_createcompstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6050);
			match(CREATE);
			setState(6051);
			match(COMPARABILITY);
			setState(6052);
			qualified_name();
			setState(6053);
			match(ON);
			setState(6054);
			match(LATTICE);
			setState(6055);
			qualified_name();
			setState(6056);
			labellist();
			setState(6057);
			match(AS);
			setState(6064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CASE) {
				{
				{
				setState(6058);
				match(CASE);
				setState(6059);
				match(LAB);
				setState(6060);
				match(COLON);
				setState(6061);
				a_expr();
				}
				}
				setState(6066);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6067);
			match(OTHERWISE);
			setState(6068);
			match(LAB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertblspcstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public AltertblspcstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertblspcstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertblspcstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertblspcstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertblspcstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertblspcstmtContext altertblspcstmt() throws RecognitionException {
		AltertblspcstmtContext _localctx = new AltertblspcstmtContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_altertblspcstmt);
		try {
			setState(6082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6070);
				match(ALTER);
				setState(6071);
				match(TABLESPACE);
				setState(6072);
				name();
				setState(6073);
				match(SET);
				setState(6074);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6076);
				match(ALTER);
				setState(6077);
				match(TABLESPACE);
				setState(6078);
				name();
				setState(6079);
				match(RESET);
				setState(6080);
				reloptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenamestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public List<RoleidContext> roleid() {
			return getRuleContexts(RoleidContext.class);
		}
		public RoleidContext roleid(int i) {
			return getRuleContext(RoleidContext.class,i);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public RenamestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRenamestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRenamestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRenamestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenamestmtContext renamestmt() throws RecognitionException {
		RenamestmtContext _localctx = new RenamestmtContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_renamestmt);
		try {
			setState(6552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6084);
				match(ALTER);
				setState(6085);
				match(AGGREGATE);
				setState(6086);
				aggregate_with_argtypes();
				setState(6087);
				match(RENAME);
				setState(6088);
				match(TO);
				setState(6089);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6091);
				match(ALTER);
				setState(6092);
				match(COLLATION);
				setState(6093);
				any_name();
				setState(6094);
				match(RENAME);
				setState(6095);
				match(TO);
				setState(6096);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6098);
				match(ALTER);
				setState(6099);
				match(CONVERSION_P);
				setState(6100);
				any_name();
				setState(6101);
				match(RENAME);
				setState(6102);
				match(TO);
				setState(6103);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6105);
				match(ALTER);
				setState(6106);
				match(DATABASE);
				setState(6107);
				name();
				setState(6108);
				match(RENAME);
				setState(6109);
				match(TO);
				setState(6110);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6112);
				match(ALTER);
				setState(6113);
				match(DOMAIN_P);
				setState(6114);
				any_name();
				setState(6115);
				match(RENAME);
				setState(6116);
				match(TO);
				setState(6117);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6119);
				match(ALTER);
				setState(6120);
				match(DOMAIN_P);
				setState(6121);
				any_name();
				setState(6122);
				match(RENAME);
				setState(6123);
				match(CONSTRAINT);
				setState(6124);
				name();
				setState(6125);
				match(TO);
				setState(6126);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6128);
				match(ALTER);
				setState(6129);
				match(FOREIGN);
				setState(6130);
				match(DATA_P);
				setState(6131);
				match(WRAPPER);
				setState(6132);
				name();
				setState(6133);
				match(RENAME);
				setState(6134);
				match(TO);
				setState(6135);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6137);
				match(ALTER);
				setState(6138);
				match(FUNCTION);
				setState(6139);
				function_with_argtypes();
				setState(6140);
				match(RENAME);
				setState(6141);
				match(TO);
				setState(6142);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6144);
				match(ALTER);
				setState(6145);
				match(GROUP_P);
				setState(6146);
				roleid();
				setState(6147);
				match(RENAME);
				setState(6148);
				match(TO);
				setState(6149);
				roleid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6151);
				match(ALTER);
				setState(6152);
				opt_procedural();
				setState(6153);
				match(LANGUAGE);
				setState(6154);
				name();
				setState(6155);
				match(RENAME);
				setState(6156);
				match(TO);
				setState(6157);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6159);
				match(ALTER);
				setState(6160);
				match(OPERATOR);
				setState(6161);
				match(CLASS);
				setState(6162);
				any_name();
				setState(6163);
				match(USING);
				setState(6164);
				name();
				setState(6165);
				match(RENAME);
				setState(6166);
				match(TO);
				setState(6167);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6169);
				match(ALTER);
				setState(6170);
				match(OPERATOR);
				setState(6171);
				match(FAMILY);
				setState(6172);
				any_name();
				setState(6173);
				match(USING);
				setState(6174);
				name();
				setState(6175);
				match(RENAME);
				setState(6176);
				match(TO);
				setState(6177);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6179);
				match(ALTER);
				setState(6180);
				match(POLICY);
				setState(6181);
				name();
				setState(6182);
				match(ON);
				setState(6183);
				qualified_name();
				setState(6184);
				match(RENAME);
				setState(6185);
				match(TO);
				setState(6186);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6188);
				match(ALTER);
				setState(6189);
				match(POLICY);
				setState(6190);
				match(IF_P);
				setState(6191);
				match(EXISTS);
				setState(6192);
				name();
				setState(6193);
				match(ON);
				setState(6194);
				qualified_name();
				setState(6195);
				match(RENAME);
				setState(6196);
				match(TO);
				setState(6197);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6199);
				match(ALTER);
				setState(6200);
				match(PROCEDURE);
				setState(6201);
				function_with_argtypes();
				setState(6202);
				match(RENAME);
				setState(6203);
				match(TO);
				setState(6204);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6206);
				match(ALTER);
				setState(6207);
				match(PUBLICATION);
				setState(6208);
				name();
				setState(6209);
				match(RENAME);
				setState(6210);
				match(TO);
				setState(6211);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6213);
				match(ALTER);
				setState(6214);
				match(ROUTINE);
				setState(6215);
				function_with_argtypes();
				setState(6216);
				match(RENAME);
				setState(6217);
				match(TO);
				setState(6218);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6220);
				match(ALTER);
				setState(6221);
				match(SCHEMA);
				setState(6222);
				name();
				setState(6223);
				match(RENAME);
				setState(6224);
				match(TO);
				setState(6225);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6227);
				match(ALTER);
				setState(6228);
				match(SERVER);
				setState(6229);
				name();
				setState(6230);
				match(RENAME);
				setState(6231);
				match(TO);
				setState(6232);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6234);
				match(ALTER);
				setState(6235);
				match(SUBSCRIPTION);
				setState(6236);
				name();
				setState(6237);
				match(RENAME);
				setState(6238);
				match(TO);
				setState(6239);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6241);
				match(ALTER);
				setState(6242);
				match(TABLE);
				setState(6243);
				relation_expr();
				setState(6244);
				match(RENAME);
				setState(6245);
				match(TO);
				setState(6246);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6248);
				match(ALTER);
				setState(6249);
				match(TABLE);
				setState(6250);
				match(IF_P);
				setState(6251);
				match(EXISTS);
				setState(6252);
				relation_expr();
				setState(6253);
				match(RENAME);
				setState(6254);
				match(TO);
				setState(6255);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6257);
				match(ALTER);
				setState(6258);
				match(SEQUENCE);
				setState(6259);
				qualified_name();
				setState(6260);
				match(RENAME);
				setState(6261);
				match(TO);
				setState(6262);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6264);
				match(ALTER);
				setState(6265);
				match(SEQUENCE);
				setState(6266);
				match(IF_P);
				setState(6267);
				match(EXISTS);
				setState(6268);
				qualified_name();
				setState(6269);
				match(RENAME);
				setState(6270);
				match(TO);
				setState(6271);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6273);
				match(ALTER);
				setState(6274);
				match(VIEW);
				setState(6275);
				qualified_name();
				setState(6276);
				match(RENAME);
				setState(6277);
				match(TO);
				setState(6278);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6280);
				match(ALTER);
				setState(6281);
				match(VIEW);
				setState(6282);
				match(IF_P);
				setState(6283);
				match(EXISTS);
				setState(6284);
				qualified_name();
				setState(6285);
				match(RENAME);
				setState(6286);
				match(TO);
				setState(6287);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6289);
				match(ALTER);
				setState(6290);
				match(MATERIALIZED);
				setState(6291);
				match(VIEW);
				setState(6292);
				qualified_name();
				setState(6293);
				match(RENAME);
				setState(6294);
				match(TO);
				setState(6295);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6297);
				match(ALTER);
				setState(6298);
				match(MATERIALIZED);
				setState(6299);
				match(VIEW);
				setState(6300);
				match(IF_P);
				setState(6301);
				match(EXISTS);
				setState(6302);
				qualified_name();
				setState(6303);
				match(RENAME);
				setState(6304);
				match(TO);
				setState(6305);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6307);
				match(ALTER);
				setState(6308);
				match(INDEX);
				setState(6309);
				qualified_name();
				setState(6310);
				match(RENAME);
				setState(6311);
				match(TO);
				setState(6312);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6314);
				match(ALTER);
				setState(6315);
				match(INDEX);
				setState(6316);
				match(IF_P);
				setState(6317);
				match(EXISTS);
				setState(6318);
				qualified_name();
				setState(6319);
				match(RENAME);
				setState(6320);
				match(TO);
				setState(6321);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6323);
				match(ALTER);
				setState(6324);
				match(FOREIGN);
				setState(6325);
				match(TABLE);
				setState(6326);
				relation_expr();
				setState(6327);
				match(RENAME);
				setState(6328);
				match(TO);
				setState(6329);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6331);
				match(ALTER);
				setState(6332);
				match(FOREIGN);
				setState(6333);
				match(TABLE);
				setState(6334);
				match(IF_P);
				setState(6335);
				match(EXISTS);
				setState(6336);
				relation_expr();
				setState(6337);
				match(RENAME);
				setState(6338);
				match(TO);
				setState(6339);
				name();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6341);
				match(ALTER);
				setState(6342);
				match(TABLE);
				setState(6343);
				relation_expr();
				setState(6344);
				match(RENAME);
				setState(6345);
				opt_column();
				setState(6346);
				name();
				setState(6347);
				match(TO);
				setState(6348);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6350);
				match(ALTER);
				setState(6351);
				match(TABLE);
				setState(6352);
				match(IF_P);
				setState(6353);
				match(EXISTS);
				setState(6354);
				relation_expr();
				setState(6355);
				match(RENAME);
				setState(6356);
				opt_column();
				setState(6357);
				name();
				setState(6358);
				match(TO);
				setState(6359);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6361);
				match(ALTER);
				setState(6362);
				match(VIEW);
				setState(6363);
				qualified_name();
				setState(6364);
				match(RENAME);
				setState(6365);
				opt_column();
				setState(6366);
				name();
				setState(6367);
				match(TO);
				setState(6368);
				name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6370);
				match(ALTER);
				setState(6371);
				match(VIEW);
				setState(6372);
				match(IF_P);
				setState(6373);
				match(EXISTS);
				setState(6374);
				qualified_name();
				setState(6375);
				match(RENAME);
				setState(6376);
				opt_column();
				setState(6377);
				name();
				setState(6378);
				match(TO);
				setState(6379);
				name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6381);
				match(ALTER);
				setState(6382);
				match(MATERIALIZED);
				setState(6383);
				match(VIEW);
				setState(6384);
				qualified_name();
				setState(6385);
				match(RENAME);
				setState(6386);
				opt_column();
				setState(6387);
				name();
				setState(6388);
				match(TO);
				setState(6389);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6391);
				match(ALTER);
				setState(6392);
				match(MATERIALIZED);
				setState(6393);
				match(VIEW);
				setState(6394);
				match(IF_P);
				setState(6395);
				match(EXISTS);
				setState(6396);
				qualified_name();
				setState(6397);
				match(RENAME);
				setState(6398);
				opt_column();
				setState(6399);
				name();
				setState(6400);
				match(TO);
				setState(6401);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6403);
				match(ALTER);
				setState(6404);
				match(TABLE);
				setState(6405);
				relation_expr();
				setState(6406);
				match(RENAME);
				setState(6407);
				match(CONSTRAINT);
				setState(6408);
				name();
				setState(6409);
				match(TO);
				setState(6410);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6412);
				match(ALTER);
				setState(6413);
				match(TABLE);
				setState(6414);
				match(IF_P);
				setState(6415);
				match(EXISTS);
				setState(6416);
				relation_expr();
				setState(6417);
				match(RENAME);
				setState(6418);
				match(CONSTRAINT);
				setState(6419);
				name();
				setState(6420);
				match(TO);
				setState(6421);
				name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6423);
				match(ALTER);
				setState(6424);
				match(FOREIGN);
				setState(6425);
				match(TABLE);
				setState(6426);
				relation_expr();
				setState(6427);
				match(RENAME);
				setState(6428);
				opt_column();
				setState(6429);
				name();
				setState(6430);
				match(TO);
				setState(6431);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6433);
				match(ALTER);
				setState(6434);
				match(FOREIGN);
				setState(6435);
				match(TABLE);
				setState(6436);
				match(IF_P);
				setState(6437);
				match(EXISTS);
				setState(6438);
				relation_expr();
				setState(6439);
				match(RENAME);
				setState(6440);
				opt_column();
				setState(6441);
				name();
				setState(6442);
				match(TO);
				setState(6443);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6445);
				match(ALTER);
				setState(6446);
				match(RULE);
				setState(6447);
				name();
				setState(6448);
				match(ON);
				setState(6449);
				qualified_name();
				setState(6450);
				match(RENAME);
				setState(6451);
				match(TO);
				setState(6452);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6454);
				match(ALTER);
				setState(6455);
				match(TRIGGER);
				setState(6456);
				name();
				setState(6457);
				match(ON);
				setState(6458);
				qualified_name();
				setState(6459);
				match(RENAME);
				setState(6460);
				match(TO);
				setState(6461);
				name();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6463);
				match(ALTER);
				setState(6464);
				match(EVENT);
				setState(6465);
				match(TRIGGER);
				setState(6466);
				name();
				setState(6467);
				match(RENAME);
				setState(6468);
				match(TO);
				setState(6469);
				name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6471);
				match(ALTER);
				setState(6472);
				match(ROLE);
				setState(6473);
				roleid();
				setState(6474);
				match(RENAME);
				setState(6475);
				match(TO);
				setState(6476);
				roleid();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6478);
				match(ALTER);
				setState(6479);
				match(USER);
				setState(6480);
				roleid();
				setState(6481);
				match(RENAME);
				setState(6482);
				match(TO);
				setState(6483);
				roleid();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6485);
				match(ALTER);
				setState(6486);
				match(TABLESPACE);
				setState(6487);
				name();
				setState(6488);
				match(RENAME);
				setState(6489);
				match(TO);
				setState(6490);
				name();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6492);
				match(ALTER);
				setState(6493);
				match(STATISTICS);
				setState(6494);
				any_name();
				setState(6495);
				match(RENAME);
				setState(6496);
				match(TO);
				setState(6497);
				name();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6499);
				match(ALTER);
				setState(6500);
				match(TEXT_P);
				setState(6501);
				match(SEARCH);
				setState(6502);
				match(PARSER);
				setState(6503);
				any_name();
				setState(6504);
				match(RENAME);
				setState(6505);
				match(TO);
				setState(6506);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6508);
				match(ALTER);
				setState(6509);
				match(TEXT_P);
				setState(6510);
				match(SEARCH);
				setState(6511);
				match(DICTIONARY);
				setState(6512);
				any_name();
				setState(6513);
				match(RENAME);
				setState(6514);
				match(TO);
				setState(6515);
				name();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6517);
				match(ALTER);
				setState(6518);
				match(TEXT_P);
				setState(6519);
				match(SEARCH);
				setState(6520);
				match(TEMPLATE);
				setState(6521);
				any_name();
				setState(6522);
				match(RENAME);
				setState(6523);
				match(TO);
				setState(6524);
				name();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(6526);
				match(ALTER);
				setState(6527);
				match(TEXT_P);
				setState(6528);
				match(SEARCH);
				setState(6529);
				match(CONFIGURATION);
				setState(6530);
				any_name();
				setState(6531);
				match(RENAME);
				setState(6532);
				match(TO);
				setState(6533);
				name();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(6535);
				match(ALTER);
				setState(6536);
				match(TYPE_P);
				setState(6537);
				any_name();
				setState(6538);
				match(RENAME);
				setState(6539);
				match(TO);
				setState(6540);
				name();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(6542);
				match(ALTER);
				setState(6543);
				match(TYPE_P);
				setState(6544);
				any_name();
				setState(6545);
				match(RENAME);
				setState(6546);
				match(ATTRIBUTE);
				setState(6547);
				name();
				setState(6548);
				match(TO);
				setState(6549);
				name();
				setState(6550);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_columnContext opt_column() throws RecognitionException {
		Opt_columnContext _localctx = new Opt_columnContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_opt_column);
		try {
			setState(6556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6554);
				match(COLUMN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_set_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_set_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_set_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_set_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_set_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_set_dataContext opt_set_data() throws RecognitionException {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_opt_set_data);
		try {
			setState(6561);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(6558);
				match(SET);
				setState(6559);
				match(DATA_P);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterobjectdependsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_noContext opt_no() {
			return getRuleContext(Opt_noContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public AlterobjectdependsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectdependsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterobjectdependsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterobjectdependsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterobjectdependsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterobjectdependsstmtContext alterobjectdependsstmt() throws RecognitionException {
		AlterobjectdependsstmtContext _localctx = new AlterobjectdependsstmtContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_alterobjectdependsstmt);
		try {
			setState(6620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6563);
				match(ALTER);
				setState(6564);
				match(FUNCTION);
				setState(6565);
				function_with_argtypes();
				setState(6566);
				opt_no();
				setState(6567);
				match(DEPENDS);
				setState(6568);
				match(ON);
				setState(6569);
				match(EXTENSION);
				setState(6570);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6572);
				match(ALTER);
				setState(6573);
				match(PROCEDURE);
				setState(6574);
				function_with_argtypes();
				setState(6575);
				opt_no();
				setState(6576);
				match(DEPENDS);
				setState(6577);
				match(ON);
				setState(6578);
				match(EXTENSION);
				setState(6579);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6581);
				match(ALTER);
				setState(6582);
				match(ROUTINE);
				setState(6583);
				function_with_argtypes();
				setState(6584);
				opt_no();
				setState(6585);
				match(DEPENDS);
				setState(6586);
				match(ON);
				setState(6587);
				match(EXTENSION);
				setState(6588);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6590);
				match(ALTER);
				setState(6591);
				match(TRIGGER);
				setState(6592);
				name();
				setState(6593);
				match(ON);
				setState(6594);
				qualified_name();
				setState(6595);
				opt_no();
				setState(6596);
				match(DEPENDS);
				setState(6597);
				match(ON);
				setState(6598);
				match(EXTENSION);
				setState(6599);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6601);
				match(ALTER);
				setState(6602);
				match(MATERIALIZED);
				setState(6603);
				match(VIEW);
				setState(6604);
				qualified_name();
				setState(6605);
				opt_no();
				setState(6606);
				match(DEPENDS);
				setState(6607);
				match(ON);
				setState(6608);
				match(EXTENSION);
				setState(6609);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6611);
				match(ALTER);
				setState(6612);
				match(INDEX);
				setState(6613);
				qualified_name();
				setState(6614);
				opt_no();
				setState(6615);
				match(DEPENDS);
				setState(6616);
				match(ON);
				setState(6617);
				match(EXTENSION);
				setState(6618);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_noContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_noContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_no(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_no(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_no(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_noContext opt_no() throws RecognitionException {
		Opt_noContext _localctx = new Opt_noContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_opt_no);
		try {
			setState(6624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(6622);
				match(NO);
				}
				break;
			case DEPENDS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterobjectschemastmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterobjectschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterobjectschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterobjectschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterobjectschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterobjectschemastmtContext alterobjectschemastmt() throws RecognitionException {
		AlterobjectschemastmtContext _localctx = new AlterobjectschemastmtContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_alterobjectschemastmt);
		try {
			setState(6843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6626);
				match(ALTER);
				setState(6627);
				match(AGGREGATE);
				setState(6628);
				aggregate_with_argtypes();
				setState(6629);
				match(SET);
				setState(6630);
				match(SCHEMA);
				setState(6631);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6633);
				match(ALTER);
				setState(6634);
				match(COLLATION);
				setState(6635);
				any_name();
				setState(6636);
				match(SET);
				setState(6637);
				match(SCHEMA);
				setState(6638);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6640);
				match(ALTER);
				setState(6641);
				match(CONVERSION_P);
				setState(6642);
				any_name();
				setState(6643);
				match(SET);
				setState(6644);
				match(SCHEMA);
				setState(6645);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6647);
				match(ALTER);
				setState(6648);
				match(DOMAIN_P);
				setState(6649);
				any_name();
				setState(6650);
				match(SET);
				setState(6651);
				match(SCHEMA);
				setState(6652);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6654);
				match(ALTER);
				setState(6655);
				match(EXTENSION);
				setState(6656);
				name();
				setState(6657);
				match(SET);
				setState(6658);
				match(SCHEMA);
				setState(6659);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6661);
				match(ALTER);
				setState(6662);
				match(FUNCTION);
				setState(6663);
				function_with_argtypes();
				setState(6664);
				match(SET);
				setState(6665);
				match(SCHEMA);
				setState(6666);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6668);
				match(ALTER);
				setState(6669);
				match(OPERATOR);
				setState(6670);
				operator_with_argtypes();
				setState(6671);
				match(SET);
				setState(6672);
				match(SCHEMA);
				setState(6673);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6675);
				match(ALTER);
				setState(6676);
				match(OPERATOR);
				setState(6677);
				match(CLASS);
				setState(6678);
				any_name();
				setState(6679);
				match(USING);
				setState(6680);
				name();
				setState(6681);
				match(SET);
				setState(6682);
				match(SCHEMA);
				setState(6683);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6685);
				match(ALTER);
				setState(6686);
				match(OPERATOR);
				setState(6687);
				match(FAMILY);
				setState(6688);
				any_name();
				setState(6689);
				match(USING);
				setState(6690);
				name();
				setState(6691);
				match(SET);
				setState(6692);
				match(SCHEMA);
				setState(6693);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6695);
				match(ALTER);
				setState(6696);
				match(PROCEDURE);
				setState(6697);
				function_with_argtypes();
				setState(6698);
				match(SET);
				setState(6699);
				match(SCHEMA);
				setState(6700);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6702);
				match(ALTER);
				setState(6703);
				match(ROUTINE);
				setState(6704);
				function_with_argtypes();
				setState(6705);
				match(SET);
				setState(6706);
				match(SCHEMA);
				setState(6707);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6709);
				match(ALTER);
				setState(6710);
				match(TABLE);
				setState(6711);
				relation_expr();
				setState(6712);
				match(SET);
				setState(6713);
				match(SCHEMA);
				setState(6714);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6716);
				match(ALTER);
				setState(6717);
				match(TABLE);
				setState(6718);
				match(IF_P);
				setState(6719);
				match(EXISTS);
				setState(6720);
				relation_expr();
				setState(6721);
				match(SET);
				setState(6722);
				match(SCHEMA);
				setState(6723);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6725);
				match(ALTER);
				setState(6726);
				match(STATISTICS);
				setState(6727);
				any_name();
				setState(6728);
				match(SET);
				setState(6729);
				match(SCHEMA);
				setState(6730);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6732);
				match(ALTER);
				setState(6733);
				match(TEXT_P);
				setState(6734);
				match(SEARCH);
				setState(6735);
				match(PARSER);
				setState(6736);
				any_name();
				setState(6737);
				match(SET);
				setState(6738);
				match(SCHEMA);
				setState(6739);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6741);
				match(ALTER);
				setState(6742);
				match(TEXT_P);
				setState(6743);
				match(SEARCH);
				setState(6744);
				match(DICTIONARY);
				setState(6745);
				any_name();
				setState(6746);
				match(SET);
				setState(6747);
				match(SCHEMA);
				setState(6748);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6750);
				match(ALTER);
				setState(6751);
				match(TEXT_P);
				setState(6752);
				match(SEARCH);
				setState(6753);
				match(TEMPLATE);
				setState(6754);
				any_name();
				setState(6755);
				match(SET);
				setState(6756);
				match(SCHEMA);
				setState(6757);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6759);
				match(ALTER);
				setState(6760);
				match(TEXT_P);
				setState(6761);
				match(SEARCH);
				setState(6762);
				match(CONFIGURATION);
				setState(6763);
				any_name();
				setState(6764);
				match(SET);
				setState(6765);
				match(SCHEMA);
				setState(6766);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6768);
				match(ALTER);
				setState(6769);
				match(SEQUENCE);
				setState(6770);
				qualified_name();
				setState(6771);
				match(SET);
				setState(6772);
				match(SCHEMA);
				setState(6773);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6775);
				match(ALTER);
				setState(6776);
				match(SEQUENCE);
				setState(6777);
				match(IF_P);
				setState(6778);
				match(EXISTS);
				setState(6779);
				qualified_name();
				setState(6780);
				match(SET);
				setState(6781);
				match(SCHEMA);
				setState(6782);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6784);
				match(ALTER);
				setState(6785);
				match(VIEW);
				setState(6786);
				qualified_name();
				setState(6787);
				match(SET);
				setState(6788);
				match(SCHEMA);
				setState(6789);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6791);
				match(ALTER);
				setState(6792);
				match(VIEW);
				setState(6793);
				match(IF_P);
				setState(6794);
				match(EXISTS);
				setState(6795);
				qualified_name();
				setState(6796);
				match(SET);
				setState(6797);
				match(SCHEMA);
				setState(6798);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6800);
				match(ALTER);
				setState(6801);
				match(MATERIALIZED);
				setState(6802);
				match(VIEW);
				setState(6803);
				qualified_name();
				setState(6804);
				match(SET);
				setState(6805);
				match(SCHEMA);
				setState(6806);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6808);
				match(ALTER);
				setState(6809);
				match(MATERIALIZED);
				setState(6810);
				match(VIEW);
				setState(6811);
				match(IF_P);
				setState(6812);
				match(EXISTS);
				setState(6813);
				qualified_name();
				setState(6814);
				match(SET);
				setState(6815);
				match(SCHEMA);
				setState(6816);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6818);
				match(ALTER);
				setState(6819);
				match(FOREIGN);
				setState(6820);
				match(TABLE);
				setState(6821);
				relation_expr();
				setState(6822);
				match(SET);
				setState(6823);
				match(SCHEMA);
				setState(6824);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6826);
				match(ALTER);
				setState(6827);
				match(FOREIGN);
				setState(6828);
				match(TABLE);
				setState(6829);
				match(IF_P);
				setState(6830);
				match(EXISTS);
				setState(6831);
				relation_expr();
				setState(6832);
				match(SET);
				setState(6833);
				match(SCHEMA);
				setState(6834);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6836);
				match(ALTER);
				setState(6837);
				match(TYPE_P);
				setState(6838);
				any_name();
				setState(6839);
				match(SET);
				setState(6840);
				match(SCHEMA);
				setState(6841);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteroperatorstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AlteroperatorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroperatorstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroperatorstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroperatorstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroperatorstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroperatorstmtContext alteroperatorstmt() throws RecognitionException {
		AlteroperatorstmtContext _localctx = new AlteroperatorstmtContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_alteroperatorstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6845);
			match(ALTER);
			setState(6846);
			match(OPERATOR);
			setState(6847);
			operator_with_argtypes();
			setState(6848);
			match(SET);
			setState(6849);
			match(OPEN_PAREN);
			setState(6850);
			operator_def_list();
			setState(6851);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_def_listContext extends ParserRuleContext {
		public List<Operator_def_elemContext> operator_def_elem() {
			return getRuleContexts(Operator_def_elemContext.class);
		}
		public Operator_def_elemContext operator_def_elem(int i) {
			return getRuleContext(Operator_def_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_listContext operator_def_list() throws RecognitionException {
		Operator_def_listContext _localctx = new Operator_def_listContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_operator_def_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6853);
			operator_def_elem();
			setState(6858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6854);
				match(COMMA);
				setState(6855);
				operator_def_elem();
				}
				}
				setState(6860);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_def_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Operator_def_argContext operator_def_arg() {
			return getRuleContext(Operator_def_argContext.class,0);
		}
		public Operator_def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_elemContext operator_def_elem() throws RecognitionException {
		Operator_def_elemContext _localctx = new Operator_def_elemContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_operator_def_elem);
		try {
			setState(6869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6861);
				collabel();
				setState(6862);
				match(EQUAL);
				setState(6863);
				match(NONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6865);
				collabel();
				setState(6866);
				match(EQUAL);
				setState(6867);
				operator_def_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Operator_def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_argContext operator_def_arg() throws RecognitionException {
		Operator_def_argContext _localctx = new Operator_def_argContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_operator_def_arg);
		try {
			setState(6876);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6871);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6872);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6873);
				qual_all_op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6874);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6875);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AltertypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertypestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertypestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertypestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertypestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertypestmtContext altertypestmt() throws RecognitionException {
		AltertypestmtContext _localctx = new AltertypestmtContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_altertypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6878);
			match(ALTER);
			setState(6879);
			match(TYPE_P);
			setState(6880);
			any_name();
			setState(6881);
			match(SET);
			setState(6882);
			match(OPEN_PAREN);
			setState(6883);
			operator_def_list();
			setState(6884);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterownerstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public AlterownerstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterownerstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterownerstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterownerstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterownerstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterownerstmtContext alterownerstmt() throws RecognitionException {
		AlterownerstmtContext _localctx = new AlterownerstmtContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_alterownerstmt);
		try {
			setState(7069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6886);
				match(ALTER);
				setState(6887);
				match(AGGREGATE);
				setState(6888);
				aggregate_with_argtypes();
				setState(6889);
				match(OWNER);
				setState(6890);
				match(TO);
				setState(6891);
				rolespec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6893);
				match(ALTER);
				setState(6894);
				match(COLLATION);
				setState(6895);
				any_name();
				setState(6896);
				match(OWNER);
				setState(6897);
				match(TO);
				setState(6898);
				rolespec();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6900);
				match(ALTER);
				setState(6901);
				match(CONVERSION_P);
				setState(6902);
				any_name();
				setState(6903);
				match(OWNER);
				setState(6904);
				match(TO);
				setState(6905);
				rolespec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6907);
				match(ALTER);
				setState(6908);
				match(DATABASE);
				setState(6909);
				name();
				setState(6910);
				match(OWNER);
				setState(6911);
				match(TO);
				setState(6912);
				rolespec();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6914);
				match(ALTER);
				setState(6915);
				match(DOMAIN_P);
				setState(6916);
				any_name();
				setState(6917);
				match(OWNER);
				setState(6918);
				match(TO);
				setState(6919);
				rolespec();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6921);
				match(ALTER);
				setState(6922);
				match(FUNCTION);
				setState(6923);
				function_with_argtypes();
				setState(6924);
				match(OWNER);
				setState(6925);
				match(TO);
				setState(6926);
				rolespec();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6928);
				match(ALTER);
				setState(6929);
				opt_procedural();
				setState(6930);
				match(LANGUAGE);
				setState(6931);
				name();
				setState(6932);
				match(OWNER);
				setState(6933);
				match(TO);
				setState(6934);
				rolespec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6936);
				match(ALTER);
				setState(6937);
				match(LARGE_P);
				setState(6938);
				match(OBJECT_P);
				setState(6939);
				numericonly();
				setState(6940);
				match(OWNER);
				setState(6941);
				match(TO);
				setState(6942);
				rolespec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6944);
				match(ALTER);
				setState(6945);
				match(OPERATOR);
				setState(6946);
				operator_with_argtypes();
				setState(6947);
				match(OWNER);
				setState(6948);
				match(TO);
				setState(6949);
				rolespec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6951);
				match(ALTER);
				setState(6952);
				match(OPERATOR);
				setState(6953);
				match(CLASS);
				setState(6954);
				any_name();
				setState(6955);
				match(USING);
				setState(6956);
				name();
				setState(6957);
				match(OWNER);
				setState(6958);
				match(TO);
				setState(6959);
				rolespec();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6961);
				match(ALTER);
				setState(6962);
				match(OPERATOR);
				setState(6963);
				match(FAMILY);
				setState(6964);
				any_name();
				setState(6965);
				match(USING);
				setState(6966);
				name();
				setState(6967);
				match(OWNER);
				setState(6968);
				match(TO);
				setState(6969);
				rolespec();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6971);
				match(ALTER);
				setState(6972);
				match(PROCEDURE);
				setState(6973);
				function_with_argtypes();
				setState(6974);
				match(OWNER);
				setState(6975);
				match(TO);
				setState(6976);
				rolespec();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6978);
				match(ALTER);
				setState(6979);
				match(ROUTINE);
				setState(6980);
				function_with_argtypes();
				setState(6981);
				match(OWNER);
				setState(6982);
				match(TO);
				setState(6983);
				rolespec();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6985);
				match(ALTER);
				setState(6986);
				match(SCHEMA);
				setState(6987);
				name();
				setState(6988);
				match(OWNER);
				setState(6989);
				match(TO);
				setState(6990);
				rolespec();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6992);
				match(ALTER);
				setState(6993);
				match(TYPE_P);
				setState(6994);
				any_name();
				setState(6995);
				match(OWNER);
				setState(6996);
				match(TO);
				setState(6997);
				rolespec();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6999);
				match(ALTER);
				setState(7000);
				match(TABLESPACE);
				setState(7001);
				name();
				setState(7002);
				match(OWNER);
				setState(7003);
				match(TO);
				setState(7004);
				rolespec();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7006);
				match(ALTER);
				setState(7007);
				match(STATISTICS);
				setState(7008);
				any_name();
				setState(7009);
				match(OWNER);
				setState(7010);
				match(TO);
				setState(7011);
				rolespec();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7013);
				match(ALTER);
				setState(7014);
				match(TEXT_P);
				setState(7015);
				match(SEARCH);
				setState(7016);
				match(DICTIONARY);
				setState(7017);
				any_name();
				setState(7018);
				match(OWNER);
				setState(7019);
				match(TO);
				setState(7020);
				rolespec();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7022);
				match(ALTER);
				setState(7023);
				match(TEXT_P);
				setState(7024);
				match(SEARCH);
				setState(7025);
				match(CONFIGURATION);
				setState(7026);
				any_name();
				setState(7027);
				match(OWNER);
				setState(7028);
				match(TO);
				setState(7029);
				rolespec();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7031);
				match(ALTER);
				setState(7032);
				match(FOREIGN);
				setState(7033);
				match(DATA_P);
				setState(7034);
				match(WRAPPER);
				setState(7035);
				name();
				setState(7036);
				match(OWNER);
				setState(7037);
				match(TO);
				setState(7038);
				rolespec();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7040);
				match(ALTER);
				setState(7041);
				match(SERVER);
				setState(7042);
				name();
				setState(7043);
				match(OWNER);
				setState(7044);
				match(TO);
				setState(7045);
				rolespec();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7047);
				match(ALTER);
				setState(7048);
				match(EVENT);
				setState(7049);
				match(TRIGGER);
				setState(7050);
				name();
				setState(7051);
				match(OWNER);
				setState(7052);
				match(TO);
				setState(7053);
				rolespec();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7055);
				match(ALTER);
				setState(7056);
				match(PUBLICATION);
				setState(7057);
				name();
				setState(7058);
				match(OWNER);
				setState(7059);
				match(TO);
				setState(7060);
				rolespec();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7062);
				match(ALTER);
				setState(7063);
				match(SUBSCRIPTION);
				setState(7064);
				name();
				setState(7065);
				match(OWNER);
				setState(7066);
				match(TO);
				setState(7067);
				rolespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatepublicationstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_publication_for_tablesContext opt_publication_for_tables() {
			return getRuleContext(Opt_publication_for_tablesContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreatepublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpublicationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatepublicationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatepublicationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatepublicationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatepublicationstmtContext createpublicationstmt() throws RecognitionException {
		CreatepublicationstmtContext _localctx = new CreatepublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_createpublicationstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7071);
			match(CREATE);
			setState(7072);
			match(PUBLICATION);
			setState(7073);
			name();
			setState(7074);
			opt_publication_for_tables();
			setState(7075);
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_publication_for_tablesContext extends ParserRuleContext {
		public Publication_for_tablesContext publication_for_tables() {
			return getRuleContext(Publication_for_tablesContext.class,0);
		}
		public Opt_publication_for_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_publication_for_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_publication_for_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_publication_for_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_publication_for_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_publication_for_tablesContext opt_publication_for_tables() throws RecognitionException {
		Opt_publication_for_tablesContext _localctx = new Opt_publication_for_tablesContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_opt_publication_for_tables);
		try {
			setState(7079);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(7077);
				publication_for_tables();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Publication_for_tablesContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public Publication_for_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_for_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_for_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_for_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_for_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_for_tablesContext publication_for_tables() throws RecognitionException {
		Publication_for_tablesContext _localctx = new Publication_for_tablesContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_publication_for_tables);
		try {
			setState(7087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7081);
				match(FOR);
				setState(7082);
				match(TABLE);
				setState(7083);
				relation_expr_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7084);
				match(FOR);
				setState(7085);
				match(ALL);
				setState(7086);
				match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterpublicationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public AlterpublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpublicationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterpublicationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterpublicationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterpublicationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterpublicationstmtContext alterpublicationstmt() throws RecognitionException {
		AlterpublicationstmtContext _localctx = new AlterpublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_alterpublicationstmt);
		try {
			setState(7116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7089);
				match(ALTER);
				setState(7090);
				match(PUBLICATION);
				setState(7091);
				name();
				setState(7092);
				match(SET);
				setState(7093);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7095);
				match(ALTER);
				setState(7096);
				match(PUBLICATION);
				setState(7097);
				name();
				setState(7098);
				match(ADD_P);
				setState(7099);
				match(TABLE);
				setState(7100);
				relation_expr_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7102);
				match(ALTER);
				setState(7103);
				match(PUBLICATION);
				setState(7104);
				name();
				setState(7105);
				match(SET);
				setState(7106);
				match(TABLE);
				setState(7107);
				relation_expr_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7109);
				match(ALTER);
				setState(7110);
				match(PUBLICATION);
				setState(7111);
				name();
				setState(7112);
				match(DROP);
				setState(7113);
				match(TABLE);
				setState(7114);
				relation_expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatesubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreatesubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createsubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatesubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatesubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatesubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatesubscriptionstmtContext createsubscriptionstmt() throws RecognitionException {
		CreatesubscriptionstmtContext _localctx = new CreatesubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_createsubscriptionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7118);
			match(CREATE);
			setState(7119);
			match(SUBSCRIPTION);
			setState(7120);
			name();
			setState(7121);
			match(CONNECTION);
			setState(7122);
			sconst();
			setState(7123);
			match(PUBLICATION);
			setState(7124);
			publication_name_list();
			setState(7125);
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Publication_name_listContext extends ParserRuleContext {
		public List<Publication_name_itemContext> publication_name_item() {
			return getRuleContexts(Publication_name_itemContext.class);
		}
		public Publication_name_itemContext publication_name_item(int i) {
			return getRuleContext(Publication_name_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Publication_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_name_listContext publication_name_list() throws RecognitionException {
		Publication_name_listContext _localctx = new Publication_name_listContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_publication_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7127);
			publication_name_item();
			setState(7132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7128);
				match(COMMA);
				setState(7129);
				publication_name_item();
				}
				}
				setState(7134);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Publication_name_itemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Publication_name_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_name_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_name_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_name_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_name_itemContext publication_name_item() throws RecognitionException {
		Publication_name_itemContext _localctx = new Publication_name_itemContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_publication_name_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7135);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltersubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public AltersubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltersubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltersubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltersubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltersubscriptionstmtContext altersubscriptionstmt() throws RecognitionException {
		AltersubscriptionstmtContext _localctx = new AltersubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_altersubscriptionstmt);
		try {
			setState(7174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7137);
				match(ALTER);
				setState(7138);
				match(SUBSCRIPTION);
				setState(7139);
				name();
				setState(7140);
				match(SET);
				setState(7141);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7143);
				match(ALTER);
				setState(7144);
				match(SUBSCRIPTION);
				setState(7145);
				name();
				setState(7146);
				match(CONNECTION);
				setState(7147);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7149);
				match(ALTER);
				setState(7150);
				match(SUBSCRIPTION);
				setState(7151);
				name();
				setState(7152);
				match(REFRESH);
				setState(7153);
				match(PUBLICATION);
				setState(7154);
				opt_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7156);
				match(ALTER);
				setState(7157);
				match(SUBSCRIPTION);
				setState(7158);
				name();
				setState(7159);
				match(SET);
				setState(7160);
				match(PUBLICATION);
				setState(7161);
				publication_name_list();
				setState(7162);
				opt_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7164);
				match(ALTER);
				setState(7165);
				match(SUBSCRIPTION);
				setState(7166);
				name();
				setState(7167);
				match(ENABLE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7169);
				match(ALTER);
				setState(7170);
				match(SUBSCRIPTION);
				setState(7171);
				name();
				setState(7172);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropsubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropsubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropsubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropsubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropsubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropsubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropsubscriptionstmtContext dropsubscriptionstmt() throws RecognitionException {
		DropsubscriptionstmtContext _localctx = new DropsubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_dropsubscriptionstmt);
		try {
			setState(7188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7176);
				match(DROP);
				setState(7177);
				match(SUBSCRIPTION);
				setState(7178);
				name();
				setState(7179);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7181);
				match(DROP);
				setState(7182);
				match(SUBSCRIPTION);
				setState(7183);
				match(IF_P);
				setState(7184);
				match(EXISTS);
				setState(7185);
				name();
				setState(7186);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RulestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Opt_insteadContext opt_instead() {
			return getRuleContext(Opt_insteadContext.class,0);
		}
		public RuleactionlistContext ruleactionlist() {
			return getRuleContext(RuleactionlistContext.class,0);
		}
		public RulestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rulestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRulestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRulestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRulestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RulestmtContext rulestmt() throws RecognitionException {
		RulestmtContext _localctx = new RulestmtContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_rulestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7190);
			match(CREATE);
			setState(7191);
			opt_or_replace();
			setState(7192);
			match(RULE);
			setState(7193);
			name();
			setState(7194);
			match(AS);
			setState(7195);
			match(ON);
			setState(7196);
			event();
			setState(7197);
			match(TO);
			setState(7198);
			qualified_name();
			setState(7199);
			where_clause();
			setState(7200);
			match(DO);
			setState(7201);
			opt_instead();
			setState(7202);
			ruleactionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionlistContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public RuleactionmultiContext ruleactionmulti() {
			return getRuleContext(RuleactionmultiContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RuleactionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionlistContext ruleactionlist() throws RecognitionException {
		RuleactionlistContext _localctx = new RuleactionlistContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_ruleactionlist);
		try {
			setState(7210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7204);
				match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7205);
				ruleactionstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7206);
				match(OPEN_PAREN);
				setState(7207);
				ruleactionmulti();
				setState(7208);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionmultiContext extends ParserRuleContext {
		public List<RuleactionstmtOrEmptyContext> ruleactionstmtOrEmpty() {
			return getRuleContexts(RuleactionstmtOrEmptyContext.class);
		}
		public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty(int i) {
			return getRuleContext(RuleactionstmtOrEmptyContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public RuleactionmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionmultiContext ruleactionmulti() throws RecognitionException {
		RuleactionmultiContext _localctx = new RuleactionmultiContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_ruleactionmulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7212);
			ruleactionstmtOrEmpty();
			setState(7217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI) {
				{
				{
				setState(7213);
				match(SEMI);
				setState(7214);
				ruleactionstmtOrEmpty();
				}
				}
				setState(7219);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionstmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public RuleactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionstmtContext ruleactionstmt() throws RecognitionException {
		RuleactionstmtContext _localctx = new RuleactionstmtContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_ruleactionstmt);
		try {
			setState(7225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7220);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7221);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7222);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7223);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7224);
				notifystmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionstmtOrEmptyContext extends ParserRuleContext {
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public RuleactionstmtOrEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmtOrEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionstmtOrEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionstmtOrEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionstmtOrEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() throws RecognitionException {
		RuleactionstmtOrEmptyContext _localctx = new RuleactionstmtOrEmptyContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_ruleactionstmtOrEmpty);
		try {
			setState(7229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(7227);
				ruleactionstmt();
				}
				break;
			case CLOSE_PAREN:
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7231);
			_la = _input.LA(1);
			if ( !(_la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_insteadContext extends ParserRuleContext {
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_instead; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_instead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_instead(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_instead(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_insteadContext opt_instead() throws RecognitionException {
		Opt_insteadContext _localctx = new Opt_insteadContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_opt_instead);
		try {
			setState(7236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7233);
				match(INSTEAD);
				}
				break;
			case ALSO:
				enterOuterAlt(_localctx, 2);
				{
				setState(7234);
				match(ALSO);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifystmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Notify_payloadContext notify_payload() {
			return getRuleContext(Notify_payloadContext.class,0);
		}
		public NotifystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotifystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotifystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotifystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifystmtContext notifystmt() throws RecognitionException {
		NotifystmtContext _localctx = new NotifystmtContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_notifystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7238);
			match(NOTIFY);
			setState(7239);
			colid();
			setState(7240);
			notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notify_payloadContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_payload; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotify_payload(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotify_payload(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotify_payload(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_payloadContext notify_payload() throws RecognitionException {
		Notify_payloadContext _localctx = new Notify_payloadContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_notify_payload);
		try {
			setState(7245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(7242);
				match(COMMA);
				setState(7243);
				sconst();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenstmtContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ListenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listenstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterListenstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitListenstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitListenstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenstmtContext listenstmt() throws RecognitionException {
		ListenstmtContext _localctx = new ListenstmtContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_listenstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7247);
			match(LISTEN);
			setState(7248);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenstmtContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public UnlistenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlistenstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnlistenstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnlistenstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnlistenstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenstmtContext unlistenstmt() throws RecognitionException {
		UnlistenstmtContext _localctx = new UnlistenstmtContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_unlistenstmt);
		try {
			setState(7254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7250);
				match(UNLISTEN);
				setState(7251);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7252);
				match(UNLISTEN);
				setState(7253);
				match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionstmtContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public Opt_transactionContext opt_transaction() {
			return getRuleContext(Opt_transactionContext.class,0);
		}
		public Opt_transaction_chainContext opt_transaction_chain() {
			return getRuleContext(Opt_transaction_chainContext.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return getRuleContext(Transaction_mode_list_or_emptyContext.class,0);
		}
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TransactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransactionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransactionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransactionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionstmtContext transactionstmt() throws RecognitionException {
		TransactionstmtContext _localctx = new TransactionstmtContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_transactionstmt);
		try {
			setState(7306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7256);
				match(ABORT_P);
				setState(7257);
				opt_transaction();
				setState(7258);
				opt_transaction_chain();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7260);
				match(BEGIN_P);
				setState(7261);
				opt_transaction();
				setState(7262);
				transaction_mode_list_or_empty();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7264);
				match(START);
				setState(7265);
				match(TRANSACTION);
				setState(7266);
				transaction_mode_list_or_empty();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7267);
				match(COMMIT);
				setState(7268);
				opt_transaction();
				setState(7269);
				opt_transaction_chain();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7271);
				match(END_P);
				setState(7272);
				opt_transaction();
				setState(7273);
				opt_transaction_chain();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7275);
				match(ROLLBACK);
				setState(7276);
				opt_transaction();
				setState(7277);
				opt_transaction_chain();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7279);
				match(SAVEPOINT);
				setState(7280);
				colid();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7281);
				match(RELEASE);
				setState(7282);
				match(SAVEPOINT);
				setState(7283);
				colid();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7284);
				match(RELEASE);
				setState(7285);
				colid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7286);
				match(ROLLBACK);
				setState(7287);
				opt_transaction();
				setState(7288);
				match(TO);
				setState(7289);
				match(SAVEPOINT);
				setState(7290);
				colid();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7292);
				match(ROLLBACK);
				setState(7293);
				opt_transaction();
				setState(7294);
				match(TO);
				setState(7295);
				colid();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7297);
				match(PREPARE);
				setState(7298);
				match(TRANSACTION);
				setState(7299);
				sconst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7300);
				match(COMMIT);
				setState(7301);
				match(PREPARED);
				setState(7302);
				sconst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7303);
				match(ROLLBACK);
				setState(7304);
				match(PREPARED);
				setState(7305);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transactionContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transactionContext opt_transaction() throws RecognitionException {
		Opt_transactionContext _localctx = new Opt_transactionContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_opt_transaction);
		try {
			setState(7311);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WORK:
				enterOuterAlt(_localctx, 1);
				{
				setState(7308);
				match(WORK);
				}
				break;
			case TRANSACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7309);
				match(TRANSACTION);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case TO:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case ISOLATION:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case READ:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_itemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public Iso_levelContext iso_level() {
			return getRuleContext(Iso_levelContext.class,0);
		}
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_itemContext transaction_mode_item() throws RecognitionException {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_transaction_mode_item);
		try {
			setState(7323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7313);
				match(ISOLATION);
				setState(7314);
				match(LEVEL);
				setState(7315);
				iso_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7316);
				match(READ);
				setState(7317);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7318);
				match(READ);
				setState(7319);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7320);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7321);
				match(NOT);
				setState(7322);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_listContext extends ParserRuleContext {
		public List<Transaction_mode_itemContext> transaction_mode_item() {
			return getRuleContexts(Transaction_mode_itemContext.class);
		}
		public Transaction_mode_itemContext transaction_mode_item(int i) {
			return getRuleContext(Transaction_mode_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_transaction_mode_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7325);
			transaction_mode_item();
			setState(7332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA || _la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
				{
				{
				setState(7327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7326);
					match(COMMA);
					}
				}

				setState(7329);
				transaction_mode_item();
				}
				}
				setState(7334);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list_or_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_list_or_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_list_or_empty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_list_or_empty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() throws RecognitionException {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_transaction_mode_list_or_empty);
		try {
			setState(7337);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRABLE:
			case NOT:
			case ISOLATION:
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(7335);
				transaction_mode_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transaction_chainContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_transaction_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction_chain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_transaction_chain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_transaction_chain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_transaction_chain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transaction_chainContext opt_transaction_chain() throws RecognitionException {
		Opt_transaction_chainContext _localctx = new Opt_transaction_chainContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_opt_transaction_chain);
		int _la;
		try {
			setState(7345);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(7339);
				match(AND);
				setState(7341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7340);
					match(NO);
					}
				}

				setState(7343);
				match(CHAIN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_check_optionContext opt_check_option() {
			return getRuleContext(Opt_check_optionContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public ViewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterViewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitViewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitViewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewstmtContext viewstmt() throws RecognitionException {
		ViewstmtContext _localctx = new ViewstmtContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_viewstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7347);
			match(CREATE);
			setState(7350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7348);
				match(OR);
				setState(7349);
				match(REPLACE);
				}
			}

			setState(7352);
			opttemp();
			setState(7366);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VIEW:
				{
				setState(7353);
				match(VIEW);
				setState(7354);
				qualified_name();
				setState(7355);
				opt_column_list();
				setState(7356);
				opt_reloptions();
				}
				break;
			case RECURSIVE:
				{
				setState(7358);
				match(RECURSIVE);
				setState(7359);
				match(VIEW);
				setState(7360);
				qualified_name();
				setState(7361);
				match(OPEN_PAREN);
				setState(7362);
				columnlist();
				setState(7363);
				match(CLOSE_PAREN);
				setState(7364);
				opt_reloptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7368);
			match(AS);
			setState(7369);
			selectstmt();
			setState(7370);
			opt_check_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_check_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_check_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_check_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_check_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_check_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_check_optionContext opt_check_option() throws RecognitionException {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_opt_check_option);
		int _la;
		try {
			setState(7379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7372);
				match(WITH);
				setState(7374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(7373);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7376);
				match(CHECK);
				setState(7377);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadstmtContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public LoadstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoadstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoadstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoadstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadstmtContext loadstmt() throws RecognitionException {
		LoadstmtContext _localctx = new LoadstmtContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_loadstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7381);
			match(LOAD);
			setState(7382);
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public CreatedbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedbstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedbstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedbstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbstmtContext createdbstmt() throws RecognitionException {
		CreatedbstmtContext _localctx = new CreatedbstmtContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_createdbstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7384);
			match(CREATE);
			setState(7385);
			match(DATABASE);
			setState(7386);
			name();
			setState(7387);
			opt_with();
			setState(7388);
			createdb_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_listContext extends ParserRuleContext {
		public Createdb_opt_itemsContext createdb_opt_items() {
			return getRuleContext(Createdb_opt_itemsContext.class,0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_listContext createdb_opt_list() throws RecognitionException {
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_createdb_opt_list);
		try {
			setState(7392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7390);
				createdb_opt_items();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_itemsContext extends ParserRuleContext {
		public List<Createdb_opt_itemContext> createdb_opt_item() {
			return getRuleContexts(Createdb_opt_itemContext.class);
		}
		public Createdb_opt_itemContext createdb_opt_item(int i) {
			return getRuleContext(Createdb_opt_itemContext.class,i);
		}
		public Createdb_opt_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemsContext createdb_opt_items() throws RecognitionException {
		Createdb_opt_itemsContext _localctx = new Createdb_opt_itemsContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_createdb_opt_items);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7395); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7394);
					createdb_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7397); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,351,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_itemContext extends ParserRuleContext {
		public Createdb_opt_nameContext createdb_opt_name() {
			return getRuleContext(Createdb_opt_nameContext.class,0);
		}
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemContext createdb_opt_item() throws RecognitionException {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_createdb_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7399);
			createdb_opt_name();
			setState(7400);
			opt_equal();
			setState(7404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				setState(7401);
				signediconst();
				}
				break;
			case 2:
				{
				setState(7402);
				opt_boolean_or_string();
				}
				break;
			case 3:
				{
				setState(7403);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public Createdb_opt_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_nameContext createdb_opt_name() throws RecognitionException {
		Createdb_opt_nameContext _localctx = new Createdb_opt_nameContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_createdb_opt_name);
		try {
			setState(7414);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7406);
				identifier();
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7407);
				match(CONNECTION);
				setState(7408);
				match(LIMIT);
				}
				break;
			case ENCODING:
				enterOuterAlt(_localctx, 3);
				{
				setState(7409);
				match(ENCODING);
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(7410);
				match(LOCATION);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 5);
				{
				setState(7411);
				match(OWNER);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 6);
				{
				setState(7412);
				match(TABLESPACE);
				}
				break;
			case TEMPLATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(7413);
				match(TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_equalContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Opt_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_equal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_equalContext opt_equal() throws RecognitionException {
		Opt_equalContext _localctx = new Opt_equalContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_opt_equal);
		try {
			setState(7418);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7416);
				match(EQUAL);
				}
				break;
			case PLUS:
			case MINUS:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdatabasestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public AlterdatabasestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdatabasestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdatabasestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdatabasestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdatabasestmtContext alterdatabasestmt() throws RecognitionException {
		AlterdatabasestmtContext _localctx = new AlterdatabasestmtContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_alterdatabasestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7420);
			match(ALTER);
			setState(7421);
			match(DATABASE);
			setState(7422);
			name();
			setState(7429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(7423);
				match(WITH);
				setState(7424);
				createdb_opt_list();
				}
				break;
			case 2:
				{
				setState(7425);
				createdb_opt_list();
				}
				break;
			case 3:
				{
				setState(7426);
				match(SET);
				setState(7427);
				match(TABLESPACE);
				setState(7428);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdatabasesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public AlterdatabasesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdatabasesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdatabasesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdatabasesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdatabasesetstmtContext alterdatabasesetstmt() throws RecognitionException {
		AlterdatabasesetstmtContext _localctx = new AlterdatabasesetstmtContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_alterdatabasesetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7431);
			match(ALTER);
			setState(7432);
			match(DATABASE);
			setState(7433);
			name();
			setState(7434);
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropdbstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Drop_option_listContext drop_option_list() {
			return getRuleContext(Drop_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DropdbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropdbstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropdbstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropdbstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropdbstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropdbstmtContext dropdbstmt() throws RecognitionException {
		DropdbstmtContext _localctx = new DropdbstmtContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_dropdbstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7436);
			match(DROP);
			setState(7437);
			match(DATABASE);
			setState(7440);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(7438);
				match(IF_P);
				setState(7439);
				match(EXISTS);
				}
				break;
			}
			setState(7442);
			name();
			setState(7448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				setState(7443);
				opt_with();
				setState(7444);
				match(OPEN_PAREN);
				setState(7445);
				drop_option_list();
				setState(7446);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_option_listContext extends ParserRuleContext {
		public List<Drop_optionContext> drop_option() {
			return getRuleContexts(Drop_optionContext.class);
		}
		public Drop_optionContext drop_option(int i) {
			return getRuleContext(Drop_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Drop_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_option_listContext drop_option_list() throws RecognitionException {
		Drop_option_listContext _localctx = new Drop_option_listContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_drop_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7450);
			drop_option();
			setState(7455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7451);
				match(COMMA);
				setState(7452);
				drop_option();
				}
				}
				setState(7457);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_optionContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Drop_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_optionContext drop_option() throws RecognitionException {
		Drop_optionContext _localctx = new Drop_optionContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_drop_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7458);
			match(FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltercollationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public AltercollationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercollationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltercollationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltercollationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltercollationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltercollationstmtContext altercollationstmt() throws RecognitionException {
		AltercollationstmtContext _localctx = new AltercollationstmtContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_altercollationstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7460);
			match(ALTER);
			setState(7461);
			match(COLLATION);
			setState(7462);
			any_name();
			setState(7463);
			match(REFRESH);
			setState(7464);
			match(VERSION_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltersystemstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public AltersystemstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersystemstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltersystemstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltersystemstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltersystemstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltersystemstmtContext altersystemstmt() throws RecognitionException {
		AltersystemstmtContext _localctx = new AltersystemstmtContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_altersystemstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7466);
			match(ALTER);
			setState(7467);
			match(SYSTEM_P);
			setState(7468);
			_la = _input.LA(1);
			if ( !(_la==RESET || _la==SET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7469);
			generic_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedomainstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public CreatedomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdomainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedomainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedomainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedomainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedomainstmtContext createdomainstmt() throws RecognitionException {
		CreatedomainstmtContext _localctx = new CreatedomainstmtContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_createdomainstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7471);
			match(CREATE);
			setState(7472);
			match(DOMAIN_P);
			setState(7473);
			any_name();
			setState(7474);
			opt_as();
			setState(7475);
			typename();
			setState(7476);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdomainstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterdomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdomainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdomainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdomainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdomainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdomainstmtContext alterdomainstmt() throws RecognitionException {
		AlterdomainstmtContext _localctx = new AlterdomainstmtContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_alterdomainstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7478);
			match(ALTER);
			setState(7479);
			match(DOMAIN_P);
			setState(7480);
			any_name();
			setState(7502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				setState(7481);
				alter_column_default();
				}
				break;
			case 2:
				{
				setState(7482);
				match(DROP);
				setState(7483);
				match(NOT);
				setState(7484);
				match(NULL_P);
				}
				break;
			case 3:
				{
				setState(7485);
				match(SET);
				setState(7486);
				match(NOT);
				setState(7487);
				match(NULL_P);
				}
				break;
			case 4:
				{
				setState(7488);
				match(ADD_P);
				setState(7489);
				tableconstraint();
				}
				break;
			case 5:
				{
				setState(7490);
				match(DROP);
				setState(7491);
				match(CONSTRAINT);
				setState(7494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(7492);
					match(IF_P);
					setState(7493);
					match(EXISTS);
					}
					break;
				}
				setState(7496);
				name();
				setState(7497);
				opt_drop_behavior();
				}
				break;
			case 6:
				{
				setState(7499);
				match(VALIDATE);
				setState(7500);
				match(CONSTRAINT);
				setState(7501);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asContext opt_as() throws RecognitionException {
		Opt_asContext _localctx = new Opt_asContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_opt_as);
		try {
			setState(7506);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7504);
				match(AS);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertsdictionarystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AltertsdictionarystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsdictionarystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertsdictionarystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertsdictionarystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertsdictionarystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertsdictionarystmtContext altertsdictionarystmt() throws RecognitionException {
		AltertsdictionarystmtContext _localctx = new AltertsdictionarystmtContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_altertsdictionarystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7508);
			match(ALTER);
			setState(7509);
			match(TEXT_P);
			setState(7510);
			match(SEARCH);
			setState(7511);
			match(DICTIONARY);
			setState(7512);
			any_name();
			setState(7513);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertsconfigurationstmtContext extends ParserRuleContext {
		public List<TerminalNode> ALTER() { return getTokens(PostgreSQLParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(PostgreSQLParser.ALTER, i);
		}
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Any_withContext any_with() {
			return getRuleContext(Any_withContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AltertsconfigurationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsconfigurationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertsconfigurationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertsconfigurationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertsconfigurationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertsconfigurationstmtContext altertsconfigurationstmt() throws RecognitionException {
		AltertsconfigurationstmtContext _localctx = new AltertsconfigurationstmtContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_altertsconfigurationstmt);
		try {
			setState(7587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7515);
				match(ALTER);
				setState(7516);
				match(TEXT_P);
				setState(7517);
				match(SEARCH);
				setState(7518);
				match(CONFIGURATION);
				setState(7519);
				any_name();
				setState(7520);
				match(ADD_P);
				setState(7521);
				match(MAPPING);
				setState(7522);
				match(FOR);
				setState(7523);
				name_list();
				setState(7524);
				any_with();
				setState(7525);
				any_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7527);
				match(ALTER);
				setState(7528);
				match(TEXT_P);
				setState(7529);
				match(SEARCH);
				setState(7530);
				match(CONFIGURATION);
				setState(7531);
				any_name();
				setState(7532);
				match(ALTER);
				setState(7533);
				match(MAPPING);
				setState(7534);
				match(FOR);
				setState(7535);
				name_list();
				setState(7536);
				any_with();
				setState(7537);
				any_name_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7539);
				match(ALTER);
				setState(7540);
				match(TEXT_P);
				setState(7541);
				match(SEARCH);
				setState(7542);
				match(CONFIGURATION);
				setState(7543);
				any_name();
				setState(7544);
				match(ALTER);
				setState(7545);
				match(MAPPING);
				setState(7546);
				match(REPLACE);
				setState(7547);
				any_name();
				setState(7548);
				any_with();
				setState(7549);
				any_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7551);
				match(ALTER);
				setState(7552);
				match(TEXT_P);
				setState(7553);
				match(SEARCH);
				setState(7554);
				match(CONFIGURATION);
				setState(7555);
				any_name();
				setState(7556);
				match(ALTER);
				setState(7557);
				match(MAPPING);
				setState(7558);
				match(FOR);
				setState(7559);
				name_list();
				setState(7560);
				match(REPLACE);
				setState(7561);
				any_name();
				setState(7562);
				any_with();
				setState(7563);
				any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7565);
				match(ALTER);
				setState(7566);
				match(TEXT_P);
				setState(7567);
				match(SEARCH);
				setState(7568);
				match(CONFIGURATION);
				setState(7569);
				any_name();
				setState(7570);
				match(DROP);
				setState(7571);
				match(MAPPING);
				setState(7572);
				match(FOR);
				setState(7573);
				name_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7575);
				match(ALTER);
				setState(7576);
				match(TEXT_P);
				setState(7577);
				match(SEARCH);
				setState(7578);
				match(CONFIGURATION);
				setState(7579);
				any_name();
				setState(7580);
				match(DROP);
				setState(7581);
				match(MAPPING);
				setState(7582);
				match(IF_P);
				setState(7583);
				match(EXISTS);
				setState(7584);
				match(FOR);
				setState(7585);
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Any_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_withContext any_with() throws RecognitionException {
		Any_withContext _localctx = new Any_withContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_any_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7589);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateconversionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public CreateconversionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createconversionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateconversionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateconversionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateconversionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateconversionstmtContext createconversionstmt() throws RecognitionException {
		CreateconversionstmtContext _localctx = new CreateconversionstmtContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_createconversionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7591);
			match(CREATE);
			setState(7592);
			opt_default();
			setState(7593);
			match(CONVERSION_P);
			setState(7594);
			any_name();
			setState(7595);
			match(FOR);
			setState(7596);
			sconst();
			setState(7597);
			match(TO);
			setState(7598);
			sconst();
			setState(7599);
			match(FROM);
			setState(7600);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterstmtContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Cluster_index_specificationContext cluster_index_specification() {
			return getRuleContext(Cluster_index_specificationContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public ClusterstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterClusterstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitClusterstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitClusterstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterstmtContext clusterstmt() throws RecognitionException {
		ClusterstmtContext _localctx = new ClusterstmtContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_clusterstmt);
		try {
			setState(7615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7602);
				match(CLUSTER);
				setState(7603);
				opt_verbose();
				setState(7604);
				qualified_name();
				setState(7605);
				cluster_index_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7607);
				match(CLUSTER);
				setState(7608);
				opt_verbose();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7609);
				match(CLUSTER);
				setState(7610);
				opt_verbose();
				setState(7611);
				name();
				setState(7612);
				match(ON);
				setState(7613);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_index_specificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCluster_index_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCluster_index_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCluster_index_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_specificationContext cluster_index_specification() throws RecognitionException {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_cluster_index_specification);
		try {
			setState(7620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7617);
				match(USING);
				setState(7618);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumstmtContext extends ParserRuleContext {
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public Opt_fullContext opt_full() {
			return getRuleContext(Opt_fullContext.class,0);
		}
		public Opt_freezeContext opt_freeze() {
			return getRuleContext(Opt_freezeContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Opt_analyzeContext opt_analyze() {
			return getRuleContext(Opt_analyzeContext.class,0);
		}
		public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return getRuleContext(Opt_vacuum_relation_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public VacuumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuumstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuumstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuumstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumstmtContext vacuumstmt() throws RecognitionException {
		VacuumstmtContext _localctx = new VacuumstmtContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_vacuumstmt);
		try {
			setState(7635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7622);
				match(VACUUM);
				setState(7623);
				opt_full();
				setState(7624);
				opt_freeze();
				setState(7625);
				opt_verbose();
				setState(7626);
				opt_analyze();
				setState(7627);
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7629);
				match(VACUUM);
				setState(7630);
				match(OPEN_PAREN);
				setState(7631);
				vac_analyze_option_list();
				setState(7632);
				match(CLOSE_PAREN);
				setState(7633);
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzestmtContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return getRuleContext(Opt_vacuum_relation_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AnalyzestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyzestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyzestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyzestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzestmtContext analyzestmt() throws RecognitionException {
		AnalyzestmtContext _localctx = new AnalyzestmtContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_analyzestmt);
		try {
			setState(7647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7637);
				analyze_keyword();
				setState(7638);
				opt_verbose();
				setState(7639);
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7641);
				analyze_keyword();
				setState(7642);
				match(OPEN_PAREN);
				setState(7643);
				vac_analyze_option_list();
				setState(7644);
				match(CLOSE_PAREN);
				setState(7645);
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_listContext extends ParserRuleContext {
		public List<Vac_analyze_option_elemContext> vac_analyze_option_elem() {
			return getRuleContexts(Vac_analyze_option_elemContext.class);
		}
		public Vac_analyze_option_elemContext vac_analyze_option_elem(int i) {
			return getRuleContext(Vac_analyze_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Vac_analyze_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_listContext vac_analyze_option_list() throws RecognitionException {
		Vac_analyze_option_listContext _localctx = new Vac_analyze_option_listContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_vac_analyze_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7649);
			vac_analyze_option_elem();
			setState(7654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7650);
				match(COMMA);
				setState(7651);
				vac_analyze_option_elem();
				}
				}
				setState(7656);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_keywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyze_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyze_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyze_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_keywordContext analyze_keyword() throws RecognitionException {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_analyze_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7657);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_elemContext extends ParserRuleContext {
		public Vac_analyze_option_nameContext vac_analyze_option_name() {
			return getRuleContext(Vac_analyze_option_nameContext.class,0);
		}
		public Vac_analyze_option_argContext vac_analyze_option_arg() {
			return getRuleContext(Vac_analyze_option_argContext.class,0);
		}
		public Vac_analyze_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_elemContext vac_analyze_option_elem() throws RecognitionException {
		Vac_analyze_option_elemContext _localctx = new Vac_analyze_option_elemContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_vac_analyze_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7659);
			vac_analyze_option_name();
			setState(7660);
			vac_analyze_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Vac_analyze_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_nameContext vac_analyze_option_name() throws RecognitionException {
		Vac_analyze_option_nameContext _localctx = new Vac_analyze_option_nameContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_vac_analyze_option_name);
		try {
			setState(7664);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7662);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7663);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Vac_analyze_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_argContext vac_analyze_option_arg() throws RecognitionException {
		Vac_analyze_option_argContext _localctx = new Vac_analyze_option_argContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_vac_analyze_option_arg);
		try {
			setState(7669);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(7666);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(7667);
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_analyzeContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_analyzeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_analyze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_analyze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_analyze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_analyze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_analyzeContext opt_analyze() throws RecognitionException {
		Opt_analyzeContext _localctx = new Opt_analyzeContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_opt_analyze);
		try {
			setState(7673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7671);
				analyze_keyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_verboseContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_verbose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_verbose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_verbose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_verbose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_verboseContext opt_verbose() throws RecognitionException {
		Opt_verboseContext _localctx = new Opt_verboseContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_opt_verbose);
		try {
			setState(7677);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERBOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7675);
				match(VERBOSE);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fullContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_full; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_full(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_full(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_full(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fullContext opt_full() throws RecognitionException {
		Opt_fullContext _localctx = new Opt_fullContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_opt_full);
		try {
			setState(7681);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7679);
				match(FULL);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case FREEZE:
			case IS:
			case OUTER_P:
			case OVER:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_freezeContext extends ParserRuleContext {
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_freeze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_freeze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_freeze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_freeze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_freezeContext opt_freeze() throws RecognitionException {
		Opt_freezeContext _localctx = new Opt_freezeContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_opt_freeze);
		try {
			setState(7685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FREEZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7683);
				match(FREEZE);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case OUTER_P:
			case OVER:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_name_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_name_listContext opt_name_list() throws RecognitionException {
		Opt_name_listContext _localctx = new Opt_name_listContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_opt_name_list);
		try {
			setState(7692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7687);
				match(OPEN_PAREN);
				setState(7688);
				name_list();
				setState(7689);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_relationContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Vacuum_relationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_relation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_relation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_relation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_relationContext vacuum_relation() throws RecognitionException {
		Vacuum_relationContext _localctx = new Vacuum_relationContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_vacuum_relation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7694);
			qualified_name();
			setState(7695);
			opt_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_relation_listContext extends ParserRuleContext {
		public List<Vacuum_relationContext> vacuum_relation() {
			return getRuleContexts(Vacuum_relationContext.class);
		}
		public Vacuum_relationContext vacuum_relation(int i) {
			return getRuleContext(Vacuum_relationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Vacuum_relation_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_relation_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_relation_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_relation_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_relation_listContext vacuum_relation_list() throws RecognitionException {
		Vacuum_relation_listContext _localctx = new Vacuum_relation_listContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_vacuum_relation_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7697);
			vacuum_relation();
			setState(7702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7698);
				match(COMMA);
				setState(7699);
				vacuum_relation();
				}
				}
				setState(7704);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_vacuum_relation_listContext extends ParserRuleContext {
		public Vacuum_relation_listContext vacuum_relation_list() {
			return getRuleContext(Vacuum_relation_listContext.class,0);
		}
		public Opt_vacuum_relation_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_vacuum_relation_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_vacuum_relation_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_vacuum_relation_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_vacuum_relation_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_vacuum_relation_listContext opt_vacuum_relation_list() throws RecognitionException {
		Opt_vacuum_relation_listContext _localctx = new Opt_vacuum_relation_listContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_opt_vacuum_relation_list);
		try {
			setState(7707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7705);
				vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainstmtContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public ExplainablestmtContext explainablestmt() {
			return getRuleContext(ExplainablestmtContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExplainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainstmtContext explainstmt() throws RecognitionException {
		ExplainstmtContext _localctx = new ExplainstmtContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_explainstmt);
		try {
			setState(7725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7709);
				match(EXPLAIN);
				setState(7710);
				explainablestmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7711);
				match(EXPLAIN);
				setState(7712);
				analyze_keyword();
				setState(7713);
				opt_verbose();
				setState(7714);
				explainablestmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7716);
				match(EXPLAIN);
				setState(7717);
				match(VERBOSE);
				setState(7718);
				explainablestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7719);
				match(EXPLAIN);
				setState(7720);
				match(OPEN_PAREN);
				setState(7721);
				explain_option_list();
				setState(7722);
				match(CLOSE_PAREN);
				setState(7723);
				explainablestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplainablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplainablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplainablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainablestmtContext explainablestmt() throws RecognitionException {
		ExplainablestmtContext _localctx = new ExplainablestmtContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_explainablestmt);
		try {
			setState(7736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7727);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7728);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7729);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7730);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7731);
				declarecursorstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7732);
				createasstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7733);
				creatematviewstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7734);
				refreshmatviewstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7735);
				executestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_listContext extends ParserRuleContext {
		public List<Explain_option_elemContext> explain_option_elem() {
			return getRuleContexts(Explain_option_elemContext.class);
		}
		public Explain_option_elemContext explain_option_elem(int i) {
			return getRuleContext(Explain_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_listContext explain_option_list() throws RecognitionException {
		Explain_option_listContext _localctx = new Explain_option_listContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_explain_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7738);
			explain_option_elem();
			setState(7743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7739);
				match(COMMA);
				setState(7740);
				explain_option_elem();
				}
				}
				setState(7745);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_elemContext extends ParserRuleContext {
		public Explain_option_nameContext explain_option_name() {
			return getRuleContext(Explain_option_nameContext.class,0);
		}
		public Explain_option_argContext explain_option_arg() {
			return getRuleContext(Explain_option_argContext.class,0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_elemContext explain_option_elem() throws RecognitionException {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_explain_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7746);
			explain_option_name();
			setState(7747);
			explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_nameContext explain_option_name() throws RecognitionException {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_explain_option_name);
		try {
			setState(7751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7749);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7750);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_argContext explain_option_arg() throws RecognitionException {
		Explain_option_argContext _localctx = new Explain_option_argContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_explain_option_arg);
		try {
			setState(7756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(7753);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(7754);
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparestmtContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Prep_type_clauseContext prep_type_clause() {
			return getRuleContext(Prep_type_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public PreparestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPreparestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPreparestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPreparestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparestmtContext preparestmt() throws RecognitionException {
		PreparestmtContext _localctx = new PreparestmtContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_preparestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7758);
			match(PREPARE);
			setState(7759);
			name();
			setState(7760);
			prep_type_clause();
			setState(7761);
			match(AS);
			setState(7762);
			preparablestmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prep_type_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prep_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrep_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrep_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrep_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prep_type_clauseContext prep_type_clause() throws RecognitionException {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_prep_type_clause);
		try {
			setState(7769);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7764);
				match(OPEN_PAREN);
				setState(7765);
				type_list();
				setState(7766);
				match(CLOSE_PAREN);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public PreparablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPreparablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPreparablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPreparablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparablestmtContext preparablestmt() throws RecognitionException {
		PreparablestmtContext _localctx = new PreparablestmtContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_preparablestmt);
		try {
			setState(7775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7771);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7772);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7773);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7774);
				deletestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecutestmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Execute_param_clauseContext execute_param_clause() {
			return getRuleContext(Execute_param_clauseContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public ExecutestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecutestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecutestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecutestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecutestmtContext executestmt() throws RecognitionException {
		ExecutestmtContext _localctx = new ExecutestmtContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_executestmt);
		try {
			setState(7804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7777);
				match(EXECUTE);
				setState(7778);
				name();
				setState(7779);
				execute_param_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7781);
				match(CREATE);
				setState(7782);
				opttemp();
				setState(7783);
				match(TABLE);
				setState(7784);
				create_as_target();
				setState(7785);
				match(AS);
				setState(7786);
				match(EXECUTE);
				setState(7787);
				name();
				setState(7788);
				execute_param_clause();
				setState(7789);
				opt_with_data();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7791);
				match(CREATE);
				setState(7792);
				opttemp();
				setState(7793);
				match(TABLE);
				setState(7794);
				match(IF_P);
				setState(7795);
				match(NOT);
				setState(7796);
				match(EXISTS);
				setState(7797);
				create_as_target();
				setState(7798);
				match(AS);
				setState(7799);
				match(EXECUTE);
				setState(7800);
				name();
				setState(7801);
				execute_param_clause();
				setState(7802);
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_param_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_param_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecute_param_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecute_param_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecute_param_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_param_clauseContext execute_param_clause() throws RecognitionException {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_execute_param_clause);
		try {
			setState(7811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7806);
				match(OPEN_PAREN);
				setState(7807);
				expr_list();
				setState(7808);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatestmtContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public DeallocatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeallocatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeallocatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeallocatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatestmtContext deallocatestmt() throws RecognitionException {
		DeallocatestmtContext _localctx = new DeallocatestmtContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_deallocatestmt);
		try {
			setState(7823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7813);
				match(DEALLOCATE);
				setState(7814);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7815);
				match(DEALLOCATE);
				setState(7816);
				match(PREPARE);
				setState(7817);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7818);
				match(DEALLOCATE);
				setState(7819);
				match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7820);
				match(DEALLOCATE);
				setState(7821);
				match(PREPARE);
				setState(7822);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertstmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Insert_targetContext insert_target() {
			return getRuleContext(Insert_targetContext.class,0);
		}
		public Insert_restContext insert_rest() {
			return getRuleContext(Insert_restContext.class,0);
		}
		public Opt_on_conflictContext opt_on_conflict() {
			return getRuleContext(Opt_on_conflictContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public InsertstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsertstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsertstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsertstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertstmtContext insertstmt() throws RecognitionException {
		InsertstmtContext _localctx = new InsertstmtContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_insertstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7825);
			opt_with_clause();
			setState(7826);
			match(INSERT);
			setState(7827);
			match(INTO);
			setState(7828);
			insert_target();
			setState(7829);
			insert_rest();
			setState(7830);
			opt_on_conflict();
			setState(7831);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Insert_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_targetContext insert_target() throws RecognitionException {
		Insert_targetContext _localctx = new Insert_targetContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_insert_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7833);
			qualified_name();
			setState(7836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7834);
				match(AS);
				setState(7835);
				colid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_restContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public Override_kindContext override_kind() {
			return getRuleContext(Override_kindContext.class,0);
		}
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_restContext insert_rest() throws RecognitionException {
		Insert_restContext _localctx = new Insert_restContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_insert_rest);
		int _la;
		try {
			setState(7857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7838);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7839);
				match(OVERRIDING);
				setState(7840);
				override_kind();
				setState(7841);
				match(VALUE_P);
				setState(7842);
				selectstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7844);
				match(OPEN_PAREN);
				setState(7845);
				insert_column_list();
				setState(7846);
				match(CLOSE_PAREN);
				setState(7851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERRIDING) {
					{
					setState(7847);
					match(OVERRIDING);
					setState(7848);
					override_kind();
					setState(7849);
					match(VALUE_P);
					}
				}

				setState(7853);
				selectstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7855);
				match(DEFAULT);
				setState(7856);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Override_kindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Override_kindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_override_kind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOverride_kind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOverride_kind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOverride_kind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Override_kindContext override_kind() throws RecognitionException {
		Override_kindContext _localctx = new Override_kindContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_override_kind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7859);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public List<Insert_column_itemContext> insert_column_item() {
			return getRuleContexts(Insert_column_itemContext.class);
		}
		public Insert_column_itemContext insert_column_item(int i) {
			return getRuleContext(Insert_column_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_insert_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7861);
			insert_column_item();
			setState(7866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7862);
				match(COMMA);
				setState(7863);
				insert_column_item();
				}
				}
				setState(7868);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_column_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_column_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_column_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_itemContext insert_column_item() throws RecognitionException {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_insert_column_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7869);
			colid();
			setState(7870);
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_on_conflictContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public Opt_conf_exprContext opt_conf_expr() {
			return getRuleContext(Opt_conf_exprContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public Opt_on_conflictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_on_conflict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_on_conflict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_on_conflict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_on_conflict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_on_conflictContext opt_on_conflict() throws RecognitionException {
		Opt_on_conflictContext _localctx = new Opt_on_conflictContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_opt_on_conflict);
		try {
			setState(7885);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(7872);
				match(ON);
				setState(7873);
				match(CONFLICT);
				setState(7874);
				opt_conf_expr();
				setState(7875);
				match(DO);
				setState(7882);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
					{
					setState(7876);
					match(UPDATE);
					setState(7877);
					match(SET);
					setState(7878);
					set_clause_list();
					setState(7879);
					where_clause();
					}
					break;
				case NOTHING:
					{
					setState(7881);
					match(NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_conf_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_conf_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_conf_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_conf_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_conf_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_conf_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_conf_exprContext opt_conf_expr() throws RecognitionException {
		Opt_conf_exprContext _localctx = new Opt_conf_exprContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_opt_conf_expr);
		try {
			setState(7896);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7887);
				match(OPEN_PAREN);
				setState(7888);
				index_params();
				setState(7889);
				match(CLOSE_PAREN);
				setState(7890);
				where_clause();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(7892);
				match(ON);
				setState(7893);
				match(CONSTRAINT);
				setState(7894);
				name();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReturning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReturning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReturning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_returning_clause);
		try {
			setState(7901);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7898);
				match(RETURNING);
				setState(7899);
				target_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeletestmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public DeletestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deletestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeletestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeletestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeletestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeletestmtContext deletestmt() throws RecognitionException {
		DeletestmtContext _localctx = new DeletestmtContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_deletestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7903);
			opt_with_clause();
			setState(7904);
			match(DELETE_P);
			setState(7905);
			match(FROM);
			setState(7906);
			relation_expr_opt_alias();
			setState(7907);
			using_clause();
			setState(7908);
			where_or_current_clause();
			setState(7909);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_using_clause);
		try {
			setState(7914);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7911);
				match(USING);
				setState(7912);
				from_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockstmtContext extends ParserRuleContext {
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_lockContext opt_lock() {
			return getRuleContext(Opt_lockContext.class,0);
		}
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public LockstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLockstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLockstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLockstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockstmtContext lockstmt() throws RecognitionException {
		LockstmtContext _localctx = new LockstmtContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_lockstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7916);
			match(LOCK_P);
			setState(7917);
			opt_table();
			setState(7918);
			relation_expr_list();
			setState(7919);
			opt_lock();
			setState(7920);
			opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_lockContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_lock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_lock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_lock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_lockContext opt_lock() throws RecognitionException {
		Opt_lockContext _localctx = new Opt_lockContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_opt_lock);
		try {
			setState(7927);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(7922);
				match(IN_P);
				setState(7923);
				lock_type();
				setState(7924);
				match(MODE);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLock_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLock_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLock_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_lock_type);
		int _la;
		try {
			setState(7941);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7929);
				match(ACCESS);
				setState(7930);
				_la = _input.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				setState(7931);
				match(ROW);
				setState(7932);
				_la = _input.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7933);
				match(SHARE);
				setState(7938);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
					{
					setState(7934);
					match(UPDATE);
					setState(7935);
					match(EXCLUSIVE);
					}
					break;
				case ROW:
					{
					setState(7936);
					match(ROW);
					setState(7937);
					match(EXCLUSIVE);
					}
					break;
				case MODE:
					break;
				default:
					break;
				}
				}
				break;
			case EXCLUSIVE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7940);
				match(EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowaitContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nowait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nowait(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nowait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowaitContext opt_nowait() throws RecognitionException {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_opt_nowait);
		try {
			setState(7945);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7943);
				match(NOWAIT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowait_or_skipContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public Opt_nowait_or_skipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait_or_skip; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nowait_or_skip(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nowait_or_skip(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nowait_or_skip(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowait_or_skipContext opt_nowait_or_skip() throws RecognitionException {
		Opt_nowait_or_skipContext _localctx = new Opt_nowait_or_skipContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_opt_nowait_or_skip);
		try {
			setState(7951);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7947);
				match(NOWAIT);
				}
				break;
			case SKIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(7948);
				match(SKIP_P);
				setState(7949);
				match(LOCKED);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatestmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public UpdatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUpdatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUpdatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUpdatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatestmtContext updatestmt() throws RecognitionException {
		UpdatestmtContext _localctx = new UpdatestmtContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_updatestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7953);
			opt_with_clause();
			setState(7954);
			match(UPDATE);
			setState(7955);
			relation_expr_opt_alias();
			setState(7956);
			match(SET);
			setState(7957);
			set_clause_list();
			setState(7958);
			from_clause();
			setState(7959);
			where_or_current_clause();
			setState(7960);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public List<Set_clauseContext> set_clause() {
			return getRuleContexts(Set_clauseContext.class);
		}
		public Set_clauseContext set_clause(int i) {
			return getRuleContext(Set_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_set_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7962);
			set_clause();
			setState(7967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7963);
				match(COMMA);
				setState(7964);
				set_clause();
				}
				}
				setState(7969);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_set_clause);
		try {
			setState(7980);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7970);
				set_target();
				setState(7971);
				match(EQUAL);
				setState(7972);
				a_expr();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(7974);
				match(OPEN_PAREN);
				setState(7975);
				set_target_list();
				setState(7976);
				match(CLOSE_PAREN);
				setState(7977);
				match(EQUAL);
				setState(7978);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_targetContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_set_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7982);
			colid();
			setState(7983);
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_target_listContext extends ParserRuleContext {
		public List<Set_targetContext> set_target() {
			return getRuleContexts(Set_targetContext.class);
		}
		public Set_targetContext set_target(int i) {
			return getRuleContext(Set_targetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_set_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7985);
			set_target();
			setState(7990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7986);
				match(COMMA);
				setState(7987);
				set_target();
				}
				}
				setState(7992);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarecursorstmtContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public Opt_holdContext opt_hold() {
			return getRuleContext(Opt_holdContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public DeclarecursorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarecursorstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeclarecursorstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeclarecursorstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeclarecursorstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclarecursorstmtContext declarecursorstmt() throws RecognitionException {
		DeclarecursorstmtContext _localctx = new DeclarecursorstmtContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_declarecursorstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7993);
			match(DECLARE);
			setState(7994);
			cursor_name();
			setState(7995);
			cursor_options();
			setState(7996);
			match(CURSOR);
			setState(7997);
			opt_hold();
			setState(7998);
			match(FOR);
			setState(7999);
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8001);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionsContext extends ParserRuleContext {
		public List<TerminalNode> NO() { return getTokens(PostgreSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSQLParser.NO, i);
		}
		public List<TerminalNode> SCROLL() { return getTokens(PostgreSQLParser.SCROLL); }
		public TerminalNode SCROLL(int i) {
			return getToken(PostgreSQLParser.SCROLL, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(PostgreSQLParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(PostgreSQLParser.BINARY, i);
		}
		public List<TerminalNode> INSENSITIVE() { return getTokens(PostgreSQLParser.INSENSITIVE); }
		public TerminalNode INSENSITIVE(int i) {
			return getToken(PostgreSQLParser.INSENSITIVE, i);
		}
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionsContext cursor_options() throws RecognitionException {
		Cursor_optionsContext _localctx = new Cursor_optionsContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_cursor_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BINARY || _la==INSENSITIVE || _la==NO || _la==SCROLL) {
				{
				setState(8008);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(8003);
					match(NO);
					setState(8004);
					match(SCROLL);
					}
					break;
				case SCROLL:
					{
					setState(8005);
					match(SCROLL);
					}
					break;
				case BINARY:
					{
					setState(8006);
					match(BINARY);
					}
					break;
				case INSENSITIVE:
					{
					setState(8007);
					match(INSENSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(8012);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_holdContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hold; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_hold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_hold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_hold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_holdContext opt_hold() throws RecognitionException {
		Opt_holdContext _localctx = new Opt_holdContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_opt_hold);
		try {
			setState(8018);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(8014);
				match(WITH);
				setState(8015);
				match(HOLD);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8016);
				match(WITHOUT);
				setState(8017);
				match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectstmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public SelectstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelectstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelectstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelectstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectstmtContext selectstmt() throws RecognitionException {
		SelectstmtContext _localctx = new SelectstmtContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_selectstmt);
		try {
			setState(8022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8020);
				select_no_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8021);
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_parensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_with_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_with_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_with_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_select_with_parens);
		try {
			setState(8032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8024);
				match(OPEN_PAREN);
				setState(8025);
				select_no_parens();
				setState(8026);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8028);
				match(OPEN_PAREN);
				setState(8029);
				select_with_parens();
				setState(8030);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_no_parensContext extends ParserRuleContext {
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_select_limitContext opt_select_limit() {
			return getRuleContext(Opt_select_limitContext.class,0);
		}
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return getRuleContext(Opt_for_locking_clauseContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_no_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_no_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_select_no_parens);
		try {
			setState(8055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(8034);
				select_clause();
				setState(8035);
				opt_sort_clause();
				setState(8042);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(8036);
					for_locking_clause();
					setState(8037);
					opt_select_limit();
					}
					break;
				case 2:
					{
					setState(8039);
					select_limit();
					setState(8040);
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(8044);
				with_clause();
				setState(8045);
				select_clause();
				setState(8046);
				opt_sort_clause();
				setState(8053);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(8047);
					for_locking_clause();
					setState(8048);
					opt_select_limit();
					}
					break;
				case 2:
					{
					setState(8050);
					select_limit();
					setState(8051);
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_select_clause);
		try {
			setState(8059);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8057);
				simple_select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8058);
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_selectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public List<Into_clauseContext> into_clause() {
			return getRuleContexts(Into_clauseContext.class);
		}
		public Into_clauseContext into_clause(int i) {
			return getRuleContext(Into_clauseContext.class,i);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Using_reality_clauseContext using_reality_clause() {
			return getRuleContext(Using_reality_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public List<Select_with_parensContext> select_with_parens() {
			return getRuleContexts(Select_with_parensContext.class);
		}
		public Select_with_parensContext select_with_parens(int i) {
			return getRuleContext(Select_with_parensContext.class,i);
		}
		public List<Set_operator_with_all_or_distinctContext> set_operator_with_all_or_distinct() {
			return getRuleContexts(Set_operator_with_all_or_distinctContext.class);
		}
		public Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct(int i) {
			return getRuleContext(Set_operator_with_all_or_distinctContext.class,i);
		}
		public Opt_all_clauseContext opt_all_clause() {
			return getRuleContext(Opt_all_clauseContext.class,0);
		}
		public Opt_target_listContext opt_target_list() {
			return getRuleContext(Opt_target_listContext.class,0);
		}
		public Distinct_clauseContext distinct_clause() {
			return getRuleContext(Distinct_clauseContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public List<Simple_selectContext> simple_select() {
			return getRuleContexts(Simple_selectContext.class);
		}
		public Simple_selectContext simple_select(int i) {
			return getRuleContext(Simple_selectContext.class,i);
		}
		public Simple_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimple_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimple_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimple_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_selectContext simple_select() throws RecognitionException {
		Simple_selectContext _localctx = new Simple_selectContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_simple_select);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8088);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(8061);
				match(SELECT);
				setState(8069);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EOF:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case SEMI:
				case STAR:
				case PLUS:
				case MINUS:
				case PARAM:
				case LAB:
				case Operator:
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ARRAY:
				case CASE:
				case CAST:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DO:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case INTERSECT:
				case INTO:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case TABLE:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case USING:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case CATALOG_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case LOOP:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case BinaryStringConstant:
				case HexadecimalStringConstant:
				case Integral:
				case Numeric:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
				case MetaCommand:
				case EscapeStringConstant:
					{
					setState(8062);
					opt_all_clause();
					setState(8063);
					into_clause();
					setState(8064);
					opt_target_list();
					}
					break;
				case DISTINCT:
					{
					setState(8066);
					distinct_clause();
					setState(8067);
					target_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8071);
				into_clause();
				setState(8072);
				from_clause();
				setState(8073);
				where_clause();
				setState(8074);
				group_clause();
				setState(8075);
				having_clause();
				setState(8076);
				window_clause();
				setState(8077);
				using_reality_clause();
				}
				break;
			case VALUES:
				{
				setState(8079);
				values_clause();
				}
				break;
			case TABLE:
				{
				setState(8080);
				match(TABLE);
				setState(8081);
				relation_expr();
				}
				break;
			case OPEN_PAREN:
				{
				setState(8082);
				select_with_parens();
				setState(8083);
				set_operator_with_all_or_distinct();
				setState(8086);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
				case 1:
					{
					setState(8084);
					simple_select();
					}
					break;
				case 2:
					{
					setState(8085);
					select_with_parens();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8097);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,417,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8090);
					set_operator_with_all_or_distinct();
					setState(8093);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
					case 1:
						{
						setState(8091);
						simple_select();
						}
						break;
					case 2:
						{
						setState(8092);
						select_with_parens();
						}
						break;
					}
					}
					} 
				}
				setState(8099);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,417,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_reality_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode REALITY() { return getToken(PostgreSQLParser.REALITY, 0); }
		public Reality_nameContext reality_name() {
			return getRuleContext(Reality_nameContext.class,0);
		}
		public Using_reality_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_reality_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUsing_reality_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUsing_reality_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUsing_reality_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_reality_clauseContext using_reality_clause() throws RecognitionException {
		Using_reality_clauseContext _localctx = new Using_reality_clauseContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_using_reality_clause);
		try {
			setState(8104);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8100);
				match(USING);
				setState(8101);
				match(REALITY);
				setState(8102);
				reality_name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case UNION:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reality_nameContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(PostgreSQLParser.Identifier, 0); }
		public TerminalNode QuotedIdentifier() { return getToken(PostgreSQLParser.QuotedIdentifier, 0); }
		public Reality_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reality_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReality_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReality_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReality_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reality_nameContext reality_name() throws RecognitionException {
		Reality_nameContext _localctx = new Reality_nameContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_reality_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8106);
			_la = _input.LA(1);
			if ( !(_la==Identifier || _la==QuotedIdentifier) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_operatorContext extends ParserRuleContext {
		public Set_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_operator; }
	 
		public Set_operatorContext() { }
		public void copyFrom(Set_operatorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IntersectContext extends Set_operatorContext {
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public IntersectContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIntersect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIntersect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIntersect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExceptContext extends Set_operatorContext {
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public ExceptContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExcept(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExcept(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExcept(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionContext extends Set_operatorContext {
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public UnionContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_operatorContext set_operator() throws RecognitionException {
		Set_operatorContext _localctx = new Set_operatorContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_set_operator);
		try {
			setState(8111);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				_localctx = new UnionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(8108);
				match(UNION);
				}
				break;
			case INTERSECT:
				_localctx = new IntersectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(8109);
				match(INTERSECT);
				}
				break;
			case EXCEPT:
				_localctx = new ExceptContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(8110);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_operator_with_all_or_distinctContext extends ParserRuleContext {
		public Set_operatorContext set_operator() {
			return getRuleContext(Set_operatorContext.class,0);
		}
		public All_or_distinctContext all_or_distinct() {
			return getRuleContext(All_or_distinctContext.class,0);
		}
		public Set_operator_with_all_or_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_operator_with_all_or_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_operator_with_all_or_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_operator_with_all_or_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_operator_with_all_or_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct() throws RecognitionException {
		Set_operator_with_all_or_distinctContext _localctx = new Set_operator_with_all_or_distinctContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_set_operator_with_all_or_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8113);
			set_operator();
			setState(8114);
			all_or_distinct();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWith_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWith_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWith_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8116);
			match(WITH);
			setState(8118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(8117);
				match(RECURSIVE);
				}
				break;
			}
			setState(8120);
			cte_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cte_listContext extends ParserRuleContext {
		public List<Common_table_exprContext> common_table_expr() {
			return getRuleContexts(Common_table_exprContext.class);
		}
		public Common_table_exprContext common_table_expr(int i) {
			return getRuleContext(Common_table_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCte_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCte_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCte_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cte_listContext cte_list() throws RecognitionException {
		Cte_listContext _localctx = new Cte_listContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_cte_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8122);
			common_table_expr();
			setState(8127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8123);
				match(COMMA);
				setState(8124);
				common_table_expr();
				}
				}
				setState(8129);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_exprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_materializedContext opt_materialized() {
			return getRuleContext(Opt_materializedContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommon_table_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommon_table_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommon_table_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_common_table_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8130);
			name();
			setState(8131);
			opt_name_list();
			setState(8132);
			match(AS);
			setState(8133);
			opt_materialized();
			setState(8134);
			match(OPEN_PAREN);
			setState(8135);
			preparablestmt();
			setState(8136);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_materializedContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Opt_materializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_materialized; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_materialized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_materialized(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_materialized(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_materializedContext opt_materialized() throws RecognitionException {
		Opt_materializedContext _localctx = new Opt_materializedContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_opt_materialized);
		try {
			setState(8142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8138);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8139);
				match(NOT);
				setState(8140);
				match(MATERIALIZED);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_clauseContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_clauseContext opt_with_clause() throws RecognitionException {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_opt_with_clause);
		try {
			setState(8146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(8144);
				with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Opt_strictContext opt_strict() {
			return getRuleContext(Opt_strictContext.class,0);
		}
		public OpttempTableNameContext opttempTableName() {
			return getRuleContext(OpttempTableNameContext.class,0);
		}
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_into_clause);
		try {
			setState(8156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8148);
				match(INTO);
				setState(8153);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(8149);
					opt_strict();
					setState(8150);
					opttempTableName();
					}
					break;
				case 2:
					{
					setState(8152);
					into_target();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_strictContext extends ParserRuleContext {
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_strictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_strict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_strict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_strict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_strict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_strictContext opt_strict() throws RecognitionException {
		Opt_strictContext _localctx = new Opt_strictContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_opt_strict);
		try {
			setState(8160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8159);
				match(STRICT_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttempTableNameContext extends ParserRuleContext {
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public OpttempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttempTableNameContext opttempTableName() throws RecognitionException {
		OpttempTableNameContext _localctx = new OpttempTableNameContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_opttempTableName);
		int _la;
		try {
			setState(8176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(8162);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(8165);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8166);
				opt_table();
				setState(8167);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8169);
				match(UNLOGGED);
				setState(8170);
				opt_table();
				setState(8171);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8173);
				match(TABLE);
				setState(8174);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8175);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_tableContext opt_table() throws RecognitionException {
		Opt_tableContext _localctx = new Opt_tableContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_opt_table);
		try {
			setState(8180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8178);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_or_distinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public All_or_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_or_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAll_or_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAll_or_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAll_or_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_or_distinctContext all_or_distinct() throws RecognitionException {
		All_or_distinctContext _localctx = new All_or_distinctContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_all_or_distinct);
		try {
			setState(8185);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8182);
				match(ALL);
				}
				break;
			case DISTINCT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8183);
				match(DISTINCT);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Distinct_clauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Distinct_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDistinct_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDistinct_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDistinct_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Distinct_clauseContext distinct_clause() throws RecognitionException {
		Distinct_clauseContext _localctx = new Distinct_clauseContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_distinct_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8187);
			match(DISTINCT);
			setState(8193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(8188);
				match(ON);
				setState(8189);
				match(OPEN_PAREN);
				setState(8190);
				expr_list();
				setState(8191);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_all_clauseContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Opt_all_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_all_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_all_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_all_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_all_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_all_clauseContext opt_all_clause() throws RecognitionException {
		Opt_all_clauseContext _localctx = new Opt_all_clauseContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_opt_all_clause);
		try {
			setState(8197);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8195);
				match(ALL);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case STAR:
			case PLUS:
			case MINUS:
			case PARAM:
			case LAB:
			case Operator:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case LOOP:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_sort_clauseContext extends ParserRuleContext {
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_sort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_sort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_sort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_sort_clauseContext opt_sort_clause() throws RecognitionException {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_opt_sort_clause);
		try {
			setState(8201);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8199);
				sort_clause();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_clauseContext sort_clause() throws RecognitionException {
		Sort_clauseContext _localctx = new Sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_sort_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8203);
			match(ORDER);
			setState(8204);
			match(BY);
			setState(8205);
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sortby_listContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSortby_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSortby_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSortby_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sortby_listContext sortby_list() throws RecognitionException {
		Sortby_listContext _localctx = new Sortby_listContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_sortby_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8207);
			sortby();
			setState(8212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8208);
				match(COMMA);
				setState(8209);
				sortby();
				}
				}
				setState(8214);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_sortby);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8215);
			a_expr();
			setState(8219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				{
				setState(8216);
				match(USING);
				setState(8217);
				qual_all_op();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case ASC:
			case CREATE:
			case DESC:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				{
				setState(8218);
				opt_asc_desc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8221);
			opt_nulls_order();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limitContext extends ParserRuleContext {
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limitContext select_limit() throws RecognitionException {
		Select_limitContext _localctx = new Select_limitContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_select_limit);
		int _la;
		try {
			setState(8231);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FETCH:
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8223);
				limit_clause();
				setState(8225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFFSET) {
					{
					setState(8224);
					offset_clause();
					}
				}

				}
				break;
			case OFFSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8227);
				offset_clause();
				setState(8229);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(8228);
					limit_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_limitContext extends ParserRuleContext {
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_select_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_select_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_select_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_limitContext opt_select_limit() throws RecognitionException {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_opt_select_limit);
		try {
			setState(8235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8233);
				select_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public Select_limit_valueContext select_limit_value() {
			return getRuleContext(Select_limit_valueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public First_or_nextContext first_or_next() {
			return getRuleContext(First_or_nextContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_limit_clause);
		int _la;
		try {
			setState(8260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8237);
				match(LIMIT);
				setState(8238);
				select_limit_value();
				setState(8241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8239);
					match(COMMA);
					setState(8240);
					select_offset_value();
					}
				}

				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 2);
				{
				setState(8243);
				match(FETCH);
				setState(8244);
				first_or_next();
				setState(8258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					setState(8245);
					select_fetch_first_value();
					setState(8246);
					row_or_rows();
					setState(8250);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ONLY:
						{
						setState(8247);
						match(ONLY);
						}
						break;
					case WITH:
						{
						setState(8248);
						match(WITH);
						setState(8249);
						match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					setState(8252);
					row_or_rows();
					setState(8256);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ONLY:
						{
						setState(8253);
						match(ONLY);
						}
						break;
					case WITH:
						{
						setState(8254);
						match(WITH);
						setState(8255);
						match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_offset_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8262);
			match(OFFSET);
			setState(8267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(8263);
				select_offset_value();
				}
				break;
			case 2:
				{
				setState(8264);
				select_fetch_first_value();
				setState(8265);
				row_or_rows();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limit_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_limit_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_limit_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_limit_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limit_valueContext select_limit_value() throws RecognitionException {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_select_limit_value);
		try {
			setState(8271);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case LAB:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8269);
				a_expr();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8270);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_offset_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_offset_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_offset_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_valueContext select_offset_value() throws RecognitionException {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_select_offset_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8273);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_fetch_first_valueContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public I_or_f_constContext i_or_f_const() {
			return getRuleContext(I_or_f_constContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Select_fetch_first_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_fetch_first_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_fetch_first_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_fetch_first_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_fetch_first_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_fetch_first_valueContext select_fetch_first_value() throws RecognitionException {
		Select_fetch_first_valueContext _localctx = new Select_fetch_first_valueContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_select_fetch_first_value);
		try {
			setState(8280);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PARAM:
			case LAB:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8275);
				c_expr();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8276);
				match(PLUS);
				setState(8277);
				i_or_f_const();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(8278);
				match(MINUS);
				setState(8279);
				i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class I_or_f_constContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public I_or_f_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_i_or_f_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterI_or_f_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitI_or_f_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitI_or_f_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final I_or_f_constContext i_or_f_const() throws RecognitionException {
		I_or_f_constContext _localctx = new I_or_f_constContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_i_or_f_const);
		try {
			setState(8284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(8282);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(8283);
				fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow_or_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow_or_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow_or_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_rowsContext row_or_rows() throws RecognitionException {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_row_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8286);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_nextContext extends ParserRuleContext {
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFirst_or_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFirst_or_next(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFirst_or_next(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_or_nextContext first_or_next() throws RecognitionException {
		First_or_nextContext _localctx = new First_or_nextContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_first_or_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8288);
			_la = _input.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_group_clause);
		try {
			setState(8294);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(8290);
				match(GROUP_P);
				setState(8291);
				match(BY);
				setState(8292);
				group_by_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_listContext extends ParserRuleContext {
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Group_by_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_listContext group_by_list() throws RecognitionException {
		Group_by_listContext _localctx = new Group_by_listContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_group_by_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8296);
			group_by_item();
			setState(8301);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,450,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8297);
					match(COMMA);
					setState(8298);
					group_by_item();
					}
					} 
				}
				setState(8303);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,450,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Empty_grouping_setContext empty_grouping_set() {
			return getRuleContext(Empty_grouping_setContext.class,0);
		}
		public Cube_clauseContext cube_clause() {
			return getRuleContext(Cube_clauseContext.class,0);
		}
		public Rollup_clauseContext rollup_clause() {
			return getRuleContext(Rollup_clauseContext.class,0);
		}
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_group_by_item);
		try {
			setState(8309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8304);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8305);
				empty_grouping_set();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8306);
				cube_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8307);
				rollup_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8308);
				grouping_sets_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_grouping_setContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_grouping_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEmpty_grouping_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEmpty_grouping_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEmpty_grouping_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_grouping_setContext empty_grouping_set() throws RecognitionException {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_empty_grouping_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8311);
			match(OPEN_PAREN);
			setState(8312);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_clauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Rollup_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_clauseContext rollup_clause() throws RecognitionException {
		Rollup_clauseContext _localctx = new Rollup_clauseContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_rollup_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8314);
			match(ROLLUP);
			setState(8315);
			match(OPEN_PAREN);
			setState(8316);
			expr_list();
			setState(8317);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cube_clauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cube_clauseContext cube_clause() throws RecognitionException {
		Cube_clauseContext _localctx = new Cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_cube_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8319);
			match(CUBE);
			setState(8320);
			match(OPEN_PAREN);
			setState(8321);
			expr_list();
			setState(8322);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_grouping_sets_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8324);
			match(GROUPING);
			setState(8325);
			match(SETS);
			setState(8326);
			match(OPEN_PAREN);
			setState(8327);
			group_by_list();
			setState(8328);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_having_clause);
		try {
			setState(8333);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HAVING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8330);
				match(HAVING);
				setState(8331);
				a_expr();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_clauseContext extends ParserRuleContext {
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_clauseContext for_locking_clause() throws RecognitionException {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_for_locking_clause);
		try {
			setState(8339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8335);
				for_locking_items();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8336);
				match(FOR);
				setState(8337);
				match(READ);
				setState(8338);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_locking_clauseContext extends ParserRuleContext {
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_for_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_for_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_for_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_locking_clauseContext opt_for_locking_clause() throws RecognitionException {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_opt_for_locking_clause);
		try {
			setState(8343);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8341);
				for_locking_clause();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_itemsContext extends ParserRuleContext {
		public List<For_locking_itemContext> for_locking_item() {
			return getRuleContexts(For_locking_itemContext.class);
		}
		public For_locking_itemContext for_locking_item(int i) {
			return getRuleContext(For_locking_itemContext.class,i);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemsContext for_locking_items() throws RecognitionException {
		For_locking_itemsContext _localctx = new For_locking_itemsContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_for_locking_items);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8346); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8345);
				for_locking_item();
				}
				}
				setState(8348); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_itemContext extends ParserRuleContext {
		public For_locking_strengthContext for_locking_strength() {
			return getRuleContext(For_locking_strengthContext.class,0);
		}
		public Locked_rels_listContext locked_rels_list() {
			return getRuleContext(Locked_rels_listContext.class,0);
		}
		public Opt_nowait_or_skipContext opt_nowait_or_skip() {
			return getRuleContext(Opt_nowait_or_skipContext.class,0);
		}
		public For_locking_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemContext for_locking_item() throws RecognitionException {
		For_locking_itemContext _localctx = new For_locking_itemContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_for_locking_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8350);
			for_locking_strength();
			setState(8351);
			locked_rels_list();
			setState(8352);
			opt_nowait_or_skip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_strengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public For_locking_strengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_strength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_strength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_strength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_strength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_strengthContext for_locking_strength() throws RecognitionException {
		For_locking_strengthContext _localctx = new For_locking_strengthContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_for_locking_strength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8354);
			match(FOR);
			setState(8364);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
			case UPDATE:
				{
				setState(8357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(8355);
					match(NO);
					setState(8356);
					match(KEY);
					}
				}

				setState(8359);
				match(UPDATE);
				}
				break;
			case KEY:
			case SHARE:
				{
				setState(8361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY) {
					{
					setState(8360);
					match(KEY);
					}
				}

				setState(8363);
				match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Locked_rels_listContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locked_rels_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLocked_rels_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLocked_rels_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLocked_rels_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Locked_rels_listContext locked_rels_list() throws RecognitionException {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_locked_rels_list);
		try {
			setState(8369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OF:
				enterOuterAlt(_localctx, 1);
				{
				setState(8366);
				match(OF);
				setState(8367);
				qualified_name_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case SKIP_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8371);
			match(VALUES);
			setState(8372);
			match(OPEN_PAREN);
			setState(8373);
			expr_list();
			setState(8374);
			match(CLOSE_PAREN);
			setState(8382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8375);
				match(COMMA);
				setState(8376);
				match(OPEN_PAREN);
				setState(8377);
				expr_list();
				setState(8378);
				match(CLOSE_PAREN);
				}
				}
				setState(8384);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_from_clause);
		try {
			setState(8388);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(8385);
				match(FROM);
				setState(8386);
				from_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_listContext from_list() throws RecognitionException {
		From_listContext _localctx = new From_listContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_from_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8390);
			table_ref();
			setState(8395);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8391);
					match(COMMA);
					setState(8392);
					table_ref();
					}
					} 
				}
				setState(8397);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Opt_alias_clauseContext opt_alias_clause() {
			return getRuleContext(Opt_alias_clauseContext.class,0);
		}
		public Func_tableContext func_table() {
			return getRuleContext(Func_tableContext.class,0);
		}
		public Func_alias_clauseContext func_alias_clause() {
			return getRuleContext(Func_alias_clauseContext.class,0);
		}
		public XmltableContext xmltable() {
			return getRuleContext(XmltableContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> CROSS() { return getTokens(PostgreSQLParser.CROSS); }
		public TerminalNode CROSS(int i) {
			return getToken(PostgreSQLParser.CROSS, i);
		}
		public List<TerminalNode> JOIN() { return getTokens(PostgreSQLParser.JOIN); }
		public TerminalNode JOIN(int i) {
			return getToken(PostgreSQLParser.JOIN, i);
		}
		public List<TerminalNode> NATURAL() { return getTokens(PostgreSQLParser.NATURAL); }
		public TerminalNode NATURAL(int i) {
			return getToken(PostgreSQLParser.NATURAL, i);
		}
		public List<Join_qualContext> join_qual() {
			return getRuleContexts(Join_qualContext.class);
		}
		public Join_qualContext join_qual(int i) {
			return getRuleContext(Join_qualContext.class,i);
		}
		public Tablesample_clauseContext tablesample_clause() {
			return getRuleContext(Tablesample_clauseContext.class,0);
		}
		public List<Join_typeContext> join_type() {
			return getRuleContexts(Join_typeContext.class);
		}
		public Join_typeContext join_type(int i) {
			return getRuleContext(Join_typeContext.class,i);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_table_ref);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(8398);
				relation_expr();
				setState(8399);
				opt_alias_clause();
				setState(8401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESAMPLE) {
					{
					setState(8400);
					tablesample_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(8403);
				func_table();
				setState(8404);
				func_alias_clause();
				}
				break;
			case 3:
				{
				setState(8406);
				xmltable();
				setState(8407);
				opt_alias_clause();
				}
				break;
			case 4:
				{
				setState(8409);
				select_with_parens();
				setState(8410);
				opt_alias_clause();
				}
				break;
			case 5:
				{
				setState(8412);
				match(LATERAL_P);
				setState(8422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
				case 1:
					{
					setState(8413);
					xmltable();
					setState(8414);
					opt_alias_clause();
					}
					break;
				case 2:
					{
					setState(8416);
					func_table();
					setState(8417);
					func_alias_clause();
					}
					break;
				case 3:
					{
					setState(8419);
					select_with_parens();
					setState(8420);
					opt_alias_clause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(8424);
				match(OPEN_PAREN);
				setState(8425);
				table_ref();
				setState(8442);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CROSS:
					{
					setState(8426);
					match(CROSS);
					setState(8427);
					match(JOIN);
					setState(8428);
					table_ref();
					}
					break;
				case NATURAL:
					{
					setState(8429);
					match(NATURAL);
					setState(8431);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FULL - 128)) | (1L << (INNER_P - 128)) | (1L << (LEFT - 128)) | (1L << (RIGHT - 128)))) != 0)) {
						{
						setState(8430);
						join_type();
						}
					}

					setState(8433);
					match(JOIN);
					setState(8434);
					table_ref();
					}
					break;
				case FULL:
				case INNER_P:
				case JOIN:
				case LEFT:
				case RIGHT:
					{
					setState(8436);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FULL - 128)) | (1L << (INNER_P - 128)) | (1L << (LEFT - 128)) | (1L << (RIGHT - 128)))) != 0)) {
						{
						setState(8435);
						join_type();
						}
					}

					setState(8438);
					match(JOIN);
					setState(8439);
					table_ref();
					setState(8440);
					join_qual();
					}
					break;
				case CLOSE_PAREN:
					break;
				default:
					break;
				}
				setState(8444);
				match(CLOSE_PAREN);
				setState(8445);
				opt_alias_clause();
				}
				break;
			}
			setState(8467);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,472,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(8465);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CROSS:
						{
						setState(8449);
						match(CROSS);
						setState(8450);
						match(JOIN);
						setState(8451);
						table_ref();
						}
						break;
					case NATURAL:
						{
						setState(8452);
						match(NATURAL);
						setState(8454);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FULL - 128)) | (1L << (INNER_P - 128)) | (1L << (LEFT - 128)) | (1L << (RIGHT - 128)))) != 0)) {
							{
							setState(8453);
							join_type();
							}
						}

						setState(8456);
						match(JOIN);
						setState(8457);
						table_ref();
						}
						break;
					case FULL:
					case INNER_P:
					case JOIN:
					case LEFT:
					case RIGHT:
						{
						setState(8459);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FULL - 128)) | (1L << (INNER_P - 128)) | (1L << (LEFT - 128)) | (1L << (RIGHT - 128)))) != 0)) {
							{
							setState(8458);
							join_type();
							}
						}

						setState(8461);
						match(JOIN);
						setState(8462);
						table_ref();
						setState(8463);
						join_qual();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(8469);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,472,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_clauseContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_alias_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8470);
				match(AS);
				}
			}

			setState(8473);
			colid();
			setState(8478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(8474);
				match(OPEN_PAREN);
				setState(8475);
				name_list();
				setState(8476);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_alias_clauseContext extends ParserRuleContext {
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Opt_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_alias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_alias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_alias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_alias_clauseContext opt_alias_clause() throws RecognitionException {
		Opt_alias_clauseContext _localctx = new Opt_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_opt_alias_clause);
		try {
			setState(8482);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8480);
				alias_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_alias_clauseContext extends ParserRuleContext {
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Func_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_alias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_alias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_alias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_alias_clauseContext func_alias_clause() throws RecognitionException {
		Func_alias_clauseContext _localctx = new Func_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_func_alias_clause);
		int _la;
		try {
			setState(8497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8484);
				alias_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8490);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
					{
					setState(8485);
					match(AS);
					setState(8487);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO))) != 0) || _la==FETCH || _la==TABLE || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (IS - 131)) | (1L << (OUTER_P - 131)) | (1L << (OVER - 131)) | (1L << (ABORT_P - 131)) | (1L << (ABSOLUTE_P - 131)) | (1L << (ACCESS - 131)) | (1L << (ACTION - 131)) | (1L << (ADD_P - 131)) | (1L << (ADMIN - 131)) | (1L << (AFTER - 131)) | (1L << (AGGREGATE - 131)) | (1L << (ALSO - 131)) | (1L << (ALTER - 131)) | (1L << (ALWAYS - 131)) | (1L << (ASSERTION - 131)) | (1L << (ASSIGNMENT - 131)) | (1L << (AT - 131)) | (1L << (ATTRIBUTE - 131)) | (1L << (BACKWARD - 131)) | (1L << (BEFORE - 131)) | (1L << (BEGIN_P - 131)) | (1L << (BY - 131)) | (1L << (CACHE - 131)) | (1L << (CALLED - 131)) | (1L << (CASCADE - 131)) | (1L << (CASCADED - 131)) | (1L << (CHAIN - 131)) | (1L << (CHARACTERISTICS - 131)) | (1L << (CHECKPOINT - 131)) | (1L << (CLASS - 131)) | (1L << (CLOSE - 131)) | (1L << (CLUSTER - 131)) | (1L << (COMMENT - 131)) | (1L << (COMMENTS - 131)) | (1L << (COMMIT - 131)) | (1L << (COMMITTED - 131)) | (1L << (CONFIGURATION - 131)) | (1L << (CONNECTION - 131)) | (1L << (CONSTRAINTS - 131)) | (1L << (CONTENT_P - 131)) | (1L << (CONTINUE_P - 131)) | (1L << (CONVERSION_P - 131)) | (1L << (COPY - 131)) | (1L << (COST - 131)) | (1L << (CSV - 131)) | (1L << (CURSOR - 131)) | (1L << (CYCLE - 131)) | (1L << (DATA_P - 131)) | (1L << (DATABASE - 131)) | (1L << (DAY_P - 131)) | (1L << (DEALLOCATE - 131)) | (1L << (DECLARE - 131)) | (1L << (DEFAULTS - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (DEFERRED - 195)) | (1L << (DEFINER - 195)) | (1L << (DELETE_P - 195)) | (1L << (DELIMITER - 195)) | (1L << (DELIMITERS - 195)) | (1L << (DICTIONARY - 195)) | (1L << (DISABLE_P - 195)) | (1L << (DISCARD - 195)) | (1L << (DOCUMENT_P - 195)) | (1L << (DOMAIN_P - 195)) | (1L << (DOUBLE_P - 195)) | (1L << (DROP - 195)) | (1L << (EACH - 195)) | (1L << (ENABLE_P - 195)) | (1L << (ENCODING - 195)) | (1L << (ENCRYPTED - 195)) | (1L << (ENUM_P - 195)) | (1L << (ESCAPE - 195)) | (1L << (EVENT - 195)) | (1L << (EXCLUDE - 195)) | (1L << (EXCLUDING - 195)) | (1L << (EXCLUSIVE - 195)) | (1L << (EXECUTE - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTENSION - 195)) | (1L << (EXTERNAL - 195)) | (1L << (FAMILY - 195)) | (1L << (FIRST_P - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FORCE - 195)) | (1L << (FORWARD - 195)) | (1L << (FUNCTION - 195)) | (1L << (FUNCTIONS - 195)) | (1L << (GLOBAL - 195)) | (1L << (GRANTED - 195)) | (1L << (HANDLER - 195)) | (1L << (HEADER_P - 195)) | (1L << (HOLD - 195)) | (1L << (HOUR_P - 195)) | (1L << (IDENTITY_P - 195)) | (1L << (IF_P - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (IMMUTABLE - 195)) | (1L << (IMPLICIT_P - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDEX - 195)) | (1L << (INDEXES - 195)) | (1L << (INHERIT - 195)) | (1L << (INHERITS - 195)) | (1L << (INLINE_P - 195)) | (1L << (INSENSITIVE - 195)) | (1L << (INSERT - 195)) | (1L << (INSTEAD - 195)) | (1L << (INVOKER - 195)) | (1L << (ISOLATION - 195)) | (1L << (KEY - 195)) | (1L << (LABEL - 195)) | (1L << (LANGUAGE - 195)) | (1L << (LARGE_P - 195)) | (1L << (LAST_P - 195)) | (1L << (LEAKPROOF - 195)) | (1L << (LEVEL - 195)) | (1L << (LISTEN - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (LOAD - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCATION - 259)) | (1L << (LOCK_P - 259)) | (1L << (MAPPING - 259)) | (1L << (MATCH - 259)) | (1L << (MATERIALIZED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MINUTE_P - 259)) | (1L << (MINVALUE - 259)) | (1L << (MODE - 259)) | (1L << (MONTH_P - 259)) | (1L << (MOVE - 259)) | (1L << (NAME_P - 259)) | (1L << (NAMES - 259)) | (1L << (NEXT - 259)) | (1L << (NO - 259)) | (1L << (NOTHING - 259)) | (1L << (NOTIFY - 259)) | (1L << (NOWAIT - 259)) | (1L << (NULLS_P - 259)) | (1L << (OBJECT_P - 259)) | (1L << (OF - 259)) | (1L << (OFF - 259)) | (1L << (OIDS - 259)) | (1L << (OPERATOR - 259)) | (1L << (OPTION - 259)) | (1L << (OPTIONS - 259)) | (1L << (OWNED - 259)) | (1L << (OWNER - 259)) | (1L << (PARSER - 259)) | (1L << (PARTIAL - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PASSWORD - 259)) | (1L << (PLANS - 259)) | (1L << (PRECEDING - 259)) | (1L << (PREPARE - 259)) | (1L << (PREPARED - 259)) | (1L << (PRESERVE - 259)) | (1L << (PRIOR - 259)) | (1L << (PRIVILEGES - 259)) | (1L << (PROCEDURAL - 259)) | (1L << (PROCEDURE - 259)) | (1L << (PROGRAM - 259)) | (1L << (QUOTE - 259)) | (1L << (RANGE - 259)) | (1L << (READ - 259)) | (1L << (REASSIGN - 259)) | (1L << (RECHECK - 259)) | (1L << (RECURSIVE - 259)) | (1L << (REF - 259)) | (1L << (REFRESH - 259)) | (1L << (REINDEX - 259)) | (1L << (RELATIVE_P - 259)) | (1L << (RELEASE - 259)) | (1L << (RENAME - 259)) | (1L << (REPEATABLE - 259)) | (1L << (REPLACE - 259)) | (1L << (REPLICA - 259)) | (1L << (RESET - 259)) | (1L << (RESTART - 259)) | (1L << (RESTRICT - 259)) | (1L << (RETURNS - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (REVOKE - 323)) | (1L << (ROLE - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROWS - 323)) | (1L << (RULE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCROLL - 323)) | (1L << (SEARCH - 323)) | (1L << (SECOND_P - 323)) | (1L << (SECURITY - 323)) | (1L << (SEQUENCE - 323)) | (1L << (SEQUENCES - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERVER - 323)) | (1L << (SESSION - 323)) | (1L << (SET - 323)) | (1L << (SHARE - 323)) | (1L << (SHOW - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (STABLE - 323)) | (1L << (STANDALONE_P - 323)) | (1L << (START - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATISTICS - 323)) | (1L << (STDIN - 323)) | (1L << (STDOUT - 323)) | (1L << (STORAGE - 323)) | (1L << (STRICT_P - 323)) | (1L << (STRIP_P - 323)) | (1L << (SYSID - 323)) | (1L << (SYSTEM_P - 323)) | (1L << (TABLES - 323)) | (1L << (TABLESPACE - 323)) | (1L << (TEMP - 323)) | (1L << (TEMPLATE - 323)) | (1L << (TEMPORARY - 323)) | (1L << (TEXT_P - 323)) | (1L << (TRANSACTION - 323)) | (1L << (TRIGGER - 323)) | (1L << (TRUNCATE - 323)) | (1L << (TRUSTED - 323)) | (1L << (TYPE_P - 323)) | (1L << (TYPES_P - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNENCRYPTED - 323)) | (1L << (UNKNOWN - 323)) | (1L << (UNLISTEN - 323)) | (1L << (UNLOGGED - 323)) | (1L << (UNTIL - 323)) | (1L << (UPDATE - 323)) | (1L << (VACUUM - 323)) | (1L << (VALID - 323)) | (1L << (VALIDATE - 323)) | (1L << (VALIDATOR - 323)) | (1L << (VARYING - 323)) | (1L << (VERSION_P - 323)) | (1L << (VIEW - 323)) | (1L << (VOLATILE - 323)) | (1L << (WHITESPACE_P - 323)) | (1L << (WITHOUT - 323)) | (1L << (WORK - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (WRAPPER - 387)) | (1L << (WRITE - 387)) | (1L << (XML_P - 387)) | (1L << (YEAR_P - 387)) | (1L << (YES_P - 387)) | (1L << (ZONE - 387)) | (1L << (BETWEEN - 387)) | (1L << (BIGINT - 387)) | (1L << (BIT - 387)) | (1L << (BOOLEAN_P - 387)) | (1L << (CHAR_P - 387)) | (1L << (CHARACTER - 387)) | (1L << (COALESCE - 387)) | (1L << (DEC - 387)) | (1L << (DECIMAL_P - 387)) | (1L << (EXISTS - 387)) | (1L << (EXTRACT - 387)) | (1L << (FLOAT_P - 387)) | (1L << (GREATEST - 387)) | (1L << (INOUT - 387)) | (1L << (INT_P - 387)) | (1L << (INTEGER - 387)) | (1L << (INTERVAL - 387)) | (1L << (LEAST - 387)) | (1L << (NATIONAL - 387)) | (1L << (NCHAR - 387)) | (1L << (NONE - 387)) | (1L << (NULLIF - 387)) | (1L << (NUMERIC - 387)) | (1L << (OVERLAY - 387)) | (1L << (POSITION - 387)) | (1L << (PRECISION - 387)) | (1L << (REAL - 387)) | (1L << (ROW - 387)) | (1L << (SETOF - 387)) | (1L << (SMALLINT - 387)) | (1L << (SUBSTRING - 387)) | (1L << (TIME - 387)) | (1L << (TIMESTAMP - 387)) | (1L << (TREAT - 387)) | (1L << (TRIM - 387)) | (1L << (VALUES - 387)) | (1L << (VARCHAR - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCONCAT - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (CALL - 387)) | (1L << (CURRENT_P - 387)) | (1L << (CATALOG_P - 387)) | (1L << (ATTACH - 387)) | (1L << (DETACH - 387)) | (1L << (EXPRESSION - 387)) | (1L << (GENERATED - 387)) | (1L << (LOGGED - 387)) | (1L << (STORED - 387)) | (1L << (INCLUDE - 387)) | (1L << (ROUTINE - 387)) | (1L << (TRANSFORM - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (IMPORT_P - 451)) | (1L << (POLICY - 451)) | (1L << (METHOD - 451)) | (1L << (REFERENCING - 451)) | (1L << (NEW - 451)) | (1L << (OLD - 451)) | (1L << (VALUE_P - 451)) | (1L << (SUBSCRIPTION - 451)) | (1L << (PUBLICATION - 451)) | (1L << (OUT_P - 451)) | (1L << (ROUTINES - 451)) | (1L << (SCHEMAS - 451)) | (1L << (PROCEDURES - 451)) | (1L << (INPUT_P - 451)) | (1L << (SUPPORT - 451)) | (1L << (PARALLEL - 451)) | (1L << (SQL_P - 451)) | (1L << (DEPENDS - 451)) | (1L << (OVERRIDING - 451)) | (1L << (CONFLICT - 451)) | (1L << (SKIP_P - 451)) | (1L << (LOCKED - 451)) | (1L << (TIES - 451)) | (1L << (ROLLUP - 451)) | (1L << (CUBE - 451)) | (1L << (GROUPING - 451)) | (1L << (SETS - 451)) | (1L << (ORDINALITY - 451)) | (1L << (XMLTABLE - 451)) | (1L << (COLUMNS - 451)) | (1L << (XMLNAMESPACES - 451)) | (1L << (ROWTYPE - 451)) | (1L << (NORMALIZED - 451)) | (1L << (WITHIN - 451)) | (1L << (FILTER - 451)) | (1L << (GROUPS - 451)) | (1L << (OTHERS - 451)) | (1L << (NFC - 451)) | (1L << (NFD - 451)) | (1L << (NFKC - 451)) | (1L << (NFKD - 451)) | (1L << (UESCAPE - 451)) | (1L << (VIEWS - 451)) | (1L << (NORMALIZE - 451)) | (1L << (DUMP - 451)) | (1L << (PRINT_STRICT_PARAMS - 451)) | (1L << (VARIABLE_CONFLICT - 451)) | (1L << (ERROR - 451)) | (1L << (USE_VARIABLE - 451)) | (1L << (USE_COLUMN - 451)) | (1L << (ALIAS - 451)) | (1L << (CONSTANT - 451)) | (1L << (PERFORM - 451)) | (1L << (GET - 451)) | (1L << (DIAGNOSTICS - 451)) | (1L << (STACKED - 451)) | (1L << (ELSIF - 451)) | (1L << (REVERSE - 451)) | (1L << (SLICE - 451)) | (1L << (EXIT - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (RETURN - 515)) | (1L << (QUERY - 515)) | (1L << (RAISE - 515)) | (1L << (SQLSTATE - 515)) | (1L << (DEBUG - 515)) | (1L << (LOG - 515)) | (1L << (INFO - 515)) | (1L << (NOTICE - 515)) | (1L << (WARNING - 515)) | (1L << (EXCEPTION - 515)) | (1L << (ASSERT - 515)) | (1L << (OPEN - 515)) | (1L << (Identifier - 515)) | (1L << (QuotedIdentifier - 515)) | (1L << (UnicodeQuotedIdentifier - 515)) | (1L << (PLSQLVARIABLENAME - 515)) | (1L << (PLSQLIDENTIFIER - 515)))) != 0)) {
						{
						setState(8486);
						colid();
						}
					}

					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case OUTER_P:
				case OVER:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case CATALOG_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(8489);
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8492);
				match(OPEN_PAREN);
				setState(8493);
				tablefuncelementlist();
				setState(8494);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8499);
			_la = _input.LA(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FULL - 128)) | (1L << (INNER_P - 128)) | (1L << (LEFT - 128)) | (1L << (RIGHT - 128)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER_P) {
				{
				setState(8500);
				match(OUTER_P);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_qualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_qual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_qual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_qual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_qualContext join_qual() throws RecognitionException {
		Join_qualContext _localctx = new Join_qualContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_join_qual);
		try {
			setState(8510);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8503);
				match(USING);
				setState(8504);
				match(OPEN_PAREN);
				setState(8505);
				name_list();
				setState(8506);
				match(CLOSE_PAREN);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8508);
				match(ON);
				setState(8509);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_exprContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_exprContext relation_expr() throws RecognitionException {
		Relation_exprContext _localctx = new Relation_exprContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_relation_expr);
		int _la;
		try {
			setState(8524);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8512);
				qualified_name();
				setState(8514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(8513);
					match(STAR);
					}
				}

				}
				break;
			case ONLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(8516);
				match(ONLY);
				setState(8522);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case OUTER_P:
				case OVER:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case CATALOG_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(8517);
					qualified_name();
					}
					break;
				case OPEN_PAREN:
					{
					setState(8518);
					match(OPEN_PAREN);
					setState(8519);
					qualified_name();
					setState(8520);
					match(CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_expr_listContext extends ParserRuleContext {
		public List<Relation_exprContext> relation_expr() {
			return getRuleContexts(Relation_exprContext.class);
		}
		public Relation_exprContext relation_expr(int i) {
			return getRuleContext(Relation_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_listContext relation_expr_list() throws RecognitionException {
		Relation_expr_listContext _localctx = new Relation_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_relation_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8526);
			relation_expr();
			setState(8531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8527);
				match(COMMA);
				setState(8528);
				relation_expr();
				}
				}
				setState(8533);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_expr_opt_aliasContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_opt_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr_opt_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr_opt_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr_opt_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_opt_aliasContext relation_expr_opt_alias() throws RecognitionException {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_relation_expr_opt_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8534);
			relation_expr();
			setState(8539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(8536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8535);
					match(AS);
					}
				}

				setState(8538);
				colid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablesample_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext opt_repeatable_clause() {
			return getRuleContext(Opt_repeatable_clauseContext.class,0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablesample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablesample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablesample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tablesample_clauseContext tablesample_clause() throws RecognitionException {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_tablesample_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8541);
			match(TABLESAMPLE);
			setState(8542);
			func_name();
			setState(8543);
			match(OPEN_PAREN);
			setState(8544);
			expr_list();
			setState(8545);
			match(CLOSE_PAREN);
			setState(8546);
			opt_repeatable_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_repeatable_clauseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_repeatable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_repeatable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_repeatable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_repeatable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_repeatable_clauseContext opt_repeatable_clause() throws RecognitionException {
		Opt_repeatable_clauseContext _localctx = new Opt_repeatable_clauseContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_opt_repeatable_clause);
		try {
			setState(8554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8548);
				match(REPEATABLE);
				setState(8549);
				match(OPEN_PAREN);
				setState(8550);
				a_expr();
				setState(8551);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case CROSS:
			case FULL:
			case INNER_P:
			case JOIN:
			case LEFT:
			case NATURAL:
			case RIGHT:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_tableContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Opt_ordinalityContext opt_ordinality() {
			return getRuleContext(Opt_ordinalityContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Rowsfrom_listContext rowsfrom_list() {
			return getRuleContext(Rowsfrom_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_tableContext func_table() throws RecognitionException {
		Func_tableContext _localctx = new Func_tableContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_func_table);
		try {
			setState(8566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8556);
				func_expr_windowless();
				setState(8557);
				opt_ordinality();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8559);
				match(ROWS);
				setState(8560);
				match(FROM);
				setState(8561);
				match(OPEN_PAREN);
				setState(8562);
				rowsfrom_list();
				setState(8563);
				match(CLOSE_PAREN);
				setState(8564);
				opt_ordinality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowsfrom_itemContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Opt_col_def_listContext opt_col_def_list() {
			return getRuleContext(Opt_col_def_listContext.class,0);
		}
		public Rowsfrom_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsfrom_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsfrom_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsfrom_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowsfrom_itemContext rowsfrom_item() throws RecognitionException {
		Rowsfrom_itemContext _localctx = new Rowsfrom_itemContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_rowsfrom_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8568);
			func_expr_windowless();
			setState(8569);
			opt_col_def_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowsfrom_listContext extends ParserRuleContext {
		public List<Rowsfrom_itemContext> rowsfrom_item() {
			return getRuleContexts(Rowsfrom_itemContext.class);
		}
		public Rowsfrom_itemContext rowsfrom_item(int i) {
			return getRuleContext(Rowsfrom_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Rowsfrom_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsfrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsfrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsfrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowsfrom_listContext rowsfrom_list() throws RecognitionException {
		Rowsfrom_listContext _localctx = new Rowsfrom_listContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_rowsfrom_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8571);
			rowsfrom_item();
			setState(8576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8572);
				match(COMMA);
				setState(8573);
				rowsfrom_item();
				}
				}
				setState(8578);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_col_def_listContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_col_def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_col_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_col_def_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_col_def_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_col_def_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_col_def_listContext opt_col_def_list() throws RecognitionException {
		Opt_col_def_listContext _localctx = new Opt_col_def_listContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_opt_col_def_list);
		try {
			setState(8585);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8579);
				match(AS);
				setState(8580);
				match(OPEN_PAREN);
				setState(8581);
				tablefuncelementlist();
				setState(8582);
				match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_ordinalityContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Opt_ordinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ordinality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_ordinality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_ordinality(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_ordinality(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_ordinalityContext opt_ordinality() throws RecognitionException {
		Opt_ordinalityContext _localctx = new Opt_ordinalityContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_opt_ordinality);
		try {
			setState(8590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8587);
				match(WITH);
				setState(8588);
				match(ORDINALITY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_where_clause);
		try {
			setState(8595);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8592);
				match(WHERE);
				setState(8593);
				a_expr();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_or_current_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_or_current_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_or_current_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_or_current_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_or_current_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_or_current_clauseContext where_or_current_clause() throws RecognitionException {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_where_or_current_clause);
		try {
			setState(8605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8597);
				match(WHERE);
				setState(8602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(8598);
					match(CURRENT_P);
					setState(8599);
					match(OF);
					setState(8600);
					cursor_name();
					}
					break;
				case 2:
					{
					setState(8601);
					a_expr();
					}
					break;
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttablefuncelementlistContext extends ParserRuleContext {
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public OpttablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablefuncelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablefuncelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablefuncelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablefuncelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablefuncelementlistContext opttablefuncelementlist() throws RecognitionException {
		OpttablefuncelementlistContext _localctx = new OpttablefuncelementlistContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_opttablefuncelementlist);
		try {
			setState(8609);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8607);
				tablefuncelementlist();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablefuncelementlistContext extends ParserRuleContext {
		public List<TablefuncelementContext> tablefuncelement() {
			return getRuleContexts(TablefuncelementContext.class);
		}
		public TablefuncelementContext tablefuncelement(int i) {
			return getRuleContext(TablefuncelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablefuncelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablefuncelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablefuncelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablefuncelementlistContext tablefuncelementlist() throws RecognitionException {
		TablefuncelementlistContext _localctx = new TablefuncelementlistContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_tablefuncelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8611);
			tablefuncelement();
			setState(8616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8612);
				match(COMMA);
				setState(8613);
				tablefuncelement();
				}
				}
				setState(8618);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablefuncelementContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TablefuncelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablefuncelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablefuncelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablefuncelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablefuncelementContext tablefuncelement() throws RecognitionException {
		TablefuncelementContext _localctx = new TablefuncelementContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_tablefuncelement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8619);
			colid();
			setState(8620);
			typename();
			setState(8621);
			opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public Xmltable_column_listContext xmltable_column_list() {
			return getRuleContext(Xmltable_column_listContext.class,0);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public Xml_namespace_listContext xml_namespace_list() {
			return getRuleContext(Xml_namespace_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public XmltableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableContext xmltable() throws RecognitionException {
		XmltableContext _localctx = new XmltableContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_xmltable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8623);
			match(XMLTABLE);
			setState(8624);
			match(OPEN_PAREN);
			setState(8640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(8625);
				c_expr();
				setState(8626);
				xmlexists_argument();
				setState(8627);
				match(COLUMNS);
				setState(8628);
				xmltable_column_list();
				}
				break;
			case 2:
				{
				setState(8630);
				match(XMLNAMESPACES);
				setState(8631);
				match(OPEN_PAREN);
				setState(8632);
				xml_namespace_list();
				setState(8633);
				match(CLOSE_PAREN);
				setState(8634);
				match(COMMA);
				setState(8635);
				c_expr();
				setState(8636);
				xmlexists_argument();
				setState(8637);
				match(COLUMNS);
				setState(8638);
				xmltable_column_list();
				}
				break;
			}
			setState(8642);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_listContext extends ParserRuleContext {
		public List<Xmltable_column_elContext> xmltable_column_el() {
			return getRuleContexts(Xmltable_column_elContext.class);
		}
		public Xmltable_column_elContext xmltable_column_el(int i) {
			return getRuleContext(Xmltable_column_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xmltable_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_listContext xmltable_column_list() throws RecognitionException {
		Xmltable_column_listContext _localctx = new Xmltable_column_listContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_xmltable_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8644);
			xmltable_column_el();
			setState(8649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8645);
				match(COMMA);
				setState(8646);
				xmltable_column_el();
				}
				}
				setState(8651);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_elContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Xmltable_column_option_listContext xmltable_column_option_list() {
			return getRuleContext(Xmltable_column_option_listContext.class,0);
		}
		public Xmltable_column_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_elContext xmltable_column_el() throws RecognitionException {
		Xmltable_column_elContext _localctx = new Xmltable_column_elContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_xmltable_column_el);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8652);
			colid();
			setState(8659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(8653);
				typename();
				setState(8655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (AND - 34)) | (1L << (ARRAY - 34)) | (1L << (COLLATE - 34)) | (1L << (COLUMN - 34)) | (1L << (CONSTRAINT - 34)) | (1L << (DEFAULT - 34)) | (1L << (DO - 34)) | (1L << (FETCH - 34)) | (1L << (NOT - 34)) | (1L << (NULL_P - 34)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (TABLE - 106)) | (1L << (IS - 106)) | (1L << (OUTER_P - 106)) | (1L << (ABSOLUTE_P - 106)) | (1L << (BACKWARD - 106)) | (1L << (CHAIN - 106)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (CLOSE - 172)) | (1L << (COMMIT - 172)) | (1L << (CONTINUE_P - 172)) | (1L << (CURSOR - 172)) | (1L << (FIRST_P - 172)) | (1L << (FORWARD - 172)))) != 0) || ((((_la - 247)) & ~0x3f) == 0 && ((1L << (_la - 247)) & ((1L << (INSERT - 247)) | (1L << (LAST_P - 247)) | (1L << (MOVE - 247)) | (1L << (NEXT - 247)) | (1L << (NO - 247)) | (1L << (OPTION - 247)) | (1L << (PRIOR - 247)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (RELATIVE_P - 313)) | (1L << (RESET - 313)) | (1L << (ROLLBACK - 313)) | (1L << (SCHEMA - 313)) | (1L << (SCROLL - 313)) | (1L << (SET - 313)) | (1L << (TYPE_P - 313)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (CALL - 439)) | (1L << (CURRENT_P - 439)) | (1L << (ROWTYPE - 439)) | (1L << (DUMP - 439)) | (1L << (PRINT_STRICT_PARAMS - 439)) | (1L << (VARIABLE_CONFLICT - 439)) | (1L << (ERROR - 439)) | (1L << (USE_VARIABLE - 439)) | (1L << (USE_COLUMN - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (ALIAS - 503)) | (1L << (CONSTANT - 503)) | (1L << (PERFORM - 503)) | (1L << (GET - 503)) | (1L << (DIAGNOSTICS - 503)) | (1L << (STACKED - 503)) | (1L << (ELSIF - 503)) | (1L << (REVERSE - 503)) | (1L << (SLICE - 503)) | (1L << (EXIT - 503)) | (1L << (RETURN - 503)) | (1L << (QUERY - 503)) | (1L << (RAISE - 503)) | (1L << (SQLSTATE - 503)) | (1L << (DEBUG - 503)) | (1L << (LOG - 503)) | (1L << (INFO - 503)) | (1L << (NOTICE - 503)) | (1L << (WARNING - 503)) | (1L << (EXCEPTION - 503)) | (1L << (ASSERT - 503)) | (1L << (OPEN - 503)) | (1L << (Identifier - 503)) | (1L << (QuotedIdentifier - 503)) | (1L << (UnicodeQuotedIdentifier - 503)) | (1L << (PLSQLVARIABLENAME - 503)) | (1L << (PLSQLIDENTIFIER - 503)))) != 0)) {
					{
					setState(8654);
					xmltable_column_option_list();
					}
				}

				}
				break;
			case FOR:
				{
				setState(8657);
				match(FOR);
				setState(8658);
				match(ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_option_listContext extends ParserRuleContext {
		public List<Xmltable_column_option_elContext> xmltable_column_option_el() {
			return getRuleContexts(Xmltable_column_option_elContext.class);
		}
		public Xmltable_column_option_elContext xmltable_column_option_el(int i) {
			return getRuleContext(Xmltable_column_option_elContext.class,i);
		}
		public Xmltable_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_option_listContext xmltable_column_option_list() throws RecognitionException {
		Xmltable_column_option_listContext _localctx = new Xmltable_column_option_listContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_xmltable_column_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8662); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8661);
				xmltable_column_option_el();
				}
				}
				setState(8664); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (AND - 34)) | (1L << (ARRAY - 34)) | (1L << (COLLATE - 34)) | (1L << (COLUMN - 34)) | (1L << (CONSTRAINT - 34)) | (1L << (DEFAULT - 34)) | (1L << (DO - 34)) | (1L << (FETCH - 34)) | (1L << (NOT - 34)) | (1L << (NULL_P - 34)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (TABLE - 106)) | (1L << (IS - 106)) | (1L << (OUTER_P - 106)) | (1L << (ABSOLUTE_P - 106)) | (1L << (BACKWARD - 106)) | (1L << (CHAIN - 106)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (CLOSE - 172)) | (1L << (COMMIT - 172)) | (1L << (CONTINUE_P - 172)) | (1L << (CURSOR - 172)) | (1L << (FIRST_P - 172)) | (1L << (FORWARD - 172)))) != 0) || ((((_la - 247)) & ~0x3f) == 0 && ((1L << (_la - 247)) & ((1L << (INSERT - 247)) | (1L << (LAST_P - 247)) | (1L << (MOVE - 247)) | (1L << (NEXT - 247)) | (1L << (NO - 247)) | (1L << (OPTION - 247)) | (1L << (PRIOR - 247)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (RELATIVE_P - 313)) | (1L << (RESET - 313)) | (1L << (ROLLBACK - 313)) | (1L << (SCHEMA - 313)) | (1L << (SCROLL - 313)) | (1L << (SET - 313)) | (1L << (TYPE_P - 313)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (CALL - 439)) | (1L << (CURRENT_P - 439)) | (1L << (ROWTYPE - 439)) | (1L << (DUMP - 439)) | (1L << (PRINT_STRICT_PARAMS - 439)) | (1L << (VARIABLE_CONFLICT - 439)) | (1L << (ERROR - 439)) | (1L << (USE_VARIABLE - 439)) | (1L << (USE_COLUMN - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (ALIAS - 503)) | (1L << (CONSTANT - 503)) | (1L << (PERFORM - 503)) | (1L << (GET - 503)) | (1L << (DIAGNOSTICS - 503)) | (1L << (STACKED - 503)) | (1L << (ELSIF - 503)) | (1L << (REVERSE - 503)) | (1L << (SLICE - 503)) | (1L << (EXIT - 503)) | (1L << (RETURN - 503)) | (1L << (QUERY - 503)) | (1L << (RAISE - 503)) | (1L << (SQLSTATE - 503)) | (1L << (DEBUG - 503)) | (1L << (LOG - 503)) | (1L << (INFO - 503)) | (1L << (NOTICE - 503)) | (1L << (WARNING - 503)) | (1L << (EXCEPTION - 503)) | (1L << (ASSERT - 503)) | (1L << (OPEN - 503)) | (1L << (Identifier - 503)) | (1L << (QuotedIdentifier - 503)) | (1L << (UnicodeQuotedIdentifier - 503)) | (1L << (PLSQLVARIABLENAME - 503)) | (1L << (PLSQLIDENTIFIER - 503)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_option_elContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Xmltable_column_option_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_option_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_option_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_option_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_option_elContext xmltable_column_option_el() throws RecognitionException {
		Xmltable_column_option_elContext _localctx = new Xmltable_column_option_elContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_xmltable_column_option_el);
		try {
			setState(8674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8666);
				match(DEFAULT);
				setState(8667);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8668);
				identifier();
				setState(8669);
				a_expr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8671);
				match(NOT);
				setState(8672);
				match(NULL_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8673);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespace_listContext extends ParserRuleContext {
		public List<Xml_namespace_elContext> xml_namespace_el() {
			return getRuleContexts(Xml_namespace_elContext.class);
		}
		public Xml_namespace_elContext xml_namespace_el(int i) {
			return getRuleContext(Xml_namespace_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_namespace_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_namespace_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_namespace_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_namespace_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespace_listContext xml_namespace_list() throws RecognitionException {
		Xml_namespace_listContext _localctx = new Xml_namespace_listContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_xml_namespace_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8676);
			xml_namespace_el();
			setState(8681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8677);
				match(COMMA);
				setState(8678);
				xml_namespace_el();
				}
				}
				setState(8683);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespace_elContext extends ParserRuleContext {
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Xml_namespace_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_namespace_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_namespace_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_namespace_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespace_elContext xml_namespace_el() throws RecognitionException {
		Xml_namespace_elContext _localctx = new Xml_namespace_elContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_xml_namespace_el);
		try {
			setState(8690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8684);
				b_expr(0);
				setState(8685);
				match(AS);
				setState(8686);
				collabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8688);
				match(DEFAULT);
				setState(8689);
				b_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypenameContext extends ParserRuleContext {
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode ROWTYPE() { return getToken(PostgreSQLParser.ROWTYPE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypenameContext typename() throws RecognitionException {
		TypenameContext _localctx = new TypenameContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_typename);
		int _la;
		try {
			setState(8710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SETOF) {
					{
					setState(8692);
					match(SETOF);
					}
				}

				setState(8695);
				simpletypename();
				setState(8704);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
				case 1:
					{
					setState(8696);
					opt_array_bounds();
					}
					break;
				case 2:
					{
					setState(8697);
					match(ARRAY);
					setState(8702);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
					case 1:
						{
						setState(8698);
						match(OPEN_BRACKET);
						setState(8699);
						iconst();
						setState(8700);
						match(CLOSE_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8706);
				qualified_name();
				setState(8707);
				match(PERCENT);
				setState(8708);
				_la = _input.LA(1);
				if ( !(_la==TYPE_P || _la==ROWTYPE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_array_boundsContext extends ParserRuleContext {
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSQLParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSQLParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public List<IconstContext> iconst() {
			return getRuleContexts(IconstContext.class);
		}
		public IconstContext iconst(int i) {
			return getRuleContext(IconstContext.class,i);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_array_bounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_array_bounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_array_bounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_array_bounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_array_boundsContext opt_array_bounds() throws RecognitionException {
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_opt_array_bounds);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8719);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,510,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8712);
					match(OPEN_BRACKET);
					setState(8714);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==Integral) {
						{
						setState(8713);
						iconst();
						}
					}

					setState(8716);
					match(CLOSE_BRACKET);
					}
					} 
				}
				setState(8721);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,510,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpletypenameContext extends ParserRuleContext {
		public GenerictypeContext generictype() {
			return getRuleContext(GenerictypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public SimpletypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpletypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimpletypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimpletypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimpletypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpletypenameContext simpletypename() throws RecognitionException {
		SimpletypenameContext _localctx = new SimpletypenameContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_simpletypename);
		try {
			setState(8735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8722);
				generictype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8723);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8724);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8725);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8726);
				constdatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8727);
				constinterval();
				setState(8733);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(8728);
					opt_interval();
					}
					break;
				case 2:
					{
					setState(8729);
					match(OPEN_PAREN);
					setState(8730);
					iconst();
					setState(8731);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConsttypenameContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstbitContext constbit() {
			return getRuleContext(ConstbitContext.class,0);
		}
		public ConstcharacterContext constcharacter() {
			return getRuleContext(ConstcharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consttypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConsttypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConsttypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConsttypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsttypenameContext consttypename() throws RecognitionException {
		ConsttypenameContext _localctx = new ConsttypenameContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_consttypename);
		try {
			setState(8741);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_P:
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8737);
				numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8738);
				constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(8739);
				constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(8740);
				constdatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenerictypeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generictype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGenerictype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGenerictype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGenerictype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenerictypeContext generictype() throws RecognitionException {
		GenerictypeContext _localctx = new GenerictypeContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_generictype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8743);
			type_function_name();
			setState(8745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(8744);
				attrs();
				}
				break;
			}
			setState(8747);
			opt_type_modifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_type_modifiersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_type_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_type_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_type_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_type_modifiersContext opt_type_modifiers() throws RecognitionException {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_opt_type_modifiers);
		try {
			setState(8754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8749);
				match(OPEN_PAREN);
				setState(8750);
				expr_list();
				setState(8751);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public Opt_floatContext opt_float() {
			return getRuleContext(Opt_floatContext.class,0);
		}
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_numeric);
		try {
			setState(8772);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(8756);
				match(INT_P);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8757);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8758);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(8759);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8760);
				match(REAL);
				}
				break;
			case FLOAT_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(8761);
				match(FLOAT_P);
				setState(8762);
				opt_float();
				}
				break;
			case DOUBLE_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(8763);
				match(DOUBLE_P);
				setState(8764);
				match(PRECISION);
				}
				break;
			case DECIMAL_P:
				enterOuterAlt(_localctx, 8);
				{
				setState(8765);
				match(DECIMAL_P);
				setState(8766);
				opt_type_modifiers();
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(8767);
				match(DEC);
				setState(8768);
				opt_type_modifiers();
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(8769);
				match(NUMERIC);
				setState(8770);
				opt_type_modifiers();
				}
				break;
			case BOOLEAN_P:
				enterOuterAlt(_localctx, 11);
				{
				setState(8771);
				match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_floatContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_float; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_float(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_float(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_float(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_floatContext opt_float() throws RecognitionException {
		Opt_floatContext _localctx = new Opt_floatContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_opt_float);
		try {
			setState(8779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8774);
				match(OPEN_PAREN);
				setState(8775);
				iconst();
				setState(8776);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_bit);
		try {
			setState(8783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8781);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8782);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstbitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constbit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstbit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstbit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstbit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstbitContext constbit() throws RecognitionException {
		ConstbitContext _localctx = new ConstbitContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_constbit);
		try {
			setState(8787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8785);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8786);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitwithlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public BitwithlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithlength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBitwithlength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBitwithlength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBitwithlength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwithlengthContext bitwithlength() throws RecognitionException {
		BitwithlengthContext _localctx = new BitwithlengthContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_bitwithlength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8789);
			match(BIT);
			setState(8790);
			opt_varying();
			setState(8791);
			match(OPEN_PAREN);
			setState(8792);
			expr_list();
			setState(8793);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitwithoutlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitwithoutlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithoutlength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBitwithoutlength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBitwithoutlength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBitwithoutlength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwithoutlengthContext bitwithoutlength() throws RecognitionException {
		BitwithoutlengthContext _localctx = new BitwithoutlengthContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_bitwithoutlength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8795);
			match(BIT);
			setState(8796);
			opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8798);
			character_c();
			setState(8803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				setState(8799);
				match(OPEN_PAREN);
				setState(8800);
				iconst();
				setState(8801);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstcharacterContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstcharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constcharacter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstcharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstcharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstcharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstcharacterContext constcharacter() throws RecognitionException {
		ConstcharacterContext _localctx = new ConstcharacterContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_constcharacter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8805);
			character_c();
			setState(8810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(8806);
				match(OPEN_PAREN);
				setState(8807);
				iconst();
				setState(8808);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_cContext extends ParserRuleContext {
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(PostgreSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public Character_cContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_c; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacter_c(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacter_c(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacter_c(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_cContext character_c() throws RecognitionException {
		Character_cContext _localctx = new Character_cContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_character_c);
		int _la;
		try {
			setState(8818);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_P:
			case CHARACTER:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8812);
				_la = _input.LA(1);
				if ( !(((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (CHAR_P - 397)) | (1L << (CHARACTER - 397)) | (1L << (NCHAR - 397)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8813);
				opt_varying();
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8814);
				match(VARCHAR);
				}
				break;
			case NATIONAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8815);
				match(NATIONAL);
				setState(8816);
				_la = _input.LA(1);
				if ( !(_la==CHAR_P || _la==CHARACTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8817);
				opt_varying();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_varying; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_varying(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_varying(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_varying(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_varyingContext opt_varying() throws RecognitionException {
		Opt_varyingContext _localctx = new Opt_varyingContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_opt_varying);
		try {
			setState(8822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8820);
				match(VARYING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstdatetimeContext extends ParserRuleContext {
		public Opt_timezoneContext opt_timezone() {
			return getRuleContext(Opt_timezoneContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstdatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constdatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstdatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstdatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstdatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstdatetimeContext constdatetime() throws RecognitionException {
		ConstdatetimeContext _localctx = new ConstdatetimeContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_constdatetime);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8824);
			_la = _input.LA(1);
			if ( !(_la==TIME || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				{
				setState(8825);
				match(OPEN_PAREN);
				setState(8826);
				iconst();
				setState(8827);
				match(CLOSE_PAREN);
				}
				break;
			}
			setState(8831);
			opt_timezone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstintervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public ConstintervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constinterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstinterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstinterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstinterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstintervalContext constinterval() throws RecognitionException {
		ConstintervalContext _localctx = new ConstintervalContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_constinterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8833);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_timezoneContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_timezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_timezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_timezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_timezoneContext opt_timezone() throws RecognitionException {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_opt_timezone);
		try {
			setState(8842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8835);
				match(WITH);
				setState(8836);
				match(TIME);
				setState(8837);
				match(ZONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8838);
				match(WITHOUT);
				setState(8839);
				match(TIME);
				setState(8840);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_intervalContext extends ParserRuleContext {
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public Interval_secondContext interval_second() {
			return getRuleContext(Interval_secondContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_interval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_interval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_intervalContext opt_interval() throws RecognitionException {
		Opt_intervalContext _localctx = new Opt_intervalContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_opt_interval);
		try {
			setState(8870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8844);
				match(YEAR_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8845);
				match(MONTH_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8846);
				match(DAY_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8847);
				match(HOUR_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8848);
				match(MINUTE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8849);
				interval_second();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8850);
				match(YEAR_P);
				setState(8851);
				match(TO);
				setState(8852);
				match(MONTH_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8853);
				match(DAY_P);
				setState(8854);
				match(TO);
				setState(8858);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HOUR_P:
					{
					setState(8855);
					match(HOUR_P);
					}
					break;
				case MINUTE_P:
					{
					setState(8856);
					match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					setState(8857);
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8860);
				match(HOUR_P);
				setState(8861);
				match(TO);
				setState(8864);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINUTE_P:
					{
					setState(8862);
					match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					setState(8863);
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8866);
				match(MINUTE_P);
				setState(8867);
				match(TO);
				setState(8868);
				interval_second();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_secondContext extends ParserRuleContext {
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_second; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInterval_second(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInterval_second(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInterval_second(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_secondContext interval_second() throws RecognitionException {
		Interval_secondContext _localctx = new Interval_secondContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_interval_second);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8872);
			match(SECOND_P);
			setState(8877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				setState(8873);
				match(OPEN_PAREN);
				setState(8874);
				iconst();
				setState(8875);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_escapeContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_escapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_escape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_escape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_escape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_escape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_escapeContext opt_escape() throws RecognitionException {
		Opt_escapeContext _localctx = new Opt_escapeContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_opt_escape);
		try {
			setState(8882);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8879);
				match(ESCAPE);
				setState(8880);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_exprContext extends ParserRuleContext {
		public A_expr_qualContext a_expr_qual() {
			return getRuleContext(A_expr_qualContext.class,0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_exprContext a_expr() throws RecognitionException {
		A_exprContext _localctx = new A_exprContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_a_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8884);
			a_expr_qual();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_qualContext extends ParserRuleContext {
		public A_expr_lesslessContext a_expr_lessless() {
			return getRuleContext(A_expr_lesslessContext.class,0);
		}
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public A_expr_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_qual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_qual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_qual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_qualContext a_expr_qual() throws RecognitionException {
		A_expr_qualContext _localctx = new A_expr_qualContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_a_expr_qual);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8886);
			a_expr_lessless();
			setState(8888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				setState(8887);
				qual_op();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_lesslessContext extends ParserRuleContext {
		public List<A_expr_orContext> a_expr_or() {
			return getRuleContexts(A_expr_orContext.class);
		}
		public A_expr_orContext a_expr_or(int i) {
			return getRuleContext(A_expr_orContext.class,i);
		}
		public List<TerminalNode> LESS_LESS() { return getTokens(PostgreSQLParser.LESS_LESS); }
		public TerminalNode LESS_LESS(int i) {
			return getToken(PostgreSQLParser.LESS_LESS, i);
		}
		public List<TerminalNode> GREATER_GREATER() { return getTokens(PostgreSQLParser.GREATER_GREATER); }
		public TerminalNode GREATER_GREATER(int i) {
			return getToken(PostgreSQLParser.GREATER_GREATER, i);
		}
		public A_expr_lesslessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_lessless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_lessless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_lessless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_lessless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_lesslessContext a_expr_lessless() throws RecognitionException {
		A_expr_lesslessContext _localctx = new A_expr_lesslessContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_a_expr_lessless);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8890);
			a_expr_or();
			setState(8895);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,532,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8891);
					_la = _input.LA(1);
					if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8892);
					a_expr_or();
					}
					} 
				}
				setState(8897);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,532,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_orContext extends ParserRuleContext {
		public List<A_expr_andContext> a_expr_and() {
			return getRuleContexts(A_expr_andContext.class);
		}
		public A_expr_andContext a_expr_and(int i) {
			return getRuleContext(A_expr_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public A_expr_orContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_or; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_or(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_or(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_or(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_orContext a_expr_or() throws RecognitionException {
		A_expr_orContext _localctx = new A_expr_orContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_a_expr_or);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8898);
			a_expr_and();
			setState(8903);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,533,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8899);
					match(OR);
					setState(8900);
					a_expr_and();
					}
					} 
				}
				setState(8905);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,533,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_andContext extends ParserRuleContext {
		public List<A_expr_inContext> a_expr_in() {
			return getRuleContexts(A_expr_inContext.class);
		}
		public A_expr_inContext a_expr_in(int i) {
			return getRuleContext(A_expr_inContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public A_expr_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_and(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_and(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_andContext a_expr_and() throws RecognitionException {
		A_expr_andContext _localctx = new A_expr_andContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_a_expr_and);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8906);
			a_expr_in();
			setState(8911);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,534,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8907);
					match(AND);
					setState(8908);
					a_expr_in();
					}
					} 
				}
				setState(8913);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,534,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_inContext extends ParserRuleContext {
		public A_expr_unary_notContext a_expr_unary_not() {
			return getRuleContext(A_expr_unary_notContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_inContext a_expr_in() throws RecognitionException {
		A_expr_inContext _localctx = new A_expr_inContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_a_expr_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8914);
			a_expr_unary_not();
			setState(8920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
			case 1:
				{
				setState(8916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8915);
					match(NOT);
					}
				}

				setState(8918);
				match(IN_P);
				setState(8919);
				in_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_unary_notContext extends ParserRuleContext {
		public A_expr_isnullContext a_expr_isnull() {
			return getRuleContext(A_expr_isnullContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_unary_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_unary_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_unary_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_unary_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_unary_notContext a_expr_unary_not() throws RecognitionException {
		A_expr_unary_notContext _localctx = new A_expr_unary_notContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_a_expr_unary_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8923);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8922);
				match(NOT);
				}
			}

			setState(8925);
			a_expr_isnull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_isnullContext extends ParserRuleContext {
		public A_expr_is_notContext a_expr_is_not() {
			return getRuleContext(A_expr_is_notContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public A_expr_isnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_isnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_isnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_isnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_isnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_isnullContext a_expr_isnull() throws RecognitionException {
		A_expr_isnullContext _localctx = new A_expr_isnullContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_a_expr_isnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8927);
			a_expr_is_not();
			setState(8929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				setState(8928);
				_la = _input.LA(1);
				if ( !(_la==ISNULL || _la==NOTNULL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_is_notContext extends ParserRuleContext {
		public A_expr_compareContext a_expr_compare() {
			return getRuleContext(A_expr_compareContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public A_expr_is_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_is_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_is_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_is_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_is_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_is_notContext a_expr_is_not() throws RecognitionException {
		A_expr_is_notContext _localctx = new A_expr_is_notContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_a_expr_is_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8931);
			a_expr_compare();
			setState(8955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(8932);
				match(IS);
				setState(8934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8933);
					match(NOT);
					}
				}

				setState(8953);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NULL_P:
					{
					setState(8936);
					match(NULL_P);
					}
					break;
				case TRUE_P:
					{
					setState(8937);
					match(TRUE_P);
					}
					break;
				case FALSE_P:
					{
					setState(8938);
					match(FALSE_P);
					}
					break;
				case UNKNOWN:
					{
					setState(8939);
					match(UNKNOWN);
					}
					break;
				case DISTINCT:
					{
					setState(8940);
					match(DISTINCT);
					setState(8941);
					match(FROM);
					setState(8942);
					a_expr();
					}
					break;
				case OF:
					{
					setState(8943);
					match(OF);
					setState(8944);
					match(OPEN_PAREN);
					setState(8945);
					type_list();
					setState(8946);
					match(CLOSE_PAREN);
					}
					break;
				case DOCUMENT_P:
					{
					setState(8948);
					match(DOCUMENT_P);
					}
					break;
				case NORMALIZED:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
					{
					setState(8950);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (NFC - 490)) | (1L << (NFD - 490)) | (1L << (NFKC - 490)) | (1L << (NFKD - 490)))) != 0)) {
						{
						setState(8949);
						unicode_normal_form();
						}
					}

					setState(8952);
					match(NORMALIZED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_compareContext extends ParserRuleContext {
		public List<A_expr_likeContext> a_expr_like() {
			return getRuleContexts(A_expr_likeContext.class);
		}
		public A_expr_likeContext a_expr_like(int i) {
			return getRuleContext(A_expr_likeContext.class,i);
		}
		public Subquery_OpContext subquery_Op() {
			return getRuleContext(Subquery_OpContext.class,0);
		}
		public Sub_typeContext sub_type() {
			return getRuleContext(Sub_typeContext.class,0);
		}
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public A_expr_compareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_compare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_compare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_compare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_compare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_compareContext a_expr_compare() throws RecognitionException {
		A_expr_compareContext _localctx = new A_expr_compareContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_a_expr_compare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8957);
			a_expr_like();
			setState(8969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				setState(8958);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8959);
				a_expr_like();
				}
				break;
			case 2:
				{
				setState(8960);
				subquery_Op();
				setState(8961);
				sub_type();
				setState(8967);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(8962);
					select_with_parens();
					}
					break;
				case 2:
					{
					setState(8963);
					match(OPEN_PAREN);
					setState(8964);
					a_expr();
					setState(8965);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_likeContext extends ParserRuleContext {
		public List<A_expr_qual_opContext> a_expr_qual_op() {
			return getRuleContexts(A_expr_qual_opContext.class);
		}
		public A_expr_qual_opContext a_expr_qual_op(int i) {
			return getRuleContext(A_expr_qual_opContext.class,i);
		}
		public Opt_escapeContext opt_escape() {
			return getRuleContext(Opt_escapeContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public A_expr_likeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_like; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_like(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_like(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_like(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_likeContext a_expr_like() throws RecognitionException {
		A_expr_likeContext _localctx = new A_expr_likeContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_a_expr_like);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8971);
			a_expr_qual_op();
			setState(8988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				setState(8973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8972);
					match(NOT);
					}
				}

				setState(8983);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(8975);
					match(LIKE);
					}
					break;
				case ILIKE:
					{
					setState(8976);
					match(ILIKE);
					}
					break;
				case SIMILAR:
					{
					setState(8977);
					match(SIMILAR);
					setState(8978);
					match(TO);
					}
					break;
				case BETWEEN:
					{
					setState(8979);
					match(BETWEEN);
					setState(8981);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SYMMETRIC) {
						{
						setState(8980);
						match(SYMMETRIC);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8985);
				a_expr_qual_op();
				setState(8986);
				opt_escape();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_qual_opContext extends ParserRuleContext {
		public List<A_expr_unary_qualopContext> a_expr_unary_qualop() {
			return getRuleContexts(A_expr_unary_qualopContext.class);
		}
		public A_expr_unary_qualopContext a_expr_unary_qualop(int i) {
			return getRuleContext(A_expr_unary_qualopContext.class,i);
		}
		public List<Qual_opContext> qual_op() {
			return getRuleContexts(Qual_opContext.class);
		}
		public Qual_opContext qual_op(int i) {
			return getRuleContext(Qual_opContext.class,i);
		}
		public A_expr_qual_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_qual_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_qual_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_qual_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_qual_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_qual_opContext a_expr_qual_op() throws RecognitionException {
		A_expr_qual_opContext _localctx = new A_expr_qual_opContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_a_expr_qual_op);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8990);
			a_expr_unary_qualop();
			setState(8996);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8991);
					qual_op();
					setState(8992);
					a_expr_unary_qualop();
					}
					} 
				}
				setState(8998);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_unary_qualopContext extends ParserRuleContext {
		public A_expr_addContext a_expr_add() {
			return getRuleContext(A_expr_addContext.class,0);
		}
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public A_expr_unary_qualopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_qualop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_unary_qualop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_unary_qualop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_unary_qualop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_unary_qualopContext a_expr_unary_qualop() throws RecognitionException {
		A_expr_unary_qualopContext _localctx = new A_expr_unary_qualopContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_a_expr_unary_qualop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(8999);
				qual_op();
				}
				break;
			}
			setState(9002);
			a_expr_add();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_addContext extends ParserRuleContext {
		public List<A_expr_mulContext> a_expr_mul() {
			return getRuleContexts(A_expr_mulContext.class);
		}
		public A_expr_mulContext a_expr_mul(int i) {
			return getRuleContext(A_expr_mulContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(PostgreSQLParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(PostgreSQLParser.MINUS, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(PostgreSQLParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(PostgreSQLParser.PLUS, i);
		}
		public A_expr_addContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_add; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_add(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_add(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_add(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_addContext a_expr_add() throws RecognitionException {
		A_expr_addContext _localctx = new A_expr_addContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_a_expr_add);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9004);
			a_expr_mul();
			setState(9009);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,551,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9005);
					_la = _input.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9006);
					a_expr_mul();
					}
					} 
				}
				setState(9011);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,551,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_mulContext extends ParserRuleContext {
		public List<A_expr_caretContext> a_expr_caret() {
			return getRuleContexts(A_expr_caretContext.class);
		}
		public A_expr_caretContext a_expr_caret(int i) {
			return getRuleContext(A_expr_caretContext.class,i);
		}
		public List<TerminalNode> STAR() { return getTokens(PostgreSQLParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(PostgreSQLParser.STAR, i);
		}
		public List<TerminalNode> SLASH() { return getTokens(PostgreSQLParser.SLASH); }
		public TerminalNode SLASH(int i) {
			return getToken(PostgreSQLParser.SLASH, i);
		}
		public List<TerminalNode> PERCENT() { return getTokens(PostgreSQLParser.PERCENT); }
		public TerminalNode PERCENT(int i) {
			return getToken(PostgreSQLParser.PERCENT, i);
		}
		public A_expr_mulContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_mul; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_mul(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_mul(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_mul(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_mulContext a_expr_mul() throws RecognitionException {
		A_expr_mulContext _localctx = new A_expr_mulContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_a_expr_mul);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9012);
			a_expr_caret();
			setState(9017);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,552,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9013);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9014);
					a_expr_caret();
					}
					} 
				}
				setState(9019);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,552,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_caretContext extends ParserRuleContext {
		public A_expr_unary_signContext a_expr_unary_sign() {
			return getRuleContext(A_expr_unary_signContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public A_expr_caretContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_caret; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_caret(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_caret(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_caret(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_caretContext a_expr_caret() throws RecognitionException {
		A_expr_caretContext _localctx = new A_expr_caretContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_a_expr_caret);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9020);
			a_expr_unary_sign();
			setState(9023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				setState(9021);
				match(CARET);
				setState(9022);
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_unary_signContext extends ParserRuleContext {
		public A_expr_at_time_zoneContext a_expr_at_time_zone() {
			return getRuleContext(A_expr_at_time_zoneContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public A_expr_unary_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_unary_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_unary_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_unary_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_unary_signContext a_expr_unary_sign() throws RecognitionException {
		A_expr_unary_signContext _localctx = new A_expr_unary_signContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_a_expr_unary_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(9025);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9028);
			a_expr_at_time_zone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_at_time_zoneContext extends ParserRuleContext {
		public A_expr_collateContext a_expr_collate() {
			return getRuleContext(A_expr_collateContext.class,0);
		}
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public A_expr_at_time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_at_time_zone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_at_time_zone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_at_time_zone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_at_time_zone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_at_time_zoneContext a_expr_at_time_zone() throws RecognitionException {
		A_expr_at_time_zoneContext _localctx = new A_expr_at_time_zoneContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_a_expr_at_time_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9030);
			a_expr_collate();
			setState(9035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				{
				setState(9031);
				match(AT);
				setState(9032);
				match(TIME);
				setState(9033);
				match(ZONE);
				setState(9034);
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_collateContext extends ParserRuleContext {
		public A_expr_typecastContext a_expr_typecast() {
			return getRuleContext(A_expr_typecastContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public A_expr_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_collateContext a_expr_collate() throws RecognitionException {
		A_expr_collateContext _localctx = new A_expr_collateContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_a_expr_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9037);
			a_expr_typecast();
			setState(9040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(9038);
				match(COLLATE);
				setState(9039);
				any_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_typecastContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<TerminalNode> TYPECAST() { return getTokens(PostgreSQLParser.TYPECAST); }
		public TerminalNode TYPECAST(int i) {
			return getToken(PostgreSQLParser.TYPECAST, i);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public A_expr_typecastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_typecast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_typecast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_typecast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_typecast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_typecastContext a_expr_typecast() throws RecognitionException {
		A_expr_typecastContext _localctx = new A_expr_typecastContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_a_expr_typecast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9042);
			c_expr();
			setState(9047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TYPECAST) {
				{
				{
				setState(9043);
				match(TYPECAST);
				setState(9044);
				typename();
				}
				}
				setState(9049);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class B_exprContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public TerminalNode TYPECAST() { return getToken(PostgreSQLParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_b_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterB_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitB_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitB_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final B_exprContext b_expr() throws RecognitionException {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		B_exprContext _localctx = new B_exprContext(_ctx, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1218;
		enterRecursionRule(_localctx, 1218, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(9051);
				c_expr();
				}
				break;
			case 2:
				{
				setState(9052);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9053);
				b_expr(9);
				}
				break;
			case 3:
				{
				setState(9054);
				qual_op();
				setState(9055);
				b_expr(3);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(9098);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9096);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9059);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(9060);
						match(CARET);
						setState(9061);
						b_expr(9);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9062);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(9063);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9064);
						b_expr(8);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9065);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(9066);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9067);
						b_expr(7);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9068);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(9069);
						qual_op();
						setState(9070);
						b_expr(6);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9072);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(9073);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9074);
						b_expr(5);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9075);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(9076);
						match(TYPECAST);
						setState(9077);
						typename();
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9078);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(9079);
						qual_op();
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9080);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(9081);
						match(IS);
						setState(9083);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(9082);
							match(NOT);
							}
						}

						setState(9094);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DISTINCT:
							{
							setState(9085);
							match(DISTINCT);
							setState(9086);
							match(FROM);
							setState(9087);
							b_expr(0);
							}
							break;
						case OF:
							{
							setState(9088);
							match(OF);
							setState(9089);
							match(OPEN_PAREN);
							setState(9090);
							type_list();
							setState(9091);
							match(CLOSE_PAREN);
							}
							break;
						case DOCUMENT_P:
							{
							setState(9093);
							match(DOCUMENT_P);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(9100);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class C_exprContext extends ParserRuleContext {
		public C_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_expr; }
	 
		public C_exprContext() { }
		public void copyFrom(C_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class C_expr_existsContext extends C_exprContext {
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public C_expr_existsContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_exists(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class C_expr_caseContext extends C_exprContext {
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public C_expr_caseContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_case(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class C_expr_exprContext extends C_exprContext {
		public A_exprContext a_expr_in_parens;
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprconstContext aexprconst() {
			return getRuleContext(AexprconstContext.class,0);
		}
		public PlsqlvariablenameContext plsqlvariablename() {
			return getRuleContext(PlsqlvariablenameContext.class,0);
		}
		public TerminalNode LAB() { return getToken(PostgreSQLParser.LAB, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Explicit_rowContext explicit_row() {
			return getRuleContext(Explicit_rowContext.class,0);
		}
		public Implicit_rowContext implicit_row() {
			return getRuleContext(Implicit_rowContext.class,0);
		}
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public C_expr_exprContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_exprContext c_expr() throws RecognitionException {
		C_exprContext _localctx = new C_exprContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_c_expr);
		try {
			setState(9138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				_localctx = new C_expr_existsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9101);
				match(EXISTS);
				setState(9102);
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9103);
				match(ARRAY);
				setState(9106);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(9104);
					select_with_parens();
					}
					break;
				case OPEN_BRACKET:
					{
					setState(9105);
					array_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(9108);
				match(PARAM);
				setState(9109);
				opt_indirection();
				}
				break;
			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(9110);
				match(GROUPING);
				setState(9111);
				match(OPEN_PAREN);
				setState(9112);
				expr_list();
				setState(9113);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(9115);
				match(UNIQUE);
				setState(9116);
				select_with_parens();
				}
				break;
			case 6:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(9117);
				columnref();
				}
				break;
			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(9118);
				aexprconst();
				}
				break;
			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(9119);
				plsqlvariablename();
				}
				break;
			case 9:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(9120);
				match(LAB);
				}
				break;
			case 10:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(9121);
				match(OPEN_PAREN);
				setState(9122);
				((C_expr_exprContext)_localctx).a_expr_in_parens = a_expr();
				setState(9123);
				match(CLOSE_PAREN);
				setState(9124);
				opt_indirection();
				}
				break;
			case 11:
				_localctx = new C_expr_caseContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(9126);
				case_expr();
				}
				break;
			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(9127);
				func_expr();
				}
				break;
			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(9128);
				select_with_parens();
				setState(9130);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
				case 1:
					{
					setState(9129);
					indirection();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(9132);
				explicit_row();
				}
				break;
			case 15:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(9133);
				implicit_row();
				}
				break;
			case 16:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(9134);
				row();
				setState(9135);
				match(OVERLAPS);
				setState(9136);
				row();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlvariablenameContext extends ParserRuleContext {
		public TerminalNode PLSQLVARIABLENAME() { return getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public PlsqlvariablenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlvariablename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlvariablename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlvariablename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlvariablename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlvariablenameContext plsqlvariablename() throws RecognitionException {
		PlsqlvariablenameContext _localctx = new PlsqlvariablenameContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_plsqlvariablename);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9140);
			match(PLSQLVARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_applicationContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_applicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_application; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_application(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_application(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_application(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_applicationContext func_application() throws RecognitionException {
		Func_applicationContext _localctx = new Func_applicationContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_func_application);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9142);
			func_name();
			setState(9143);
			match(OPEN_PAREN);
			setState(9162);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case LAB:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				setState(9144);
				func_arg_list();
				setState(9148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9145);
					match(COMMA);
					setState(9146);
					match(VARIADIC);
					setState(9147);
					func_arg_expr();
					}
				}

				setState(9150);
				opt_sort_clause();
				}
				break;
			case VARIADIC:
				{
				setState(9152);
				match(VARIADIC);
				setState(9153);
				func_arg_expr();
				setState(9154);
				opt_sort_clause();
				}
				break;
			case ALL:
			case DISTINCT:
				{
				setState(9156);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9157);
				func_arg_list();
				setState(9158);
				opt_sort_clause();
				}
				break;
			case STAR:
				{
				setState(9160);
				match(STAR);
				}
				break;
			case CLOSE_PAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9164);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_exprContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Within_group_clauseContext within_group_clause() {
			return getRuleContext(Within_group_clauseContext.class,0);
		}
		public Filter_clauseContext filter_clause() {
			return getRuleContext(Filter_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_func_expr);
		try {
			setState(9172);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9166);
				func_application();
				setState(9167);
				within_group_clause();
				setState(9168);
				filter_clause();
				setState(9169);
				over_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9171);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_expr_windowlessContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_expr_windowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_windowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr_windowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr_windowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr_windowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_expr_windowlessContext func_expr_windowless() throws RecognitionException {
		Func_expr_windowlessContext _localctx = new Func_expr_windowlessContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_func_expr_windowless);
		try {
			setState(9176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9174);
				func_application();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9175);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_expr_common_subexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public Extract_listContext extract_list() {
			return getRuleContext(Extract_listContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public Overlay_listContext overlay_list() {
			return getRuleContext(Overlay_listContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public Position_listContext position_list() {
			return getRuleContext(Position_listContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public Substr_listContext substr_list() {
			return getRuleContext(Substr_listContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public Trim_listContext trim_list() {
			return getRuleContext(Trim_listContext.class,0);
		}
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Xml_attributesContext xml_attributes() {
			return getRuleContext(Xml_attributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public Xml_whitespace_optionContext xml_whitespace_option() {
			return getRuleContext(Xml_whitespace_optionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public Xml_root_versionContext xml_root_version() {
			return getRuleContext(Xml_root_versionContext.class,0);
		}
		public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return getRuleContext(Opt_xml_root_standaloneContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public Func_expr_common_subexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_common_subexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr_common_subexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr_common_subexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr_common_subexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_expr_common_subexprContext func_expr_common_subexpr() throws RecognitionException {
		Func_expr_common_subexprContext _localctx = new Func_expr_common_subexprContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_func_expr_common_subexpr);
		int _la;
		try {
			setState(9355);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(9178);
				match(COLLATION);
				setState(9179);
				match(FOR);
				setState(9180);
				match(OPEN_PAREN);
				setState(9181);
				a_expr();
				setState(9182);
				match(CLOSE_PAREN);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9184);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(9185);
				match(CURRENT_TIME);
				setState(9190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
				case 1:
					{
					setState(9186);
					match(OPEN_PAREN);
					setState(9187);
					iconst();
					setState(9188);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(9192);
				match(CURRENT_TIMESTAMP);
				setState(9197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(9193);
					match(OPEN_PAREN);
					setState(9194);
					iconst();
					setState(9195);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(9199);
				match(LOCALTIME);
				setState(9204);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
				case 1:
					{
					setState(9200);
					match(OPEN_PAREN);
					setState(9201);
					iconst();
					setState(9202);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(9206);
				match(LOCALTIMESTAMP);
				setState(9211);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(9207);
					match(OPEN_PAREN);
					setState(9208);
					iconst();
					setState(9209);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_ROLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(9213);
				match(CURRENT_ROLE);
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 8);
				{
				setState(9214);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 9);
				{
				setState(9215);
				match(SESSION_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 10);
				{
				setState(9216);
				match(USER);
				}
				break;
			case CURRENT_CATALOG:
				enterOuterAlt(_localctx, 11);
				{
				setState(9217);
				match(CURRENT_CATALOG);
				}
				break;
			case CURRENT_SCHEMA:
				enterOuterAlt(_localctx, 12);
				{
				setState(9218);
				match(CURRENT_SCHEMA);
				}
				break;
			case CAST:
				enterOuterAlt(_localctx, 13);
				{
				setState(9219);
				match(CAST);
				setState(9220);
				match(OPEN_PAREN);
				setState(9221);
				a_expr();
				setState(9222);
				match(AS);
				setState(9223);
				typename();
				setState(9224);
				match(CLOSE_PAREN);
				}
				break;
			case EXTRACT:
				enterOuterAlt(_localctx, 14);
				{
				setState(9226);
				match(EXTRACT);
				setState(9227);
				match(OPEN_PAREN);
				setState(9228);
				extract_list();
				setState(9229);
				match(CLOSE_PAREN);
				}
				break;
			case NORMALIZE:
				enterOuterAlt(_localctx, 15);
				{
				setState(9231);
				match(NORMALIZE);
				setState(9232);
				match(OPEN_PAREN);
				setState(9233);
				a_expr();
				setState(9236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9234);
					match(COMMA);
					setState(9235);
					unicode_normal_form();
					}
				}

				setState(9238);
				match(CLOSE_PAREN);
				}
				break;
			case OVERLAY:
				enterOuterAlt(_localctx, 16);
				{
				setState(9240);
				match(OVERLAY);
				setState(9241);
				match(OPEN_PAREN);
				setState(9242);
				overlay_list();
				setState(9243);
				match(CLOSE_PAREN);
				}
				break;
			case POSITION:
				enterOuterAlt(_localctx, 17);
				{
				setState(9245);
				match(POSITION);
				setState(9246);
				match(OPEN_PAREN);
				setState(9247);
				position_list();
				setState(9248);
				match(CLOSE_PAREN);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(9250);
				match(SUBSTRING);
				setState(9251);
				match(OPEN_PAREN);
				setState(9252);
				substr_list();
				setState(9253);
				match(CLOSE_PAREN);
				}
				break;
			case TREAT:
				enterOuterAlt(_localctx, 19);
				{
				setState(9255);
				match(TREAT);
				setState(9256);
				match(OPEN_PAREN);
				setState(9257);
				a_expr();
				setState(9258);
				match(AS);
				setState(9259);
				typename();
				setState(9260);
				match(CLOSE_PAREN);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(9262);
				match(TRIM);
				setState(9263);
				match(OPEN_PAREN);
				setState(9265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BOTH || _la==LEADING || _la==TRAILING) {
					{
					setState(9264);
					_la = _input.LA(1);
					if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9267);
				trim_list();
				setState(9268);
				match(CLOSE_PAREN);
				}
				break;
			case NULLIF:
				enterOuterAlt(_localctx, 21);
				{
				setState(9270);
				match(NULLIF);
				setState(9271);
				match(OPEN_PAREN);
				setState(9272);
				a_expr();
				setState(9273);
				match(COMMA);
				setState(9274);
				a_expr();
				setState(9275);
				match(CLOSE_PAREN);
				}
				break;
			case COALESCE:
				enterOuterAlt(_localctx, 22);
				{
				setState(9277);
				match(COALESCE);
				setState(9278);
				match(OPEN_PAREN);
				setState(9279);
				expr_list();
				setState(9280);
				match(CLOSE_PAREN);
				}
				break;
			case GREATEST:
				enterOuterAlt(_localctx, 23);
				{
				setState(9282);
				match(GREATEST);
				setState(9283);
				match(OPEN_PAREN);
				setState(9284);
				expr_list();
				setState(9285);
				match(CLOSE_PAREN);
				}
				break;
			case LEAST:
				enterOuterAlt(_localctx, 24);
				{
				setState(9287);
				match(LEAST);
				setState(9288);
				match(OPEN_PAREN);
				setState(9289);
				expr_list();
				setState(9290);
				match(CLOSE_PAREN);
				}
				break;
			case XMLCONCAT:
				enterOuterAlt(_localctx, 25);
				{
				setState(9292);
				match(XMLCONCAT);
				setState(9293);
				match(OPEN_PAREN);
				setState(9294);
				expr_list();
				setState(9295);
				match(CLOSE_PAREN);
				}
				break;
			case XMLELEMENT:
				enterOuterAlt(_localctx, 26);
				{
				setState(9297);
				match(XMLELEMENT);
				setState(9298);
				match(OPEN_PAREN);
				setState(9299);
				match(NAME_P);
				setState(9300);
				collabel();
				setState(9306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9301);
					match(COMMA);
					setState(9304);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
					case 1:
						{
						setState(9302);
						xml_attributes();
						}
						break;
					case 2:
						{
						setState(9303);
						expr_list();
						}
						break;
					}
					}
				}

				setState(9308);
				match(CLOSE_PAREN);
				}
				break;
			case XMLEXISTS:
				enterOuterAlt(_localctx, 27);
				{
				setState(9310);
				match(XMLEXISTS);
				setState(9311);
				match(OPEN_PAREN);
				setState(9312);
				c_expr();
				setState(9313);
				xmlexists_argument();
				setState(9314);
				match(CLOSE_PAREN);
				}
				break;
			case XMLFOREST:
				enterOuterAlt(_localctx, 28);
				{
				setState(9316);
				match(XMLFOREST);
				setState(9317);
				match(OPEN_PAREN);
				setState(9318);
				xml_attribute_list();
				setState(9319);
				match(CLOSE_PAREN);
				}
				break;
			case XMLPARSE:
				enterOuterAlt(_localctx, 29);
				{
				setState(9321);
				match(XMLPARSE);
				setState(9322);
				match(OPEN_PAREN);
				setState(9323);
				document_or_content();
				setState(9324);
				a_expr();
				setState(9325);
				xml_whitespace_option();
				setState(9326);
				match(CLOSE_PAREN);
				}
				break;
			case XMLPI:
				enterOuterAlt(_localctx, 30);
				{
				setState(9328);
				match(XMLPI);
				setState(9329);
				match(OPEN_PAREN);
				setState(9330);
				match(NAME_P);
				setState(9331);
				collabel();
				setState(9334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9332);
					match(COMMA);
					setState(9333);
					a_expr();
					}
				}

				setState(9336);
				match(CLOSE_PAREN);
				}
				break;
			case XMLROOT:
				enterOuterAlt(_localctx, 31);
				{
				setState(9338);
				match(XMLROOT);
				setState(9339);
				match(OPEN_PAREN);
				setState(9340);
				match(XML_P);
				setState(9341);
				a_expr();
				setState(9342);
				match(COMMA);
				setState(9343);
				xml_root_version();
				setState(9344);
				opt_xml_root_standalone();
				setState(9345);
				match(CLOSE_PAREN);
				}
				break;
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 32);
				{
				setState(9347);
				match(XMLSERIALIZE);
				setState(9348);
				match(OPEN_PAREN);
				setState(9349);
				document_or_content();
				setState(9350);
				a_expr();
				setState(9351);
				match(AS);
				setState(9352);
				simpletypename();
				setState(9353);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_root_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_root_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_root_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_root_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_root_versionContext xml_root_version() throws RecognitionException {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_xml_root_version);
		try {
			setState(9362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9357);
				match(VERSION_P);
				setState(9358);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9359);
				match(VERSION_P);
				setState(9360);
				match(NO);
				setState(9361);
				match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_xml_root_standaloneContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_xml_root_standalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_xml_root_standalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_xml_root_standalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_xml_root_standalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_xml_root_standaloneContext opt_xml_root_standalone() throws RecognitionException {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_opt_xml_root_standalone);
		try {
			setState(9375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9364);
				match(COMMA);
				setState(9365);
				match(STANDALONE_P);
				setState(9366);
				match(YES_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9367);
				match(COMMA);
				setState(9368);
				match(STANDALONE_P);
				setState(9369);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9370);
				match(COMMA);
				setState(9371);
				match(STANDALONE_P);
				setState(9372);
				match(NO);
				setState(9373);
				match(VALUE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributesContext xml_attributes() throws RecognitionException {
		Xml_attributesContext _localctx = new Xml_attributesContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_xml_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9377);
			match(XMLATTRIBUTES);
			setState(9378);
			match(OPEN_PAREN);
			setState(9379);
			xml_attribute_list();
			setState(9380);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attribute_listContext extends ParserRuleContext {
		public List<Xml_attribute_elContext> xml_attribute_el() {
			return getRuleContexts(Xml_attribute_elContext.class);
		}
		public Xml_attribute_elContext xml_attribute_el(int i) {
			return getRuleContext(Xml_attribute_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attribute_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_listContext xml_attribute_list() throws RecognitionException {
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_xml_attribute_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9382);
			xml_attribute_el();
			setState(9387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9383);
				match(COMMA);
				setState(9384);
				xml_attribute_el();
				}
				}
				setState(9389);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attribute_elContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attribute_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attribute_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attribute_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_elContext xml_attribute_el() throws RecognitionException {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_xml_attribute_el);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9390);
			a_expr();
			setState(9393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9391);
				match(AS);
				setState(9392);
				collabel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Document_or_contentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_document_or_content; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDocument_or_content(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDocument_or_content(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDocument_or_content(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Document_or_contentContext document_or_content() throws RecognitionException {
		Document_or_contentContext _localctx = new Document_or_contentContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_document_or_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9395);
			_la = _input.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_whitespace_optionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_whitespace_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_whitespace_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_whitespace_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_whitespace_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_whitespace_optionContext xml_whitespace_option() throws RecognitionException {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_xml_whitespace_option);
		try {
			setState(9402);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9397);
				match(PRESERVE);
				setState(9398);
				match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(9399);
				match(STRIP_P);
				setState(9400);
				match(WHITESPACE_P);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlexists_argumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<Xml_passing_mechContext> xml_passing_mech() {
			return getRuleContexts(Xml_passing_mechContext.class);
		}
		public Xml_passing_mechContext xml_passing_mech(int i) {
			return getRuleContext(Xml_passing_mechContext.class,i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlexists_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmlexists_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmlexists_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmlexists_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlexists_argumentContext xmlexists_argument() throws RecognitionException {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_xmlexists_argument);
		try {
			setState(9419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9404);
				match(PASSING);
				setState(9405);
				c_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9406);
				match(PASSING);
				setState(9407);
				c_expr();
				setState(9408);
				xml_passing_mech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9410);
				match(PASSING);
				setState(9411);
				xml_passing_mech();
				setState(9412);
				c_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9414);
				match(PASSING);
				setState(9415);
				xml_passing_mech();
				setState(9416);
				c_expr();
				setState(9417);
				xml_passing_mech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_mechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_passing_mechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_mech; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_passing_mech(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_passing_mech(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_passing_mech(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_mechContext xml_passing_mech() throws RecognitionException {
		Xml_passing_mechContext _localctx = new Xml_passing_mechContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_xml_passing_mech);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9421);
			match(BY);
			setState(9422);
			_la = _input.LA(1);
			if ( !(_la==REF || _la==VALUE_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_group_clauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Within_group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWithin_group_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWithin_group_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWithin_group_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_group_clauseContext within_group_clause() throws RecognitionException {
		Within_group_clauseContext _localctx = new Within_group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_within_group_clause);
		try {
			setState(9431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9424);
				match(WITHIN);
				setState(9425);
				match(GROUP_P);
				setState(9426);
				match(OPEN_PAREN);
				setState(9427);
				sort_clause();
				setState(9428);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filter_clauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFilter_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFilter_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFilter_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Filter_clauseContext filter_clause() throws RecognitionException {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_filter_clause);
		try {
			setState(9440);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9433);
				match(FILTER);
				setState(9434);
				match(OPEN_PAREN);
				setState(9435);
				match(WHERE);
				setState(9436);
				a_expr();
				setState(9437);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_window_clause);
		try {
			setState(9445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WINDOW:
				enterOuterAlt(_localctx, 1);
				{
				setState(9442);
				match(WINDOW);
				setState(9443);
				window_definition_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definition_listContext extends ParserRuleContext {
		public List<Window_definitionContext> window_definition() {
			return getRuleContexts(Window_definitionContext.class);
		}
		public Window_definitionContext window_definition(int i) {
			return getRuleContext(Window_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_window_definition_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9447);
			window_definition();
			setState(9452);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,589,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9448);
					match(COMMA);
					setState(9449);
					window_definition();
					}
					} 
				}
				setState(9454);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,589,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9455);
			colid();
			setState(9456);
			match(AS);
			setState(9457);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_over_clause);
		try {
			setState(9465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9459);
				match(OVER);
				setState(9462);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(9460);
					window_specification();
					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case OUTER_P:
				case OVER:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case CATALOG_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(9461);
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specificationContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_existing_window_nameContext opt_existing_window_name() {
			return getRuleContext(Opt_existing_window_nameContext.class,0);
		}
		public Opt_partition_clauseContext opt_partition_clause() {
			return getRuleContext(Opt_partition_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Opt_frame_clauseContext opt_frame_clause() {
			return getRuleContext(Opt_frame_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9467);
			match(OPEN_PAREN);
			setState(9468);
			opt_existing_window_name();
			setState(9469);
			opt_partition_clause();
			setState(9470);
			opt_sort_clause();
			setState(9471);
			opt_frame_clause();
			setState(9472);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_existing_window_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_existing_window_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_existing_window_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_existing_window_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_existing_window_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_existing_window_nameContext opt_existing_window_name() throws RecognitionException {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_opt_existing_window_name);
		try {
			setState(9476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9474);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_partition_clauseContext opt_partition_clause() throws RecognitionException {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_opt_partition_clause);
		try {
			setState(9482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(9478);
				match(PARTITION);
				setState(9479);
				match(BY);
				setState(9480);
				expr_list();
				}
				break;
			case CLOSE_PAREN:
			case ORDER:
			case RANGE:
			case ROWS:
			case GROUPS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_frame_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public Frame_extentContext frame_extent() {
			return getRuleContext(Frame_extentContext.class,0);
		}
		public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
			return getRuleContext(Opt_window_exclusion_clauseContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_frame_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_frame_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_frame_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_frame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_frame_clauseContext opt_frame_clause() throws RecognitionException {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_opt_frame_clause);
		try {
			setState(9497);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9484);
				match(RANGE);
				setState(9485);
				frame_extent();
				setState(9486);
				opt_window_exclusion_clause();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9488);
				match(ROWS);
				setState(9489);
				frame_extent();
				setState(9490);
				opt_window_exclusion_clause();
				}
				break;
			case GROUPS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9492);
				match(GROUPS);
				setState(9493);
				frame_extent();
				setState(9494);
				opt_window_exclusion_clause();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_extentContext extends ParserRuleContext {
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_extentContext frame_extent() throws RecognitionException {
		Frame_extentContext _localctx = new Frame_extentContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_frame_extent);
		try {
			setState(9505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9499);
				frame_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9500);
				match(BETWEEN);
				setState(9501);
				frame_bound();
				setState(9502);
				match(AND);
				setState(9503);
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_boundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_frame_bound);
		int _la;
		try {
			setState(9514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9507);
				match(UNBOUNDED);
				setState(9508);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9509);
				match(CURRENT_P);
				setState(9510);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9511);
				a_expr();
				setState(9512);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_window_exclusion_clauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public Opt_window_exclusion_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_window_exclusion_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_window_exclusion_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_window_exclusion_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_window_exclusion_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_window_exclusion_clauseContext opt_window_exclusion_clause() throws RecognitionException {
		Opt_window_exclusion_clauseContext _localctx = new Opt_window_exclusion_clauseContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_opt_window_exclusion_clause);
		try {
			setState(9526);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCLUDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9516);
				match(EXCLUDE);
				setState(9523);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT_P:
					{
					setState(9517);
					match(CURRENT_P);
					setState(9518);
					match(ROW);
					}
					break;
				case GROUP_P:
					{
					setState(9519);
					match(GROUP_P);
					}
					break;
				case TIES:
					{
					setState(9520);
					match(TIES);
					}
					break;
				case NO:
					{
					setState(9521);
					match(NO);
					setState(9522);
					match(OTHERS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_row);
		int _la;
		try {
			setState(9540);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(9528);
				match(ROW);
				setState(9529);
				match(OPEN_PAREN);
				setState(9531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAREN) | (1L << PLUS) | (1L << MINUS) | (1L << PARAM) | (1L << LAB) | (1L << Operator) | (1L << AND) | (1L << ARRAY) | (1L << CASE) | (1L << CAST) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT) | (1L << DO))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE_P - 66)) | (1L << (FETCH - 66)) | (1L << (LOCALTIME - 66)) | (1L << (LOCALTIMESTAMP - 66)) | (1L << (NOT - 66)) | (1L << (NULL_P - 66)) | (1L << (SESSION_USER - 66)) | (1L << (TABLE - 66)) | (1L << (TRUE_P - 66)) | (1L << (UNIQUE - 66)) | (1L << (USER - 66)) | (1L << (AUTHORIZATION - 66)) | (1L << (BINARY - 66)) | (1L << (COLLATION - 66)) | (1L << (CONCURRENTLY - 66)) | (1L << (CROSS - 66)) | (1L << (CURRENT_SCHEMA - 66)) | (1L << (FREEZE - 66)) | (1L << (FULL - 66)) | (1L << (ILIKE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (INNER_P - 130)) | (1L << (IS - 130)) | (1L << (ISNULL - 130)) | (1L << (JOIN - 130)) | (1L << (LEFT - 130)) | (1L << (LIKE - 130)) | (1L << (NATURAL - 130)) | (1L << (NOTNULL - 130)) | (1L << (OUTER_P - 130)) | (1L << (OVER - 130)) | (1L << (OVERLAPS - 130)) | (1L << (RIGHT - 130)) | (1L << (SIMILAR - 130)) | (1L << (VERBOSE - 130)) | (1L << (ABORT_P - 130)) | (1L << (ABSOLUTE_P - 130)) | (1L << (ACCESS - 130)) | (1L << (ACTION - 130)) | (1L << (ADD_P - 130)) | (1L << (ADMIN - 130)) | (1L << (AFTER - 130)) | (1L << (AGGREGATE - 130)) | (1L << (ALSO - 130)) | (1L << (ALTER - 130)) | (1L << (ALWAYS - 130)) | (1L << (ASSERTION - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (AT - 130)) | (1L << (ATTRIBUTE - 130)) | (1L << (BACKWARD - 130)) | (1L << (BEFORE - 130)) | (1L << (BEGIN_P - 130)) | (1L << (BY - 130)) | (1L << (CACHE - 130)) | (1L << (CALLED - 130)) | (1L << (CASCADE - 130)) | (1L << (CASCADED - 130)) | (1L << (CHAIN - 130)) | (1L << (CHARACTERISTICS - 130)) | (1L << (CHECKPOINT - 130)) | (1L << (CLASS - 130)) | (1L << (CLOSE - 130)) | (1L << (CLUSTER - 130)) | (1L << (COMMENT - 130)) | (1L << (COMMENTS - 130)) | (1L << (COMMIT - 130)) | (1L << (COMMITTED - 130)) | (1L << (CONFIGURATION - 130)) | (1L << (CONNECTION - 130)) | (1L << (CONSTRAINTS - 130)) | (1L << (CONTENT_P - 130)) | (1L << (CONTINUE_P - 130)) | (1L << (CONVERSION_P - 130)) | (1L << (COPY - 130)) | (1L << (COST - 130)) | (1L << (CSV - 130)) | (1L << (CURSOR - 130)) | (1L << (CYCLE - 130)) | (1L << (DATA_P - 130)) | (1L << (DATABASE - 130)) | (1L << (DAY_P - 130)) | (1L << (DEALLOCATE - 130)) | (1L << (DECLARE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEFINER - 194)) | (1L << (DELETE_P - 194)) | (1L << (DELIMITER - 194)) | (1L << (DELIMITERS - 194)) | (1L << (DICTIONARY - 194)) | (1L << (DISABLE_P - 194)) | (1L << (DISCARD - 194)) | (1L << (DOCUMENT_P - 194)) | (1L << (DOMAIN_P - 194)) | (1L << (DOUBLE_P - 194)) | (1L << (DROP - 194)) | (1L << (EACH - 194)) | (1L << (ENABLE_P - 194)) | (1L << (ENCODING - 194)) | (1L << (ENCRYPTED - 194)) | (1L << (ENUM_P - 194)) | (1L << (ESCAPE - 194)) | (1L << (EVENT - 194)) | (1L << (EXCLUDE - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXCLUSIVE - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FAMILY - 194)) | (1L << (FIRST_P - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (FORWARD - 194)) | (1L << (FUNCTION - 194)) | (1L << (FUNCTIONS - 194)) | (1L << (GLOBAL - 194)) | (1L << (GRANTED - 194)) | (1L << (HANDLER - 194)) | (1L << (HEADER_P - 194)) | (1L << (HOLD - 194)) | (1L << (HOUR_P - 194)) | (1L << (IDENTITY_P - 194)) | (1L << (IF_P - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (IMMUTABLE - 194)) | (1L << (IMPLICIT_P - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDEX - 194)) | (1L << (INDEXES - 194)) | (1L << (INHERIT - 194)) | (1L << (INHERITS - 194)) | (1L << (INLINE_P - 194)) | (1L << (INSENSITIVE - 194)) | (1L << (INSERT - 194)) | (1L << (INSTEAD - 194)) | (1L << (INVOKER - 194)) | (1L << (ISOLATION - 194)) | (1L << (KEY - 194)) | (1L << (LABEL - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LARGE_P - 194)) | (1L << (LAST_P - 194)) | (1L << (LEAKPROOF - 194)) | (1L << (LEVEL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (LISTEN - 258)) | (1L << (LOAD - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCATION - 258)) | (1L << (LOCK_P - 258)) | (1L << (MAPPING - 258)) | (1L << (MATCH - 258)) | (1L << (MATERIALIZED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINUTE_P - 258)) | (1L << (MINVALUE - 258)) | (1L << (MODE - 258)) | (1L << (MONTH_P - 258)) | (1L << (MOVE - 258)) | (1L << (NAME_P - 258)) | (1L << (NAMES - 258)) | (1L << (NEXT - 258)) | (1L << (NO - 258)) | (1L << (NOTHING - 258)) | (1L << (NOTIFY - 258)) | (1L << (NOWAIT - 258)) | (1L << (NULLS_P - 258)) | (1L << (OBJECT_P - 258)) | (1L << (OF - 258)) | (1L << (OFF - 258)) | (1L << (OIDS - 258)) | (1L << (OPERATOR - 258)) | (1L << (OPTION - 258)) | (1L << (OPTIONS - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARSER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PASSWORD - 258)) | (1L << (PLANS - 258)) | (1L << (PRECEDING - 258)) | (1L << (PREPARE - 258)) | (1L << (PREPARED - 258)) | (1L << (PRESERVE - 258)) | (1L << (PRIOR - 258)) | (1L << (PRIVILEGES - 258)) | (1L << (PROCEDURAL - 258)) | (1L << (PROCEDURE - 258)) | (1L << (PROGRAM - 258)) | (1L << (QUOTE - 258)) | (1L << (RANGE - 258)) | (1L << (READ - 258)) | (1L << (REASSIGN - 258)) | (1L << (RECHECK - 258)) | (1L << (RECURSIVE - 258)) | (1L << (REF - 258)) | (1L << (REFRESH - 258)) | (1L << (REINDEX - 258)) | (1L << (RELATIVE_P - 258)) | (1L << (RELEASE - 258)) | (1L << (RENAME - 258)) | (1L << (REPEATABLE - 258)) | (1L << (REPLACE - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RETURNS - 322)) | (1L << (REVOKE - 322)) | (1L << (ROLE - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROWS - 322)) | (1L << (RULE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCROLL - 322)) | (1L << (SEARCH - 322)) | (1L << (SECOND_P - 322)) | (1L << (SECURITY - 322)) | (1L << (SEQUENCE - 322)) | (1L << (SEQUENCES - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERVER - 322)) | (1L << (SESSION - 322)) | (1L << (SET - 322)) | (1L << (SHARE - 322)) | (1L << (SHOW - 322)) | (1L << (SIMPLE - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (STABLE - 322)) | (1L << (STANDALONE_P - 322)) | (1L << (START - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATISTICS - 322)) | (1L << (STDIN - 322)) | (1L << (STDOUT - 322)) | (1L << (STORAGE - 322)) | (1L << (STRICT_P - 322)) | (1L << (STRIP_P - 322)) | (1L << (SYSID - 322)) | (1L << (SYSTEM_P - 322)) | (1L << (TABLES - 322)) | (1L << (TABLESPACE - 322)) | (1L << (TEMP - 322)) | (1L << (TEMPLATE - 322)) | (1L << (TEMPORARY - 322)) | (1L << (TEXT_P - 322)) | (1L << (TRANSACTION - 322)) | (1L << (TRIGGER - 322)) | (1L << (TRUNCATE - 322)) | (1L << (TRUSTED - 322)) | (1L << (TYPE_P - 322)) | (1L << (TYPES_P - 322)) | (1L << (UNBOUNDED - 322)) | (1L << (UNCOMMITTED - 322)) | (1L << (UNENCRYPTED - 322)) | (1L << (UNKNOWN - 322)) | (1L << (UNLISTEN - 322)) | (1L << (UNLOGGED - 322)) | (1L << (UNTIL - 322)) | (1L << (UPDATE - 322)) | (1L << (VACUUM - 322)) | (1L << (VALID - 322)) | (1L << (VALIDATE - 322)) | (1L << (VALIDATOR - 322)) | (1L << (VARYING - 322)) | (1L << (VERSION_P - 322)) | (1L << (VIEW - 322)) | (1L << (VOLATILE - 322)) | (1L << (WHITESPACE_P - 322)) | (1L << (WITHOUT - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (WORK - 386)) | (1L << (WRAPPER - 386)) | (1L << (WRITE - 386)) | (1L << (XML_P - 386)) | (1L << (YEAR_P - 386)) | (1L << (YES_P - 386)) | (1L << (ZONE - 386)) | (1L << (BETWEEN - 386)) | (1L << (BIGINT - 386)) | (1L << (BIT - 386)) | (1L << (BOOLEAN_P - 386)) | (1L << (CHAR_P - 386)) | (1L << (CHARACTER - 386)) | (1L << (COALESCE - 386)) | (1L << (DEC - 386)) | (1L << (DECIMAL_P - 386)) | (1L << (EXISTS - 386)) | (1L << (EXTRACT - 386)) | (1L << (FLOAT_P - 386)) | (1L << (GREATEST - 386)) | (1L << (INOUT - 386)) | (1L << (INT_P - 386)) | (1L << (INTEGER - 386)) | (1L << (INTERVAL - 386)) | (1L << (LEAST - 386)) | (1L << (NATIONAL - 386)) | (1L << (NCHAR - 386)) | (1L << (NONE - 386)) | (1L << (NULLIF - 386)) | (1L << (NUMERIC - 386)) | (1L << (OVERLAY - 386)) | (1L << (POSITION - 386)) | (1L << (PRECISION - 386)) | (1L << (REAL - 386)) | (1L << (ROW - 386)) | (1L << (SETOF - 386)) | (1L << (SMALLINT - 386)) | (1L << (SUBSTRING - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TREAT - 386)) | (1L << (TRIM - 386)) | (1L << (VALUES - 386)) | (1L << (VARCHAR - 386)) | (1L << (XMLATTRIBUTES - 386)) | (1L << (XMLCONCAT - 386)) | (1L << (XMLELEMENT - 386)) | (1L << (XMLEXISTS - 386)) | (1L << (XMLFOREST - 386)) | (1L << (XMLPARSE - 386)) | (1L << (XMLPI - 386)) | (1L << (XMLROOT - 386)) | (1L << (XMLSERIALIZE - 386)) | (1L << (CALL - 386)) | (1L << (CURRENT_P - 386)) | (1L << (CATALOG_P - 386)) | (1L << (ATTACH - 386)) | (1L << (DETACH - 386)) | (1L << (EXPRESSION - 386)) | (1L << (GENERATED - 386)) | (1L << (LOGGED - 386)) | (1L << (STORED - 386)) | (1L << (INCLUDE - 386)) | (1L << (ROUTINE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (TRANSFORM - 450)) | (1L << (IMPORT_P - 450)) | (1L << (POLICY - 450)) | (1L << (METHOD - 450)) | (1L << (REFERENCING - 450)) | (1L << (NEW - 450)) | (1L << (OLD - 450)) | (1L << (VALUE_P - 450)) | (1L << (SUBSCRIPTION - 450)) | (1L << (PUBLICATION - 450)) | (1L << (OUT_P - 450)) | (1L << (ROUTINES - 450)) | (1L << (SCHEMAS - 450)) | (1L << (PROCEDURES - 450)) | (1L << (INPUT_P - 450)) | (1L << (SUPPORT - 450)) | (1L << (PARALLEL - 450)) | (1L << (SQL_P - 450)) | (1L << (DEPENDS - 450)) | (1L << (OVERRIDING - 450)) | (1L << (CONFLICT - 450)) | (1L << (SKIP_P - 450)) | (1L << (LOCKED - 450)) | (1L << (TIES - 450)) | (1L << (ROLLUP - 450)) | (1L << (CUBE - 450)) | (1L << (GROUPING - 450)) | (1L << (SETS - 450)) | (1L << (TABLESAMPLE - 450)) | (1L << (ORDINALITY - 450)) | (1L << (XMLTABLE - 450)) | (1L << (COLUMNS - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (ROWTYPE - 450)) | (1L << (NORMALIZED - 450)) | (1L << (WITHIN - 450)) | (1L << (FILTER - 450)) | (1L << (GROUPS - 450)) | (1L << (OTHERS - 450)) | (1L << (NFC - 450)) | (1L << (NFD - 450)) | (1L << (NFKC - 450)) | (1L << (NFKD - 450)) | (1L << (UESCAPE - 450)) | (1L << (VIEWS - 450)) | (1L << (NORMALIZE - 450)) | (1L << (DUMP - 450)) | (1L << (PRINT_STRICT_PARAMS - 450)) | (1L << (VARIABLE_CONFLICT - 450)) | (1L << (ERROR - 450)) | (1L << (USE_VARIABLE - 450)) | (1L << (USE_COLUMN - 450)) | (1L << (ALIAS - 450)) | (1L << (CONSTANT - 450)) | (1L << (PERFORM - 450)) | (1L << (GET - 450)) | (1L << (DIAGNOSTICS - 450)) | (1L << (STACKED - 450)) | (1L << (ELSIF - 450)) | (1L << (REVERSE - 450)) | (1L << (SLICE - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (EXIT - 514)) | (1L << (RETURN - 514)) | (1L << (QUERY - 514)) | (1L << (RAISE - 514)) | (1L << (SQLSTATE - 514)) | (1L << (DEBUG - 514)) | (1L << (LOG - 514)) | (1L << (INFO - 514)) | (1L << (NOTICE - 514)) | (1L << (WARNING - 514)) | (1L << (EXCEPTION - 514)) | (1L << (ASSERT - 514)) | (1L << (OPEN - 514)) | (1L << (Identifier - 514)) | (1L << (QuotedIdentifier - 514)) | (1L << (UnicodeQuotedIdentifier - 514)) | (1L << (StringConstant - 514)) | (1L << (UnicodeEscapeStringConstant - 514)) | (1L << (BeginDollarStringConstant - 514)) | (1L << (BinaryStringConstant - 514)) | (1L << (HexadecimalStringConstant - 514)) | (1L << (Integral - 514)) | (1L << (Numeric - 514)) | (1L << (PLSQLVARIABLENAME - 514)) | (1L << (PLSQLIDENTIFIER - 514)) | (1L << (EscapeStringConstant - 514)))) != 0)) {
					{
					setState(9530);
					expr_list();
					}
				}

				setState(9533);
				match(CLOSE_PAREN);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(9534);
				match(OPEN_PAREN);
				setState(9535);
				expr_list();
				setState(9536);
				match(COMMA);
				setState(9537);
				a_expr();
				setState(9538);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_rowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Explicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplicit_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplicit_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplicit_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explicit_rowContext explicit_row() throws RecognitionException {
		Explicit_rowContext _localctx = new Explicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_explicit_row);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9542);
			match(ROW);
			setState(9543);
			match(OPEN_PAREN);
			setState(9545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAREN) | (1L << PLUS) | (1L << MINUS) | (1L << PARAM) | (1L << LAB) | (1L << Operator) | (1L << AND) | (1L << ARRAY) | (1L << CASE) | (1L << CAST) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT) | (1L << DO))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE_P - 66)) | (1L << (FETCH - 66)) | (1L << (LOCALTIME - 66)) | (1L << (LOCALTIMESTAMP - 66)) | (1L << (NOT - 66)) | (1L << (NULL_P - 66)) | (1L << (SESSION_USER - 66)) | (1L << (TABLE - 66)) | (1L << (TRUE_P - 66)) | (1L << (UNIQUE - 66)) | (1L << (USER - 66)) | (1L << (AUTHORIZATION - 66)) | (1L << (BINARY - 66)) | (1L << (COLLATION - 66)) | (1L << (CONCURRENTLY - 66)) | (1L << (CROSS - 66)) | (1L << (CURRENT_SCHEMA - 66)) | (1L << (FREEZE - 66)) | (1L << (FULL - 66)) | (1L << (ILIKE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (INNER_P - 130)) | (1L << (IS - 130)) | (1L << (ISNULL - 130)) | (1L << (JOIN - 130)) | (1L << (LEFT - 130)) | (1L << (LIKE - 130)) | (1L << (NATURAL - 130)) | (1L << (NOTNULL - 130)) | (1L << (OUTER_P - 130)) | (1L << (OVER - 130)) | (1L << (OVERLAPS - 130)) | (1L << (RIGHT - 130)) | (1L << (SIMILAR - 130)) | (1L << (VERBOSE - 130)) | (1L << (ABORT_P - 130)) | (1L << (ABSOLUTE_P - 130)) | (1L << (ACCESS - 130)) | (1L << (ACTION - 130)) | (1L << (ADD_P - 130)) | (1L << (ADMIN - 130)) | (1L << (AFTER - 130)) | (1L << (AGGREGATE - 130)) | (1L << (ALSO - 130)) | (1L << (ALTER - 130)) | (1L << (ALWAYS - 130)) | (1L << (ASSERTION - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (AT - 130)) | (1L << (ATTRIBUTE - 130)) | (1L << (BACKWARD - 130)) | (1L << (BEFORE - 130)) | (1L << (BEGIN_P - 130)) | (1L << (BY - 130)) | (1L << (CACHE - 130)) | (1L << (CALLED - 130)) | (1L << (CASCADE - 130)) | (1L << (CASCADED - 130)) | (1L << (CHAIN - 130)) | (1L << (CHARACTERISTICS - 130)) | (1L << (CHECKPOINT - 130)) | (1L << (CLASS - 130)) | (1L << (CLOSE - 130)) | (1L << (CLUSTER - 130)) | (1L << (COMMENT - 130)) | (1L << (COMMENTS - 130)) | (1L << (COMMIT - 130)) | (1L << (COMMITTED - 130)) | (1L << (CONFIGURATION - 130)) | (1L << (CONNECTION - 130)) | (1L << (CONSTRAINTS - 130)) | (1L << (CONTENT_P - 130)) | (1L << (CONTINUE_P - 130)) | (1L << (CONVERSION_P - 130)) | (1L << (COPY - 130)) | (1L << (COST - 130)) | (1L << (CSV - 130)) | (1L << (CURSOR - 130)) | (1L << (CYCLE - 130)) | (1L << (DATA_P - 130)) | (1L << (DATABASE - 130)) | (1L << (DAY_P - 130)) | (1L << (DEALLOCATE - 130)) | (1L << (DECLARE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEFINER - 194)) | (1L << (DELETE_P - 194)) | (1L << (DELIMITER - 194)) | (1L << (DELIMITERS - 194)) | (1L << (DICTIONARY - 194)) | (1L << (DISABLE_P - 194)) | (1L << (DISCARD - 194)) | (1L << (DOCUMENT_P - 194)) | (1L << (DOMAIN_P - 194)) | (1L << (DOUBLE_P - 194)) | (1L << (DROP - 194)) | (1L << (EACH - 194)) | (1L << (ENABLE_P - 194)) | (1L << (ENCODING - 194)) | (1L << (ENCRYPTED - 194)) | (1L << (ENUM_P - 194)) | (1L << (ESCAPE - 194)) | (1L << (EVENT - 194)) | (1L << (EXCLUDE - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXCLUSIVE - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FAMILY - 194)) | (1L << (FIRST_P - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (FORWARD - 194)) | (1L << (FUNCTION - 194)) | (1L << (FUNCTIONS - 194)) | (1L << (GLOBAL - 194)) | (1L << (GRANTED - 194)) | (1L << (HANDLER - 194)) | (1L << (HEADER_P - 194)) | (1L << (HOLD - 194)) | (1L << (HOUR_P - 194)) | (1L << (IDENTITY_P - 194)) | (1L << (IF_P - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (IMMUTABLE - 194)) | (1L << (IMPLICIT_P - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDEX - 194)) | (1L << (INDEXES - 194)) | (1L << (INHERIT - 194)) | (1L << (INHERITS - 194)) | (1L << (INLINE_P - 194)) | (1L << (INSENSITIVE - 194)) | (1L << (INSERT - 194)) | (1L << (INSTEAD - 194)) | (1L << (INVOKER - 194)) | (1L << (ISOLATION - 194)) | (1L << (KEY - 194)) | (1L << (LABEL - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LARGE_P - 194)) | (1L << (LAST_P - 194)) | (1L << (LEAKPROOF - 194)) | (1L << (LEVEL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (LISTEN - 258)) | (1L << (LOAD - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCATION - 258)) | (1L << (LOCK_P - 258)) | (1L << (MAPPING - 258)) | (1L << (MATCH - 258)) | (1L << (MATERIALIZED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINUTE_P - 258)) | (1L << (MINVALUE - 258)) | (1L << (MODE - 258)) | (1L << (MONTH_P - 258)) | (1L << (MOVE - 258)) | (1L << (NAME_P - 258)) | (1L << (NAMES - 258)) | (1L << (NEXT - 258)) | (1L << (NO - 258)) | (1L << (NOTHING - 258)) | (1L << (NOTIFY - 258)) | (1L << (NOWAIT - 258)) | (1L << (NULLS_P - 258)) | (1L << (OBJECT_P - 258)) | (1L << (OF - 258)) | (1L << (OFF - 258)) | (1L << (OIDS - 258)) | (1L << (OPERATOR - 258)) | (1L << (OPTION - 258)) | (1L << (OPTIONS - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARSER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PASSWORD - 258)) | (1L << (PLANS - 258)) | (1L << (PRECEDING - 258)) | (1L << (PREPARE - 258)) | (1L << (PREPARED - 258)) | (1L << (PRESERVE - 258)) | (1L << (PRIOR - 258)) | (1L << (PRIVILEGES - 258)) | (1L << (PROCEDURAL - 258)) | (1L << (PROCEDURE - 258)) | (1L << (PROGRAM - 258)) | (1L << (QUOTE - 258)) | (1L << (RANGE - 258)) | (1L << (READ - 258)) | (1L << (REASSIGN - 258)) | (1L << (RECHECK - 258)) | (1L << (RECURSIVE - 258)) | (1L << (REF - 258)) | (1L << (REFRESH - 258)) | (1L << (REINDEX - 258)) | (1L << (RELATIVE_P - 258)) | (1L << (RELEASE - 258)) | (1L << (RENAME - 258)) | (1L << (REPEATABLE - 258)) | (1L << (REPLACE - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RETURNS - 322)) | (1L << (REVOKE - 322)) | (1L << (ROLE - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROWS - 322)) | (1L << (RULE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCROLL - 322)) | (1L << (SEARCH - 322)) | (1L << (SECOND_P - 322)) | (1L << (SECURITY - 322)) | (1L << (SEQUENCE - 322)) | (1L << (SEQUENCES - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERVER - 322)) | (1L << (SESSION - 322)) | (1L << (SET - 322)) | (1L << (SHARE - 322)) | (1L << (SHOW - 322)) | (1L << (SIMPLE - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (STABLE - 322)) | (1L << (STANDALONE_P - 322)) | (1L << (START - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATISTICS - 322)) | (1L << (STDIN - 322)) | (1L << (STDOUT - 322)) | (1L << (STORAGE - 322)) | (1L << (STRICT_P - 322)) | (1L << (STRIP_P - 322)) | (1L << (SYSID - 322)) | (1L << (SYSTEM_P - 322)) | (1L << (TABLES - 322)) | (1L << (TABLESPACE - 322)) | (1L << (TEMP - 322)) | (1L << (TEMPLATE - 322)) | (1L << (TEMPORARY - 322)) | (1L << (TEXT_P - 322)) | (1L << (TRANSACTION - 322)) | (1L << (TRIGGER - 322)) | (1L << (TRUNCATE - 322)) | (1L << (TRUSTED - 322)) | (1L << (TYPE_P - 322)) | (1L << (TYPES_P - 322)) | (1L << (UNBOUNDED - 322)) | (1L << (UNCOMMITTED - 322)) | (1L << (UNENCRYPTED - 322)) | (1L << (UNKNOWN - 322)) | (1L << (UNLISTEN - 322)) | (1L << (UNLOGGED - 322)) | (1L << (UNTIL - 322)) | (1L << (UPDATE - 322)) | (1L << (VACUUM - 322)) | (1L << (VALID - 322)) | (1L << (VALIDATE - 322)) | (1L << (VALIDATOR - 322)) | (1L << (VARYING - 322)) | (1L << (VERSION_P - 322)) | (1L << (VIEW - 322)) | (1L << (VOLATILE - 322)) | (1L << (WHITESPACE_P - 322)) | (1L << (WITHOUT - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (WORK - 386)) | (1L << (WRAPPER - 386)) | (1L << (WRITE - 386)) | (1L << (XML_P - 386)) | (1L << (YEAR_P - 386)) | (1L << (YES_P - 386)) | (1L << (ZONE - 386)) | (1L << (BETWEEN - 386)) | (1L << (BIGINT - 386)) | (1L << (BIT - 386)) | (1L << (BOOLEAN_P - 386)) | (1L << (CHAR_P - 386)) | (1L << (CHARACTER - 386)) | (1L << (COALESCE - 386)) | (1L << (DEC - 386)) | (1L << (DECIMAL_P - 386)) | (1L << (EXISTS - 386)) | (1L << (EXTRACT - 386)) | (1L << (FLOAT_P - 386)) | (1L << (GREATEST - 386)) | (1L << (INOUT - 386)) | (1L << (INT_P - 386)) | (1L << (INTEGER - 386)) | (1L << (INTERVAL - 386)) | (1L << (LEAST - 386)) | (1L << (NATIONAL - 386)) | (1L << (NCHAR - 386)) | (1L << (NONE - 386)) | (1L << (NULLIF - 386)) | (1L << (NUMERIC - 386)) | (1L << (OVERLAY - 386)) | (1L << (POSITION - 386)) | (1L << (PRECISION - 386)) | (1L << (REAL - 386)) | (1L << (ROW - 386)) | (1L << (SETOF - 386)) | (1L << (SMALLINT - 386)) | (1L << (SUBSTRING - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TREAT - 386)) | (1L << (TRIM - 386)) | (1L << (VALUES - 386)) | (1L << (VARCHAR - 386)) | (1L << (XMLATTRIBUTES - 386)) | (1L << (XMLCONCAT - 386)) | (1L << (XMLELEMENT - 386)) | (1L << (XMLEXISTS - 386)) | (1L << (XMLFOREST - 386)) | (1L << (XMLPARSE - 386)) | (1L << (XMLPI - 386)) | (1L << (XMLROOT - 386)) | (1L << (XMLSERIALIZE - 386)) | (1L << (CALL - 386)) | (1L << (CURRENT_P - 386)) | (1L << (CATALOG_P - 386)) | (1L << (ATTACH - 386)) | (1L << (DETACH - 386)) | (1L << (EXPRESSION - 386)) | (1L << (GENERATED - 386)) | (1L << (LOGGED - 386)) | (1L << (STORED - 386)) | (1L << (INCLUDE - 386)) | (1L << (ROUTINE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (TRANSFORM - 450)) | (1L << (IMPORT_P - 450)) | (1L << (POLICY - 450)) | (1L << (METHOD - 450)) | (1L << (REFERENCING - 450)) | (1L << (NEW - 450)) | (1L << (OLD - 450)) | (1L << (VALUE_P - 450)) | (1L << (SUBSCRIPTION - 450)) | (1L << (PUBLICATION - 450)) | (1L << (OUT_P - 450)) | (1L << (ROUTINES - 450)) | (1L << (SCHEMAS - 450)) | (1L << (PROCEDURES - 450)) | (1L << (INPUT_P - 450)) | (1L << (SUPPORT - 450)) | (1L << (PARALLEL - 450)) | (1L << (SQL_P - 450)) | (1L << (DEPENDS - 450)) | (1L << (OVERRIDING - 450)) | (1L << (CONFLICT - 450)) | (1L << (SKIP_P - 450)) | (1L << (LOCKED - 450)) | (1L << (TIES - 450)) | (1L << (ROLLUP - 450)) | (1L << (CUBE - 450)) | (1L << (GROUPING - 450)) | (1L << (SETS - 450)) | (1L << (TABLESAMPLE - 450)) | (1L << (ORDINALITY - 450)) | (1L << (XMLTABLE - 450)) | (1L << (COLUMNS - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (ROWTYPE - 450)) | (1L << (NORMALIZED - 450)) | (1L << (WITHIN - 450)) | (1L << (FILTER - 450)) | (1L << (GROUPS - 450)) | (1L << (OTHERS - 450)) | (1L << (NFC - 450)) | (1L << (NFD - 450)) | (1L << (NFKC - 450)) | (1L << (NFKD - 450)) | (1L << (UESCAPE - 450)) | (1L << (VIEWS - 450)) | (1L << (NORMALIZE - 450)) | (1L << (DUMP - 450)) | (1L << (PRINT_STRICT_PARAMS - 450)) | (1L << (VARIABLE_CONFLICT - 450)) | (1L << (ERROR - 450)) | (1L << (USE_VARIABLE - 450)) | (1L << (USE_COLUMN - 450)) | (1L << (ALIAS - 450)) | (1L << (CONSTANT - 450)) | (1L << (PERFORM - 450)) | (1L << (GET - 450)) | (1L << (DIAGNOSTICS - 450)) | (1L << (STACKED - 450)) | (1L << (ELSIF - 450)) | (1L << (REVERSE - 450)) | (1L << (SLICE - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (EXIT - 514)) | (1L << (RETURN - 514)) | (1L << (QUERY - 514)) | (1L << (RAISE - 514)) | (1L << (SQLSTATE - 514)) | (1L << (DEBUG - 514)) | (1L << (LOG - 514)) | (1L << (INFO - 514)) | (1L << (NOTICE - 514)) | (1L << (WARNING - 514)) | (1L << (EXCEPTION - 514)) | (1L << (ASSERT - 514)) | (1L << (OPEN - 514)) | (1L << (Identifier - 514)) | (1L << (QuotedIdentifier - 514)) | (1L << (UnicodeQuotedIdentifier - 514)) | (1L << (StringConstant - 514)) | (1L << (UnicodeEscapeStringConstant - 514)) | (1L << (BeginDollarStringConstant - 514)) | (1L << (BinaryStringConstant - 514)) | (1L << (HexadecimalStringConstant - 514)) | (1L << (Integral - 514)) | (1L << (Numeric - 514)) | (1L << (PLSQLVARIABLENAME - 514)) | (1L << (PLSQLIDENTIFIER - 514)) | (1L << (EscapeStringConstant - 514)))) != 0)) {
				{
				setState(9544);
				expr_list();
				}
			}

			setState(9547);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implicit_rowContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Implicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicit_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImplicit_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImplicit_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImplicit_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implicit_rowContext implicit_row() throws RecognitionException {
		Implicit_rowContext _localctx = new Implicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_implicit_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9549);
			match(OPEN_PAREN);
			setState(9550);
			expr_list();
			setState(9551);
			match(COMMA);
			setState(9552);
			a_expr();
			setState(9553);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_typeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSub_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSub_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSub_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sub_typeContext sub_type() throws RecognitionException {
		Sub_typeContext _localctx = new Sub_typeContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_sub_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9555);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_opContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public MathopContext mathop() {
			return getRuleContext(MathopContext.class,0);
		}
		public All_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAll_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAll_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAll_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_opContext all_op() throws RecognitionException {
		All_opContext _localctx = new All_opContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_all_op);
		try {
			setState(9559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9557);
				match(Operator);
				}
				break;
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9558);
				mathop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathopContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public MathopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMathop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMathop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMathop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathopContext mathop() throws RecognitionException {
		MathopContext _localctx = new MathopContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_mathop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9561);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << EQUAL) | (1L << PLUS) | (1L << MINUS) | (1L << SLASH) | (1L << CARET) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS) | (1L << PERCENT))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_opContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQual_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQual_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQual_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_opContext qual_op() throws RecognitionException {
		Qual_opContext _localctx = new Qual_opContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_qual_op);
		try {
			setState(9569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9563);
				match(Operator);
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(9564);
				match(OPERATOR);
				setState(9565);
				match(OPEN_PAREN);
				setState(9566);
				any_operator();
				setState(9567);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_all_opContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_all_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_all_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQual_all_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQual_all_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQual_all_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_all_opContext qual_all_op() throws RecognitionException {
		Qual_all_opContext _localctx = new Qual_all_opContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_qual_all_op);
		try {
			setState(9577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9571);
				all_op();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(9572);
				match(OPERATOR);
				setState(9573);
				match(OPEN_PAREN);
				setState(9574);
				any_operator();
				setState(9575);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_OpContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSubquery_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSubquery_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSubquery_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_OpContext subquery_Op() throws RecognitionException {
		Subquery_OpContext _localctx = new Subquery_OpContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_subquery_Op);
		try {
			setState(9591);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9579);
				all_op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9580);
				match(OPERATOR);
				setState(9581);
				match(OPEN_PAREN);
				setState(9582);
				any_operator();
				setState(9583);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9585);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9586);
				match(NOT);
				setState(9587);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9588);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9589);
				match(NOT);
				setState(9590);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		Expr_listContext _localctx = new Expr_listContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_expr_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9593);
			a_expr();
			setState(9598);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,606,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9594);
					match(COMMA);
					setState(9595);
					a_expr();
					}
					} 
				}
				setState(9600);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,606,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_listContext extends ParserRuleContext {
		public List<Func_arg_exprContext> func_arg_expr() {
			return getRuleContexts(Func_arg_exprContext.class);
		}
		public Func_arg_exprContext func_arg_expr(int i) {
			return getRuleContext(Func_arg_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_listContext func_arg_list() throws RecognitionException {
		Func_arg_listContext _localctx = new Func_arg_listContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_func_arg_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9601);
			func_arg_expr();
			setState(9606);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,607,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9602);
					match(COMMA);
					setState(9603);
					func_arg_expr();
					}
					} 
				}
				setState(9608);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,607,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public TerminalNode EQUALS_GREATER() { return getToken(PostgreSQLParser.EQUALS_GREATER, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_exprContext func_arg_expr() throws RecognitionException {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_func_arg_expr);
		int _la;
		try {
			setState(9614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9609);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9610);
				param_name();
				setState(9611);
				_la = _input.LA(1);
				if ( !(_la==COLON_EQUALS || _la==EQUALS_GREATER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9612);
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_listContext type_list() throws RecognitionException {
		Type_listContext _localctx = new Type_listContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9616);
			typename();
			setState(9621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9617);
				match(COMMA);
				setState(9618);
				typename();
				}
				}
				setState(9623);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_exprContext array_expr() throws RecognitionException {
		Array_exprContext _localctx = new Array_exprContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_array_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9624);
			match(OPEN_BRACKET);
			setState(9627);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case LAB:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				setState(9625);
				expr_list();
				}
				break;
			case OPEN_BRACKET:
				{
				setState(9626);
				array_expr_list();
				}
				break;
			case CLOSE_BRACKET:
				break;
			default:
				break;
			}
			setState(9629);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_expr_listContext extends ParserRuleContext {
		public List<Array_exprContext> array_expr() {
			return getRuleContexts(Array_exprContext.class);
		}
		public Array_exprContext array_expr(int i) {
			return getRuleContext(Array_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_expr_listContext array_expr_list() throws RecognitionException {
		Array_expr_listContext _localctx = new Array_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_array_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9631);
			array_expr();
			setState(9636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9632);
				match(COMMA);
				setState(9633);
				array_expr();
				}
				}
				setState(9638);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_listContext extends ParserRuleContext {
		public Extract_argContext extract_arg() {
			return getRuleContext(Extract_argContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExtract_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExtract_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExtract_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_listContext extract_list() throws RecognitionException {
		Extract_listContext _localctx = new Extract_listContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_extract_list);
		try {
			setState(9644);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case DAY_P:
			case FIRST_P:
			case FORWARD:
			case HOUR_P:
			case INSERT:
			case LAST_P:
			case MINUTE_P:
			case MONTH_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SECOND_P:
			case SET:
			case TYPE_P:
			case YEAR_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9639);
				extract_arg();
				setState(9640);
				match(FROM);
				setState(9641);
				a_expr();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_argContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Extract_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExtract_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExtract_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExtract_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_argContext extract_arg() throws RecognitionException {
		Extract_argContext _localctx = new Extract_argContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_extract_arg);
		try {
			setState(9654);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9646);
				identifier();
				}
				break;
			case YEAR_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(9647);
				match(YEAR_P);
				}
				break;
			case MONTH_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(9648);
				match(MONTH_P);
				}
				break;
			case DAY_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(9649);
				match(DAY_P);
				}
				break;
			case HOUR_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(9650);
				match(HOUR_P);
				}
				break;
			case MINUTE_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(9651);
				match(MINUTE_P);
				}
				break;
			case SECOND_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(9652);
				match(SECOND_P);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 8);
				{
				setState(9653);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unicode_normal_formContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public Unicode_normal_formContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode_normal_form; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnicode_normal_form(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnicode_normal_form(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnicode_normal_form(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unicode_normal_formContext unicode_normal_form() throws RecognitionException {
		Unicode_normal_formContext _localctx = new Unicode_normal_formContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_unicode_normal_form);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9656);
			_la = _input.LA(1);
			if ( !(((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (NFC - 490)) | (1L << (NFD - 490)) | (1L << (NFKC - 490)) | (1L << (NFKD - 490)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Overlay_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOverlay_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOverlay_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOverlay_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_listContext overlay_list() throws RecognitionException {
		Overlay_listContext _localctx = new Overlay_listContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_overlay_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9658);
			a_expr();
			setState(9659);
			match(PLACING);
			setState(9660);
			a_expr();
			setState(9661);
			match(FROM);
			setState(9662);
			a_expr();
			setState(9665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(9663);
				match(FOR);
				setState(9664);
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_listContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPosition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPosition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPosition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_listContext position_list() throws RecognitionException {
		Position_listContext _localctx = new Position_listContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_position_list);
		try {
			setState(9672);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case LAB:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9667);
				b_expr(0);
				setState(9668);
				match(IN_P);
				setState(9669);
				b_expr(0);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSubstr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSubstr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSubstr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_listContext substr_list() throws RecognitionException {
		Substr_listContext _localctx = new Substr_listContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_substr_list);
		try {
			setState(9702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9674);
				a_expr();
				setState(9675);
				match(FROM);
				setState(9676);
				a_expr();
				setState(9677);
				match(FOR);
				setState(9678);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9680);
				a_expr();
				setState(9681);
				match(FOR);
				setState(9682);
				a_expr();
				setState(9683);
				match(FROM);
				setState(9684);
				a_expr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9686);
				a_expr();
				setState(9687);
				match(FROM);
				setState(9688);
				a_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9690);
				a_expr();
				setState(9691);
				match(FOR);
				setState(9692);
				a_expr();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9694);
				a_expr();
				setState(9695);
				match(SIMILAR);
				setState(9696);
				a_expr();
				setState(9697);
				match(ESCAPE);
				setState(9698);
				a_expr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9700);
				expr_list();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTrim_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTrim_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTrim_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_listContext trim_list() throws RecognitionException {
		Trim_listContext _localctx = new Trim_listContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_trim_list);
		try {
			setState(9711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9704);
				a_expr();
				setState(9705);
				match(FROM);
				setState(9706);
				expr_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9708);
				match(FROM);
				setState(9709);
				expr_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9710);
				expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_exprContext extends ParserRuleContext {
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
	 
		public In_exprContext() { }
		public void copyFrom(In_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class In_expr_listContext extends In_exprContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public In_expr_listContext(In_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIn_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIn_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIn_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class In_expr_selectContext extends In_exprContext {
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public In_expr_selectContext(In_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIn_expr_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIn_expr_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIn_expr_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_in_expr);
		try {
			setState(9718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9713);
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new In_expr_listContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9714);
				match(OPEN_PAREN);
				setState(9715);
				expr_list();
				setState(9716);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public Case_argContext case_arg() {
			return getRuleContext(Case_argContext.class,0);
		}
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_case_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9720);
			match(CASE);
			setState(9721);
			case_arg();
			setState(9722);
			when_clause_list();
			setState(9723);
			case_default();
			setState(9724);
			match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clause_listContext extends ParserRuleContext {
		public List<When_clauseContext> when_clause() {
			return getRuleContexts(When_clauseContext.class);
		}
		public When_clauseContext when_clause(int i) {
			return getRuleContext(When_clauseContext.class,i);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhen_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhen_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhen_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_when_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9727); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(9726);
				when_clause();
				}
				}
				setState(9729); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhen_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhen_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhen_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9731);
			match(WHEN);
			setState(9732);
			a_expr();
			setState(9733);
			match(THEN);
			setState(9734);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_defaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_case_default);
		try {
			setState(9739);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9736);
				match(ELSE);
				setState(9737);
				a_expr();
				}
				break;
			case END_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_argContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_argContext case_arg() throws RecognitionException {
		Case_argContext _localctx = new Case_argContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_case_arg);
		try {
			setState(9743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case LAB:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9741);
				a_expr();
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_columnref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9745);
			colid();
			setState(9747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				{
				setState(9746);
				indirection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_elContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public List<Opt_slice_boundContext> opt_slice_bound() {
			return getRuleContexts(Opt_slice_boundContext.class);
		}
		public Opt_slice_boundContext opt_slice_bound(int i) {
			return getRuleContext(Opt_slice_boundContext.class,i);
		}
		public TerminalNode COLON() { return getToken(PostgreSQLParser.COLON, 0); }
		public Indirection_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndirection_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndirection_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndirection_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indirection_elContext indirection_el() throws RecognitionException {
		Indirection_elContext _localctx = new Indirection_elContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_indirection_el);
		try {
			setState(9764);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9749);
				match(DOT);
				setState(9752);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASYMMETRIC:
				case BOTH:
				case CASE:
				case CAST:
				case CHECK:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DEFERRABLE:
				case DESC:
				case DISTINCT:
				case DO:
				case ELSE:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FOREIGN:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case IN_P:
				case INITIALLY:
				case INTERSECT:
				case LATERAL_P:
				case LEADING:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ONLY:
				case OR:
				case ORDER:
				case PLACING:
				case PRIMARY:
				case REFERENCES:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case SOME:
				case SYMMETRIC:
				case TABLE:
				case THEN:
				case TO:
				case TRAILING:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case USING:
				case VARIADIC:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case CATALOG_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(9750);
					attr_name();
					}
					break;
				case STAR:
					{
					setState(9751);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OPEN_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9754);
				match(OPEN_BRACKET);
				setState(9760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
				case 1:
					{
					setState(9755);
					a_expr();
					}
					break;
				case 2:
					{
					setState(9756);
					opt_slice_bound();
					setState(9757);
					match(COLON);
					setState(9758);
					opt_slice_bound();
					}
					break;
				}
				setState(9762);
				match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_slice_boundContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_slice_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_slice_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_slice_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_slice_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_slice_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_slice_boundContext opt_slice_bound() throws RecognitionException {
		Opt_slice_boundContext _localctx = new Opt_slice_boundContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_opt_slice_bound);
		try {
			setState(9768);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case LAB:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9766);
				a_expr();
				}
				break;
			case CLOSE_BRACKET:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public List<Indirection_elContext> indirection_el() {
			return getRuleContexts(Indirection_elContext.class);
		}
		public Indirection_elContext indirection_el(int i) {
			return getRuleContext(Indirection_elContext.class,i);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		IndirectionContext _localctx = new IndirectionContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_indirection);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9771); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(9770);
					indirection_el();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9773); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,627,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_indirectionContext extends ParserRuleContext {
		public List<Indirection_elContext> indirection_el() {
			return getRuleContexts(Indirection_elContext.class);
		}
		public Indirection_elContext indirection_el(int i) {
			return getRuleContext(Indirection_elContext.class,i);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_indirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_indirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_indirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_indirectionContext opt_indirection() throws RecognitionException {
		Opt_indirectionContext _localctx = new Opt_indirectionContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_opt_indirection);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9778);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,628,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9775);
					indirection_el();
					}
					} 
				}
				setState(9780);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,628,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_target_listContext extends ParserRuleContext {
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Opt_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_target_listContext opt_target_list() throws RecognitionException {
		Opt_target_listContext _localctx = new Opt_target_listContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_opt_target_list);
		try {
			setState(9783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9781);
				target_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_listContext extends ParserRuleContext {
		public List<Target_elContext> target_el() {
			return getRuleContexts(Target_elContext.class);
		}
		public Target_elContext target_el(int i) {
			return getRuleContext(Target_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_listContext target_list() throws RecognitionException {
		Target_listContext _localctx = new Target_listContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_target_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9785);
			target_el();
			setState(9790);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,630,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9786);
					match(COMMA);
					setState(9787);
					target_el();
					}
					} 
				}
				setState(9792);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,630,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_elContext extends ParserRuleContext {
		public Target_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el; }
	 
		public Target_elContext() { }
		public void copyFrom(Target_elContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Target_labelContext extends Target_elContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Target_labelContext(Target_elContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_label(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Target_starContext extends Target_elContext {
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public Target_starContext(Target_elContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_star(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_star(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_star(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_elContext target_el() throws RecognitionException {
		Target_elContext _localctx = new Target_elContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_target_el);
		try {
			setState(9801);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case LAB:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				_localctx = new Target_labelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9793);
				a_expr();
				setState(9798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					setState(9794);
					match(AS);
					setState(9795);
					collabel();
					}
					break;
				case 2:
					{
					setState(9796);
					identifier();
					}
					break;
				case 3:
					{
					}
					break;
				}
				}
				break;
			case STAR:
				_localctx = new Target_starContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9800);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_name_listContext extends ParserRuleContext {
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQualified_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQualified_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQualified_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_name_listContext qualified_name_list() throws RecognitionException {
		Qualified_name_listContext _localctx = new Qualified_name_listContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_qualified_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9803);
			qualified_name();
			setState(9808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9804);
				match(COMMA);
				setState(9805);
				qualified_name();
				}
				}
				setState(9810);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQualified_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 1350, RULE_qualified_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9811);
			colid();
			setState(9813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET || _la==DOT) {
				{
				setState(9812);
				indirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_listContext extends ParserRuleContext {
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		Name_listContext _localctx = new Name_listContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9815);
			name();
			setState(9820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9816);
				match(COMMA);
				setState(9817);
				name();
				}
				}
				setState(9822);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9823);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attr_nameContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAttr_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAttr_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAttr_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attr_nameContext attr_name() throws RecognitionException {
		Attr_nameContext _localctx = new Attr_nameContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_attr_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9825);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFile_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFile_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFile_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 1358, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9827);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 1360, RULE_func_name);
		try {
			setState(9833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9829);
				type_function_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9830);
				colid();
				setState(9831);
				indirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public BconstContext bconst() {
			return getRuleContext(BconstContext.class,0);
		}
		public XconstContext xconst() {
			return getRuleContext(XconstContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConsttypenameContext consttypename() {
			return getRuleContext(ConsttypenameContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public AexprconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAexprconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAexprconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAexprconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprconstContext aexprconst() throws RecognitionException {
		AexprconstContext _localctx = new AexprconstContext(_ctx, getState());
		enterRule(_localctx, 1362, RULE_aexprconst);
		try {
			setState(9867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9835);
				iconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9836);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9837);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9838);
				bconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9839);
				xconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9840);
				func_name();
				setState(9848);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(9841);
					sconst();
					}
					break;
				case OPEN_PAREN:
					{
					setState(9842);
					match(OPEN_PAREN);
					setState(9843);
					func_arg_list();
					setState(9844);
					opt_sort_clause();
					setState(9845);
					match(CLOSE_PAREN);
					setState(9846);
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9850);
				consttypename();
				setState(9851);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9853);
				constinterval();
				setState(9862);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(9854);
					sconst();
					setState(9855);
					opt_interval();
					}
					break;
				case OPEN_PAREN:
					{
					setState(9857);
					match(OPEN_PAREN);
					setState(9858);
					iconst();
					setState(9859);
					match(CLOSE_PAREN);
					setState(9860);
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9864);
				match(TRUE_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9865);
				match(FALSE_P);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9866);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XconstContext extends ParserRuleContext {
		public TerminalNode HexadecimalStringConstant() { return getToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
		public XconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XconstContext xconst() throws RecognitionException {
		XconstContext _localctx = new XconstContext(_ctx, getState());
		enterRule(_localctx, 1364, RULE_xconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9869);
			match(HexadecimalStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BconstContext extends ParserRuleContext {
		public TerminalNode BinaryStringConstant() { return getToken(PostgreSQLParser.BinaryStringConstant, 0); }
		public BconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BconstContext bconst() throws RecognitionException {
		BconstContext _localctx = new BconstContext(_ctx, getState());
		enterRule(_localctx, 1366, RULE_bconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9871);
			match(BinaryStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FconstContext extends ParserRuleContext {
		public TerminalNode Numeric() { return getToken(PostgreSQLParser.Numeric, 0); }
		public FconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FconstContext fconst() throws RecognitionException {
		FconstContext _localctx = new FconstContext(_ctx, getState());
		enterRule(_localctx, 1368, RULE_fconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9873);
			match(Numeric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IconstContext extends ParserRuleContext {
		public TerminalNode Integral() { return getToken(PostgreSQLParser.Integral, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IconstContext iconst() throws RecognitionException {
		IconstContext _localctx = new IconstContext(_ctx, getState());
		enterRule(_localctx, 1370, RULE_iconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9875);
			match(Integral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SconstContext extends ParserRuleContext {
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Opt_uescapeContext opt_uescape() {
			return getRuleContext(Opt_uescapeContext.class,0);
		}
		public SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SconstContext sconst() throws RecognitionException {
		SconstContext _localctx = new SconstContext(_ctx, getState());
		enterRule(_localctx, 1372, RULE_sconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9877);
			anysconst();
			setState(9878);
			opt_uescape();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnysconstContext extends ParserRuleContext {
		public TerminalNode StringConstant() { return getToken(PostgreSQLParser.StringConstant, 0); }
		public TerminalNode UnicodeEscapeStringConstant() { return getToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
		public TerminalNode BeginDollarStringConstant() { return getToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
		public TerminalNode EndDollarStringConstant() { return getToken(PostgreSQLParser.EndDollarStringConstant, 0); }
		public List<TerminalNode> DollarText() { return getTokens(PostgreSQLParser.DollarText); }
		public TerminalNode DollarText(int i) {
			return getToken(PostgreSQLParser.DollarText, i);
		}
		public TerminalNode EscapeStringConstant() { return getToken(PostgreSQLParser.EscapeStringConstant, 0); }
		public AnysconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anysconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnysconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnysconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnysconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnysconstContext anysconst() throws RecognitionException {
		AnysconstContext _localctx = new AnysconstContext(_ctx, getState());
		enterRule(_localctx, 1374, RULE_anysconst);
		int _la;
		try {
			setState(9891);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9880);
				match(StringConstant);
				}
				break;
			case UnicodeEscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(9881);
				match(UnicodeEscapeStringConstant);
				}
				break;
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(9882);
				match(BeginDollarStringConstant);
				setState(9886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DollarText) {
					{
					{
					setState(9883);
					match(DollarText);
					}
					}
					setState(9888);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9889);
				match(EndDollarStringConstant);
				}
				break;
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(9890);
				match(EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uescapeContext extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Opt_uescapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_uescape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_uescape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_uescape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_uescape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uescapeContext opt_uescape() throws RecognitionException {
		Opt_uescapeContext _localctx = new Opt_uescapeContext(_ctx, getState());
		enterRule(_localctx, 1376, RULE_opt_uescape);
		try {
			setState(9896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9893);
				match(UESCAPE);
				setState(9894);
				anysconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignediconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signediconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSignediconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSignediconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSignediconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignediconstContext signediconst() throws RecognitionException {
		SignediconstContext _localctx = new SignediconstContext(_ctx, getState());
		enterRule(_localctx, 1378, RULE_signediconst);
		try {
			setState(9903);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(9898);
				iconst();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9899);
				match(PLUS);
				setState(9900);
				iconst();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9901);
				match(MINUS);
				setState(9902);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleidContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public RoleidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoleid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoleid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoleid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleidContext roleid() throws RecognitionException {
		RoleidContext _localctx = new RoleidContext(_ctx, getState());
		enterRule(_localctx, 1380, RULE_roleid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9905);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RolespecContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public RolespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rolespec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRolespec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRolespec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRolespec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RolespecContext rolespec() throws RecognitionException {
		RolespecContext _localctx = new RolespecContext(_ctx, getState());
		enterRule(_localctx, 1382, RULE_rolespec);
		try {
			setState(9910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9907);
				nonreservedword();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(9908);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(9909);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_listContext extends ParserRuleContext {
		public List<RolespecContext> rolespec() {
			return getRuleContexts(RolespecContext.class);
		}
		public RolespecContext rolespec(int i) {
			return getRuleContext(RolespecContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Role_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRole_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRole_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRole_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_listContext role_list() throws RecognitionException {
		Role_listContext _localctx = new Role_listContext(_ctx, getState());
		enterRule(_localctx, 1384, RULE_role_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9912);
			rolespec();
			setState(9917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9913);
				match(COMMA);
				setState(9914);
				rolespec();
				}
				}
				setState(9919);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColidContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public ColidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColidContext colid() throws RecognitionException {
		ColidContext _localctx = new ColidContext(_ctx, getState());
		enterRule(_localctx, 1386, RULE_colid);
		try {
			setState(9924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9920);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9921);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9922);
				col_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9923);
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Type_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_nameContext type_function_name() throws RecognitionException {
		Type_function_nameContext _localctx = new Type_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1388, RULE_type_function_name);
		try {
			setState(9930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9926);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9927);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9928);
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9929);
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonreservedwordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public NonreservedwordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNonreservedword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNonreservedword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNonreservedword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonreservedwordContext nonreservedword() throws RecognitionException {
		NonreservedwordContext _localctx = new NonreservedwordContext(_ctx, getState());
		enterRule(_localctx, 1390, RULE_nonreservedword);
		try {
			setState(9936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9932);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9933);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9934);
				col_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9935);
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public CollabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCollabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCollabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCollabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollabelContext collabel() throws RecognitionException {
		CollabelContext _localctx = new CollabelContext(_ctx, getState());
		enterRule(_localctx, 1392, RULE_collabel);
		try {
			setState(9944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9938);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9939);
				plsql_unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9940);
				unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9941);
				col_name_keyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9942);
				type_func_name_keyword();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9943);
				reserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(PostgreSQLParser.Identifier, 0); }
		public Opt_uescapeContext opt_uescape() {
			return getRuleContext(Opt_uescapeContext.class,0);
		}
		public TerminalNode QuotedIdentifier() { return getToken(PostgreSQLParser.QuotedIdentifier, 0); }
		public TerminalNode UnicodeQuotedIdentifier() { return getToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
		public PlsqlvariablenameContext plsqlvariablename() {
			return getRuleContext(PlsqlvariablenameContext.class,0);
		}
		public PlsqlidentifierContext plsqlidentifier() {
			return getRuleContext(PlsqlidentifierContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1394, RULE_identifier);
		try {
			setState(9953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(9946);
				match(Identifier);
				setState(9947);
				opt_uescape();
				}
				break;
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(9948);
				match(QuotedIdentifier);
				}
				break;
			case UnicodeQuotedIdentifier:
				enterOuterAlt(_localctx, 3);
				{
				setState(9949);
				match(UnicodeQuotedIdentifier);
				}
				break;
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(9950);
				plsqlvariablename();
				}
				break;
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 5);
				{
				setState(9951);
				plsqlidentifier();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
				enterOuterAlt(_localctx, 6);
				{
				setState(9952);
				plsql_unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlidentifierContext extends ParserRuleContext {
		public TerminalNode PLSQLIDENTIFIER() { return getToken(PostgreSQLParser.PLSQLIDENTIFIER, 0); }
		public PlsqlidentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlidentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlidentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlidentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlidentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlidentifierContext plsqlidentifier() throws RecognitionException {
		PlsqlidentifierContext _localctx = new PlsqlidentifierContext(_ctx, getState());
		enterRule(_localctx, 1396, RULE_plsqlidentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9955);
			match(PLSQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode CATALOG_P() { return getToken(PostgreSQLParser.CATALOG_P, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public TerminalNode SQL_P() { return getToken(PostgreSQLParser.SQL_P, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(PostgreSQLParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1398, RULE_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9957);
			_la = _input.LA(1);
			if ( !(((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (OVER - 139)) | (1L << (ABORT_P - 139)) | (1L << (ABSOLUTE_P - 139)) | (1L << (ACCESS - 139)) | (1L << (ACTION - 139)) | (1L << (ADD_P - 139)) | (1L << (ADMIN - 139)) | (1L << (AFTER - 139)) | (1L << (AGGREGATE - 139)) | (1L << (ALSO - 139)) | (1L << (ALTER - 139)) | (1L << (ALWAYS - 139)) | (1L << (ASSERTION - 139)) | (1L << (ASSIGNMENT - 139)) | (1L << (AT - 139)) | (1L << (ATTRIBUTE - 139)) | (1L << (BACKWARD - 139)) | (1L << (BEFORE - 139)) | (1L << (BEGIN_P - 139)) | (1L << (BY - 139)) | (1L << (CACHE - 139)) | (1L << (CALLED - 139)) | (1L << (CASCADE - 139)) | (1L << (CASCADED - 139)) | (1L << (CHAIN - 139)) | (1L << (CHARACTERISTICS - 139)) | (1L << (CHECKPOINT - 139)) | (1L << (CLASS - 139)) | (1L << (CLOSE - 139)) | (1L << (CLUSTER - 139)) | (1L << (COMMENT - 139)) | (1L << (COMMENTS - 139)) | (1L << (COMMIT - 139)) | (1L << (COMMITTED - 139)) | (1L << (CONFIGURATION - 139)) | (1L << (CONNECTION - 139)) | (1L << (CONSTRAINTS - 139)) | (1L << (CONTENT_P - 139)) | (1L << (CONTINUE_P - 139)) | (1L << (CONVERSION_P - 139)) | (1L << (COPY - 139)) | (1L << (COST - 139)) | (1L << (CSV - 139)) | (1L << (CURSOR - 139)) | (1L << (CYCLE - 139)) | (1L << (DATA_P - 139)) | (1L << (DATABASE - 139)) | (1L << (DAY_P - 139)) | (1L << (DEALLOCATE - 139)) | (1L << (DECLARE - 139)) | (1L << (DEFAULTS - 139)) | (1L << (DEFERRED - 139)) | (1L << (DEFINER - 139)) | (1L << (DELETE_P - 139)) | (1L << (DELIMITER - 139)) | (1L << (DELIMITERS - 139)) | (1L << (DICTIONARY - 139)) | (1L << (DISABLE_P - 139)) | (1L << (DISCARD - 139)))) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & ((1L << (DOCUMENT_P - 203)) | (1L << (DOMAIN_P - 203)) | (1L << (DOUBLE_P - 203)) | (1L << (DROP - 203)) | (1L << (EACH - 203)) | (1L << (ENABLE_P - 203)) | (1L << (ENCODING - 203)) | (1L << (ENCRYPTED - 203)) | (1L << (ENUM_P - 203)) | (1L << (ESCAPE - 203)) | (1L << (EVENT - 203)) | (1L << (EXCLUDE - 203)) | (1L << (EXCLUDING - 203)) | (1L << (EXCLUSIVE - 203)) | (1L << (EXECUTE - 203)) | (1L << (EXPLAIN - 203)) | (1L << (EXTENSION - 203)) | (1L << (EXTERNAL - 203)) | (1L << (FAMILY - 203)) | (1L << (FIRST_P - 203)) | (1L << (FOLLOWING - 203)) | (1L << (FORCE - 203)) | (1L << (FORWARD - 203)) | (1L << (FUNCTION - 203)) | (1L << (FUNCTIONS - 203)) | (1L << (GLOBAL - 203)) | (1L << (GRANTED - 203)) | (1L << (HANDLER - 203)) | (1L << (HEADER_P - 203)) | (1L << (HOLD - 203)) | (1L << (HOUR_P - 203)) | (1L << (IDENTITY_P - 203)) | (1L << (IF_P - 203)) | (1L << (IMMEDIATE - 203)) | (1L << (IMMUTABLE - 203)) | (1L << (IMPLICIT_P - 203)) | (1L << (INCLUDING - 203)) | (1L << (INCREMENT - 203)) | (1L << (INDEX - 203)) | (1L << (INDEXES - 203)) | (1L << (INHERIT - 203)) | (1L << (INHERITS - 203)) | (1L << (INLINE_P - 203)) | (1L << (INSENSITIVE - 203)) | (1L << (INSERT - 203)) | (1L << (INSTEAD - 203)) | (1L << (INVOKER - 203)) | (1L << (ISOLATION - 203)) | (1L << (KEY - 203)) | (1L << (LABEL - 203)) | (1L << (LANGUAGE - 203)) | (1L << (LARGE_P - 203)) | (1L << (LAST_P - 203)) | (1L << (LEAKPROOF - 203)) | (1L << (LEVEL - 203)) | (1L << (LISTEN - 203)) | (1L << (LOAD - 203)) | (1L << (LOCAL - 203)) | (1L << (LOCATION - 203)) | (1L << (LOCK_P - 203)) | (1L << (MAPPING - 203)) | (1L << (MATCH - 203)) | (1L << (MATERIALIZED - 203)) | (1L << (MAXVALUE - 203)))) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & ((1L << (MINUTE_P - 267)) | (1L << (MINVALUE - 267)) | (1L << (MODE - 267)) | (1L << (MONTH_P - 267)) | (1L << (MOVE - 267)) | (1L << (NAME_P - 267)) | (1L << (NAMES - 267)) | (1L << (NEXT - 267)) | (1L << (NO - 267)) | (1L << (NOTHING - 267)) | (1L << (NOTIFY - 267)) | (1L << (NOWAIT - 267)) | (1L << (NULLS_P - 267)) | (1L << (OBJECT_P - 267)) | (1L << (OF - 267)) | (1L << (OFF - 267)) | (1L << (OIDS - 267)) | (1L << (OPERATOR - 267)) | (1L << (OPTION - 267)) | (1L << (OPTIONS - 267)) | (1L << (OWNED - 267)) | (1L << (OWNER - 267)) | (1L << (PARSER - 267)) | (1L << (PARTIAL - 267)) | (1L << (PARTITION - 267)) | (1L << (PASSING - 267)) | (1L << (PASSWORD - 267)) | (1L << (PLANS - 267)) | (1L << (PRECEDING - 267)) | (1L << (PREPARE - 267)) | (1L << (PREPARED - 267)) | (1L << (PRESERVE - 267)) | (1L << (PRIOR - 267)) | (1L << (PRIVILEGES - 267)) | (1L << (PROCEDURAL - 267)) | (1L << (PROCEDURE - 267)) | (1L << (PROGRAM - 267)) | (1L << (QUOTE - 267)) | (1L << (RANGE - 267)) | (1L << (READ - 267)) | (1L << (REASSIGN - 267)) | (1L << (RECHECK - 267)) | (1L << (RECURSIVE - 267)) | (1L << (REF - 267)) | (1L << (REFRESH - 267)) | (1L << (REINDEX - 267)) | (1L << (RELATIVE_P - 267)) | (1L << (RELEASE - 267)) | (1L << (RENAME - 267)) | (1L << (REPEATABLE - 267)) | (1L << (REPLACE - 267)) | (1L << (REPLICA - 267)) | (1L << (RESET - 267)) | (1L << (RESTART - 267)) | (1L << (RESTRICT - 267)) | (1L << (RETURNS - 267)) | (1L << (REVOKE - 267)) | (1L << (ROLE - 267)) | (1L << (ROLLBACK - 267)) | (1L << (ROWS - 267)) | (1L << (RULE - 267)) | (1L << (SAVEPOINT - 267)) | (1L << (SCHEMA - 267)) | (1L << (SCROLL - 267)))) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (SEARCH - 331)) | (1L << (SECOND_P - 331)) | (1L << (SECURITY - 331)) | (1L << (SEQUENCE - 331)) | (1L << (SEQUENCES - 331)) | (1L << (SERIALIZABLE - 331)) | (1L << (SERVER - 331)) | (1L << (SESSION - 331)) | (1L << (SET - 331)) | (1L << (SHARE - 331)) | (1L << (SHOW - 331)) | (1L << (SIMPLE - 331)) | (1L << (SNAPSHOT - 331)) | (1L << (STABLE - 331)) | (1L << (STANDALONE_P - 331)) | (1L << (START - 331)) | (1L << (STATEMENT - 331)) | (1L << (STATISTICS - 331)) | (1L << (STDIN - 331)) | (1L << (STDOUT - 331)) | (1L << (STORAGE - 331)) | (1L << (STRICT_P - 331)) | (1L << (STRIP_P - 331)) | (1L << (SYSID - 331)) | (1L << (SYSTEM_P - 331)) | (1L << (TABLES - 331)) | (1L << (TABLESPACE - 331)) | (1L << (TEMP - 331)) | (1L << (TEMPLATE - 331)) | (1L << (TEMPORARY - 331)) | (1L << (TEXT_P - 331)) | (1L << (TRANSACTION - 331)) | (1L << (TRIGGER - 331)) | (1L << (TRUNCATE - 331)) | (1L << (TRUSTED - 331)) | (1L << (TYPE_P - 331)) | (1L << (TYPES_P - 331)) | (1L << (UNBOUNDED - 331)) | (1L << (UNCOMMITTED - 331)) | (1L << (UNENCRYPTED - 331)) | (1L << (UNKNOWN - 331)) | (1L << (UNLISTEN - 331)) | (1L << (UNLOGGED - 331)) | (1L << (UNTIL - 331)) | (1L << (UPDATE - 331)) | (1L << (VACUUM - 331)) | (1L << (VALID - 331)) | (1L << (VALIDATE - 331)) | (1L << (VALIDATOR - 331)) | (1L << (VARYING - 331)) | (1L << (VERSION_P - 331)) | (1L << (VIEW - 331)) | (1L << (VOLATILE - 331)) | (1L << (WHITESPACE_P - 331)) | (1L << (WITHOUT - 331)) | (1L << (WORK - 331)) | (1L << (WRAPPER - 331)) | (1L << (WRITE - 331)) | (1L << (XML_P - 331)) | (1L << (YEAR_P - 331)) | (1L << (YES_P - 331)) | (1L << (ZONE - 331)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (CALL - 439)) | (1L << (CURRENT_P - 439)) | (1L << (CATALOG_P - 439)) | (1L << (ATTACH - 439)) | (1L << (DETACH - 439)) | (1L << (EXPRESSION - 439)) | (1L << (GENERATED - 439)) | (1L << (LOGGED - 439)) | (1L << (STORED - 439)) | (1L << (INCLUDE - 439)) | (1L << (ROUTINE - 439)) | (1L << (TRANSFORM - 439)) | (1L << (IMPORT_P - 439)) | (1L << (POLICY - 439)) | (1L << (METHOD - 439)) | (1L << (REFERENCING - 439)) | (1L << (NEW - 439)) | (1L << (OLD - 439)) | (1L << (VALUE_P - 439)) | (1L << (SUBSCRIPTION - 439)) | (1L << (PUBLICATION - 439)) | (1L << (ROUTINES - 439)) | (1L << (SCHEMAS - 439)) | (1L << (PROCEDURES - 439)) | (1L << (INPUT_P - 439)) | (1L << (SUPPORT - 439)) | (1L << (PARALLEL - 439)) | (1L << (SQL_P - 439)) | (1L << (DEPENDS - 439)) | (1L << (OVERRIDING - 439)) | (1L << (CONFLICT - 439)) | (1L << (SKIP_P - 439)) | (1L << (LOCKED - 439)) | (1L << (TIES - 439)) | (1L << (ROLLUP - 439)) | (1L << (CUBE - 439)) | (1L << (SETS - 439)) | (1L << (ORDINALITY - 439)) | (1L << (COLUMNS - 439)) | (1L << (NORMALIZED - 439)) | (1L << (WITHIN - 439)) | (1L << (FILTER - 439)) | (1L << (GROUPS - 439)) | (1L << (OTHERS - 439)) | (1L << (NFC - 439)) | (1L << (NFD - 439)) | (1L << (NFKC - 439)) | (1L << (NFKD - 439)) | (1L << (UESCAPE - 439)) | (1L << (VIEWS - 439)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Col_name_keywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCol_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCol_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCol_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_name_keywordContext col_name_keyword() throws RecognitionException {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1400, RULE_col_name_keyword);
		try {
			setState(10010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9959);
				match(BETWEEN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9960);
				match(BIGINT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9961);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9962);
				match(BOOLEAN_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9963);
				match(CHAR_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9964);
				character();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9965);
				match(COALESCE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9966);
				match(DEC);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9967);
				match(DECIMAL_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9968);
				match(EXISTS);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9969);
				match(EXTRACT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9970);
				match(FLOAT_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9971);
				match(GREATEST);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9972);
				match(GROUPING);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9973);
				match(INOUT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9974);
				match(INT_P);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9975);
				match(INTEGER);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(9976);
				match(INTERVAL);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(9977);
				match(LEAST);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(9978);
				match(NATIONAL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(9979);
				match(NCHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(9980);
				match(NONE);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(9981);
				match(NORMALIZE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(9982);
				match(NULLIF);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(9983);
				numeric();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(9984);
				match(OUT_P);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(9985);
				match(OVERLAY);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(9986);
				match(POSITION);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(9987);
				match(PRECISION);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(9988);
				match(REAL);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(9989);
				match(ROW);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(9990);
				match(SETOF);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(9991);
				match(SMALLINT);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(9992);
				match(SUBSTRING);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(9993);
				match(TIME);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(9994);
				match(TIMESTAMP);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(9995);
				match(TREAT);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(9996);
				match(TRIM);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(9997);
				match(VALUES);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(9998);
				match(VARCHAR);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(9999);
				match(XMLATTRIBUTES);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(10000);
				match(XMLCONCAT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(10001);
				match(XMLELEMENT);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(10002);
				match(XMLEXISTS);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(10003);
				match(XMLFOREST);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(10004);
				match(XMLNAMESPACES);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(10005);
				match(XMLPARSE);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(10006);
				match(XMLPI);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(10007);
				match(XMLROOT);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(10008);
				match(XMLSERIALIZE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(10009);
				match(XMLTABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_func_name_keywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(PostgreSQLParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_func_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_func_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_func_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_func_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_func_name_keywordContext type_func_name_keyword() throws RecognitionException {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1402, RULE_type_func_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10012);
			_la = _input.LA(1);
			if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (AUTHORIZATION - 121)) | (1L << (BINARY - 121)) | (1L << (COLLATION - 121)) | (1L << (CONCURRENTLY - 121)) | (1L << (CROSS - 121)) | (1L << (CURRENT_SCHEMA - 121)) | (1L << (FREEZE - 121)) | (1L << (FULL - 121)) | (1L << (ILIKE - 121)) | (1L << (INNER_P - 121)) | (1L << (IS - 121)) | (1L << (ISNULL - 121)) | (1L << (JOIN - 121)) | (1L << (LEFT - 121)) | (1L << (LIKE - 121)) | (1L << (NATURAL - 121)) | (1L << (NOTNULL - 121)) | (1L << (OUTER_P - 121)) | (1L << (OVERLAPS - 121)) | (1L << (RIGHT - 121)) | (1L << (SIMILAR - 121)) | (1L << (VERBOSE - 121)))) != 0) || _la==TABLESAMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1404, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10014);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << ANALYSE) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASYMMETRIC) | (1L << BOTH) | (1L << CASE) | (1L << CAST) | (1L << CHECK) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << CREATE) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFERRABLE) | (1L << DESC) | (1L << DISTINCT) | (1L << DO))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ELSE - 64)) | (1L << (EXCEPT - 64)) | (1L << (FALSE_P - 64)) | (1L << (FETCH - 64)) | (1L << (FOR - 64)) | (1L << (FOREIGN - 64)) | (1L << (FROM - 64)) | (1L << (GRANT - 64)) | (1L << (GROUP_P - 64)) | (1L << (HAVING - 64)) | (1L << (IN_P - 64)) | (1L << (INITIALLY - 64)) | (1L << (INTERSECT - 64)) | (1L << (LATERAL_P - 64)) | (1L << (LEADING - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (NOT - 64)) | (1L << (NULL_P - 64)) | (1L << (OFFSET - 64)) | (1L << (ON - 64)) | (1L << (ONLY - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (PLACING - 64)) | (1L << (PRIMARY - 64)) | (1L << (REFERENCES - 64)) | (1L << (RETURNING - 64)) | (1L << (SELECT - 64)) | (1L << (SESSION_USER - 64)) | (1L << (SOME - 64)) | (1L << (SYMMETRIC - 64)) | (1L << (TABLE - 64)) | (1L << (THEN - 64)) | (1L << (TO - 64)) | (1L << (TRAILING - 64)) | (1L << (TRUE_P - 64)) | (1L << (UNION - 64)) | (1L << (UNIQUE - 64)) | (1L << (USER - 64)) | (1L << (USING - 64)) | (1L << (VARIADIC - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (WINDOW - 64)) | (1L << (WITH - 64)))) != 0) || _la==END_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pl_functionContext extends ParserRuleContext {
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public Opt_semiContext opt_semi() {
			return getRuleContext(Opt_semiContext.class,0);
		}
		public Pl_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPl_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPl_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPl_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_functionContext pl_function() throws RecognitionException {
		Pl_functionContext _localctx = new Pl_functionContext(_ctx, getState());
		enterRule(_localctx, 1406, RULE_pl_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10016);
			comp_options();
			setState(10017);
			pl_block();
			setState(10018);
			opt_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_optionsContext extends ParserRuleContext {
		public List<Comp_optionContext> comp_option() {
			return getRuleContexts(Comp_optionContext.class);
		}
		public Comp_optionContext comp_option(int i) {
			return getRuleContext(Comp_optionContext.class,i);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComp_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComp_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComp_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionsContext comp_options() throws RecognitionException {
		Comp_optionsContext _localctx = new Comp_optionsContext(_ctx, getState());
		enterRule(_localctx, 1408, RULE_comp_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Operator) {
				{
				{
				setState(10020);
				comp_option();
				}
				}
				setState(10025);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_optionContext extends ParserRuleContext {
		public SharpContext sharp() {
			return getRuleContext(SharpContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode DUMP() { return getToken(PostgreSQLParser.DUMP, 0); }
		public TerminalNode PRINT_STRICT_PARAMS() { return getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		public Option_valueContext option_value() {
			return getRuleContext(Option_valueContext.class,0);
		}
		public TerminalNode VARIABLE_CONFLICT() { return getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode USE_VARIABLE() { return getToken(PostgreSQLParser.USE_VARIABLE, 0); }
		public TerminalNode USE_COLUMN() { return getToken(PostgreSQLParser.USE_COLUMN, 0); }
		public Comp_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComp_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComp_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComp_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionContext comp_option() throws RecognitionException {
		Comp_optionContext _localctx = new Comp_optionContext(_ctx, getState());
		enterRule(_localctx, 1410, RULE_comp_option);
		try {
			setState(10046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10026);
				sharp();
				setState(10027);
				match(OPTION);
				setState(10028);
				match(DUMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10030);
				sharp();
				setState(10031);
				match(PRINT_STRICT_PARAMS);
				setState(10032);
				option_value();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10034);
				sharp();
				setState(10035);
				match(VARIABLE_CONFLICT);
				setState(10036);
				match(ERROR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10038);
				sharp();
				setState(10039);
				match(VARIABLE_CONFLICT);
				setState(10040);
				match(USE_VARIABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10042);
				sharp();
				setState(10043);
				match(VARIABLE_CONFLICT);
				setState(10044);
				match(USE_COLUMN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SharpContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public SharpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sharp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSharp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSharp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSharp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SharpContext sharp() throws RecognitionException {
		SharpContext _localctx = new SharpContext(_ctx, getState());
		enterRule(_localctx, 1412, RULE_sharp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10048);
			match(Operator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_valueContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Option_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOption_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOption_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOption_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_valueContext option_value() throws RecognitionException {
		Option_valueContext _localctx = new Option_valueContext(_ctx, getState());
		enterRule(_localctx, 1414, RULE_option_value);
		try {
			setState(10054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10050);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10051);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10052);
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10053);
				unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_semiContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_semiContext opt_semi() throws RecognitionException {
		Opt_semiContext _localctx = new Opt_semiContext(_ctx, getState());
		enterRule(_localctx, 1416, RULE_opt_semi);
		try {
			setState(10058);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				setState(10057);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pl_blockContext extends ParserRuleContext {
		public Decl_sectContext decl_sect() {
			return getRuleContext(Decl_sectContext.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Exception_sectContext exception_sect() {
			return getRuleContext(Exception_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Pl_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPl_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPl_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPl_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_blockContext pl_block() throws RecognitionException {
		Pl_blockContext _localctx = new Pl_blockContext(_ctx, getState());
		enterRule(_localctx, 1418, RULE_pl_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10060);
			decl_sect();
			setState(10061);
			match(BEGIN_P);
			setState(10062);
			proc_sect();
			setState(10063);
			exception_sect();
			setState(10064);
			match(END_P);
			setState(10065);
			opt_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_sectContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public Decl_startContext decl_start() {
			return getRuleContext(Decl_startContext.class,0);
		}
		public Decl_stmtsContext decl_stmts() {
			return getRuleContext(Decl_stmtsContext.class,0);
		}
		public Decl_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_sectContext decl_sect() throws RecognitionException {
		Decl_sectContext _localctx = new Decl_sectContext(_ctx, getState());
		enterRule(_localctx, 1420, RULE_decl_sect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10067);
			opt_block_label();
			setState(10072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(10068);
				decl_start();
				setState(10070);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
				case 1:
					{
					setState(10069);
					decl_stmts();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_startContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Decl_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_startContext decl_start() throws RecognitionException {
		Decl_startContext _localctx = new Decl_startContext(_ctx, getState());
		enterRule(_localctx, 1422, RULE_decl_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10074);
			match(DECLARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_stmtsContext extends ParserRuleContext {
		public List<Decl_stmtContext> decl_stmt() {
			return getRuleContexts(Decl_stmtContext.class);
		}
		public Decl_stmtContext decl_stmt(int i) {
			return getRuleContext(Decl_stmtContext.class,i);
		}
		public Decl_stmtsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_stmts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_stmts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_stmts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtsContext decl_stmts() throws RecognitionException {
		Decl_stmtsContext _localctx = new Decl_stmtsContext(_ctx, getState());
		enterRule(_localctx, 1424, RULE_decl_stmts);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10077); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(10076);
					decl_stmt();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10079); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,658,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declContext extends ParserRuleContext {
		public TerminalNode LESS_LESS() { return getToken(PostgreSQLParser.LESS_LESS, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(PostgreSQLParser.GREATER_GREATER, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLabel_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLabel_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLabel_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declContext label_decl() throws RecognitionException {
		Label_declContext _localctx = new Label_declContext(_ctx, getState());
		enterRule(_localctx, 1426, RULE_label_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10081);
			match(LESS_LESS);
			setState(10082);
			any_identifier();
			setState(10083);
			match(GREATER_GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_stmtContext extends ParserRuleContext {
		public Decl_statementContext decl_statement() {
			return getRuleContext(Decl_statementContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Decl_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtContext decl_stmt() throws RecognitionException {
		Decl_stmtContext _localctx = new Decl_stmtContext(_ctx, getState());
		enterRule(_localctx, 1428, RULE_decl_stmt);
		try {
			setState(10088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10085);
				decl_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10086);
				match(DECLARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10087);
				label_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_statementContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode ALIAS() { return getToken(PostgreSQLParser.ALIAS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Decl_aliasitemContext decl_aliasitem() {
			return getRuleContext(Decl_aliasitemContext.class,0);
		}
		public Decl_constContext decl_const() {
			return getRuleContext(Decl_constContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_collateContext decl_collate() {
			return getRuleContext(Decl_collateContext.class,0);
		}
		public Decl_notnullContext decl_notnull() {
			return getRuleContext(Decl_notnullContext.class,0);
		}
		public Decl_defvalContext decl_defval() {
			return getRuleContext(Decl_defvalContext.class,0);
		}
		public Opt_scrollableContext opt_scrollable() {
			return getRuleContext(Opt_scrollableContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public Decl_cursor_argsContext decl_cursor_args() {
			return getRuleContext(Decl_cursor_argsContext.class,0);
		}
		public Decl_is_forContext decl_is_for() {
			return getRuleContext(Decl_is_forContext.class,0);
		}
		public Decl_cursor_queryContext decl_cursor_query() {
			return getRuleContext(Decl_cursor_queryContext.class,0);
		}
		public Decl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_statementContext decl_statement() throws RecognitionException {
		Decl_statementContext _localctx = new Decl_statementContext(_ctx, getState());
		enterRule(_localctx, 1430, RULE_decl_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10090);
			decl_varname();
			setState(10106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(10091);
				match(ALIAS);
				setState(10092);
				match(FOR);
				setState(10093);
				decl_aliasitem();
				}
				break;
			case 2:
				{
				setState(10094);
				decl_const();
				setState(10095);
				decl_datatype();
				setState(10096);
				decl_collate();
				setState(10097);
				decl_notnull();
				setState(10098);
				decl_defval();
				}
				break;
			case 3:
				{
				setState(10100);
				opt_scrollable();
				setState(10101);
				match(CURSOR);
				setState(10102);
				decl_cursor_args();
				setState(10103);
				decl_is_for();
				setState(10104);
				decl_cursor_query();
				}
				break;
			}
			setState(10108);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scrollableContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scrollableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scrollable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scrollable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scrollable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scrollable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scrollableContext opt_scrollable() throws RecognitionException {
		Opt_scrollableContext _localctx = new Opt_scrollableContext(_ctx, getState());
		enterRule(_localctx, 1432, RULE_opt_scrollable);
		try {
			setState(10114);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10111);
				match(NO);
				setState(10112);
				match(SCROLL);
				}
				break;
			case SCROLL:
				enterOuterAlt(_localctx, 3);
				{
				setState(10113);
				match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_queryContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Decl_cursor_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_queryContext decl_cursor_query() throws RecognitionException {
		Decl_cursor_queryContext _localctx = new Decl_cursor_queryContext(_ctx, getState());
		enterRule(_localctx, 1434, RULE_decl_cursor_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10116);
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Decl_cursor_arglistContext decl_cursor_arglist() {
			return getRuleContext(Decl_cursor_arglistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Decl_cursor_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argsContext decl_cursor_args() throws RecognitionException {
		Decl_cursor_argsContext _localctx = new Decl_cursor_argsContext(_ctx, getState());
		enterRule(_localctx, 1436, RULE_decl_cursor_args);
		try {
			setState(10123);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10119);
				match(OPEN_PAREN);
				setState(10120);
				decl_cursor_arglist();
				setState(10121);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_arglistContext extends ParserRuleContext {
		public List<Decl_cursor_argContext> decl_cursor_arg() {
			return getRuleContexts(Decl_cursor_argContext.class);
		}
		public Decl_cursor_argContext decl_cursor_arg(int i) {
			return getRuleContext(Decl_cursor_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Decl_cursor_arglistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arglist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_arglist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_arglist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_arglist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_arglistContext decl_cursor_arglist() throws RecognitionException {
		Decl_cursor_arglistContext _localctx = new Decl_cursor_arglistContext(_ctx, getState());
		enterRule(_localctx, 1438, RULE_decl_cursor_arglist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10125);
			decl_cursor_arg();
			setState(10130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10126);
				match(COMMA);
				setState(10127);
				decl_cursor_arg();
				}
				}
				setState(10132);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_argContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_cursor_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argContext decl_cursor_arg() throws RecognitionException {
		Decl_cursor_argContext _localctx = new Decl_cursor_argContext(_ctx, getState());
		enterRule(_localctx, 1440, RULE_decl_cursor_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10133);
			decl_varname();
			setState(10134);
			decl_datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_is_forContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Decl_is_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_is_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_is_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_is_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_is_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_is_forContext decl_is_for() throws RecognitionException {
		Decl_is_forContext _localctx = new Decl_is_forContext(_ctx, getState());
		enterRule(_localctx, 1442, RULE_decl_is_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10136);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_aliasitemContext extends ParserRuleContext {
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Decl_aliasitemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_aliasitem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_aliasitem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_aliasitem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_aliasitem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_aliasitemContext decl_aliasitem() throws RecognitionException {
		Decl_aliasitemContext _localctx = new Decl_aliasitemContext(_ctx, getState());
		enterRule(_localctx, 1444, RULE_decl_aliasitem);
		try {
			setState(10140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(10138);
				match(PARAM);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(10139);
				colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_varnameContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Decl_varnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_varname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_varname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_varname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_varname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_varnameContext decl_varname() throws RecognitionException {
		Decl_varnameContext _localctx = new Decl_varnameContext(_ctx, getState());
		enterRule(_localctx, 1446, RULE_decl_varname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10142);
			any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_constContext extends ParserRuleContext {
		public TerminalNode CONSTANT() { return getToken(PostgreSQLParser.CONSTANT, 0); }
		public Decl_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_constContext decl_const() throws RecognitionException {
		Decl_constContext _localctx = new Decl_constContext(_ctx, getState());
		enterRule(_localctx, 1448, RULE_decl_const);
		try {
			setState(10146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10145);
				match(CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_datatypeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Decl_datatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_datatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_datatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_datatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_datatypeContext decl_datatype() throws RecognitionException {
		Decl_datatypeContext _localctx = new Decl_datatypeContext(_ctx, getState());
		enterRule(_localctx, 1450, RULE_decl_datatype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10148);
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Decl_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_collateContext decl_collate() throws RecognitionException {
		Decl_collateContext _localctx = new Decl_collateContext(_ctx, getState());
		enterRule(_localctx, 1452, RULE_decl_collate);
		try {
			setState(10153);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COLLATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10151);
				match(COLLATE);
				setState(10152);
				any_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_notnullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Decl_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_notnullContext decl_notnull() throws RecognitionException {
		Decl_notnullContext _localctx = new Decl_notnullContext(_ctx, getState());
		enterRule(_localctx, 1454, RULE_decl_notnull);
		try {
			setState(10158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10156);
				match(NOT);
				setState(10157);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defvalContext extends ParserRuleContext {
		public Decl_defkeyContext decl_defkey() {
			return getRuleContext(Decl_defkeyContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Decl_defvalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_defval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_defval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_defval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defvalContext decl_defval() throws RecognitionException {
		Decl_defvalContext _localctx = new Decl_defvalContext(_ctx, getState());
		enterRule(_localctx, 1456, RULE_decl_defval);
		try {
			setState(10164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10161);
				decl_defkey();
				setState(10162);
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defkeyContext extends ParserRuleContext {
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Decl_defkeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defkey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_defkey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_defkey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_defkey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defkeyContext decl_defkey() throws RecognitionException {
		Decl_defkeyContext _localctx = new Decl_defkeyContext(_ctx, getState());
		enterRule(_localctx, 1458, RULE_decl_defkey);
		try {
			setState(10168);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				setState(10166);
				assign_operator();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10167);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_operatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public Assign_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAssign_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAssign_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAssign_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_operatorContext assign_operator() throws RecognitionException {
		Assign_operatorContext _localctx = new Assign_operatorContext(_ctx, getState());
		enterRule(_localctx, 1460, RULE_assign_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10170);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUALS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_sectContext extends ParserRuleContext {
		public List<Proc_stmtContext> proc_stmt() {
			return getRuleContexts(Proc_stmtContext.class);
		}
		public Proc_stmtContext proc_stmt(int i) {
			return getRuleContext(Proc_stmtContext.class,i);
		}
		public Proc_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_sectContext proc_sect() throws RecognitionException {
		Proc_sectContext _localctx = new Proc_sectContext(_ctx, getState());
		enterRule(_localctx, 1462, RULE_proc_sect);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10175);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,670,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10172);
					proc_stmt();
					}
					} 
				}
				setState(10177);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,670,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_stmtContext extends ParserRuleContext {
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_returnContext stmt_return() {
			return getRuleContext(Stmt_returnContext.class,0);
		}
		public Stmt_raiseContext stmt_raise() {
			return getRuleContext(Stmt_raiseContext.class,0);
		}
		public Stmt_assignContext stmt_assign() {
			return getRuleContext(Stmt_assignContext.class,0);
		}
		public Stmt_ifContext stmt_if() {
			return getRuleContext(Stmt_ifContext.class,0);
		}
		public Stmt_caseContext stmt_case() {
			return getRuleContext(Stmt_caseContext.class,0);
		}
		public Stmt_loopContext stmt_loop() {
			return getRuleContext(Stmt_loopContext.class,0);
		}
		public Stmt_whileContext stmt_while() {
			return getRuleContext(Stmt_whileContext.class,0);
		}
		public Stmt_forContext stmt_for() {
			return getRuleContext(Stmt_forContext.class,0);
		}
		public Stmt_foreach_aContext stmt_foreach_a() {
			return getRuleContext(Stmt_foreach_aContext.class,0);
		}
		public Stmt_exitContext stmt_exit() {
			return getRuleContext(Stmt_exitContext.class,0);
		}
		public Stmt_assertContext stmt_assert() {
			return getRuleContext(Stmt_assertContext.class,0);
		}
		public Stmt_execsqlContext stmt_execsql() {
			return getRuleContext(Stmt_execsqlContext.class,0);
		}
		public Stmt_dynexecuteContext stmt_dynexecute() {
			return getRuleContext(Stmt_dynexecuteContext.class,0);
		}
		public Stmt_performContext stmt_perform() {
			return getRuleContext(Stmt_performContext.class,0);
		}
		public Stmt_callContext stmt_call() {
			return getRuleContext(Stmt_callContext.class,0);
		}
		public Stmt_getdiagContext stmt_getdiag() {
			return getRuleContext(Stmt_getdiagContext.class,0);
		}
		public Stmt_openContext stmt_open() {
			return getRuleContext(Stmt_openContext.class,0);
		}
		public Stmt_fetchContext stmt_fetch() {
			return getRuleContext(Stmt_fetchContext.class,0);
		}
		public Stmt_moveContext stmt_move() {
			return getRuleContext(Stmt_moveContext.class,0);
		}
		public Stmt_closeContext stmt_close() {
			return getRuleContext(Stmt_closeContext.class,0);
		}
		public Stmt_nullContext stmt_null() {
			return getRuleContext(Stmt_nullContext.class,0);
		}
		public Stmt_commitContext stmt_commit() {
			return getRuleContext(Stmt_commitContext.class,0);
		}
		public Stmt_rollbackContext stmt_rollback() {
			return getRuleContext(Stmt_rollbackContext.class,0);
		}
		public Stmt_setContext stmt_set() {
			return getRuleContext(Stmt_setContext.class,0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmtContext proc_stmt() throws RecognitionException {
		Proc_stmtContext _localctx = new Proc_stmtContext(_ctx, getState());
		enterRule(_localctx, 1464, RULE_proc_stmt);
		try {
			setState(10205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10178);
				pl_block();
				setState(10179);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10181);
				stmt_return();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10182);
				stmt_raise();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10183);
				stmt_assign();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10184);
				stmt_if();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10185);
				stmt_case();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10186);
				stmt_loop();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10187);
				stmt_while();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10188);
				stmt_for();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10189);
				stmt_foreach_a();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10190);
				stmt_exit();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10191);
				stmt_assert();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10192);
				stmt_execsql();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10193);
				stmt_dynexecute();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10194);
				stmt_perform();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10195);
				stmt_call();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10196);
				stmt_getdiag();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10197);
				stmt_open();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10198);
				stmt_fetch();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(10199);
				stmt_move();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(10200);
				stmt_close();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(10201);
				stmt_null();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(10202);
				stmt_commit();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(10203);
				stmt_rollback();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(10204);
				stmt_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_performContext extends ParserRuleContext {
		public TerminalNode PERFORM() { return getToken(PostgreSQLParser.PERFORM, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_performContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_perform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_perform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_perform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_perform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_performContext stmt_perform() throws RecognitionException {
		Stmt_performContext _localctx = new Stmt_performContext(_ctx, getState());
		enterRule(_localctx, 1466, RULE_stmt_perform);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10207);
			match(PERFORM);
			setState(10208);
			expr_until_semi();
			setState(10209);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_callContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_expr_listContext opt_expr_list() {
			return getRuleContext(Opt_expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Stmt_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_callContext stmt_call() throws RecognitionException {
		Stmt_callContext _localctx = new Stmt_callContext(_ctx, getState());
		enterRule(_localctx, 1468, RULE_stmt_call);
		try {
			setState(10225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10211);
				match(CALL);
				setState(10212);
				any_identifier();
				setState(10213);
				match(OPEN_PAREN);
				setState(10214);
				opt_expr_list();
				setState(10215);
				match(CLOSE_PAREN);
				setState(10216);
				match(SEMI);
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10218);
				match(DO);
				setState(10219);
				any_identifier();
				setState(10220);
				match(OPEN_PAREN);
				setState(10221);
				opt_expr_list();
				setState(10222);
				match(CLOSE_PAREN);
				setState(10223);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_expr_listContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_listContext opt_expr_list() throws RecognitionException {
		Opt_expr_listContext _localctx = new Opt_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1470, RULE_opt_expr_list);
		try {
			setState(10229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case LAB:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(10228);
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_assignContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_assign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_assign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assignContext stmt_assign() throws RecognitionException {
		Stmt_assignContext _localctx = new Stmt_assignContext(_ctx, getState());
		enterRule(_localctx, 1472, RULE_stmt_assign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10231);
			assign_var();
			setState(10232);
			assign_operator();
			setState(10233);
			sql_expression();
			setState(10234);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_getdiagContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public Getdiag_area_optContext getdiag_area_opt() {
			return getRuleContext(Getdiag_area_optContext.class,0);
		}
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public Getdiag_listContext getdiag_list() {
			return getRuleContext(Getdiag_listContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_getdiagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_getdiag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_getdiag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_getdiag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_getdiag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_getdiagContext stmt_getdiag() throws RecognitionException {
		Stmt_getdiagContext _localctx = new Stmt_getdiagContext(_ctx, getState());
		enterRule(_localctx, 1474, RULE_stmt_getdiag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10236);
			match(GET);
			setState(10237);
			getdiag_area_opt();
			setState(10238);
			match(DIAGNOSTICS);
			setState(10239);
			getdiag_list();
			setState(10240);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_area_optContext extends ParserRuleContext {
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode STACKED() { return getToken(PostgreSQLParser.STACKED, 0); }
		public Getdiag_area_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_area_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_area_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_area_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_area_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_area_optContext getdiag_area_opt() throws RecognitionException {
		Getdiag_area_optContext _localctx = new Getdiag_area_optContext(_ctx, getState());
		enterRule(_localctx, 1476, RULE_getdiag_area_opt);
		try {
			setState(10245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DIAGNOSTICS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case CURRENT_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(10243);
				match(CURRENT_P);
				}
				break;
			case STACKED:
				enterOuterAlt(_localctx, 3);
				{
				setState(10244);
				match(STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_listContext extends ParserRuleContext {
		public List<Getdiag_list_itemContext> getdiag_list_item() {
			return getRuleContexts(Getdiag_list_itemContext.class);
		}
		public Getdiag_list_itemContext getdiag_list_item(int i) {
			return getRuleContext(Getdiag_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Getdiag_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_listContext getdiag_list() throws RecognitionException {
		Getdiag_listContext _localctx = new Getdiag_listContext(_ctx, getState());
		enterRule(_localctx, 1478, RULE_getdiag_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10247);
			getdiag_list_item();
			setState(10252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10248);
				match(COMMA);
				setState(10249);
				getdiag_list_item();
				}
				}
				setState(10254);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_list_itemContext extends ParserRuleContext {
		public Getdiag_targetContext getdiag_target() {
			return getRuleContext(Getdiag_targetContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Getdiag_itemContext getdiag_item() {
			return getRuleContext(Getdiag_itemContext.class,0);
		}
		public Getdiag_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_list_itemContext getdiag_list_item() throws RecognitionException {
		Getdiag_list_itemContext _localctx = new Getdiag_list_itemContext(_ctx, getState());
		enterRule(_localctx, 1480, RULE_getdiag_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10255);
			getdiag_target();
			setState(10256);
			assign_operator();
			setState(10257);
			getdiag_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Getdiag_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_itemContext getdiag_item() throws RecognitionException {
		Getdiag_itemContext _localctx = new Getdiag_itemContext(_ctx, getState());
		enterRule(_localctx, 1482, RULE_getdiag_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10259);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_targetContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Getdiag_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_targetContext getdiag_target() throws RecognitionException {
		Getdiag_targetContext _localctx = new Getdiag_targetContext(_ctx, getState());
		enterRule(_localctx, 1484, RULE_getdiag_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10261);
			assign_var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_varContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSQLParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		public List<Expr_until_rightbracketContext> expr_until_rightbracket() {
			return getRuleContexts(Expr_until_rightbracketContext.class);
		}
		public Expr_until_rightbracketContext expr_until_rightbracket(int i) {
			return getRuleContext(Expr_until_rightbracketContext.class,i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSQLParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public Assign_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_var; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAssign_var(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAssign_var(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAssign_var(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_varContext assign_var() throws RecognitionException {
		Assign_varContext _localctx = new Assign_varContext(_ctx, getState());
		enterRule(_localctx, 1486, RULE_assign_var);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10265);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(10263);
				any_name();
				}
				break;
			case PARAM:
				{
				setState(10264);
				match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				setState(10267);
				match(OPEN_BRACKET);
				setState(10268);
				expr_until_rightbracket();
				setState(10269);
				match(CLOSE_BRACKET);
				}
				}
				setState(10275);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_ifContext extends ParserRuleContext {
		public List<TerminalNode> IF_P() { return getTokens(PostgreSQLParser.IF_P); }
		public TerminalNode IF_P(int i) {
			return getToken(PostgreSQLParser.IF_P, i);
		}
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elsifsContext stmt_elsifs() {
			return getRuleContext(Stmt_elsifsContext.class,0);
		}
		public Stmt_elseContext stmt_else() {
			return getRuleContext(Stmt_elseContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_ifContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_if; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_if(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_if(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_if(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_ifContext stmt_if() throws RecognitionException {
		Stmt_ifContext _localctx = new Stmt_ifContext(_ctx, getState());
		enterRule(_localctx, 1488, RULE_stmt_if);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10276);
			match(IF_P);
			setState(10277);
			expr_until_then();
			setState(10278);
			match(THEN);
			setState(10279);
			proc_sect();
			setState(10280);
			stmt_elsifs();
			setState(10281);
			stmt_else();
			setState(10282);
			match(END_P);
			setState(10283);
			match(IF_P);
			setState(10284);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_elsifsContext extends ParserRuleContext {
		public List<TerminalNode> ELSIF() { return getTokens(PostgreSQLParser.ELSIF); }
		public TerminalNode ELSIF(int i) {
			return getToken(PostgreSQLParser.ELSIF, i);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(PostgreSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PostgreSQLParser.THEN, i);
		}
		public List<Proc_sectContext> proc_sect() {
			return getRuleContexts(Proc_sectContext.class);
		}
		public Proc_sectContext proc_sect(int i) {
			return getRuleContext(Proc_sectContext.class,i);
		}
		public Stmt_elsifsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_elsifs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_elsifs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_elsifs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_elsifs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elsifsContext stmt_elsifs() throws RecognitionException {
		Stmt_elsifsContext _localctx = new Stmt_elsifsContext(_ctx, getState());
		enterRule(_localctx, 1490, RULE_stmt_elsifs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(10286);
				match(ELSIF);
				setState(10287);
				a_expr();
				setState(10288);
				match(THEN);
				setState(10289);
				proc_sect();
				}
				}
				setState(10295);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elseContext stmt_else() throws RecognitionException {
		Stmt_elseContext _localctx = new Stmt_elseContext(_ctx, getState());
		enterRule(_localctx, 1492, RULE_stmt_else);
		try {
			setState(10299);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10297);
				match(ELSE);
				setState(10298);
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_caseContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(PostgreSQLParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PostgreSQLParser.CASE, i);
		}
		public Opt_expr_until_whenContext opt_expr_until_when() {
			return getRuleContext(Opt_expr_until_whenContext.class,0);
		}
		public Case_when_listContext case_when_list() {
			return getRuleContext(Case_when_listContext.class,0);
		}
		public Opt_case_elseContext opt_case_else() {
			return getRuleContext(Opt_case_elseContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_caseContext stmt_case() throws RecognitionException {
		Stmt_caseContext _localctx = new Stmt_caseContext(_ctx, getState());
		enterRule(_localctx, 1494, RULE_stmt_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10301);
			match(CASE);
			setState(10302);
			opt_expr_until_when();
			setState(10303);
			case_when_list();
			setState(10304);
			opt_case_else();
			setState(10305);
			match(END_P);
			setState(10306);
			match(CASE);
			setState(10307);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_expr_until_whenContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_expr_until_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_until_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_expr_until_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_expr_until_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_expr_until_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_until_whenContext opt_expr_until_when() throws RecognitionException {
		Opt_expr_until_whenContext _localctx = new Opt_expr_until_whenContext(_ctx, getState());
		enterRule(_localctx, 1496, RULE_opt_expr_until_when);
		try {
			setState(10311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10310);
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_when_listContext extends ParserRuleContext {
		public List<Case_whenContext> case_when() {
			return getRuleContexts(Case_whenContext.class);
		}
		public Case_whenContext case_when(int i) {
			return getRuleContext(Case_whenContext.class,i);
		}
		public Case_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_when_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_when_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_when_listContext case_when_list() throws RecognitionException {
		Case_when_listContext _localctx = new Case_when_listContext(_ctx, getState());
		enterRule(_localctx, 1498, RULE_case_when_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10314); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(10313);
				case_when();
				}
				}
				setState(10316); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_whenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Case_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_whenContext case_when() throws RecognitionException {
		Case_whenContext _localctx = new Case_whenContext(_ctx, getState());
		enterRule(_localctx, 1500, RULE_case_when);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10318);
			match(WHEN);
			setState(10319);
			expr_list();
			setState(10320);
			match(THEN);
			setState(10321);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_case_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Opt_case_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_case_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_case_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_case_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_case_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_case_elseContext opt_case_else() throws RecognitionException {
		Opt_case_elseContext _localctx = new Opt_case_elseContext(_ctx, getState());
		enterRule(_localctx, 1502, RULE_opt_case_else);
		try {
			setState(10326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10324);
				match(ELSE);
				setState(10325);
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_loopContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_loopContext stmt_loop() throws RecognitionException {
		Stmt_loopContext _localctx = new Stmt_loopContext(_ctx, getState());
		enterRule(_localctx, 1504, RULE_stmt_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10328);
			opt_loop_label();
			setState(10329);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_whileContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode WHILE() { return getToken(PostgreSQLParser.WHILE, 0); }
		public Expr_until_loopContext expr_until_loop() {
			return getRuleContext(Expr_until_loopContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_whileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_while; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_while(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_while(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_while(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_whileContext stmt_while() throws RecognitionException {
		Stmt_whileContext _localctx = new Stmt_whileContext(_ctx, getState());
		enterRule(_localctx, 1506, RULE_stmt_while);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10331);
			opt_loop_label();
			setState(10332);
			match(WHILE);
			setState(10333);
			expr_until_loop();
			setState(10334);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_forContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public For_controlContext for_control() {
			return getRuleContext(For_controlContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_forContext stmt_for() throws RecognitionException {
		Stmt_forContext _localctx = new Stmt_forContext(_ctx, getState());
		enterRule(_localctx, 1508, RULE_stmt_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10336);
			opt_loop_label();
			setState(10337);
			match(FOR);
			setState(10338);
			for_control();
			setState(10339);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_controlContext extends ParserRuleContext {
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Opt_cursor_parametersContext opt_cursor_parameters() {
			return getRuleContext(Opt_cursor_parametersContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public ExplainstmtContext explainstmt() {
			return getRuleContext(ExplainstmtContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Opt_for_using_expressionContext opt_for_using_expression() {
			return getRuleContext(Opt_for_using_expressionContext.class,0);
		}
		public Opt_reverseContext opt_reverse() {
			return getRuleContext(Opt_reverseContext.class,0);
		}
		public TerminalNode DOT_DOT() { return getToken(PostgreSQLParser.DOT_DOT, 0); }
		public Opt_by_expressionContext opt_by_expression() {
			return getRuleContext(Opt_by_expressionContext.class,0);
		}
		public For_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_control; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_control(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_control(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_control(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_controlContext for_control() throws RecognitionException {
		For_controlContext _localctx = new For_controlContext(_ctx, getState());
		enterRule(_localctx, 1510, RULE_for_control);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10341);
			for_variable();
			setState(10342);
			match(IN_P);
			setState(10358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
			case 1:
				{
				setState(10343);
				cursor_name();
				setState(10344);
				opt_cursor_parameters();
				}
				break;
			case 2:
				{
				setState(10346);
				selectstmt();
				}
				break;
			case 3:
				{
				setState(10347);
				explainstmt();
				}
				break;
			case 4:
				{
				setState(10348);
				match(EXECUTE);
				setState(10349);
				a_expr();
				setState(10350);
				opt_for_using_expression();
				}
				break;
			case 5:
				{
				setState(10352);
				opt_reverse();
				setState(10353);
				a_expr();
				setState(10354);
				match(DOT_DOT);
				setState(10355);
				a_expr();
				setState(10356);
				opt_by_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_using_expressionContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_for_using_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_using_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_for_using_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_for_using_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_for_using_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_using_expressionContext opt_for_using_expression() throws RecognitionException {
		Opt_for_using_expressionContext _localctx = new Opt_for_using_expressionContext(_ctx, getState());
		enterRule(_localctx, 1512, RULE_opt_for_using_expression);
		try {
			setState(10363);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10361);
				match(USING);
				setState(10362);
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_cursor_parametersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_cursor_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_cursor_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_cursor_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_cursor_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_cursor_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_cursor_parametersContext opt_cursor_parameters() throws RecognitionException {
		Opt_cursor_parametersContext _localctx = new Opt_cursor_parametersContext(_ctx, getState());
		enterRule(_localctx, 1514, RULE_opt_cursor_parameters);
		int _la;
		try {
			setState(10377);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10366);
				match(OPEN_PAREN);
				setState(10367);
				a_expr();
				setState(10372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(10368);
					match(COMMA);
					setState(10369);
					a_expr();
					}
					}
					setState(10374);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(10375);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reverseContext extends ParserRuleContext {
		public TerminalNode REVERSE() { return getToken(PostgreSQLParser.REVERSE, 0); }
		public Opt_reverseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reverse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_reverse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_reverse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_reverse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reverseContext opt_reverse() throws RecognitionException {
		Opt_reverseContext _localctx = new Opt_reverseContext(_ctx, getState());
		enterRule(_localctx, 1516, RULE_opt_reverse);
		try {
			setState(10381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10380);
				match(REVERSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_by_expressionContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_by_expressionContext opt_by_expression() throws RecognitionException {
		Opt_by_expressionContext _localctx = new Opt_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 1518, RULE_opt_by_expression);
		try {
			setState(10386);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(10384);
				match(BY);
				setState(10385);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_variableContext extends ParserRuleContext {
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public For_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_variableContext for_variable() throws RecognitionException {
		For_variableContext _localctx = new For_variableContext(_ctx, getState());
		enterRule(_localctx, 1520, RULE_for_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10388);
			any_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_foreach_aContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode FOREACH() { return getToken(PostgreSQLParser.FOREACH, 0); }
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public Foreach_sliceContext foreach_slice() {
			return getRuleContext(Foreach_sliceContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_foreach_aContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_foreach_a; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_foreach_a(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_foreach_a(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_foreach_a(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_foreach_aContext stmt_foreach_a() throws RecognitionException {
		Stmt_foreach_aContext _localctx = new Stmt_foreach_aContext(_ctx, getState());
		enterRule(_localctx, 1522, RULE_stmt_foreach_a);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10390);
			opt_loop_label();
			setState(10391);
			match(FOREACH);
			setState(10392);
			for_variable();
			setState(10393);
			foreach_slice();
			setState(10394);
			match(IN_P);
			setState(10395);
			match(ARRAY);
			setState(10396);
			a_expr();
			setState(10397);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreach_sliceContext extends ParserRuleContext {
		public TerminalNode SLICE() { return getToken(PostgreSQLParser.SLICE, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Foreach_sliceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreach_slice; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterForeach_slice(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitForeach_slice(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitForeach_slice(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreach_sliceContext foreach_slice() throws RecognitionException {
		Foreach_sliceContext _localctx = new Foreach_sliceContext(_ctx, getState());
		enterRule(_localctx, 1524, RULE_foreach_slice);
		try {
			setState(10402);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SLICE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10400);
				match(SLICE);
				setState(10401);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_exitContext extends ParserRuleContext {
		public Exit_typeContext exit_type() {
			return getRuleContext(Exit_typeContext.class,0);
		}
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Opt_exitcondContext opt_exitcond() {
			return getRuleContext(Opt_exitcondContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_exitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_exit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_exit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_exit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_exit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_exitContext stmt_exit() throws RecognitionException {
		Stmt_exitContext _localctx = new Stmt_exitContext(_ctx, getState());
		enterRule(_localctx, 1526, RULE_stmt_exit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10404);
			exit_type();
			setState(10405);
			opt_label();
			setState(10406);
			opt_exitcond();
			setState(10407);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_typeContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PostgreSQLParser.EXIT, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public Exit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExit_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExit_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExit_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_typeContext exit_type() throws RecognitionException {
		Exit_typeContext _localctx = new Exit_typeContext(_ctx, getState());
		enterRule(_localctx, 1528, RULE_exit_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10409);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE_P || _la==EXIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_returnContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(PostgreSQLParser.QUERY, 0); }
		public Opt_return_resultContext opt_return_result() {
			return getRuleContext(Opt_return_resultContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_for_using_expressionContext opt_for_using_expression() {
			return getRuleContext(Opt_for_using_expressionContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Stmt_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_returnContext stmt_return() throws RecognitionException {
		Stmt_returnContext _localctx = new Stmt_returnContext(_ctx, getState());
		enterRule(_localctx, 1530, RULE_stmt_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10411);
			match(RETURN);
			setState(10423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
			case 1:
				{
				setState(10412);
				match(NEXT);
				setState(10413);
				sql_expression();
				}
				break;
			case 2:
				{
				setState(10414);
				match(QUERY);
				setState(10420);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(10415);
					match(EXECUTE);
					setState(10416);
					a_expr();
					setState(10417);
					opt_for_using_expression();
					}
					break;
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					setState(10419);
					selectstmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(10422);
				opt_return_result();
				}
				break;
			}
			setState(10425);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_return_resultContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_return_resultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_return_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_return_result(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_return_result(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_return_result(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_return_resultContext opt_return_result() throws RecognitionException {
		Opt_return_resultContext _localctx = new Opt_return_resultContext(_ctx, getState());
		enterRule(_localctx, 1532, RULE_opt_return_result);
		try {
			setState(10429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10428);
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_raiseContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PostgreSQLParser.RAISE, 0); }
		public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
			return getRuleContext(Opt_stmt_raise_levelContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_raise_listContext opt_raise_list() {
			return getRuleContext(Opt_raise_listContext.class,0);
		}
		public Opt_raise_usingContext opt_raise_using() {
			return getRuleContext(Opt_raise_usingContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public Stmt_raiseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_raise; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_raise(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_raise(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_raise(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_raiseContext stmt_raise() throws RecognitionException {
		Stmt_raiseContext _localctx = new Stmt_raiseContext(_ctx, getState());
		enterRule(_localctx, 1534, RULE_stmt_raise);
		try {
			setState(10457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10431);
				match(RAISE);
				setState(10432);
				opt_stmt_raise_level();
				setState(10433);
				sconst();
				setState(10434);
				opt_raise_list();
				setState(10435);
				opt_raise_using();
				setState(10436);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10438);
				match(RAISE);
				setState(10439);
				opt_stmt_raise_level();
				setState(10440);
				identifier();
				setState(10441);
				opt_raise_using();
				setState(10442);
				match(SEMI);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10444);
				match(RAISE);
				setState(10445);
				opt_stmt_raise_level();
				setState(10446);
				match(SQLSTATE);
				setState(10447);
				sconst();
				setState(10448);
				opt_raise_using();
				setState(10449);
				match(SEMI);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10451);
				match(RAISE);
				setState(10452);
				opt_stmt_raise_level();
				setState(10453);
				opt_raise_using();
				setState(10454);
				match(SEMI);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10456);
				match(RAISE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_stmt_raise_levelContext extends ParserRuleContext {
		public TerminalNode DEBUG() { return getToken(PostgreSQLParser.DEBUG, 0); }
		public TerminalNode LOG() { return getToken(PostgreSQLParser.LOG, 0); }
		public TerminalNode INFO() { return getToken(PostgreSQLParser.INFO, 0); }
		public TerminalNode NOTICE() { return getToken(PostgreSQLParser.NOTICE, 0); }
		public TerminalNode WARNING() { return getToken(PostgreSQLParser.WARNING, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public Opt_stmt_raise_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_stmt_raise_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_stmt_raise_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_stmt_raise_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_stmt_raise_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_stmt_raise_levelContext opt_stmt_raise_level() throws RecognitionException {
		Opt_stmt_raise_levelContext _localctx = new Opt_stmt_raise_levelContext(_ctx, getState());
		enterRule(_localctx, 1536, RULE_opt_stmt_raise_level);
		try {
			setState(10467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10461);
				match(DEBUG);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10462);
				match(LOG);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10463);
				match(INFO);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10464);
				match(NOTICE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10465);
				match(WARNING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10466);
				match(EXCEPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Opt_raise_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_listContext opt_raise_list() throws RecognitionException {
		Opt_raise_listContext _localctx = new Opt_raise_listContext(_ctx, getState());
		enterRule(_localctx, 1538, RULE_opt_raise_list);
		int _la;
		try {
			setState(10476);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(10472); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(10470);
					match(COMMA);
					setState(10471);
					a_expr();
					}
					}
					setState(10474); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
			return getRuleContext(Opt_raise_using_elem_listContext.class,0);
		}
		public Opt_raise_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_usingContext opt_raise_using() throws RecognitionException {
		Opt_raise_usingContext _localctx = new Opt_raise_usingContext(_ctx, getState());
		enterRule(_localctx, 1540, RULE_opt_raise_using);
		try {
			setState(10481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10479);
				match(USING);
				setState(10480);
				opt_raise_using_elem_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_using_elemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_raise_using_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_using_elemContext opt_raise_using_elem() throws RecognitionException {
		Opt_raise_using_elemContext _localctx = new Opt_raise_using_elemContext(_ctx, getState());
		enterRule(_localctx, 1542, RULE_opt_raise_using_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10483);
			identifier();
			setState(10484);
			match(EQUAL);
			setState(10485);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_using_elem_listContext extends ParserRuleContext {
		public List<Opt_raise_using_elemContext> opt_raise_using_elem() {
			return getRuleContexts(Opt_raise_using_elemContext.class);
		}
		public Opt_raise_using_elemContext opt_raise_using_elem(int i) {
			return getRuleContext(Opt_raise_using_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_raise_using_elem_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using_elem_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using_elem_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using_elem_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using_elem_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_using_elem_listContext opt_raise_using_elem_list() throws RecognitionException {
		Opt_raise_using_elem_listContext _localctx = new Opt_raise_using_elem_listContext(_ctx, getState());
		enterRule(_localctx, 1544, RULE_opt_raise_using_elem_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10487);
			opt_raise_using_elem();
			setState(10492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10488);
				match(COMMA);
				setState(10489);
				opt_raise_using_elem();
				}
				}
				setState(10494);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_assertContext extends ParserRuleContext {
		public TerminalNode ASSERT() { return getToken(PostgreSQLParser.ASSERT, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
			return getRuleContext(Opt_stmt_assert_messageContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_assert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_assert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_assert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assertContext stmt_assert() throws RecognitionException {
		Stmt_assertContext _localctx = new Stmt_assertContext(_ctx, getState());
		enterRule(_localctx, 1546, RULE_stmt_assert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10495);
			match(ASSERT);
			setState(10496);
			sql_expression();
			setState(10497);
			opt_stmt_assert_message();
			setState(10498);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_stmt_assert_messageContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_stmt_assert_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_stmt_assert_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_stmt_assert_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_stmt_assert_message(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_stmt_assert_message(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_stmt_assert_messageContext opt_stmt_assert_message() throws RecognitionException {
		Opt_stmt_assert_messageContext _localctx = new Opt_stmt_assert_messageContext(_ctx, getState());
		enterRule(_localctx, 1548, RULE_opt_stmt_assert_message);
		try {
			setState(10503);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(10501);
				match(COMMA);
				setState(10502);
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_bodyContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PostgreSQLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PostgreSQLParser.LOOP, i);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Loop_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoop_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoop_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoop_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_bodyContext loop_body() throws RecognitionException {
		Loop_bodyContext _localctx = new Loop_bodyContext(_ctx, getState());
		enterRule(_localctx, 1550, RULE_loop_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10505);
			match(LOOP);
			setState(10506);
			proc_sect();
			setState(10507);
			match(END_P);
			setState(10508);
			match(LOOP);
			setState(10509);
			opt_label();
			setState(10510);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_execsqlContext extends ParserRuleContext {
		public Make_execsql_stmtContext make_execsql_stmt() {
			return getRuleContext(Make_execsql_stmtContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_execsqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_execsql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_execsql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_execsql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_execsql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_execsqlContext stmt_execsql() throws RecognitionException {
		Stmt_execsqlContext _localctx = new Stmt_execsqlContext(_ctx, getState());
		enterRule(_localctx, 1552, RULE_stmt_execsql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10512);
			make_execsql_stmt();
			setState(10513);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_dynexecuteContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_execute_intoContext opt_execute_into() {
			return getRuleContext(Opt_execute_intoContext.class,0);
		}
		public Opt_execute_usingContext opt_execute_using() {
			return getRuleContext(Opt_execute_usingContext.class,0);
		}
		public Stmt_dynexecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_dynexecute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_dynexecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_dynexecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_dynexecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_dynexecuteContext stmt_dynexecute() throws RecognitionException {
		Stmt_dynexecuteContext _localctx = new Stmt_dynexecuteContext(_ctx, getState());
		enterRule(_localctx, 1554, RULE_stmt_dynexecute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10515);
			match(EXECUTE);
			setState(10516);
			a_expr();
			setState(10524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
			case 1:
				{
				setState(10517);
				opt_execute_into();
				setState(10518);
				opt_execute_using();
				}
				break;
			case 2:
				{
				setState(10520);
				opt_execute_using();
				setState(10521);
				opt_execute_into();
				}
				break;
			case 3:
				{
				}
				break;
			}
			setState(10526);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_execute_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_execute_using_listContext opt_execute_using_list() {
			return getRuleContext(Opt_execute_using_listContext.class,0);
		}
		public Opt_execute_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_usingContext opt_execute_using() throws RecognitionException {
		Opt_execute_usingContext _localctx = new Opt_execute_usingContext(_ctx, getState());
		enterRule(_localctx, 1556, RULE_opt_execute_using);
		try {
			setState(10531);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10529);
				match(USING);
				setState(10530);
				opt_execute_using_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_execute_using_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_execute_using_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_using_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_using_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_using_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_using_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_using_listContext opt_execute_using_list() throws RecognitionException {
		Opt_execute_using_listContext _localctx = new Opt_execute_using_listContext(_ctx, getState());
		enterRule(_localctx, 1558, RULE_opt_execute_using_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10533);
			a_expr();
			setState(10538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10534);
				match(COMMA);
				setState(10535);
				a_expr();
				}
				}
				setState(10540);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_execute_intoContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_execute_intoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_into; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_into(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_into(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_into(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_intoContext opt_execute_into() throws RecognitionException {
		Opt_execute_intoContext _localctx = new Opt_execute_intoContext(_ctx, getState());
		enterRule(_localctx, 1560, RULE_opt_execute_into);
		try {
			setState(10547);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case INTO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10542);
				match(INTO);
				setState(10544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
				case 1:
					{
					setState(10543);
					match(STRICT_P);
					}
					break;
				}
				setState(10546);
				into_target();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_openContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Opt_scroll_optionContext opt_scroll_option() {
			return getRuleContext(Opt_scroll_optionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_open_usingContext opt_open_using() {
			return getRuleContext(Opt_open_usingContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_open_bound_listContext opt_open_bound_list() {
			return getRuleContext(Opt_open_bound_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Stmt_openContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_open; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_open(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_open(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_open(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_openContext stmt_open() throws RecognitionException {
		Stmt_openContext _localctx = new Stmt_openContext(_ctx, getState());
		enterRule(_localctx, 1562, RULE_stmt_open);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10549);
			match(OPEN);
			setState(10567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
			case 1:
				{
				setState(10550);
				cursor_variable();
				setState(10551);
				opt_scroll_option();
				setState(10552);
				match(FOR);
				setState(10558);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					setState(10553);
					selectstmt();
					}
					break;
				case EXECUTE:
					{
					setState(10554);
					match(EXECUTE);
					setState(10555);
					sql_expression();
					setState(10556);
					opt_open_using();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(10560);
				colid();
				setState(10565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(10561);
					match(OPEN_PAREN);
					setState(10562);
					opt_open_bound_list();
					setState(10563);
					match(CLOSE_PAREN);
					}
				}

				}
				break;
			}
			setState(10569);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_open_bound_list_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_open_bound_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_bound_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_bound_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_bound_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_bound_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_bound_list_itemContext opt_open_bound_list_item() throws RecognitionException {
		Opt_open_bound_list_itemContext _localctx = new Opt_open_bound_list_itemContext(_ctx, getState());
		enterRule(_localctx, 1564, RULE_opt_open_bound_list_item);
		try {
			setState(10576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10571);
				colid();
				setState(10572);
				match(COLON_EQUALS);
				setState(10573);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10575);
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_open_bound_listContext extends ParserRuleContext {
		public List<Opt_open_bound_list_itemContext> opt_open_bound_list_item() {
			return getRuleContexts(Opt_open_bound_list_itemContext.class);
		}
		public Opt_open_bound_list_itemContext opt_open_bound_list_item(int i) {
			return getRuleContext(Opt_open_bound_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_open_bound_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_bound_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_bound_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_bound_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_bound_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_bound_listContext opt_open_bound_list() throws RecognitionException {
		Opt_open_bound_listContext _localctx = new Opt_open_bound_listContext(_ctx, getState());
		enterRule(_localctx, 1566, RULE_opt_open_bound_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10578);
			opt_open_bound_list_item();
			setState(10583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10579);
				match(COMMA);
				setState(10580);
				opt_open_bound_list_item();
				}
				}
				setState(10585);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_open_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_open_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_usingContext opt_open_using() throws RecognitionException {
		Opt_open_usingContext _localctx = new Opt_open_usingContext(_ctx, getState());
		enterRule(_localctx, 1568, RULE_opt_open_using);
		try {
			setState(10589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10587);
				match(USING);
				setState(10588);
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scroll_optionContext extends ParserRuleContext {
		public Opt_scroll_option_noContext opt_scroll_option_no() {
			return getRuleContext(Opt_scroll_option_noContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scroll_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scroll_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scroll_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scroll_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scroll_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scroll_optionContext opt_scroll_option() throws RecognitionException {
		Opt_scroll_optionContext _localctx = new Opt_scroll_optionContext(_ctx, getState());
		enterRule(_localctx, 1570, RULE_opt_scroll_option);
		try {
			setState(10595);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10592);
				opt_scroll_option_no();
				setState(10593);
				match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scroll_option_noContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_scroll_option_noContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scroll_option_no; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scroll_option_no(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scroll_option_no(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scroll_option_no(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scroll_option_noContext opt_scroll_option_no() throws RecognitionException {
		Opt_scroll_option_noContext _localctx = new Opt_scroll_option_noContext(_ctx, getState());
		enterRule(_localctx, 1572, RULE_opt_scroll_option_no);
		try {
			setState(10599);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCROLL:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10598);
				match(NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_fetchContext extends ParserRuleContext {
		public Opt_fetch_directionContext direction;
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public Opt_cursor_fromContext opt_cursor_from() {
			return getRuleContext(Opt_cursor_fromContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Stmt_fetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_fetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_fetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_fetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_fetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_fetchContext stmt_fetch() throws RecognitionException {
		Stmt_fetchContext _localctx = new Stmt_fetchContext(_ctx, getState());
		enterRule(_localctx, 1574, RULE_stmt_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10601);
			match(FETCH);
			setState(10602);
			((Stmt_fetchContext)_localctx).direction = opt_fetch_direction();
			setState(10603);
			opt_cursor_from();
			setState(10604);
			cursor_variable();
			setState(10605);
			match(INTO);
			setState(10606);
			into_target();
			setState(10607);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_targetContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Into_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInto_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInto_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInto_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_targetContext into_target() throws RecognitionException {
		Into_targetContext _localctx = new Into_targetContext(_ctx, getState());
		enterRule(_localctx, 1576, RULE_into_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10609);
			expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_cursor_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Opt_cursor_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_cursor_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_cursor_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_cursor_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_cursor_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_cursor_fromContext opt_cursor_from() throws RecognitionException {
		Opt_cursor_fromContext _localctx = new Opt_cursor_fromContext(_ctx, getState());
		enterRule(_localctx, 1578, RULE_opt_cursor_from);
		try {
			setState(10614);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARAM:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(10612);
				match(FROM);
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(10613);
				match(IN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fetch_directionContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public Opt_fetch_directionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fetch_direction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_fetch_direction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_fetch_direction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_fetch_direction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fetch_directionContext opt_fetch_direction() throws RecognitionException {
		Opt_fetch_directionContext _localctx = new Opt_fetch_directionContext(_ctx, getState());
		enterRule(_localctx, 1580, RULE_opt_fetch_direction);
		int _la;
		try {
			setState(10633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10618);
				match(NEXT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10619);
				match(PRIOR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10620);
				match(FIRST_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10621);
				match(LAST_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10622);
				match(ABSOLUTE_P);
				setState(10623);
				a_expr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10624);
				match(RELATIVE_P);
				setState(10625);
				a_expr();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10626);
				a_expr();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10627);
				match(ALL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10628);
				_la = _input.LA(1);
				if ( !(_la==BACKWARD || _la==FORWARD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
				case 1:
					{
					setState(10629);
					a_expr();
					}
					break;
				case 2:
					{
					setState(10630);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_moveContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_moveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_move; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_move(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_move(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_move(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_moveContext stmt_move() throws RecognitionException {
		Stmt_moveContext _localctx = new Stmt_moveContext(_ctx, getState());
		enterRule(_localctx, 1582, RULE_stmt_move);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10635);
			match(MOVE);
			setState(10636);
			opt_fetch_direction();
			setState(10637);
			cursor_variable();
			setState(10638);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_closeContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_closeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_close; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_close(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_close(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_close(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_closeContext stmt_close() throws RecognitionException {
		Stmt_closeContext _localctx = new Stmt_closeContext(_ctx, getState());
		enterRule(_localctx, 1584, RULE_stmt_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10640);
			match(CLOSE);
			setState(10641);
			cursor_variable();
			setState(10642);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_nullContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_nullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_null; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_null(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_null(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_null(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_nullContext stmt_null() throws RecognitionException {
		Stmt_nullContext _localctx = new Stmt_nullContext(_ctx, getState());
		enterRule(_localctx, 1586, RULE_stmt_null);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10644);
			match(NULL_P);
			setState(10645);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_commitContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return getRuleContext(Plsql_opt_transaction_chainContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_commitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_commit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_commit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_commit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_commit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_commitContext stmt_commit() throws RecognitionException {
		Stmt_commitContext _localctx = new Stmt_commitContext(_ctx, getState());
		enterRule(_localctx, 1588, RULE_stmt_commit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10647);
			match(COMMIT);
			setState(10648);
			plsql_opt_transaction_chain();
			setState(10649);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_rollbackContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return getRuleContext(Plsql_opt_transaction_chainContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_rollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_rollback; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_rollback(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_rollback(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_rollback(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_rollbackContext stmt_rollback() throws RecognitionException {
		Stmt_rollbackContext _localctx = new Stmt_rollbackContext(_ctx, getState());
		enterRule(_localctx, 1590, RULE_stmt_rollback);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10651);
			match(ROLLBACK);
			setState(10652);
			plsql_opt_transaction_chain();
			setState(10653);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plsql_opt_transaction_chainContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Plsql_opt_transaction_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_opt_transaction_chain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsql_opt_transaction_chain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsql_opt_transaction_chain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsql_opt_transaction_chain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() throws RecognitionException {
		Plsql_opt_transaction_chainContext _localctx = new Plsql_opt_transaction_chainContext(_ctx, getState());
		enterRule(_localctx, 1592, RULE_plsql_opt_transaction_chain);
		int _la;
		try {
			setState(10661);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(10655);
				match(AND);
				setState(10657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(10656);
					match(NO);
					}
				}

				setState(10659);
				match(CHAIN);
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_setContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Stmt_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_setContext stmt_set() throws RecognitionException {
		Stmt_setContext _localctx = new Stmt_setContext(_ctx, getState());
		enterRule(_localctx, 1594, RULE_stmt_set);
		try {
			setState(10675);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(10663);
				match(SET);
				setState(10664);
				any_name();
				setState(10665);
				match(TO);
				setState(10666);
				match(DEFAULT);
				setState(10667);
				match(SEMI);
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(10669);
				match(RESET);
				setState(10672);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case OUTER_P:
				case OVER:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case CATALOG_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(10670);
					any_name();
					}
					break;
				case ALL:
					{
					setState(10671);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10674);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_variableContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Cursor_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_variableContext cursor_variable() throws RecognitionException {
		Cursor_variableContext _localctx = new Cursor_variableContext(_ctx, getState());
		enterRule(_localctx, 1596, RULE_cursor_variable);
		try {
			setState(10679);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(10677);
				colid();
				}
				break;
			case PARAM:
				enterOuterAlt(_localctx, 2);
				{
				setState(10678);
				match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_sectContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public Proc_exceptionsContext proc_exceptions() {
			return getRuleContext(Proc_exceptionsContext.class,0);
		}
		public Exception_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterException_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitException_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitException_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_sectContext exception_sect() throws RecognitionException {
		Exception_sectContext _localctx = new Exception_sectContext(_ctx, getState());
		enterRule(_localctx, 1598, RULE_exception_sect);
		try {
			setState(10684);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EXCEPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(10682);
				match(EXCEPTION);
				setState(10683);
				proc_exceptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_exceptionsContext extends ParserRuleContext {
		public List<Proc_exceptionContext> proc_exception() {
			return getRuleContexts(Proc_exceptionContext.class);
		}
		public Proc_exceptionContext proc_exception(int i) {
			return getRuleContext(Proc_exceptionContext.class,i);
		}
		public Proc_exceptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exceptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_exceptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_exceptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_exceptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionsContext proc_exceptions() throws RecognitionException {
		Proc_exceptionsContext _localctx = new Proc_exceptionsContext(_ctx, getState());
		enterRule(_localctx, 1600, RULE_proc_exceptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10687); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(10686);
				proc_exception();
				}
				}
				setState(10689); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_exceptionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Proc_conditionsContext proc_conditions() {
			return getRuleContext(Proc_conditionsContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Proc_exceptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exception; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_exception(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_exception(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_exception(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionContext proc_exception() throws RecognitionException {
		Proc_exceptionContext _localctx = new Proc_exceptionContext(_ctx, getState());
		enterRule(_localctx, 1602, RULE_proc_exception);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10691);
			match(WHEN);
			setState(10692);
			proc_conditions();
			setState(10693);
			match(THEN);
			setState(10694);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_conditionsContext extends ParserRuleContext {
		public List<Proc_conditionContext> proc_condition() {
			return getRuleContexts(Proc_conditionContext.class);
		}
		public Proc_conditionContext proc_condition(int i) {
			return getRuleContext(Proc_conditionContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public Proc_conditionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_conditions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_conditions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_conditions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_conditions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionsContext proc_conditions() throws RecognitionException {
		Proc_conditionsContext _localctx = new Proc_conditionsContext(_ctx, getState());
		enterRule(_localctx, 1604, RULE_proc_conditions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10696);
			proc_condition();
			setState(10701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(10697);
				match(OR);
				setState(10698);
				proc_condition();
				}
				}
				setState(10703);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_conditionContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionContext proc_condition() throws RecognitionException {
		Proc_conditionContext _localctx = new Proc_conditionContext(_ctx, getState());
		enterRule(_localctx, 1606, RULE_proc_condition);
		try {
			setState(10707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10704);
				any_identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10705);
				match(SQLSTATE);
				setState(10706);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_block_labelContext extends ParserRuleContext {
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Opt_block_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_block_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_block_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_block_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_block_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_block_labelContext opt_block_label() throws RecognitionException {
		Opt_block_labelContext _localctx = new Opt_block_labelContext(_ctx, getState());
		enterRule(_localctx, 1608, RULE_opt_block_label);
		try {
			setState(10711);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_P:
			case DECLARE:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10710);
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_loop_labelContext extends ParserRuleContext {
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Opt_loop_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_loop_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_loop_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_loop_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_loop_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_loop_labelContext opt_loop_label() throws RecognitionException {
		Opt_loop_labelContext _localctx = new Opt_loop_labelContext(_ctx, getState());
		enterRule(_localctx, 1610, RULE_opt_loop_label);
		try {
			setState(10715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case WHILE:
			case FOREACH:
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10714);
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_labelContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Opt_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_labelContext opt_label() throws RecognitionException {
		Opt_labelContext _localctx = new Opt_labelContext(_ctx, getState());
		enterRule(_localctx, 1612, RULE_opt_label);
		try {
			setState(10719);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case SEMI:
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case CATALOG_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(10718);
				any_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_exitcondContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Opt_exitcondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_exitcond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_exitcond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_exitcond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_exitcond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_exitcondContext opt_exitcond() throws RecognitionException {
		Opt_exitcondContext _localctx = new Opt_exitcondContext(_ctx, getState());
		enterRule(_localctx, 1614, RULE_opt_exitcond);
		try {
			setState(10724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(10721);
				match(WHEN);
				setState(10722);
				expr_until_semi();
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_identifierContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_identifierContext any_identifier() throws RecognitionException {
		Any_identifierContext _localctx = new Any_identifierContext(_ctx, getState());
		enterRule(_localctx, 1616, RULE_any_identifier);
		try {
			setState(10728);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10726);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10727);
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plsql_unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ALIAS() { return getToken(PostgreSQLParser.ALIAS, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode ASSERT() { return getToken(PostgreSQLParser.ASSERT, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode CONSTANT() { return getToken(PostgreSQLParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode DEBUG() { return getToken(PostgreSQLParser.DEBUG, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode DUMP() { return getToken(PostgreSQLParser.DUMP, 0); }
		public TerminalNode ELSIF() { return getToken(PostgreSQLParser.ELSIF, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public TerminalNode EXIT() { return getToken(PostgreSQLParser.EXIT, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public TerminalNode INFO() { return getToken(PostgreSQLParser.INFO, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode LOG() { return getToken(PostgreSQLParser.LOG, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NOTICE() { return getToken(PostgreSQLParser.NOTICE, 0); }
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode PERFORM() { return getToken(PostgreSQLParser.PERFORM, 0); }
		public TerminalNode PRINT_STRICT_PARAMS() { return getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode QUERY() { return getToken(PostgreSQLParser.QUERY, 0); }
		public TerminalNode RAISE() { return getToken(PostgreSQLParser.RAISE, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode REVERSE() { return getToken(PostgreSQLParser.REVERSE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROWTYPE() { return getToken(PostgreSQLParser.ROWTYPE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SLICE() { return getToken(PostgreSQLParser.SLICE, 0); }
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public TerminalNode STACKED() { return getToken(PostgreSQLParser.STACKED, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode USE_COLUMN() { return getToken(PostgreSQLParser.USE_COLUMN, 0); }
		public TerminalNode USE_VARIABLE() { return getToken(PostgreSQLParser.USE_VARIABLE, 0); }
		public TerminalNode VARIABLE_CONFLICT() { return getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		public TerminalNode WARNING() { return getToken(PostgreSQLParser.WARNING, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public Plsql_unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsql_unreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsql_unreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsql_unreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_unreserved_keywordContext plsql_unreserved_keyword() throws RecognitionException {
		Plsql_unreserved_keywordContext _localctx = new Plsql_unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1618, RULE_plsql_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10730);
			_la = _input.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (AND - 34)) | (1L << (ARRAY - 34)) | (1L << (COLLATE - 34)) | (1L << (COLUMN - 34)) | (1L << (CONSTRAINT - 34)) | (1L << (DEFAULT - 34)) | (1L << (DO - 34)) | (1L << (FETCH - 34)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (TABLE - 106)) | (1L << (IS - 106)) | (1L << (OUTER_P - 106)) | (1L << (ABSOLUTE_P - 106)) | (1L << (BACKWARD - 106)) | (1L << (CHAIN - 106)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (CLOSE - 172)) | (1L << (COMMIT - 172)) | (1L << (CONTINUE_P - 172)) | (1L << (CURSOR - 172)) | (1L << (FIRST_P - 172)) | (1L << (FORWARD - 172)))) != 0) || ((((_la - 247)) & ~0x3f) == 0 && ((1L << (_la - 247)) & ((1L << (INSERT - 247)) | (1L << (LAST_P - 247)) | (1L << (MOVE - 247)) | (1L << (NEXT - 247)) | (1L << (NO - 247)) | (1L << (OPTION - 247)) | (1L << (PRIOR - 247)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (RELATIVE_P - 313)) | (1L << (RESET - 313)) | (1L << (ROLLBACK - 313)) | (1L << (SCHEMA - 313)) | (1L << (SCROLL - 313)) | (1L << (SET - 313)) | (1L << (TYPE_P - 313)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (CALL - 439)) | (1L << (CURRENT_P - 439)) | (1L << (ROWTYPE - 439)) | (1L << (DUMP - 439)) | (1L << (PRINT_STRICT_PARAMS - 439)) | (1L << (VARIABLE_CONFLICT - 439)) | (1L << (ERROR - 439)) | (1L << (USE_VARIABLE - 439)) | (1L << (USE_COLUMN - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (ALIAS - 503)) | (1L << (CONSTANT - 503)) | (1L << (PERFORM - 503)) | (1L << (GET - 503)) | (1L << (DIAGNOSTICS - 503)) | (1L << (STACKED - 503)) | (1L << (ELSIF - 503)) | (1L << (REVERSE - 503)) | (1L << (SLICE - 503)) | (1L << (EXIT - 503)) | (1L << (RETURN - 503)) | (1L << (QUERY - 503)) | (1L << (RAISE - 503)) | (1L << (SQLSTATE - 503)) | (1L << (DEBUG - 503)) | (1L << (LOG - 503)) | (1L << (INFO - 503)) | (1L << (NOTICE - 503)) | (1L << (WARNING - 503)) | (1L << (EXCEPTION - 503)) | (1L << (ASSERT - 503)) | (1L << (OPEN - 503)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_expressionContext extends ParserRuleContext {
		public Opt_target_listContext opt_target_list() {
			return getRuleContext(Opt_target_listContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Sql_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSql_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSql_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSql_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_expressionContext sql_expression() throws RecognitionException {
		Sql_expressionContext _localctx = new Sql_expressionContext(_ctx, getState());
		enterRule(_localctx, 1620, RULE_sql_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10732);
			opt_target_list();
			setState(10733);
			into_clause();
			setState(10734);
			from_clause();
			setState(10735);
			where_clause();
			setState(10736);
			group_clause();
			setState(10737);
			having_clause();
			setState(10738);
			window_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_thenContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Expr_until_thenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_then; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_then(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_then(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_then(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_thenContext expr_until_then() throws RecognitionException {
		Expr_until_thenContext _localctx = new Expr_until_thenContext(_ctx, getState());
		enterRule(_localctx, 1622, RULE_expr_until_then);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10740);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_semiContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Expr_until_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_semiContext expr_until_semi() throws RecognitionException {
		Expr_until_semiContext _localctx = new Expr_until_semiContext(_ctx, getState());
		enterRule(_localctx, 1624, RULE_expr_until_semi);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10742);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_rightbracketContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_until_rightbracketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_rightbracket; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_rightbracket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_rightbracket(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_rightbracket(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_rightbracketContext expr_until_rightbracket() throws RecognitionException {
		Expr_until_rightbracketContext _localctx = new Expr_until_rightbracketContext(_ctx, getState());
		enterRule(_localctx, 1626, RULE_expr_until_rightbracket);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10744);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_loopContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_until_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_loopContext expr_until_loop() throws RecognitionException {
		Expr_until_loopContext _localctx = new Expr_until_loopContext(_ctx, getState());
		enterRule(_localctx, 1628, RULE_expr_until_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10746);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Make_execsql_stmtContext extends ParserRuleContext {
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public Opt_returning_clause_intoContext opt_returning_clause_into() {
			return getRuleContext(Opt_returning_clause_intoContext.class,0);
		}
		public Make_execsql_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_make_execsql_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMake_execsql_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMake_execsql_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMake_execsql_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Make_execsql_stmtContext make_execsql_stmt() throws RecognitionException {
		Make_execsql_stmtContext _localctx = new Make_execsql_stmtContext(_ctx, getState());
		enterRule(_localctx, 1630, RULE_make_execsql_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10748);
			stmt();
			setState(10749);
			opt_returning_clause_into();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_returning_clause_intoContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Opt_strictContext opt_strict() {
			return getRuleContext(Opt_strictContext.class,0);
		}
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public Opt_returning_clause_intoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_returning_clause_into; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_returning_clause_into(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_returning_clause_into(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_returning_clause_into(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_returning_clause_intoContext opt_returning_clause_into() throws RecognitionException {
		Opt_returning_clause_intoContext _localctx = new Opt_returning_clause_intoContext(_ctx, getState());
		enterRule(_localctx, 1632, RULE_opt_returning_clause_into);
		try {
			setState(10756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(10751);
				match(INTO);
				setState(10752);
				opt_strict();
				setState(10753);
				into_target();
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 609:
			return b_expr_sempred((B_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 8);
		case 1:
			return precpred(_ctx, 7);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 4);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 2);
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u023d\u2a09\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c\t\u027c\4\u027d"+
		"\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f\4\u0280\t\u0280\4\u0281\t\u0281"+
		"\4\u0282\t\u0282\4\u0283\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\4\u0286"+
		"\t\u0286\4\u0287\t\u0287\4\u0288\t\u0288\4\u0289\t\u0289\4\u028a\t\u028a"+
		"\4\u028b\t\u028b\4\u028c\t\u028c\4\u028d\t\u028d\4\u028e\t\u028e\4\u028f"+
		"\t\u028f\4\u0290\t\u0290\4\u0291\t\u0291\4\u0292\t\u0292\4\u0293\t\u0293"+
		"\4\u0294\t\u0294\4\u0295\t\u0295\4\u0296\t\u0296\4\u0297\t\u0297\4\u0298"+
		"\t\u0298\4\u0299\t\u0299\4\u029a\t\u029a\4\u029b\t\u029b\4\u029c\t\u029c"+
		"\4\u029d\t\u029d\4\u029e\t\u029e\4\u029f\t\u029f\4\u02a0\t\u02a0\4\u02a1"+
		"\t\u02a1\4\u02a2\t\u02a2\4\u02a3\t\u02a3\4\u02a4\t\u02a4\4\u02a5\t\u02a5"+
		"\4\u02a6\t\u02a6\4\u02a7\t\u02a7\4\u02a8\t\u02a8\4\u02a9\t\u02a9\4\u02aa"+
		"\t\u02aa\4\u02ab\t\u02ab\4\u02ac\t\u02ac\4\u02ad\t\u02ad\4\u02ae\t\u02ae"+
		"\4\u02af\t\u02af\4\u02b0\t\u02b0\4\u02b1\t\u02b1\4\u02b2\t\u02b2\4\u02b3"+
		"\t\u02b3\4\u02b4\t\u02b4\4\u02b5\t\u02b5\4\u02b6\t\u02b6\4\u02b7\t\u02b7"+
		"\4\u02b8\t\u02b8\4\u02b9\t\u02b9\4\u02ba\t\u02ba\4\u02bb\t\u02bb\4\u02bc"+
		"\t\u02bc\4\u02bd\t\u02bd\4\u02be\t\u02be\4\u02bf\t\u02bf\4\u02c0\t\u02c0"+
		"\4\u02c1\t\u02c1\4\u02c2\t\u02c2\4\u02c3\t\u02c3\4\u02c4\t\u02c4\4\u02c5"+
		"\t\u02c5\4\u02c6\t\u02c6\4\u02c7\t\u02c7\4\u02c8\t\u02c8\4\u02c9\t\u02c9"+
		"\4\u02ca\t\u02ca\4\u02cb\t\u02cb\4\u02cc\t\u02cc\4\u02cd\t\u02cd\4\u02ce"+
		"\t\u02ce\4\u02cf\t\u02cf\4\u02d0\t\u02d0\4\u02d1\t\u02d1\4\u02d2\t\u02d2"+
		"\4\u02d3\t\u02d3\4\u02d4\t\u02d4\4\u02d5\t\u02d5\4\u02d6\t\u02d6\4\u02d7"+
		"\t\u02d7\4\u02d8\t\u02d8\4\u02d9\t\u02d9\4\u02da\t\u02da\4\u02db\t\u02db"+
		"\4\u02dc\t\u02dc\4\u02dd\t\u02dd\4\u02de\t\u02de\4\u02df\t\u02df\4\u02e0"+
		"\t\u02e0\4\u02e1\t\u02e1\4\u02e2\t\u02e2\4\u02e3\t\u02e3\4\u02e4\t\u02e4"+
		"\4\u02e5\t\u02e5\4\u02e6\t\u02e6\4\u02e7\t\u02e7\4\u02e8\t\u02e8\4\u02e9"+
		"\t\u02e9\4\u02ea\t\u02ea\4\u02eb\t\u02eb\4\u02ec\t\u02ec\4\u02ed\t\u02ed"+
		"\4\u02ee\t\u02ee\4\u02ef\t\u02ef\4\u02f0\t\u02f0\4\u02f1\t\u02f1\4\u02f2"+
		"\t\u02f2\4\u02f3\t\u02f3\4\u02f4\t\u02f4\4\u02f5\t\u02f5\4\u02f6\t\u02f6"+
		"\4\u02f7\t\u02f7\4\u02f8\t\u02f8\4\u02f9\t\u02f9\4\u02fa\t\u02fa\4\u02fb"+
		"\t\u02fb\4\u02fc\t\u02fc\4\u02fd\t\u02fd\4\u02fe\t\u02fe\4\u02ff\t\u02ff"+
		"\4\u0300\t\u0300\4\u0301\t\u0301\4\u0302\t\u0302\4\u0303\t\u0303\4\u0304"+
		"\t\u0304\4\u0305\t\u0305\4\u0306\t\u0306\4\u0307\t\u0307\4\u0308\t\u0308"+
		"\4\u0309\t\u0309\4\u030a\t\u030a\4\u030b\t\u030b\4\u030c\t\u030c\4\u030d"+
		"\t\u030d\4\u030e\t\u030e\4\u030f\t\u030f\4\u0310\t\u0310\4\u0311\t\u0311"+
		"\4\u0312\t\u0312\4\u0313\t\u0313\4\u0314\t\u0314\4\u0315\t\u0315\4\u0316"+
		"\t\u0316\4\u0317\t\u0317\4\u0318\t\u0318\4\u0319\t\u0319\4\u031a\t\u031a"+
		"\4\u031b\t\u031b\4\u031c\t\u031c\4\u031d\t\u031d\4\u031e\t\u031e\4\u031f"+
		"\t\u031f\4\u0320\t\u0320\4\u0321\t\u0321\4\u0322\t\u0322\4\u0323\t\u0323"+
		"\4\u0324\t\u0324\4\u0325\t\u0325\4\u0326\t\u0326\4\u0327\t\u0327\4\u0328"+
		"\t\u0328\4\u0329\t\u0329\4\u032a\t\u032a\4\u032b\t\u032b\4\u032c\t\u032c"+
		"\4\u032d\t\u032d\4\u032e\t\u032e\4\u032f\t\u032f\4\u0330\t\u0330\4\u0331"+
		"\t\u0331\4\u0332\t\u0332\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\5\5\u066e"+
		"\n\5\7\5\u0670\n\5\f\5\16\5\u0673\13\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u06f4\n\6"+
		"\3\7\3\7\5\7\u06f8\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\5\n"+
		"\u0705\n\n\3\13\7\13\u0708\n\13\f\13\16\13\u070b\13\13\3\f\7\f\u070e\n"+
		"\f\f\f\16\f\u0711\13\f\3\r\3\r\3\r\5\r\u0716\n\r\3\r\3\r\3\r\3\r\3\r\3"+
		"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0725\n\r\3\16\3\16\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\16\3\16\5\16\u0731\n\16\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\5\21\u0743\n\21\3\22"+
		"\3\22\3\22\5\22\u0748\n\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\5\23"+
		"\u0752\n\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25"+
		"\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u076b\n\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\7\30\u0778\n\30"+
		"\f\30\16\30\u077b\13\30\3\30\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\7\33\u078f\n\33\f\33\16\33"+
		"\u0792\13\33\5\33\u0794\n\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3"+
		"\35\5\35\u079f\n\35\3\35\3\35\3\35\3\35\3\35\5\35\u07a6\n\35\3\35\3\35"+
		"\3\36\3\36\5\36\u07ac\n\36\3\37\7\37\u07af\n\37\f\37\16\37\u07b2\13\37"+
		"\3 \3 \3 \3 \3 \3 \5 \u07ba\n \3!\3!\5!\u07be\n!\3!\3!\3\"\3\"\3\"\3\""+
		"\3\"\3\"\3\"\3\"\5\"\u07ca\n\"\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$"+
		"\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u07e9\n$\3%\3%\3%"+
		"\7%\u07ee\n%\f%\16%\u07f1\13%\3&\3&\3&\7&\u07f6\n&\f&\16&\u07f9\13&\3"+
		"\'\3\'\5\'\u07fd\n\'\3(\3(\3(\3(\3(\5(\u0804\n(\3)\3)\3)\3)\5)\u080a\n"+
		")\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u081b\n*\3+\3+\3+\5"+
		"+\u0820\n+\3,\3,\5,\u0824\n,\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0831"+
		"\n.\3/\3/\5/\u0835\n/\3\60\3\60\3\60\5\60\u083a\n\60\3\61\3\61\3\61\5"+
		"\61\u083f\n\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62"+
		"\u084b\n\62\3\63\3\63\3\63\3\63\3\63\3\64\3\64\5\64\u0854\n\64\3\65\3"+
		"\65\3\66\3\66\3\67\3\67\3\67\38\38\38\38\58\u0861\n8\38\38\38\58\u0866"+
		"\n8\38\38\38\38\38\38\38\38\38\58\u0871\n8\38\38\38\38\38\38\38\38\38"+
		"\58\u087c\n8\38\38\38\58\u0881\n8\38\38\38\38\38\38\38\38\38\58\u088c"+
		"\n8\38\38\38\38\38\38\38\38\38\58\u0897\n8\38\38\38\38\38\38\38\58\u08a0"+
		"\n8\38\38\38\38\38\38\38\38\58\u08aa\n8\38\38\38\38\38\38\38\38\38\38"+
		"\38\38\38\58\u08b9\n8\38\38\38\38\38\38\38\38\38\38\58\u08c5\n8\38\38"+
		"\38\58\u08ca\n8\39\39\39\79\u08cf\n9\f9\169\u08d2\139\3:\3:\3:\3:\3:\3"+
		":\3:\3:\5:\u08dc\n:\3;\3;\3;\3;\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u0a10\n<\3=\3=\3=\7=\u0a15"+
		"\n=\f=\16=\u0a18\13=\3>\3>\3>\3>\3>\5>\u0a1f\n>\3?\3?\3?\5?\u0a24\n?\3"+
		"@\3@\3@\5@\u0a29\n@\3A\3A\3A\5A\u0a2e\nA\3B\3B\3B\3B\3B\3B\5B\u0a36\n"+
		"B\3C\3C\3C\3C\3D\3D\3D\5D\u0a3f\nD\3E\3E\3E\7E\u0a44\nE\fE\16E\u0a47\13"+
		"E\3F\3F\3F\3F\3F\3F\3F\5F\u0a50\nF\5F\u0a52\nF\3G\6G\u0a55\nG\rG\16G\u0a56"+
		"\3H\3H\3H\3H\5H\u0a5d\nH\3H\3H\3H\3H\5H\u0a63\nH\5H\u0a65\nH\3I\3I\3I"+
		"\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I"+
		"\5I\u0a81\nI\3J\3J\3J\3K\3K\3K\7K\u0a89\nK\fK\16K\u0a8c\13K\3L\3L\3L\3"+
		"L\3L\3M\3M\3M\7M\u0a96\nM\fM\16M\u0a99\13M\3N\3N\3N\3N\3N\3N\3N\3N\3N"+
		"\5N\u0aa4\nN\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u0ab2\nN\3O\3O\3O"+
		"\5O\u0ab7\nO\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P"+
		"\3P\3P\3P\5P\u0acf\nP\3Q\3Q\3R\3R\5R\u0ad5\nR\3S\3S\3S\5S\u0ada\nS\3T"+
		"\3T\3T\3T\3T\5T\u0ae1\nT\3U\7U\u0ae4\nU\fU\16U\u0ae7\13U\3V\3V\3V\3V\3"+
		"V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3"+
		"V\3V\3V\3V\3V\3V\3V\3V\5V\u0b0c\nV\3W\3W\5W\u0b10\nW\3X\3X\3X\3X\3X\5"+
		"X\u0b17\nX\3Y\3Y\5Y\u0b1b\nY\3Z\3Z\3Z\7Z\u0b20\nZ\fZ\16Z\u0b23\13Z\3["+
		"\3[\3[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u0b30\n\\\3]\3]\3]\7]\u0b35"+
		"\n]\f]\16]\u0b38\13]\3^\3^\3_\3_\3_\3_\3_\3_\5_\u0b42\n_\3_\3_\3_\3_\3"+
		"_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3"+
		"_\3_\3_\3_\5_\u0b63\n_\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0b6d\n`\3a\3a\5a\u0b71"+
		"\na\3b\3b\3b\3b\3b\5b\u0b78\nb\3c\3c\3c\7c\u0b7d\nc\fc\16c\u0b80\13c\3"+
		"d\3d\3d\7d\u0b85\nd\fd\16d\u0b88\13d\3e\3e\3e\5e\u0b8d\ne\3f\3f\5f\u0b91"+
		"\nf\3g\3g\3g\3g\3g\3h\3h\3h\5h\u0b9b\nh\3h\3h\3i\7i\u0ba0\ni\fi\16i\u0ba3"+
		"\13i\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0bad\nj\3k\3k\3k\3k\3k\3k\3k\3k\3k\3"+
		"k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\5k\u0bcd"+
		"\nk\3k\3k\3k\3k\3k\3k\5k\u0bd5\nk\3l\3l\3l\5l\u0bda\nl\3m\3m\3m\3m\3m"+
		"\5m\u0be1\nm\3n\3n\3n\3n\3o\3o\7o\u0be9\no\fo\16o\u0bec\13o\3p\3p\3q\3"+
		"q\3q\3q\3q\5q\u0bf5\nq\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3"+
		"r\3r\3r\5r\u0c09\nr\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0c18\n"+
		"r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3"+
		"r\5r\u0c31\nr\3s\3s\3s\5s\u0c36\ns\3t\3t\3t\3t\3t\5t\u0c3d\nt\3u\3u\3"+
		"u\7u\u0c42\nu\fu\16u\u0c45\13u\3v\3v\3w\3w\3w\3w\3w\3w\5w\u0c4f\nw\3x"+
		"\3x\3x\5x\u0c54\nx\3y\3y\3y\7y\u0c59\ny\fy\16y\u0c5c\13y\3z\3z\3z\3z\3"+
		"z\3z\3z\3z\5z\u0c66\nz\3{\3{\3{\3{\3{\3{\5{\u0c6e\n{\3|\3|\3|\3|\3|\3"+
		"|\3|\3|\3|\5|\u0c79\n|\3}\3}\3}\3}\3~\3~\3~\3~\3\177\3\177\3\177\3\177"+
		"\3\177\3\177\5\177\u0c89\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0c91\n\u0080\3\u0081\3\u0081\5\u0081\u0c95\n\u0081\3"+
		"\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083"+
		"\3\u0083\7\u0083\u0ca1\n\u0083\f\u0083\16\u0083\u0ca4\13\u0083\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0cb4\n\u0084\3\u0085\3\u0085"+
		"\3\u0085\5\u0085\u0cb9\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\5\u0086\u0cc0\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\5\u0087\u0cc9\n\u0087\3\u0087\5\u0087\u0ccc\n\u0087\3\u0088\3"+
		"\u0088\3\u0088\5\u0088\u0cd1\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3"+
		"\u0089\5\u0089\u0cd8\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0ce3\n\u008b\3\u008b\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\5\u008c\u0cf0\n\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0cfd\n\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0d0f\n\u008f"+
		"\3\u008f\5\u008f\u0d12\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\5\u0090\u0d1b\n\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092"+
		"\5\u0092\u0d2a\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0d39"+
		"\n\u0094\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095"+
		"\u0d42\n\u0095\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096\5\u0096\u0d49\n"+
		"\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0d50\n\u0097\3"+
		"\u0098\6\u0098\u0d53\n\u0098\r\u0098\16\u0098\u0d54\3\u0099\3\u0099\3"+
		"\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099"+
		"\u0d73\n\u0099\5\u0099\u0d75\n\u0099\3\u009a\3\u009a\5\u009a\u0d79\n\u009a"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0d81\n\u009b"+
		"\3\u009c\3\u009c\3\u009c\7\u009c\u0d86\n\u009c\f\u009c\16\u009c\u0d89"+
		"\13\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\5\u009d\u0d96\n\u009d\3\u009e\3\u009e\5\u009e"+
		"\u0d9a\n\u009e\3\u009f\3\u009f\5\u009f\u0d9e\n\u009f\3\u00a0\3\u00a0\3"+
		"\u00a0\5\u00a0\u0da3\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0da9"+
		"\n\u00a1\3\u00a2\3\u00a2\5\u00a2\u0dad\n\u00a2\3\u00a3\3\u00a3\5\u00a3"+
		"\u0db1\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0dc0\n\u00a5"+
		"\f\u00a5\16\u00a5\u0dc3\13\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0dcd\n\u00a6\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\5\u00a8"+
		"\u0dda\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0de0\n\u00a9\3"+
		"\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0de9\n"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab\7\u00ab\u0df0\n\u00ab\f"+
		"\u00ab\16\u00ab\u0df3\13\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\5\u00ac\u0dfc\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ae\7\u00ae\u0e05\n\u00ae\f\u00ae\16\u00ae\u0e08"+
		"\13\u00ae\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\5\u00b0\u0e75\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\5\u00b2\u0e87\n\u00b2\3\u00b3\6\u00b3\u0e8a\n\u00b3\r\u00b3\16"+
		"\u00b3\u0e8b\3\u00b4\3\u00b4\5\u00b4\u0e90\n\u00b4\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0ea1\n\u00b5\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0ea9\n\u00b6\3\u00b7\3\u00b7\3\u00b7"+
		"\7\u00b7\u0eae\n\u00b7\f\u00b7\16\u00b7\u0eb1\13\u00b7\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u0ebb\n\u00b9"+
		"\f\u00b9\16\u00b9\u0ebe\13\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\5\u00ba\u0ec7\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bc"+
		"\3\u00bc\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u0ee9\n\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0eee\n"+
		"\u00bf\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0ef3\n\u00c0\3\u00c1\3\u00c1\5"+
		"\u00c1\u0ef7\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5"+
		"\u00c2\u0eff\n\u00c2\5\u00c2\u0f01\n\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0f3b"+
		"\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0f4c"+
		"\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0f54"+
		"\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0f6b\n\u00c7\3\u00c8\3\u00c8"+
		"\5\u00c8\u0f6f\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0f83\n\u00c9\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0fa8\n\u00cd\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0fb1\n\u00ce"+
		"\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0fb6\n\u00cf\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u0fbb\n\u00d0\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0fc0\n\u00d1\3"+
		"\u00d2\3\u00d2\3\u00d2\5\u00d2\u0fc5\n\u00d2\3\u00d3\3\u00d3\3\u00d4\3"+
		"\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5"+
		"\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0ffa\n\u00d6\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\5\u00d7\u1000\n\u00d7\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u1005\n"+
		"\u00d8\f\u00d8\16\u00d8\u1008\13\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1011\n\u00d9\3\u00da\3\u00da\3\u00da"+
		"\5\u00da\u1016\n\u00da\3\u00db\6\u00db\u1019\n\u00db\r\u00db\16\u00db"+
		"\u101a\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00de"+
		"\3\u00de\3\u00df\3\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0"+
		"\u102d\n\u00e0\3\u00e1\3\u00e1\5\u00e1\u1031\n\u00e1\3\u00e2\3\u00e2\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u103b\n\u00e3\3"+
		"\u00e4\3\u00e4\3\u00e5\3\u00e5\5\u00e5\u1041\n\u00e5\3\u00e5\3\u00e5\7"+
		"\u00e5\u1045\n\u00e5\f\u00e5\16\u00e5\u1048\13\u00e5\3\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\5\u00e6\u104e\n\u00e6\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u1053"+
		"\n\u00e7\3\u00e8\7\u00e8\u1056\n\u00e8\f\u00e8\16\u00e8\u1059\13\u00e8"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\5\u00e9\u1066\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u1082\n\u00ea\3\u00eb\3\u00eb"+
		"\3\u00eb\7\u00eb\u1087\n\u00eb\f\u00eb\16\u00eb\u108a\13\u00eb\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed\7\u00ed"+
		"\u1095\n\u00ed\f\u00ed\16\u00ed\u1098\13\u00ed\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef"+
		"\5\u00ef\u10a6\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\5\u00f1\u111b\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f3"+
		"\3\u00f3\3\u00f3\7\u00f3\u1124\n\u00f3\f\u00f3\16\u00f3\u1127\13\u00f3"+
		"\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u112c\n\u00f4\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1134\n\u00f5\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u113d\n\u00f7\f\u00f7\16\u00f7"+
		"\u1140\13\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\5\u00f9"+
		"\u1148\n\u00f9\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u114d\n\u00fa\f\u00fa\16"+
		"\u00fa\u1150\13\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u1177\n\u00fb\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\5\u00fc\u117d\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fe\3\u00fe\3\u00fe\7\u00fe\u1190\n\u00fe\f\u00fe\16\u00fe"+
		"\u1193\13\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\5\u00ff\u11ae\n\u00ff\3\u0100\3\u0100\5\u0100\u11b2\n\u0100\3\u0101\3"+
		"\u0101\3\u0101\5\u0101\u11b7\n\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3"+
		"\u0102\3\u0102\3\u0102\5\u0102\u11c0\n\u0102\3\u0103\3\u0103\5\u0103\u11c4"+
		"\n\u0103\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105"+
		"\u11df\n\u0105\3\u0106\3\u0106\3\u0106\7\u0106\u11e4\n\u0106\f\u0106\16"+
		"\u0106\u11e7\13\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u11f5\n\u0107"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\5\u0108\u1209\n\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\5\u0109\u121d\n\u0109\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u127a"+
		"\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1293\n\u010d"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u129a\n\u010e\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u12aa\n\u010f\3\u0110\3\u0110"+
		"\3\u0111\3\u0111\3\u0111\7\u0111\u12b1\n\u0111\f\u0111\16\u0111\u12b4"+
		"\13\u0111\3\u0112\3\u0112\5\u0112\u12b8\n\u0112\3\u0113\3\u0113\6\u0113"+
		"\u12bc\n\u0113\r\u0113\16\u0113\u12bd\3\u0114\3\u0114\3\u0114\7\u0114"+
		"\u12c3\n\u0114\f\u0114\16\u0114\u12c6\13\u0114\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116"+
		"\u12d3\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1368\n\u0117\3\u0118"+
		"\3\u0118\5\u0118\u136c\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u13c9\n\u0119\3\u011a"+
		"\3\u011a\3\u011a\5\u011a\u13ce\n\u011a\3\u011b\3\u011b\5\u011b\u13d2\n"+
		"\u011b\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u13d8\n\u011c\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\5\u011d\u141c\n\u011d\3\u011e\3\u011e\3\u011f\3\u011f"+
		"\5\u011f\u1422\n\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0121\5\u0121\u143f\n\u0121\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\5\u0122\u1450\n\u0122\3\u0123\3\u0123\3\u0123"+
		"\7\u0123\u1455\n\u0123\f\u0123\16\u0123\u1458\13\u0123\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u1463"+
		"\n\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u149f\n\u0125\3\u0126"+
		"\3\u0126\3\u0126\7\u0126\u14a4\n\u0126\f\u0126\16\u0126\u14a7\13\u0126"+
		"\3\u0127\3\u0127\3\u0127\5\u0127\u14ac\n\u0127\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\5\u0128\u14b2\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\5\u012a\u14cc\n\u012a\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u14d2\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u14d8\n\u012c\3"+
		"\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012e\7\u012e\u14e1\n"+
		"\u012e\f\u012e\16\u012e\u14e4\13\u012e\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u14ef\n\u012f\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130"+
		"\u150c\n\u0130\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\5\u0132\u1533\n\u0132\3\u0133\3\u0133\5\u0133"+
		"\u1537\n\u0133\3\u0134\3\u0134\5\u0134\u153b\n\u0134\3\u0135\3\u0135\5"+
		"\u0135\u153f\n\u0135\3\u0136\3\u0136\3\u0136\5\u0136\u1544\n\u0136\3\u0137"+
		"\3\u0137\3\u0137\7\u0137\u1549\n\u0137\f\u0137\16\u0137\u154c\13\u0137"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\5\u0138\u1559\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1566"+
		"\n\u0139\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u156e"+
		"\n\u013a\3\u013b\3\u013b\3\u013b\7\u013b\u1573\n\u013b\f\u013b\16\u013b"+
		"\u1576\13\u013b\3\u013c\3\u013c\3\u013c\5\u013c\u157b\n\u013c\3\u013d"+
		"\3\u013d\5\u013d\u157f\n\u013d\3\u013e\3\u013e\3\u013e\5\u013e\u1584\n"+
		"\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u158b\n\u013f\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\5\u0140\u1599\n\u0140\5\u0140\u159b\n\u0140\3"+
		"\u0140\3\u0140\3\u0141\3\u0141\3\u0141\5\u0141\u15a2\n\u0141\3\u0142\3"+
		"\u0142\5\u0142\u15a6\n\u0142\3\u0142\3\u0142\3\u0143\3\u0143\3\u0143\7"+
		"\u0143\u15ad\n\u0143\f\u0143\16\u0143\u15b0\13\u0143\3\u0144\3\u0144\3"+
		"\u0144\7\u0144\u15b5\n\u0144\f\u0144\16\u0144\u15b8\13\u0144\3\u0145\3"+
		"\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u15c0\n\u0145\5\u0145\u15c2"+
		"\n\u0145\3\u0146\3\u0146\5\u0146\u15c6\n\u0146\3\u0146\3\u0146\3\u0147"+
		"\3\u0147\3\u0147\7\u0147\u15cd\n\u0147\f\u0147\16\u0147\u15d0\13\u0147"+
		"\3\u0148\3\u0148\5\u0148\u15d4\n\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\5\u0148\u15da\n\u0148\3\u0148\3\u0148\3\u0148\5\u0148\u15df\n\u0148\3"+
		"\u0149\3\u0149\5\u0149\u15e3\n\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u15e8"+
		"\n\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c"+
		"\u15fa\n\u014c\3\u014d\3\u014d\3\u014d\5\u014d\u15ff\n\u014d\3\u014e\3"+
		"\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\5\u014f\u160e\n\u014f\3\u014f\3\u014f\3\u0150"+
		"\3\u0150\3\u0150\7\u0150\u1615\n\u0150\f\u0150\16\u0150\u1618\13\u0150"+
		"\3\u0151\3\u0151\3\u0151\3\u0152\3\u0152\3\u0152\7\u0152\u1620\n\u0152"+
		"\f\u0152\16\u0152\u1623\13\u0152\3\u0153\6\u0153\u1626\n\u0153\r\u0153"+
		"\16\u0153\u1627\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\5\u0154\u164f\n\u0154\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u1659\n\u0155\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u1660\n\u0156\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\7\u0157\u1669\n\u0157\f\u0157"+
		"\16\u0157\u166c\13\u0157\3\u0158\3\u0158\3\u0158\5\u0158\u1671\n\u0158"+
		"\3\u0159\3\u0159\3\u0159\3\u015a\3\u015a\3\u015a\7\u015a\u1679\n\u015a"+
		"\f\u015a\16\u015a\u167c\13\u015a\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\3\u015c\6\u015c\u1685\n\u015c\r\u015c\16\u015c\u1686\3\u015d"+
		"\3\u015d\5\u015d\u168b\n\u015d\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u16b1\n\u015e\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\5\u015f\u16bf\n\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160\u16cd"+
		"\n\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u16e5\n\u0161\3\u0162"+
		"\3\u0162\3\u0162\7\u0162\u16ea\n\u0162\f\u0162\16\u0162\u16ed\13\u0162"+
		"\3\u0162\3\u0162\3\u0163\3\u0163\3\u0163\7\u0163\u16f4\n\u0163\f\u0163"+
		"\16\u0163\u16f7\13\u0163\3\u0164\3\u0164\3\u0164\3\u0165\3\u0165\3\u0165"+
		"\3\u0166\6\u0166\u1700\n\u0166\r\u0166\16\u0166\u1701\3\u0167\3\u0167"+
		"\3\u0167\5\u0167\u1707\n\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\5\u0168\u172b\n\u0168\3\u0169\3\u0169\3\u0169\3\u0169"+
		"\3\u0169\5\u0169\u1732\n\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u1741\n\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c"+
		"\3\u016c\3\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\5\u016d\u1770\n\u016d\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u1795\n\u016f\3\u0170\3\u0170"+
		"\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\7\u0172\u179e\n\u0172\f\u0172"+
		"\16\u0172\u17a1\13\u0172\3\u0173\3\u0173\3\u0174\3\u0174\3\u0174\3\u0174"+
		"\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\7\u0174"+
		"\u17b1\n\u0174\f\u0174\16\u0174\u17b4\13\u0174\3\u0174\3\u0174\3\u0174"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\5\u0175\u17c5\n\u0175\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u199b\n\u0176"+
		"\3\u0177\3\u0177\5\u0177\u199f\n\u0177\3\u0178\3\u0178\3\u0178\5\u0178"+
		"\u19a4\n\u0178\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u19df\n\u0179\3\u017a"+
		"\3\u017a\5\u017a\u19e3\n\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\5\u017b\u1abe\n\u017b\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d"+
		"\3\u017d\7\u017d\u1acb\n\u017d\f\u017d\16\u017d\u1ace\13\u017d\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1ad8"+
		"\n\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\5\u017f\u1adf\n\u017f"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\5\u0181\u1ba0\n\u0181\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0183\3\u0183\5\u0183\u1baa\n\u0183\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u1bb2\n\u0184\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u1bcf"+
		"\n\u0185\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\3\u0187\3\u0187\3\u0187\7\u0187\u1bdd\n\u0187\f\u0187\16\u0187"+
		"\u1be0\13\u0187\3\u0188\3\u0188\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u1c09\n\u0189\3\u018a"+
		"\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a"+
		"\3\u018a\3\u018a\5\u018a\u1c17\n\u018a\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u1c2d"+
		"\n\u018c\3\u018d\3\u018d\3\u018d\7\u018d\u1c32\n\u018d\f\u018d\16\u018d"+
		"\u1c35\13\u018d\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\5\u018e\u1c3c"+
		"\n\u018e\3\u018f\3\u018f\5\u018f\u1c40\n\u018f\3\u0190\3\u0190\3\u0191"+
		"\3\u0191\3\u0191\5\u0191\u1c47\n\u0191\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0193\3\u0193\3\u0193\5\u0193\u1c50\n\u0193\3\u0194\3\u0194\3\u0194"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u1c59\n\u0195\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\5\u0196\u1c8d\n\u0196\3\u0197\3\u0197\3\u0197"+
		"\5\u0197\u1c92\n\u0197\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198"+
		"\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u1c9e\n\u0198\3\u0199\3\u0199"+
		"\5\u0199\u1ca2\n\u0199\3\u0199\7\u0199\u1ca5\n\u0199\f\u0199\16\u0199"+
		"\u1ca8\13\u0199\3\u019a\3\u019a\5\u019a\u1cac\n\u019a\3\u019b\3\u019b"+
		"\5\u019b\u1cb0\n\u019b\3\u019b\3\u019b\5\u019b\u1cb4\n\u019b\3\u019c\3"+
		"\u019c\3\u019c\5\u019c\u1cb9\n\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3"+
		"\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c"+
		"\3\u019c\5\u019c\u1cc9\n\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019d"+
		"\3\u019d\5\u019d\u1cd1\n\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1cd6\n"+
		"\u019d\3\u019e\3\u019e\3\u019e\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u01a0\3\u01a0\5\u01a0\u1ce3\n\u01a0\3\u01a1\6\u01a1\u1ce6\n"+
		"\u01a1\r\u01a1\16\u01a1\u1ce7\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\5\u01a2\u1cef\n\u01a2\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3"+
		"\3\u01a3\3\u01a3\5\u01a3\u1cf9\n\u01a3\3\u01a4\3\u01a4\5\u01a4\u1cfd\n"+
		"\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\5\u01a5\u1d08\n\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u1d13\n\u01a7\3\u01a7\3\u01a7"+
		"\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u1d1b\n\u01a7\3\u01a8\3\u01a8"+
		"\3\u01a8\7\u01a8\u1d20\n\u01a8\f\u01a8\16\u01a8\u1d23\13\u01a8\3\u01a9"+
		"\3\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad"+
		"\u1d49\n\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad"+
		"\u1d51\n\u01ad\3\u01ae\3\u01ae\5\u01ae\u1d55\n\u01ae\3\u01af\3\u01af\3"+
		"\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u1da6\n\u01b0\3\u01b1"+
		"\3\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b2\3\u01b2\3\u01b2\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3"+
		"\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\5\u01b3\u1dc2"+
		"\n\u01b3\3\u01b4\3\u01b4\3\u01b4\5\u01b4\u1dc7\n\u01b4\3\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\5\u01b5\u1dd6\n\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1de2\n\u01b6"+
		"\3\u01b7\3\u01b7\3\u01b7\7\u01b7\u1de7\n\u01b7\f\u01b7\16\u01b7\u1dea"+
		"\13\u01b7\3\u01b8\3\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01ba\3\u01ba\5\u01ba"+
		"\u1df3\n\u01ba\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1df8\n\u01bb\3\u01bc\3"+
		"\u01bc\5\u01bc\u1dfc\n\u01bc\3\u01bd\3\u01bd\5\u01bd\u1e00\n\u01bd\3\u01be"+
		"\3\u01be\5\u01be\u1e04\n\u01be\3\u01bf\3\u01bf\5\u01bf\u1e08\n\u01bf\3"+
		"\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1e0f\n\u01c0\3\u01c1\3"+
		"\u01c1\3\u01c1\3\u01c2\3\u01c2\3\u01c2\7\u01c2\u1e17\n\u01c2\f\u01c2\16"+
		"\u01c2\u1e1a\13\u01c2\3\u01c3\3\u01c3\5\u01c3\u1e1e\n\u01c3\3\u01c4\3"+
		"\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1e30\n\u01c4"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\5\u01c5\u1e3b\n\u01c5\3\u01c6\3\u01c6\3\u01c6\7\u01c6\u1e40\n\u01c6\f"+
		"\u01c6\16\u01c6\u1e43\13\u01c6\3\u01c7\3\u01c7\3\u01c7\3\u01c8\3\u01c8"+
		"\5\u01c8\u1e4a\n\u01c8\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1e4f\n\u01c9\3"+
		"\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cb"+
		"\3\u01cb\3\u01cb\5\u01cb\u1e5c\n\u01cb\3\u01cc\3\u01cc\3\u01cc\3\u01cc"+
		"\5\u01cc\u1e62\n\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1e7f\n\u01cd\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\5\u01ce\u1e86\n\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1e92\n\u01cf"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d1"+
		"\3\u01d1\3\u01d1\5\u01d1\u1e9f\n\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\5\u01d2\u1eae\n\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1eb4\n"+
		"\u01d2\3\u01d3\3\u01d3\3\u01d4\3\u01d4\3\u01d4\7\u01d4\u1ebb\n\u01d4\f"+
		"\u01d4\16\u01d4\u1ebe\13\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d6\3\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6"+
		"\u1ecd\n\u01d6\3\u01d6\5\u01d6\u1ed0\n\u01d6\3\u01d7\3\u01d7\3\u01d7\3"+
		"\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\5\u01d7\u1edb\n\u01d7\3"+
		"\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ee0\n\u01d8\3\u01d9\3\u01d9\3\u01d9\3"+
		"\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01da\3\u01da\3\u01da\5\u01da"+
		"\u1eed\n\u01da\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01dc"+
		"\3\u01dc\3\u01dc\3\u01dc\3\u01dc\5\u01dc\u1efa\n\u01dc\3\u01dd\3\u01dd"+
		"\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1f05"+
		"\n\u01dd\3\u01dd\5\u01dd\u1f08\n\u01dd\3\u01de\3\u01de\5\u01de\u1f0c\n"+
		"\u01de\3\u01df\3\u01df\3\u01df\3\u01df\5\u01df\u1f12\n\u01df\3\u01e0\3"+
		"\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e1"+
		"\3\u01e1\3\u01e1\7\u01e1\u1f20\n\u01e1\f\u01e1\16\u01e1\u1f23\13\u01e1"+
		"\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2"+
		"\3\u01e2\5\u01e2\u1f2f\n\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e4\3\u01e4"+
		"\3\u01e4\7\u01e4\u1f37\n\u01e4\f\u01e4\16\u01e4\u1f3a\13\u01e4\3\u01e5"+
		"\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e6\3\u01e6"+
		"\3\u01e7\3\u01e7\3\u01e7\3\u01e7\3\u01e7\7\u01e7\u1f4b\n\u01e7\f\u01e7"+
		"\16\u01e7\u1f4e\13\u01e7\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\5\u01e8"+
		"\u1f55\n\u01e8\3\u01e9\3\u01e9\5\u01e9\u1f59\n\u01e9\3\u01ea\3\u01ea\3"+
		"\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\5\u01ea\u1f63\n\u01ea\3"+
		"\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\5\u01eb"+
		"\u1f6d\n\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb"+
		"\3\u01eb\3\u01eb\5\u01eb\u1f78\n\u01eb\5\u01eb\u1f7a\n\u01eb\3\u01ec\3"+
		"\u01ec\5\u01ec\u1f7e\n\u01ec\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3"+
		"\u01ed\3\u01ed\3\u01ed\5\u01ed\u1f88\n\u01ed\3\u01ed\3\u01ed\3\u01ed\3"+
		"\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed"+
		"\3\u01ed\3\u01ed\3\u01ed\5\u01ed\u1f99\n\u01ed\5\u01ed\u1f9b\n\u01ed\3"+
		"\u01ed\3\u01ed\3\u01ed\5\u01ed\u1fa0\n\u01ed\7\u01ed\u1fa2\n\u01ed\f\u01ed"+
		"\16\u01ed\u1fa5\13\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u1fab"+
		"\n\u01ee\3\u01ef\3\u01ef\3\u01f0\3\u01f0\3\u01f0\5\u01f0\u1fb2\n\u01f0"+
		"\3\u01f1\3\u01f1\3\u01f1\3\u01f2\3\u01f2\5\u01f2\u1fb9\n\u01f2\3\u01f2"+
		"\3\u01f2\3\u01f3\3\u01f3\3\u01f3\7\u01f3\u1fc0\n\u01f3\f\u01f3\16\u01f3"+
		"\u1fc3\13\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4"+
		"\3\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u1fd1\n\u01f5\3\u01f6"+
		"\3\u01f6\5\u01f6\u1fd5\n\u01f6\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7"+
		"\5\u01f7\u1fdc\n\u01f7\3\u01f7\5\u01f7\u1fdf\n\u01f7\3\u01f8\3\u01f8\5"+
		"\u01f8\u1fe3\n\u01f8\3\u01f9\5\u01f9\u1fe6\n\u01f9\3\u01f9\3\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9"+
		"\u1ff3\n\u01f9\3\u01fa\3\u01fa\5\u01fa\u1ff7\n\u01fa\3\u01fb\3\u01fb\3"+
		"\u01fb\5\u01fb\u1ffc\n\u01fb\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3"+
		"\u01fc\5\u01fc\u2004\n\u01fc\3\u01fd\3\u01fd\5\u01fd\u2008\n\u01fd\3\u01fe"+
		"\3\u01fe\5\u01fe\u200c\n\u01fe\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u0200"+
		"\3\u0200\3\u0200\7\u0200\u2015\n\u0200\f\u0200\16\u0200\u2018\13\u0200"+
		"\3\u0201\3\u0201\3\u0201\3\u0201\5\u0201\u201e\n\u0201\3\u0201\3\u0201"+
		"\3\u0202\3\u0202\5\u0202\u2024\n\u0202\3\u0202\3\u0202\5\u0202\u2028\n"+
		"\u0202\5\u0202\u202a\n\u0202\3\u0203\3\u0203\5\u0203\u202e\n\u0203\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\5\u0204\u2034\n\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\5\u0204\u203d\n\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\5\u0204\u2043\n\u0204\5\u0204\u2045\n\u0204\5\u0204\u2047"+
		"\n\u0204\3\u0205\3\u0205\3\u0205\3\u0205\3\u0205\5\u0205\u204e\n\u0205"+
		"\3\u0206\3\u0206\5\u0206\u2052\n\u0206\3\u0207\3\u0207\3\u0208\3\u0208"+
		"\3\u0208\3\u0208\3\u0208\5\u0208\u205b\n\u0208\3\u0209\3\u0209\5\u0209"+
		"\u205f\n\u0209\3\u020a\3\u020a\3\u020b\3\u020b\3\u020c\3\u020c\3\u020c"+
		"\3\u020c\5\u020c\u2069\n\u020c\3\u020d\3\u020d\3\u020d\7\u020d\u206e\n"+
		"\u020d\f\u020d\16\u020d\u2071\13\u020d\3\u020e\3\u020e\3\u020e\3\u020e"+
		"\3\u020e\5\u020e\u2078\n\u020e\3\u020f\3\u020f\3\u020f\3\u0210\3\u0210"+
		"\3\u0210\3\u0210\3\u0210\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0213\3\u0213\3\u0213\5\u0213"+
		"\u2090\n\u0213\3\u0214\3\u0214\3\u0214\3\u0214\5\u0214\u2096\n\u0214\3"+
		"\u0215\3\u0215\5\u0215\u209a\n\u0215\3\u0216\6\u0216\u209d\n\u0216\r\u0216"+
		"\16\u0216\u209e\3\u0217\3\u0217\3\u0217\3\u0217\3\u0218\3\u0218\3\u0218"+
		"\5\u0218\u20a8\n\u0218\3\u0218\3\u0218\5\u0218\u20ac\n\u0218\3\u0218\5"+
		"\u0218\u20af\n\u0218\3\u0219\3\u0219\3\u0219\5\u0219\u20b4\n\u0219\3\u021a"+
		"\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\7\u021a"+
		"\u20bf\n\u021a\f\u021a\16\u021a\u20c2\13\u021a\3\u021b\3\u021b\3\u021b"+
		"\5\u021b\u20c7\n\u021b\3\u021c\3\u021c\3\u021c\7\u021c\u20cc\n\u021c\f"+
		"\u021c\16\u021c\u20cf\13\u021c\3\u021d\3\u021d\3\u021d\5\u021d\u20d4\n"+
		"\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d"+
		"\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d"+
		"\3\u021d\3\u021d\5\u021d\u20e9\n\u021d\3\u021d\3\u021d\3\u021d\3\u021d"+
		"\3\u021d\3\u021d\3\u021d\5\u021d\u20f2\n\u021d\3\u021d\3\u021d\3\u021d"+
		"\5\u021d\u20f7\n\u021d\3\u021d\3\u021d\3\u021d\3\u021d\5\u021d\u20fd\n"+
		"\u021d\3\u021d\3\u021d\3\u021d\5\u021d\u2102\n\u021d\3\u021d\3\u021d\3"+
		"\u021d\3\u021d\3\u021d\5\u021d\u2109\n\u021d\3\u021d\3\u021d\3\u021d\5"+
		"\u021d\u210e\n\u021d\3\u021d\3\u021d\3\u021d\3\u021d\7\u021d\u2114\n\u021d"+
		"\f\u021d\16\u021d\u2117\13\u021d\3\u021e\5\u021e\u211a\n\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\5\u021e\u2121\n\u021e\3\u021f\3\u021f"+
		"\5\u021f\u2125\n\u021f\3\u0220\3\u0220\3\u0220\5\u0220\u212a\n\u0220\3"+
		"\u0220\5\u0220\u212d\n\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\5"+
		"\u0220\u2134\n\u0220\3\u0221\3\u0221\5\u0221\u2138\n\u0221\3\u0222\3\u0222"+
		"\3\u0222\3\u0222\3\u0222\3\u0222\3\u0222\5\u0222\u2141\n\u0222\3\u0223"+
		"\3\u0223\5\u0223\u2145\n\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223"+
		"\3\u0223\5\u0223\u214d\n\u0223\5\u0223\u214f\n\u0223\3\u0224\3\u0224\3"+
		"\u0224\7\u0224\u2154\n\u0224\f\u0224\16\u0224\u2157\13\u0224\3\u0225\3"+
		"\u0225\5\u0225\u215b\n\u0225\3\u0225\5\u0225\u215e\n\u0225\3\u0226\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0227\3\u0227\3\u0227\3\u0227"+
		"\3\u0227\3\u0227\5\u0227\u216d\n\u0227\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\5\u0228\u2179\n\u0228"+
		"\3\u0229\3\u0229\3\u0229\3\u022a\3\u022a\3\u022a\7\u022a\u2181\n\u022a"+
		"\f\u022a\16\u022a\u2184\13\u022a\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b"+
		"\3\u022b\5\u022b\u218c\n\u022b\3\u022c\3\u022c\3\u022c\5\u022c\u2191\n"+
		"\u022c\3\u022d\3\u022d\3\u022d\5\u022d\u2196\n\u022d\3\u022e\3\u022e\3"+
		"\u022e\3\u022e\3\u022e\5\u022e\u219d\n\u022e\3\u022e\5\u022e\u21a0\n\u022e"+
		"\3\u022f\3\u022f\5\u022f\u21a4\n\u022f\3\u0230\3\u0230\3\u0230\7\u0230"+
		"\u21a9\n\u0230\f\u0230\16\u0230\u21ac\13\u0230\3\u0231\3\u0231\3\u0231"+
		"\3\u0231\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232"+
		"\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232"+
		"\5\u0232\u21c3\n\u0232\3\u0232\3\u0232\3\u0233\3\u0233\3\u0233\7\u0233"+
		"\u21ca\n\u0233\f\u0233\16\u0233\u21cd\13\u0233\3\u0234\3\u0234\3\u0234"+
		"\5\u0234\u21d2\n\u0234\3\u0234\3\u0234\5\u0234\u21d6\n\u0234\3\u0235\6"+
		"\u0235\u21d9\n\u0235\r\u0235\16\u0235\u21da\3\u0236\3\u0236\3\u0236\3"+
		"\u0236\3\u0236\3\u0236\3\u0236\3\u0236\5\u0236\u21e5\n\u0236\3\u0237\3"+
		"\u0237\3\u0237\7\u0237\u21ea\n\u0237\f\u0237\16\u0237\u21ed\13\u0237\3"+
		"\u0238\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238\5\u0238\u21f5\n\u0238\3"+
		"\u0239\5\u0239\u21f8\n\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3"+
		"\u0239\3\u0239\5\u0239\u2201\n\u0239\5\u0239\u2203\n\u0239\3\u0239\3\u0239"+
		"\3\u0239\3\u0239\5\u0239\u2209\n\u0239\3\u023a\3\u023a\5\u023a\u220d\n"+
		"\u023a\3\u023a\7\u023a\u2210\n\u023a\f\u023a\16\u023a\u2213\13\u023a\3"+
		"\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b"+
		"\3\u023b\3\u023b\5\u023b\u2220\n\u023b\5\u023b\u2222\n\u023b\3\u023c\3"+
		"\u023c\3\u023c\3\u023c\5\u023c\u2228\n\u023c\3\u023d\3\u023d\5\u023d\u222c"+
		"\n\u023d\3\u023d\3\u023d\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\5\u023e"+
		"\u2235\n\u023e\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f"+
		"\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f"+
		"\5\u023f\u2247\n\u023f\3\u0240\3\u0240\3\u0240\3\u0240\3\u0240\5\u0240"+
		"\u224e\n\u0240\3\u0241\3\u0241\5\u0241\u2252\n\u0241\3\u0242\3\u0242\5"+
		"\u0242\u2256\n\u0242\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3"+
		"\u0244\3\u0244\3\u0244\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\5\u0245"+
		"\u2266\n\u0245\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\5\u0246\u226d\n"+
		"\u0246\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\5\u0247\u2275\n"+
		"\u0247\3\u0248\3\u0248\5\u0248\u2279\n\u0248\3\u0249\3\u0249\3\u0249\3"+
		"\u0249\3\u0249\5\u0249\u2280\n\u0249\3\u0249\3\u0249\3\u024a\3\u024a\3"+
		"\u024b\3\u024b\3\u024b\3\u024b\3\u024b\3\u024b\3\u024b\5\u024b\u228d\n"+
		"\u024b\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c"+
		"\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\5\u024c\u229d\n\u024c"+
		"\3\u024c\3\u024c\3\u024c\3\u024c\5\u024c\u22a3\n\u024c\3\u024c\3\u024c"+
		"\3\u024c\3\u024c\5\u024c\u22a9\n\u024c\3\u024d\3\u024d\3\u024d\3\u024d"+
		"\3\u024d\5\u024d\u22b0\n\u024d\3\u024e\3\u024e\3\u024e\5\u024e\u22b5\n"+
		"\u024e\3\u024f\3\u024f\3\u0250\3\u0250\5\u0250\u22bb\n\u0250\3\u0251\3"+
		"\u0251\3\u0251\7\u0251\u22c0\n\u0251\f\u0251\16\u0251\u22c3\13\u0251\3"+
		"\u0252\3\u0252\3\u0252\7\u0252\u22c8\n\u0252\f\u0252\16\u0252\u22cb\13"+
		"\u0252\3\u0253\3\u0253\3\u0253\7\u0253\u22d0\n\u0253\f\u0253\16\u0253"+
		"\u22d3\13\u0253\3\u0254\3\u0254\5\u0254\u22d7\n\u0254\3\u0254\3\u0254"+
		"\5\u0254\u22db\n\u0254\3\u0255\5\u0255\u22de\n\u0255\3\u0255\3\u0255\3"+
		"\u0256\3\u0256\5\u0256\u22e4\n\u0256\3\u0257\3\u0257\3\u0257\5\u0257\u22e9"+
		"\n\u0257\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257"+
		"\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\3\u0257\5\u0257\u22f9\n\u0257"+
		"\3\u0257\5\u0257\u22fc\n\u0257\5\u0257\u22fe\n\u0257\3\u0258\3\u0258\3"+
		"\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\5\u0258"+
		"\u230a\n\u0258\5\u0258\u230c\n\u0258\3\u0259\3\u0259\5\u0259\u2310\n\u0259"+
		"\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\5\u0259\u2318\n\u0259"+
		"\5\u0259\u231a\n\u0259\3\u0259\3\u0259\3\u0259\5\u0259\u231f\n\u0259\3"+
		"\u025a\3\u025a\3\u025a\3\u025a\7\u025a\u2325\n\u025a\f\u025a\16\u025a"+
		"\u2328\13\u025a\3\u025b\5\u025b\u232b\n\u025b\3\u025b\3\u025b\3\u025c"+
		"\3\u025c\3\u025c\7\u025c\u2332\n\u025c\f\u025c\16\u025c\u2335\13\u025c"+
		"\3\u025d\3\u025d\3\u025d\7\u025d\u233a\n\u025d\f\u025d\16\u025d\u233d"+
		"\13\u025d\3\u025e\3\u025e\3\u025e\5\u025e\u2342\n\u025e\3\u025f\5\u025f"+
		"\u2345\n\u025f\3\u025f\3\u025f\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260"+
		"\5\u0260\u234e\n\u0260\3\u0261\3\u0261\3\u0261\5\u0261\u2353\n\u0261\3"+
		"\u0262\3\u0262\3\u0262\7\u0262\u2358\n\u0262\f\u0262\16\u0262\u235b\13"+
		"\u0262\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\5\u0263"+
		"\u2364\n\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263"+
		"\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263"+
		"\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\5\u0263"+
		"\u237e\n\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263"+
		"\3\u0263\3\u0263\5\u0263\u2389\n\u0263\7\u0263\u238b\n\u0263\f\u0263\16"+
		"\u0263\u238e\13\u0263\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\5\u0264"+
		"\u2395\n\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\5\u0264\u23ad\n\u0264"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\5\u0264\u23b5\n\u0264"+
		"\3\u0265\3\u0265\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\5\u0266"+
		"\u23bf\n\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266"+
		"\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\5\u0266\u23cd\n\u0266\3\u0266"+
		"\3\u0266\3\u0267\3\u0267\3\u0267\3\u0267\3\u0267\3\u0267\5\u0267\u23d7"+
		"\n\u0267\3\u0268\3\u0268\5\u0268\u23db\n\u0268\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\5\u0269\u23e9\n\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\5\u0269"+
		"\u23f0\n\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\5\u0269\u23f7\n"+
		"\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\5\u0269\u23fe\n\u0269\3"+
		"\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\5\u0269\u2417\n\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\5\u0269"+
		"\u2434\n\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\5\u0269\u245b\n\u0269\5\u0269\u245d\n\u0269\3"+
		"\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\5\u0269"+
		"\u2479\n\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\5\u0269\u248e\n\u0269\3\u026a\3\u026a\3\u026a"+
		"\3\u026a\3\u026a\5\u026a\u2495\n\u026a\3\u026b\3\u026b\3\u026b\3\u026b"+
		"\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\5\u026b\u24a2"+
		"\n\u026b\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026d\3\u026d\3\u026d"+
		"\7\u026d\u24ac\n\u026d\f\u026d\16\u026d\u24af\13\u026d\3\u026e\3\u026e"+
		"\3\u026e\5\u026e\u24b4\n\u026e\3\u026f\3\u026f\3\u0270\3\u0270\3\u0270"+
		"\3\u0270\3\u0270\5\u0270\u24bd\n\u0270\3\u0271\3\u0271\3\u0271\3\u0271"+
		"\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271"+
		"\3\u0271\3\u0271\5\u0271\u24ce\n\u0271\3\u0272\3\u0272\3\u0272\3\u0273"+
		"\3\u0273\3\u0273\3\u0273\3\u0273\3\u0273\3\u0273\5\u0273\u24da\n\u0273"+
		"\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\5\u0274\u24e3"+
		"\n\u0274\3\u0275\3\u0275\3\u0275\5\u0275\u24e8\n\u0275\3\u0276\3\u0276"+
		"\3\u0276\7\u0276\u24ed\n\u0276\f\u0276\16\u0276\u24f0\13\u0276\3\u0277"+
		"\3\u0277\3\u0277\3\u0277\3\u0278\3\u0278\3\u0278\5\u0278\u24f9\n\u0278"+
		"\3\u0278\5\u0278\u24fc\n\u0278\3\u0279\3\u0279\3\u0279\3\u0279\3\u0279"+
		"\3\u0279\3\u0279\3\u027a\3\u027a\5\u027a\u2507\n\u027a\3\u027b\3\u027b"+
		"\3\u027b\3\u027b\5\u027b\u250d\n\u027b\3\u027c\3\u027c\3\u027c\3\u027c"+
		"\3\u027c\3\u027c\3\u027c\3\u027c\3\u027c\3\u027c\3\u027c\3\u027c\3\u027c"+
		"\5\u027c\u251c\n\u027c\3\u027d\3\u027d\3\u027d\3\u027d\3\u027d\3\u027d"+
		"\5\u027d\u2524\n\u027d\3\u027e\3\u027e\3\u027e\3\u027e\3\u027e\3\u027e"+
		"\3\u027e\5\u027e\u252d\n\u027e\3\u027f\3\u027f\3\u027f\3\u027f\3\u027f"+
		"\3\u027f\3\u027f\5\u027f\u2536\n\u027f\3\u027f\5\u027f\u2539\n\u027f\3"+
		"\u0280\3\u0280\3\u0280\5\u0280\u253e\n\u0280\3\u0280\3\u0280\3\u0280\3"+
		"\u0280\3\u0280\3\u0280\3\u0280\5\u0280\u2547\n\u0280\3\u0281\3\u0281\3"+
		"\u0281\5\u0281\u254c\n\u0281\3\u0281\3\u0281\3\u0282\3\u0282\3\u0282\3"+
		"\u0282\3\u0282\3\u0282\3\u0283\3\u0283\3\u0284\3\u0284\5\u0284\u255a\n"+
		"\u0284\3\u0285\3\u0285\3\u0286\3\u0286\3\u0286\3\u0286\3\u0286\3\u0286"+
		"\5\u0286\u2564\n\u0286\3\u0287\3\u0287\3\u0287\3\u0287\3\u0287\3\u0287"+
		"\5\u0287\u256c\n\u0287\3\u0288\3\u0288\3\u0288\3\u0288\3\u0288\3\u0288"+
		"\3\u0288\3\u0288\3\u0288\3\u0288\3\u0288\3\u0288\5\u0288\u257a\n\u0288"+
		"\3\u0289\3\u0289\3\u0289\7\u0289\u257f\n\u0289\f\u0289\16\u0289\u2582"+
		"\13\u0289\3\u028a\3\u028a\3\u028a\7\u028a\u2587\n\u028a\f\u028a\16\u028a"+
		"\u258a\13\u028a\3\u028b\3\u028b\3\u028b\3\u028b\3\u028b\5\u028b\u2591"+
		"\n\u028b\3\u028c\3\u028c\3\u028c\7\u028c\u2596\n\u028c\f\u028c\16\u028c"+
		"\u2599\13\u028c\3\u028d\3\u028d\3\u028d\5\u028d\u259e\n\u028d\3\u028d"+
		"\3\u028d\3\u028e\3\u028e\3\u028e\7\u028e\u25a5\n\u028e\f\u028e\16\u028e"+
		"\u25a8\13\u028e\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f\5\u028f\u25af"+
		"\n\u028f\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290"+
		"\5\u0290\u25b9\n\u0290\3\u0291\3\u0291\3\u0292\3\u0292\3\u0292\3\u0292"+
		"\3\u0292\3\u0292\3\u0292\5\u0292\u25c4\n\u0292\3\u0293\3\u0293\3\u0293"+
		"\3\u0293\3\u0293\5\u0293\u25cb\n\u0293\3\u0294\3\u0294\3\u0294\3\u0294"+
		"\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294"+
		"\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294"+
		"\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\3\u0294\5\u0294\u25e9\n\u0294"+
		"\3\u0295\3\u0295\3\u0295\3\u0295\3\u0295\3\u0295\3\u0295\5\u0295\u25f2"+
		"\n\u0295\3\u0296\3\u0296\3\u0296\3\u0296\3\u0296\5\u0296\u25f9\n\u0296"+
		"\3\u0297\3\u0297\3\u0297\3\u0297\3\u0297\3\u0297\3\u0298\6\u0298\u2602"+
		"\n\u0298\r\u0298\16\u0298\u2603\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299"+
		"\3\u029a\3\u029a\3\u029a\5\u029a\u260e\n\u029a\3\u029b\3\u029b\5\u029b"+
		"\u2612\n\u029b\3\u029c\3\u029c\5\u029c\u2616\n\u029c\3\u029d\3\u029d\3"+
		"\u029d\5\u029d\u261b\n\u029d\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d\3"+
		"\u029d\5\u029d\u2623\n\u029d\3\u029d\3\u029d\5\u029d\u2627\n\u029d\3\u029e"+
		"\3\u029e\5\u029e\u262b\n\u029e\3\u029f\6\u029f\u262e\n\u029f\r\u029f\16"+
		"\u029f\u262f\3\u02a0\7\u02a0\u2633\n\u02a0\f\u02a0\16\u02a0\u2636\13\u02a0"+
		"\3\u02a1\3\u02a1\5\u02a1\u263a\n\u02a1\3\u02a2\3\u02a2\3\u02a2\7\u02a2"+
		"\u263f\n\u02a2\f\u02a2\16\u02a2\u2642\13\u02a2\3\u02a3\3\u02a3\3\u02a3"+
		"\3\u02a3\3\u02a3\5\u02a3\u2649\n\u02a3\3\u02a3\5\u02a3\u264c\n\u02a3\3"+
		"\u02a4\3\u02a4\3\u02a4\7\u02a4\u2651\n\u02a4\f\u02a4\16\u02a4\u2654\13"+
		"\u02a4\3\u02a5\3\u02a5\5\u02a5\u2658\n\u02a5\3\u02a6\3\u02a6\3\u02a6\7"+
		"\u02a6\u265d\n\u02a6\f\u02a6\16\u02a6\u2660\13\u02a6\3\u02a7\3\u02a7\3"+
		"\u02a8\3\u02a8\3\u02a9\3\u02a9\3\u02aa\3\u02aa\3\u02aa\3\u02aa\5\u02aa"+
		"\u266c\n\u02aa\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab"+
		"\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\5\u02ab\u267b\n\u02ab"+
		"\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab"+
		"\3\u02ab\3\u02ab\3\u02ab\5\u02ab\u2689\n\u02ab\3\u02ab\3\u02ab\3\u02ab"+
		"\5\u02ab\u268e\n\u02ab\3\u02ac\3\u02ac\3\u02ad\3\u02ad\3\u02ae\3\u02ae"+
		"\3\u02af\3\u02af\3\u02b0\3\u02b0\3\u02b0\3\u02b1\3\u02b1\3\u02b1\3\u02b1"+
		"\7\u02b1\u269f\n\u02b1\f\u02b1\16\u02b1\u26a2\13\u02b1\3\u02b1\3\u02b1"+
		"\5\u02b1\u26a6\n\u02b1\3\u02b2\3\u02b2\3\u02b2\5\u02b2\u26ab\n\u02b2\3"+
		"\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\5\u02b3\u26b2\n\u02b3\3\u02b4\3"+
		"\u02b4\3\u02b5\3\u02b5\3\u02b5\5\u02b5\u26b9\n\u02b5\3\u02b6\3\u02b6\3"+
		"\u02b6\7\u02b6\u26be\n\u02b6\f\u02b6\16\u02b6\u26c1\13\u02b6\3\u02b7\3"+
		"\u02b7\3\u02b7\3\u02b7\5\u02b7\u26c7\n\u02b7\3\u02b8\3\u02b8\3\u02b8\3"+
		"\u02b8\5\u02b8\u26cd\n\u02b8\3\u02b9\3\u02b9\3\u02b9\3\u02b9\5\u02b9\u26d3"+
		"\n\u02b9\3\u02ba\3\u02ba\3\u02ba\3\u02ba\3\u02ba\3\u02ba\5\u02ba\u26db"+
		"\n\u02ba\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\5\u02bb"+
		"\u26e4\n\u02bb\3\u02bc\3\u02bc\3\u02bd\3\u02bd\3\u02be\3\u02be\3\u02be"+
		"\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be"+
		"\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be"+
		"\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be"+
		"\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be"+
		"\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be\3\u02be"+
		"\3\u02be\3\u02be\3\u02be\5\u02be\u271d\n\u02be\3\u02bf\3\u02bf\3\u02c0"+
		"\3\u02c0\3\u02c1\3\u02c1\3\u02c1\3\u02c1\3\u02c2\7\u02c2\u2728\n\u02c2"+
		"\f\u02c2\16\u02c2\u272b\13\u02c2\3\u02c3\3\u02c3\3\u02c3\3\u02c3\3\u02c3"+
		"\3\u02c3\3\u02c3\3\u02c3\3\u02c3\3\u02c3\3\u02c3\3\u02c3\3\u02c3\3\u02c3"+
		"\3\u02c3\3\u02c3\3\u02c3\3\u02c3\3\u02c3\3\u02c3\5\u02c3\u2741\n\u02c3"+
		"\3\u02c4\3\u02c4\3\u02c5\3\u02c5\3\u02c5\3\u02c5\5\u02c5\u2749\n\u02c5"+
		"\3\u02c6\3\u02c6\5\u02c6\u274d\n\u02c6\3\u02c7\3\u02c7\3\u02c7\3\u02c7"+
		"\3\u02c7\3\u02c7\3\u02c7\3\u02c8\3\u02c8\3\u02c8\5\u02c8\u2759\n\u02c8"+
		"\5\u02c8\u275b\n\u02c8\3\u02c9\3\u02c9\3\u02ca\6\u02ca\u2760\n\u02ca\r"+
		"\u02ca\16\u02ca\u2761\3\u02cb\3\u02cb\3\u02cb\3\u02cb\3\u02cc\3\u02cc"+
		"\3\u02cc\5\u02cc\u276b\n\u02cc\3\u02cd\3\u02cd\3\u02cd\3\u02cd\3\u02cd"+
		"\3\u02cd\3\u02cd\3\u02cd\3\u02cd\3\u02cd\3\u02cd\3\u02cd\3\u02cd\3\u02cd"+
		"\3\u02cd\3\u02cd\5\u02cd\u277d\n\u02cd\3\u02cd\3\u02cd\3\u02ce\3\u02ce"+
		"\3\u02ce\3\u02ce\5\u02ce\u2785\n\u02ce\3\u02cf\3\u02cf\3\u02d0\3\u02d0"+
		"\3\u02d0\3\u02d0\3\u02d0\5\u02d0\u278e\n\u02d0\3\u02d1\3\u02d1\3\u02d1"+
		"\7\u02d1\u2793\n\u02d1\f\u02d1\16\u02d1\u2796\13\u02d1\3\u02d2\3\u02d2"+
		"\3\u02d2\3\u02d3\3\u02d3\3\u02d4\3\u02d4\5\u02d4\u279f\n\u02d4\3\u02d5"+
		"\3\u02d5\3\u02d6\3\u02d6\5\u02d6\u27a5\n\u02d6\3\u02d7\3\u02d7\3\u02d8"+
		"\3\u02d8\3\u02d8\5\u02d8\u27ac\n\u02d8\3\u02d9\3\u02d9\3\u02d9\5\u02d9"+
		"\u27b1\n\u02d9\3\u02da\3\u02da\3\u02da\3\u02da\5\u02da\u27b7\n\u02da\3"+
		"\u02db\3\u02db\5\u02db\u27bb\n\u02db\3\u02dc\3\u02dc\3\u02dd\7\u02dd\u27c0"+
		"\n\u02dd\f\u02dd\16\u02dd\u27c3\13\u02dd\3\u02de\3\u02de\3\u02de\3\u02de"+
		"\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de"+
		"\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de"+
		"\3\u02de\3\u02de\3\u02de\3\u02de\3\u02de\5\u02de\u27e0\n\u02de\3\u02df"+
		"\3\u02df\3\u02df\3\u02df\3\u02e0\3\u02e0\3\u02e0\3\u02e0\3\u02e0\3\u02e0"+
		"\3\u02e0\3\u02e0\3\u02e0\3\u02e0\3\u02e0\3\u02e0\3\u02e0\3\u02e0\5\u02e0"+
		"\u27f4\n\u02e0\3\u02e1\3\u02e1\5\u02e1\u27f8\n\u02e1\3\u02e2\3\u02e2\3"+
		"\u02e2\3\u02e2\3\u02e2\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3"+
		"\3\u02e4\3\u02e4\3\u02e4\5\u02e4\u2808\n\u02e4\3\u02e5\3\u02e5\3\u02e5"+
		"\7\u02e5\u280d\n\u02e5\f\u02e5\16\u02e5\u2810\13\u02e5\3\u02e6\3\u02e6"+
		"\3\u02e6\3\u02e6\3\u02e7\3\u02e7\3\u02e8\3\u02e8\3\u02e9\3\u02e9\5\u02e9"+
		"\u281c\n\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\7\u02e9\u2822\n\u02e9\f"+
		"\u02e9\16\u02e9\u2825\13\u02e9\3\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02ea"+
		"\3\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02eb\3\u02eb\3\u02eb\3\u02eb"+
		"\3\u02eb\7\u02eb\u2836\n\u02eb\f\u02eb\16\u02eb\u2839\13\u02eb\3\u02ec"+
		"\3\u02ec\3\u02ec\5\u02ec\u283e\n\u02ec\3\u02ed\3\u02ed\3\u02ed\3\u02ed"+
		"\3\u02ed\3\u02ed\3\u02ed\3\u02ed\3\u02ee\3\u02ee\5\u02ee\u284a\n\u02ee"+
		"\3\u02ef\6\u02ef\u284d\n\u02ef\r\u02ef\16\u02ef\u284e\3\u02f0\3\u02f0"+
		"\3\u02f0\3\u02f0\3\u02f0\3\u02f1\3\u02f1\3\u02f1\5\u02f1\u2859\n\u02f1"+
		"\3\u02f2\3\u02f2\3\u02f2\3\u02f3\3\u02f3\3\u02f3\3\u02f3\3\u02f3\3\u02f4"+
		"\3\u02f4\3\u02f4\3\u02f4\3\u02f4\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5"+
		"\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5"+
		"\3\u02f5\3\u02f5\3\u02f5\5\u02f5\u2879\n\u02f5\3\u02f6\3\u02f6\3\u02f6"+
		"\5\u02f6\u287e\n\u02f6\3\u02f7\3\u02f7\3\u02f7\3\u02f7\3\u02f7\7\u02f7"+
		"\u2885\n\u02f7\f\u02f7\16\u02f7\u2888\13\u02f7\3\u02f7\3\u02f7\5\u02f7"+
		"\u288c\n\u02f7\3\u02f8\3\u02f8\5\u02f8\u2890\n\u02f8\3\u02f9\3\u02f9\3"+
		"\u02f9\5\u02f9\u2895\n\u02f9\3\u02fa\3\u02fa\3\u02fb\3\u02fb\3\u02fb\3"+
		"\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fc\3\u02fc\3\u02fc"+
		"\5\u02fc\u28a5\n\u02fc\3\u02fd\3\u02fd\3\u02fd\3\u02fd\3\u02fd\3\u02fe"+
		"\3\u02fe\3\u02ff\3\u02ff\3\u02ff\3\u02ff\3\u02ff\3\u02ff\3\u02ff\3\u02ff"+
		"\3\u02ff\5\u02ff\u28b7\n\u02ff\3\u02ff\5\u02ff\u28ba\n\u02ff\3\u02ff\3"+
		"\u02ff\3\u0300\3\u0300\5\u0300\u28c0\n\u0300\3\u0301\3\u0301\3\u0301\3"+
		"\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301"+
		"\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301"+
		"\3\u0301\3\u0301\3\u0301\3\u0301\3\u0301\5\u0301\u28dc\n\u0301\3\u0302"+
		"\3\u0302\3\u0302\3\u0302\3\u0302\3\u0302\3\u0302\3\u0302\5\u0302\u28e6"+
		"\n\u0302\3\u0303\3\u0303\3\u0303\6\u0303\u28eb\n\u0303\r\u0303\16\u0303"+
		"\u28ec\5\u0303\u28ef\n\u0303\3\u0304\3\u0304\3\u0304\5\u0304\u28f4\n\u0304"+
		"\3\u0305\3\u0305\3\u0305\3\u0305\3\u0306\3\u0306\3\u0306\7\u0306\u28fd"+
		"\n\u0306\f\u0306\16\u0306\u2900\13\u0306\3\u0307\3\u0307\3\u0307\3\u0307"+
		"\3\u0307\3\u0308\3\u0308\3\u0308\5\u0308\u290a\n\u0308";
	private static final String _serializedATNSegment1 =
		"\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u030a\3\u030a"+
		"\3\u030a\3\u030b\3\u030b\3\u030b\3\u030b\3\u030b\3\u030b\3\u030b\3\u030b"+
		"\3\u030b\5\u030b\u291f\n\u030b\3\u030b\3\u030b\3\u030c\3\u030c\3\u030c"+
		"\5\u030c\u2926\n\u030c\3\u030d\3\u030d\3\u030d\7\u030d\u292b\n\u030d\f"+
		"\u030d\16\u030d\u292e\13\u030d\3\u030e\3\u030e\3\u030e\5\u030e\u2933\n"+
		"\u030e\3\u030e\5\u030e\u2936\n\u030e\3\u030f\3\u030f\3\u030f\3\u030f\3"+
		"\u030f\3\u030f\3\u030f\3\u030f\3\u030f\5\u030f\u2941\n\u030f\3\u030f\3"+
		"\u030f\3\u030f\3\u030f\3\u030f\5\u030f\u2948\n\u030f\5\u030f\u294a\n\u030f"+
		"\3\u030f\3\u030f\3\u0310\3\u0310\3\u0310\3\u0310\3\u0310\5\u0310\u2953"+
		"\n\u0310\3\u0311\3\u0311\3\u0311\7\u0311\u2958\n\u0311\f\u0311\16\u0311"+
		"\u295b\13\u0311\3\u0312\3\u0312\3\u0312\5\u0312\u2960\n\u0312\3\u0313"+
		"\3\u0313\3\u0313\3\u0313\5\u0313\u2966\n\u0313\3\u0314\3\u0314\5\u0314"+
		"\u296a\n\u0314\3\u0315\3\u0315\3\u0315\3\u0315\3\u0315\3\u0315\3\u0315"+
		"\3\u0315\3\u0316\3\u0316\3\u0317\3\u0317\3\u0317\5\u0317\u2979\n\u0317"+
		"\3\u0318\3\u0318\3\u0318\3\u0318\3\u0318\3\u0318\3\u0318\3\u0318\3\u0318"+
		"\3\u0318\3\u0318\3\u0318\3\u0318\3\u0318\3\u0318\5\u0318\u298a\n\u0318"+
		"\5\u0318\u298c\n\u0318\3\u0319\3\u0319\3\u0319\3\u0319\3\u0319\3\u031a"+
		"\3\u031a\3\u031a\3\u031a\3\u031b\3\u031b\3\u031b\3\u031c\3\u031c\3\u031c"+
		"\3\u031c\3\u031d\3\u031d\3\u031d\3\u031d\3\u031e\3\u031e\5\u031e\u29a4"+
		"\n\u031e\3\u031e\3\u031e\5\u031e\u29a8\n\u031e\3\u031f\3\u031f\3\u031f"+
		"\3\u031f\3\u031f\3\u031f\3\u031f\3\u031f\3\u031f\5\u031f\u29b3\n\u031f"+
		"\3\u031f\5\u031f\u29b6\n\u031f\3\u0320\3\u0320\5\u0320\u29ba\n\u0320\3"+
		"\u0321\3\u0321\3\u0321\5\u0321\u29bf\n\u0321\3\u0322\6\u0322\u29c2\n\u0322"+
		"\r\u0322\16\u0322\u29c3\3\u0323\3\u0323\3\u0323\3\u0323\3\u0323\3\u0324"+
		"\3\u0324\3\u0324\7\u0324\u29ce\n\u0324\f\u0324\16\u0324\u29d1\13\u0324"+
		"\3\u0325\3\u0325\3\u0325\5\u0325\u29d6\n\u0325\3\u0326\3\u0326\5\u0326"+
		"\u29da\n\u0326\3\u0327\3\u0327\5\u0327\u29de\n\u0327\3\u0328\3\u0328\5"+
		"\u0328\u29e2\n\u0328\3\u0329\3\u0329\3\u0329\5\u0329\u29e7\n\u0329\3\u032a"+
		"\3\u032a\5\u032a\u29eb\n\u032a\3\u032b\3\u032b\3\u032c\3\u032c\3\u032c"+
		"\3\u032c\3\u032c\3\u032c\3\u032c\3\u032c\3\u032d\3\u032d\3\u032e\3\u032e"+
		"\3\u032f\3\u032f\3\u0330\3\u0330\3\u0331\3\u0331\3\u0331\3\u0332\3\u0332"+
		"\3\u0332\3\u0332\3\u0332\5\u0332\u2a07\n\u0332\3\u0332\2\3\u04c4\u0333"+
		"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFH"+
		"JLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164"+
		"\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c"+
		"\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194"+
		"\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac"+
		"\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc"+
		"\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4"+
		"\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c"+
		"\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224"+
		"\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c"+
		"\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254"+
		"\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c"+
		"\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284"+
		"\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c"+
		"\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4"+
		"\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc"+
		"\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4"+
		"\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc"+
		"\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314"+
		"\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c"+
		"\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344"+
		"\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c"+
		"\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374"+
		"\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c"+
		"\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4"+
		"\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc"+
		"\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4"+
		"\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec"+
		"\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404"+
		"\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c"+
		"\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434"+
		"\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c"+
		"\u044e\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464"+
		"\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c"+
		"\u047e\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494"+
		"\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac"+
		"\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4"+
		"\u04c6\u04c8\u04ca\u04cc\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc"+
		"\u04de\u04e0\u04e2\u04e4\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4"+
		"\u04f6\u04f8\u04fa\u04fc\u04fe\u0500\u0502\u0504\u0506\u0508\u050a\u050c"+
		"\u050e\u0510\u0512\u0514\u0516\u0518\u051a\u051c\u051e\u0520\u0522\u0524"+
		"\u0526\u0528\u052a\u052c\u052e\u0530\u0532\u0534\u0536\u0538\u053a\u053c"+
		"\u053e\u0540\u0542\u0544\u0546\u0548\u054a\u054c\u054e\u0550\u0552\u0554"+
		"\u0556\u0558\u055a\u055c\u055e\u0560\u0562\u0564\u0566\u0568\u056a\u056c"+
		"\u056e\u0570\u0572\u0574\u0576\u0578\u057a\u057c\u057e\u0580\u0582\u0584"+
		"\u0586\u0588\u058a\u058c\u058e\u0590\u0592\u0594\u0596\u0598\u059a\u059c"+
		"\u059e\u05a0\u05a2\u05a4\u05a6\u05a8\u05aa\u05ac\u05ae\u05b0\u05b2\u05b4"+
		"\u05b6\u05b8\u05ba\u05bc\u05be\u05c0\u05c2\u05c4\u05c6\u05c8\u05ca\u05cc"+
		"\u05ce\u05d0\u05d2\u05d4\u05d6\u05d8\u05da\u05dc\u05de\u05e0\u05e2\u05e4"+
		"\u05e6\u05e8\u05ea\u05ec\u05ee\u05f0\u05f2\u05f4\u05f6\u05f8\u05fa\u05fc"+
		"\u05fe\u0600\u0602\u0604\u0606\u0608\u060a\u060c\u060e\u0610\u0612\u0614"+
		"\u0616\u0618\u061a\u061c\u061e\u0620\u0622\u0624\u0626\u0628\u062a\u062c"+
		"\u062e\u0630\u0632\u0634\u0636\u0638\u063a\u063c\u063e\u0640\u0642\u0644"+
		"\u0646\u0648\u064a\u064c\u064e\u0650\u0652\u0654\u0656\u0658\u065a\u065c"+
		"\u065e\u0660\u0662\2D\4\2\u00d4\u00d4\u0174\u0174\4\2JJ\u0146\u0146\4"+
		"\2tt\u0146\u0146\5\2JJtt\u0146\u0146\4\2\u0096\u0096\u00d0\u00d0\4\2\u0106"+
		"\u0106\u0154\u0154\4\2\f\fnn\4\2\u00b3\u00b3\u0173\u0173\4\2\u00c5\u00c5"+
		"\u00ee\u00ee\7\2!!\u0128\u0128\u0151\u0151\u0168\u0168\u016a\u016a\4\2"+
		"HHnn\4\2\u0168\u0168\u016a\u016a\4\2\u00d9\u00d9\u00f1\u00f1\13\2!!\u00b1"+
		"\u00b1\u00b6\u00b6\u00c4\u00c4\u00ec\u00ec\u00f4\u00f4\u015e\u015e\u0161"+
		"\u0161\u01bf\u01bf\5\2\u0082\u0082\u0124\u0124\u0158\u0158\4\2==[[\5\2"+
		"\u00be\u00be\u010c\u010c\u010e\u010e\7\2!!hh\u00c7\u00c7\u00f9\u00f9\u0179"+
		"\u0179\4\2ll\u00f3\u00f3\3\2\u01c9\u01ca\4\2ll\u01a6\u01a6\4\2\u015d\u015d"+
		"\u01a6\u01a6\4\2\u00e4\u00e4\u0130\u0130\5\2\u0149\u0149\u016d\u016d\u01c6"+
		"\u01c6\4\2HHLL\7\2\u00e5\u00e5\u0151\u0151\u0166\u0166\u0171\u0171\u01d0"+
		"\u01d1\4\2\f\f==\5\2\u00e4\u00e4\u0130\u0130\u01c3\u01c3\5\2\u00c0\u00c0"+
		"\u014b\u014b\u0165\u0165\6\2hh\u00c7\u00c7\u00f9\u00f9\u0179\u0179\4\2"+
		"\u00a8\u00a8\u0106\u0106\4\2\u0141\u0141\u0155\u0155\3\2\"#\4\2tt\u0165"+
		"\u0165\4\2\u00da\u00da\u0156\u0156\3\2\u0212\u0213\4\2\u00e6\u00e6\u0106"+
		"\u0106\4\2\u0148\u0148\u01a6\u01a6\4\2\u00e0\u00e0\u0114\u0114\6\2\u0082"+
		"\u0082\u0084\u0084\u0088\u0088\u008f\u008f\4\2\u0170\u0170\u01e6\u01e6"+
		"\4\2\u018f\u0190\u019e\u019e\3\2\u018f\u0190\3\2\u01aa\u01ab\3\2\24\25"+
		"\4\2\u0086\u0086\u008b\u008b\7\2\f\f\22\23\27\27\31\31\33\33\3\2\16\17"+
		"\5\2\13\13\20\20\35\35\4\2!!@@\5\2**VVpp\4\2\u00b7\u00b7\u00cd\u00cd\4"+
		"\2\u0138\u0138\u01cb\u01cb\4\2\u00e1\u00e1\u0129\u0129\5\2!!%%jj\b\2\13"+
		"\f\16\23\27\27\31\31\33\33\35\35\4\2\26\26\30\30\3\2\u01ec\u01ef\13\2"+
		"\u008d\u008d\u0092\u00a8\u00aa\u018a\u01b9\u01cd\u01d0\u01de\u01e0\u01e0"+
		"\u01e2\u01e2\u01e4\u01e4\u01e7\u01f1\5\2{\u008c\u008e\u0091\u01e1\u01e1"+
		"\f\2!*/\63\65<>NTTV`cdfnpz\u01cf\u01cf\4\2FF\u0085\u0085\4\2\f\f\26\26"+
		"\4\2\u00b8\u00b8\u0204\u0204\4\2\u00a1\u00a1\u00e3\u00e3\'\2$$&&\62\63"+
		"\65\65==AAEEll\u0085\u0085\u008c\u008c\u0093\u0093\u00a1\u00a1\u00aa\u00aa"+
		"\u00ae\u00ae\u00b2\u00b2\u00b8\u00b8\u00bd\u00bd\u00e0\u00e0\u00e3\u00e3"+
		"\u00f9\u00f9\u0101\u0101\u0111\u0111\u0114\u0115\u011f\u011f\u012d\u012d"+
		"\u013b\u013b\u0141\u0141\u0147\u0147\u014b\u014c\u0155\u0155\u0170\u0170"+
		"\u01b9\u01ba\u01e6\u01e6\u01f3\u01ff\u0201\u0201\u0203\u020f\u0211\u0211"+
		"\2\u2d55\2\u0664\3\2\2\2\4\u0667\3\2\2\2\6\u0669\3\2\2\2\b\u0671\3\2\2"+
		"\2\n\u06f3\3\2\2\2\f\u06f5\3\2\2\2\16\u06f9\3\2\2\2\20\u06fc\3\2\2\2\22"+
		"\u0704\3\2\2\2\24\u0709\3\2\2\2\26\u070f\3\2\2\2\30\u0724\3\2\2\2\32\u0730"+
		"\3\2\2\2\34\u0732\3\2\2\2\36\u0738\3\2\2\2 \u0742\3\2\2\2\"\u0744\3\2"+
		"\2\2$\u074d\3\2\2\2&\u0755\3\2\2\2(\u075b\3\2\2\2*\u0762\3\2\2\2,\u0764"+
		"\3\2\2\2.\u0773\3\2\2\2\60\u077e\3\2\2\2\62\u0782\3\2\2\2\64\u0793\3\2"+
		"\2\2\66\u0795\3\2\2\28\u0799\3\2\2\2:\u07ab\3\2\2\2<\u07b0\3\2\2\2>\u07b9"+
		"\3\2\2\2@\u07bb\3\2\2\2B\u07c9\3\2\2\2D\u07cb\3\2\2\2F\u07e8\3\2\2\2H"+
		"\u07ea\3\2\2\2J\u07f2\3\2\2\2L\u07fc\3\2\2\2N\u0803\3\2\2\2P\u0809\3\2"+
		"\2\2R\u081a\3\2\2\2T\u081f\3\2\2\2V\u0823\3\2\2\2X\u0825\3\2\2\2Z\u0830"+
		"\3\2\2\2\\\u0834\3\2\2\2^\u0839\3\2\2\2`\u083e\3\2\2\2b\u0840\3\2\2\2"+
		"d\u084c\3\2\2\2f\u0853\3\2\2\2h\u0855\3\2\2\2j\u0857\3\2\2\2l\u0859\3"+
		"\2\2\2n\u08c9\3\2\2\2p\u08cb\3\2\2\2r\u08db\3\2\2\2t\u08dd\3\2\2\2v\u0a0f"+
		"\3\2\2\2x\u0a11\3\2\2\2z\u0a1e\3\2\2\2|\u0a23\3\2\2\2~\u0a28\3\2\2\2\u0080"+
		"\u0a2d\3\2\2\2\u0082\u0a35\3\2\2\2\u0084\u0a37\3\2\2\2\u0086\u0a3e\3\2"+
		"\2\2\u0088\u0a40\3\2\2\2\u008a\u0a48\3\2\2\2\u008c\u0a54\3\2\2\2\u008e"+
		"\u0a64\3\2\2\2\u0090\u0a80\3\2\2\2\u0092\u0a82\3\2\2\2\u0094\u0a85\3\2"+
		"\2\2\u0096\u0a8d\3\2\2\2\u0098\u0a92\3\2\2\2\u009a\u0ab1\3\2\2\2\u009c"+
		"\u0ab3\3\2\2\2\u009e\u0ace\3\2\2\2\u00a0\u0ad0\3\2\2\2\u00a2\u0ad4\3\2"+
		"\2\2\u00a4\u0ad9\3\2\2\2\u00a6\u0ae0\3\2\2\2\u00a8\u0ae5\3\2\2\2\u00aa"+
		"\u0b0b\3\2\2\2\u00ac\u0b0f\3\2\2\2\u00ae\u0b16\3\2\2\2\u00b0\u0b1a\3\2"+
		"\2\2\u00b2\u0b1c\3\2\2\2\u00b4\u0b24\3\2\2\2\u00b6\u0b2f\3\2\2\2\u00b8"+
		"\u0b31\3\2\2\2\u00ba\u0b39\3\2\2\2\u00bc\u0b3b\3\2\2\2\u00be\u0b6c\3\2"+
		"\2\2\u00c0\u0b70\3\2\2\2\u00c2\u0b77\3\2\2\2\u00c4\u0b79\3\2\2\2\u00c6"+
		"\u0b81\3\2\2\2\u00c8\u0b8c\3\2\2\2\u00ca\u0b90\3\2\2\2\u00cc\u0b92\3\2"+
		"\2\2\u00ce\u0b97\3\2\2\2\u00d0\u0ba1\3\2\2\2\u00d2\u0bac\3\2\2\2\u00d4"+
		"\u0bd4\3\2\2\2\u00d6\u0bd9\3\2\2\2\u00d8\u0be0\3\2\2\2\u00da\u0be2\3\2"+
		"\2\2\u00dc\u0bea\3\2\2\2\u00de\u0bed\3\2\2\2\u00e0\u0bf4\3\2\2\2\u00e2"+
		"\u0c30\3\2\2\2\u00e4\u0c35\3\2\2\2\u00e6\u0c3c\3\2\2\2\u00e8\u0c3e\3\2"+
		"\2\2\u00ea\u0c46\3\2\2\2\u00ec\u0c4e\3\2\2\2\u00ee\u0c53\3\2\2\2\u00f0"+
		"\u0c55\3\2\2\2\u00f2\u0c5d\3\2\2\2\u00f4\u0c6d\3\2\2\2\u00f6\u0c78\3\2"+
		"\2\2\u00f8\u0c7a\3\2\2\2\u00fa\u0c7e\3\2\2\2\u00fc\u0c88\3\2\2\2\u00fe"+
		"\u0c90\3\2\2\2\u0100\u0c94\3\2\2\2\u0102\u0c96\3\2\2\2\u0104\u0c9d\3\2"+
		"\2\2\u0106\u0cb3\3\2\2\2\u0108\u0cb8\3\2\2\2\u010a\u0cbf\3\2\2\2\u010c"+
		"\u0ccb\3\2\2\2\u010e\u0cd0\3\2\2\2\u0110\u0cd7\3\2\2\2\u0112\u0cd9\3\2"+
		"\2\2\u0114\u0cdd\3\2\2\2\u0116\u0ceb\3\2\2\2\u0118\u0cf6\3\2\2\2\u011a"+
		"\u0d03\3\2\2\2\u011c\u0d11\3\2\2\2\u011e\u0d13\3\2\2\2\u0120\u0d21\3\2"+
		"\2\2\u0122\u0d29\3\2\2\2\u0124\u0d2b\3\2\2\2\u0126\u0d32\3\2\2\2\u0128"+
		"\u0d3d\3\2\2\2\u012a\u0d48\3\2\2\2\u012c\u0d4f\3\2\2\2\u012e\u0d52\3\2"+
		"\2\2\u0130\u0d74\3\2\2\2\u0132\u0d78\3\2\2\2\u0134\u0d80\3\2\2\2\u0136"+
		"\u0d82\3\2\2\2\u0138\u0d8a\3\2\2\2\u013a\u0d99\3\2\2\2\u013c\u0d9b\3\2"+
		"\2\2\u013e\u0da2\3\2\2\2\u0140\u0da8\3\2\2\2\u0142\u0dac\3\2\2\2\u0144"+
		"\u0db0\3\2\2\2\u0146\u0db2\3\2\2\2\u0148\u0dbb\3\2\2\2\u014a\u0dcc\3\2"+
		"\2\2\u014c\u0dce\3\2\2\2\u014e\u0dd9\3\2\2\2\u0150\u0ddb\3\2\2\2\u0152"+
		"\u0de3\3\2\2\2\u0154\u0df1\3\2\2\2\u0156\u0dfb\3\2\2\2\u0158\u0dfd\3\2"+
		"\2\2\u015a\u0e06\3\2\2\2\u015c\u0e09\3\2\2\2\u015e\u0e74\3\2\2\2\u0160"+
		"\u0e76\3\2\2\2\u0162\u0e86\3\2\2\2\u0164\u0e89\3\2\2\2\u0166\u0e8f\3\2"+
		"\2\2\u0168\u0ea0\3\2\2\2\u016a\u0ea8\3\2\2\2\u016c\u0eaa\3\2\2\2\u016e"+
		"\u0eb2\3\2\2\2\u0170\u0eb7\3\2\2\2\u0172\u0ec6\3\2\2\2\u0174\u0ec8\3\2"+
		"\2\2\u0176\u0ecb\3\2\2\2\u0178\u0ecd\3\2\2\2\u017a\u0ee8\3\2\2\2\u017c"+
		"\u0eed\3\2\2\2\u017e\u0eef\3\2\2\2\u0180\u0ef6\3\2\2\2\u0182\u0ef8\3\2"+
		"\2\2\u0184\u0f3a\3\2\2\2\u0186\u0f3c\3\2\2\2\u0188\u0f4b\3\2\2\2\u018a"+
		"\u0f53\3\2\2\2\u018c\u0f6a\3\2\2\2\u018e\u0f6e\3\2\2\2\u0190\u0f82\3\2"+
		"\2\2\u0192\u0f84\3\2\2\2\u0194\u0f8d\3\2\2\2\u0196\u0f98\3\2\2\2\u0198"+
		"\u0fa7\3\2\2\2\u019a\u0fb0\3\2\2\2\u019c\u0fb5\3\2\2\2\u019e\u0fba\3\2"+
		"\2\2\u01a0\u0fbf\3\2\2\2\u01a2\u0fc4\3\2\2\2\u01a4\u0fc6\3\2\2\2\u01a6"+
		"\u0fc8\3\2\2\2\u01a8\u0fd1\3\2\2\2\u01aa\u0ff9\3\2\2\2\u01ac\u0fff\3\2"+
		"\2\2\u01ae\u1001\3\2\2\2\u01b0\u1010\3\2\2\2\u01b2\u1015\3\2\2\2\u01b4"+
		"\u1018\3\2\2\2\u01b6\u101c\3\2\2\2\u01b8\u1021\3\2\2\2\u01ba\u1023\3\2"+
		"\2\2\u01bc\u1025\3\2\2\2\u01be\u102c\3\2\2\2\u01c0\u1030\3\2\2\2\u01c2"+
		"\u1032\3\2\2\2\u01c4\u103a\3\2\2\2\u01c6\u103c\3\2\2\2\u01c8\u1040\3\2"+
		"\2\2\u01ca\u104d\3\2\2\2\u01cc\u1052\3\2\2\2\u01ce\u1057\3\2\2\2\u01d0"+
		"\u1065\3\2\2\2\u01d2\u1081\3\2\2\2\u01d4\u1083\3\2\2\2\u01d6\u108b\3\2"+
		"\2\2\u01d8\u1091\3\2\2\2\u01da\u1099\3\2\2\2\u01dc\u10a5\3\2\2\2\u01de"+
		"\u10a7\3\2\2\2\u01e0\u111a\3\2\2\2\u01e2\u111c\3\2\2\2\u01e4\u1120\3\2"+
		"\2\2\u01e6\u1128\3\2\2\2\u01e8\u1133\3\2\2\2\u01ea\u1135\3\2\2\2\u01ec"+
		"\u1139\3\2\2\2\u01ee\u1141\3\2\2\2\u01f0\u1147\3\2\2\2\u01f2\u1149\3\2"+
		"\2\2\u01f4\u1176\3\2\2\2\u01f6\u117c\3\2\2\2\u01f8\u117e\3\2\2\2\u01fa"+
		"\u118c\3\2\2\2\u01fc\u11ad\3\2\2\2\u01fe\u11b1\3\2\2\2\u0200\u11b6\3\2"+
		"\2\2\u0202\u11bf\3\2\2\2\u0204\u11c3\3\2\2\2\u0206\u11c5\3\2\2\2\u0208"+
		"\u11de\3\2\2\2\u020a\u11e0\3\2\2\2\u020c\u11f4\3\2\2\2\u020e\u1208\3\2"+
		"\2\2\u0210\u121c\3\2\2\2\u0212\u121e\3\2\2\2\u0214\u1224\3\2\2\2\u0216"+
		"\u1279\3\2\2\2\u0218\u1292\3\2\2\2\u021a\u1299\3\2\2\2\u021c\u12a9\3\2"+
		"\2\2\u021e\u12ab\3\2\2\2\u0220\u12ad\3\2\2\2\u0222\u12b5\3\2\2\2\u0224"+
		"\u12b9\3\2\2\2\u0226\u12bf\3\2\2\2\u0228\u12c7\3\2\2\2\u022a\u12d2\3\2"+
		"\2\2\u022c\u1367\3\2\2\2\u022e\u136b\3\2\2\2\u0230\u13c8\3\2\2\2\u0232"+
		"\u13cd\3\2\2\2\u0234\u13d1\3\2\2\2\u0236\u13d7\3\2\2\2\u0238\u141b\3\2"+
		"\2\2\u023a\u141d\3\2\2\2\u023c\u1421\3\2\2\2\u023e\u1423\3\2\2\2\u0240"+
		"\u143e\3\2\2\2\u0242\u144f\3\2\2\2\u0244\u1451\3\2\2\2\u0246\u1462\3\2"+
		"\2\2\u0248\u149e\3\2\2\2\u024a\u14a0\3\2\2\2\u024c\u14ab\3\2\2\2\u024e"+
		"\u14b1\3\2\2\2\u0250\u14b3\3\2\2\2\u0252\u14cb\3\2\2\2\u0254\u14d1\3\2"+
		"\2\2\u0256\u14d7\3\2\2\2\u0258\u14d9\3\2\2\2\u025a\u14e2\3\2\2\2\u025c"+
		"\u14ee\3\2\2\2\u025e\u150b\3\2\2\2\u0260\u150d\3\2\2\2\u0262\u1532\3\2"+
		"\2\2\u0264\u1536\3\2\2\2\u0266\u153a\3\2\2\2\u0268\u153e\3\2\2\2\u026a"+
		"\u1543\3\2\2\2\u026c\u1545\3\2\2\2\u026e\u1558\3\2\2\2\u0270\u1565\3\2"+
		"\2\2\u0272\u156d\3\2\2\2\u0274\u156f\3\2\2\2\u0276\u157a\3\2\2\2\u0278"+
		"\u157e\3\2\2\2\u027a\u1583\3\2\2\2\u027c\u158a\3\2\2\2\u027e\u158c\3\2"+
		"\2\2\u0280\u15a1\3\2\2\2\u0282\u15a3\3\2\2\2\u0284\u15a9\3\2\2\2\u0286"+
		"\u15b1\3\2\2\2\u0288\u15c1\3\2\2\2\u028a\u15c3\3\2\2\2\u028c\u15c9\3\2"+
		"\2\2\u028e\u15de\3\2\2\2\u0290\u15e7\3\2\2\2\u0292\u15e9\3\2\2\2\u0294"+
		"\u15eb\3\2\2\2\u0296\u15f9\3\2\2\2\u0298\u15fb\3\2\2\2\u029a\u1600\3\2"+
		"\2\2\u029c\u1602\3\2\2\2\u029e\u1611\3\2\2\2\u02a0\u1619\3\2\2\2\u02a2"+
		"\u161c\3\2\2\2\u02a4\u1625\3\2\2\2\u02a6\u164e\3\2\2\2\u02a8\u1658\3\2"+
		"\2\2\u02aa\u165f\3\2\2\2\u02ac\u1661\3\2\2\2\u02ae\u1670\3\2\2\2\u02b0"+
		"\u1672\3\2\2\2\u02b2\u1675\3\2\2\2\u02b4\u167d\3\2\2\2\u02b6\u1684\3\2"+
		"\2\2\u02b8\u168a\3\2\2\2\u02ba\u16b0\3\2\2\2\u02bc\u16be\3\2\2\2\u02be"+
		"\u16cc\3\2\2\2\u02c0\u16e4\3\2\2\2\u02c2\u16eb\3\2\2\2\u02c4\u16f0\3\2"+
		"\2\2\u02c6\u16f8\3\2\2\2\u02c8\u16fb\3\2\2\2\u02ca\u16ff\3\2\2\2\u02cc"+
		"\u1706\3\2\2\2\u02ce\u172a\3\2\2\2\u02d0\u1731\3\2\2\2\u02d2\u1733\3\2"+
		"\2\2\u02d4\u1740\3\2\2\2\u02d6\u1742\3\2\2\2\u02d8\u176f\3\2\2\2\u02da"+
		"\u1771\3\2\2\2\u02dc\u1794\3\2\2\2\u02de\u1796\3\2\2\2\u02e0\u1798\3\2"+
		"\2\2\u02e2\u179a\3\2\2\2\u02e4\u17a2\3\2\2\2\u02e6\u17a4\3\2\2\2\u02e8"+
		"\u17c4\3\2\2\2\u02ea\u199a\3\2\2\2\u02ec\u199e\3\2\2\2\u02ee\u19a3\3\2"+
		"\2\2\u02f0\u19de\3\2\2\2\u02f2\u19e2\3\2\2\2\u02f4\u1abd\3\2\2\2\u02f6"+
		"\u1abf\3\2\2\2\u02f8\u1ac7\3\2\2\2\u02fa\u1ad7\3\2\2\2\u02fc\u1ade\3\2"+
		"\2\2\u02fe\u1ae0\3\2\2\2\u0300\u1b9f\3\2\2\2\u0302\u1ba1\3\2\2\2\u0304"+
		"\u1ba9\3\2\2\2\u0306\u1bb1\3\2\2\2\u0308\u1bce\3\2\2\2\u030a\u1bd0\3\2"+
		"\2\2\u030c\u1bd9\3\2\2\2\u030e\u1be1\3\2\2\2\u0310\u1c08\3\2\2\2\u0312"+
		"\u1c16\3\2\2\2\u0314\u1c18\3\2\2\2\u0316\u1c2c\3\2\2\2\u0318\u1c2e\3\2"+
		"\2\2\u031a\u1c3b\3\2\2\2\u031c\u1c3f\3\2\2\2\u031e\u1c41\3\2\2\2\u0320"+
		"\u1c46\3\2\2\2\u0322\u1c48\3\2\2\2\u0324\u1c4f\3\2\2\2\u0326\u1c51\3\2"+
		"\2\2\u0328\u1c58\3\2\2\2\u032a\u1c8c\3\2\2\2\u032c\u1c91\3\2\2\2\u032e"+
		"\u1c9d\3\2\2\2\u0330\u1c9f\3\2\2\2\u0332\u1cab\3\2\2\2\u0334\u1cb3\3\2"+
		"\2\2\u0336\u1cb5\3\2\2\2\u0338\u1cd5\3\2\2\2\u033a\u1cd7\3\2\2\2\u033c"+
		"\u1cda\3\2\2\2\u033e\u1ce2\3\2\2\2\u0340\u1ce5\3\2\2\2\u0342\u1ce9\3\2"+
		"\2\2\u0344\u1cf8\3\2\2\2\u0346\u1cfc\3\2\2\2\u0348\u1cfe\3\2\2\2\u034a"+
		"\u1d09\3\2\2\2\u034c\u1d0e\3\2\2\2\u034e\u1d1c\3\2\2\2\u0350\u1d24\3\2"+
		"\2\2\u0352\u1d26\3\2\2\2\u0354\u1d2c\3\2\2\2\u0356\u1d31\3\2\2\2\u0358"+
		"\u1d38\3\2\2\2\u035a\u1d54\3\2\2\2\u035c\u1d56\3\2\2\2\u035e\u1da5\3\2"+
		"\2\2\u0360\u1da7\3\2\2\2\u0362\u1da9\3\2\2\2\u0364\u1dc1\3\2\2\2\u0366"+
		"\u1dc6\3\2\2\2\u0368\u1dd5\3\2\2\2\u036a\u1de1\3\2\2\2\u036c\u1de3\3\2"+
		"\2\2\u036e\u1deb\3\2\2\2\u0370\u1ded\3\2\2\2\u0372\u1df2\3\2\2\2\u0374"+
		"\u1df7\3\2\2\2\u0376\u1dfb\3\2\2\2\u0378\u1dff\3\2\2\2\u037a\u1e03\3\2"+
		"\2\2\u037c\u1e07\3\2\2\2\u037e\u1e0e\3\2\2\2\u0380\u1e10\3\2\2\2\u0382"+
		"\u1e13\3\2\2\2\u0384\u1e1d\3\2\2\2\u0386\u1e2f\3\2\2\2\u0388\u1e3a\3\2"+
		"\2\2\u038a\u1e3c\3\2\2\2\u038c\u1e44\3\2\2\2\u038e\u1e49\3\2\2\2\u0390"+
		"\u1e4e\3\2\2\2\u0392\u1e50\3\2\2\2\u0394\u1e5b\3\2\2\2\u0396\u1e61\3\2"+
		"\2\2\u0398\u1e7e\3\2\2\2\u039a\u1e85\3\2\2\2\u039c\u1e91\3\2\2\2\u039e"+
		"\u1e93\3\2\2\2\u03a0\u1e9b\3\2\2\2\u03a2\u1eb3\3\2\2\2\u03a4\u1eb5\3\2"+
		"\2\2\u03a6\u1eb7\3\2\2\2\u03a8\u1ebf\3\2\2\2\u03aa\u1ecf\3\2\2\2\u03ac"+
		"\u1eda\3\2\2\2\u03ae\u1edf\3\2\2\2\u03b0\u1ee1\3\2\2\2\u03b2\u1eec\3\2"+
		"\2\2\u03b4\u1eee\3\2\2\2\u03b6\u1ef9\3\2\2\2\u03b8\u1f07\3\2\2\2\u03ba"+
		"\u1f0b\3\2\2\2\u03bc\u1f11\3\2\2\2\u03be\u1f13\3\2\2\2\u03c0\u1f1c\3\2"+
		"\2\2\u03c2\u1f2e\3\2\2\2\u03c4\u1f30\3\2\2\2\u03c6\u1f33\3\2\2\2\u03c8"+
		"\u1f3b\3\2\2\2\u03ca\u1f43\3\2\2\2\u03cc\u1f4c\3\2\2\2\u03ce\u1f54\3\2"+
		"\2\2\u03d0\u1f58\3\2\2\2\u03d2\u1f62\3\2\2\2\u03d4\u1f79\3\2\2\2\u03d6"+
		"\u1f7d\3\2\2\2\u03d8\u1f9a\3\2\2\2\u03da\u1faa\3\2\2\2\u03dc\u1fac\3\2"+
		"\2\2\u03de\u1fb1\3\2\2\2\u03e0\u1fb3\3\2\2\2\u03e2\u1fb6\3\2\2\2\u03e4"+
		"\u1fbc\3\2\2\2\u03e6\u1fc4\3\2\2\2\u03e8\u1fd0\3\2\2\2\u03ea\u1fd4\3\2"+
		"\2\2\u03ec\u1fde\3\2\2\2\u03ee\u1fe2\3\2\2\2\u03f0\u1ff2\3\2\2\2\u03f2"+
		"\u1ff6\3\2\2\2\u03f4\u1ffb\3\2\2\2\u03f6\u1ffd\3\2\2\2\u03f8\u2007\3\2"+
		"\2\2\u03fa\u200b\3\2\2\2\u03fc\u200d\3\2\2\2\u03fe\u2011\3\2\2\2\u0400"+
		"\u2019\3\2\2\2\u0402\u2029\3\2\2\2\u0404\u202d\3\2\2\2\u0406\u2046\3\2"+
		"\2\2\u0408\u2048\3\2\2\2\u040a\u2051\3\2\2\2\u040c\u2053\3\2\2\2\u040e"+
		"\u205a\3\2\2\2\u0410\u205e\3\2\2\2\u0412\u2060\3\2\2\2\u0414\u2062\3\2"+
		"\2\2\u0416\u2068\3\2\2\2\u0418\u206a\3\2\2\2\u041a\u2077\3\2\2\2\u041c"+
		"\u2079\3\2\2\2\u041e\u207c\3\2\2\2\u0420\u2081\3\2\2\2\u0422\u2086\3\2"+
		"\2\2\u0424\u208f\3\2\2\2\u0426\u2095\3\2\2\2\u0428\u2099\3\2\2\2\u042a"+
		"\u209c\3\2\2\2\u042c\u20a0\3\2\2\2\u042e\u20a4\3\2\2\2\u0430\u20b3\3\2"+
		"\2\2\u0432\u20b5\3\2\2\2\u0434\u20c6\3\2\2\2\u0436\u20c8\3\2\2\2\u0438"+
		"\u2101\3\2\2\2\u043a\u2119\3\2\2\2\u043c\u2124\3\2\2\2\u043e\u2133\3\2"+
		"\2\2\u0440\u2135\3\2\2\2\u0442\u2140\3\2\2\2\u0444\u214e\3\2\2\2\u0446"+
		"\u2150\3\2\2\2\u0448\u2158\3\2\2\2\u044a\u215f\3\2\2\2\u044c\u216c\3\2"+
		"\2\2\u044e\u2178\3\2\2\2\u0450\u217a\3\2\2\2\u0452\u217d\3\2\2\2\u0454"+
		"\u218b\3\2\2\2\u0456\u2190\3\2\2\2\u0458\u2195\3\2\2\2\u045a\u219f\3\2"+
		"\2\2\u045c\u21a3\3\2\2\2\u045e\u21a5\3\2\2\2\u0460\u21ad\3\2\2\2\u0462"+
		"\u21b1\3\2\2\2\u0464\u21c6\3\2\2\2\u0466\u21ce\3\2\2\2\u0468\u21d8\3\2"+
		"\2\2\u046a\u21e4\3\2\2\2\u046c\u21e6\3\2\2\2\u046e\u21f4\3\2\2\2\u0470"+
		"\u2208\3\2\2\2\u0472\u2211\3\2\2\2\u0474\u2221\3\2\2\2\u0476\u2227\3\2"+
		"\2\2\u0478\u2229\3\2\2\2\u047a\u2234\3\2\2\2\u047c\u2246\3\2\2\2\u047e"+
		"\u224d\3\2\2\2\u0480\u2251\3\2\2\2\u0482\u2255\3\2\2\2\u0484\u2257\3\2"+
		"\2\2\u0486\u225d\3\2\2\2\u0488\u2260\3\2\2\2\u048a\u2267\3\2\2\2\u048c"+
		"\u2274\3\2\2\2\u048e\u2278\3\2\2\2\u0490\u227a\3\2\2\2\u0492\u2283\3\2"+
		"\2\2\u0494\u228c\3\2\2\2\u0496\u22a8\3\2\2\2\u0498\u22aa\3\2\2\2\u049a"+
		"\u22b4\3\2\2\2\u049c\u22b6\3\2\2\2\u049e\u22b8\3\2\2\2\u04a0\u22bc\3\2"+
		"\2\2\u04a2\u22c4\3\2\2\2\u04a4\u22cc\3\2\2\2\u04a6\u22d4\3\2\2\2\u04a8"+
		"\u22dd\3\2\2\2\u04aa\u22e1\3\2\2\2\u04ac\u22e5\3\2\2\2\u04ae\u22ff\3\2"+
		"\2\2\u04b0\u230d\3\2\2\2\u04b2\u2320\3\2\2\2\u04b4\u232a\3\2\2\2\u04b6"+
		"\u232e\3\2\2\2\u04b8\u2336\3\2\2\2\u04ba\u233e\3\2\2\2\u04bc\u2344\3\2"+
		"\2\2\u04be\u2348\3\2\2\2\u04c0\u234f\3\2\2\2\u04c2\u2354\3\2\2\2\u04c4"+
		"\u2363\3\2\2\2\u04c6\u23b4\3\2\2\2\u04c8\u23b6\3\2\2\2\u04ca\u23b8\3\2"+
		"\2\2\u04cc\u23d6\3\2\2\2\u04ce\u23da\3\2\2\2\u04d0\u248d\3\2\2\2\u04d2"+
		"\u2494\3\2\2\2\u04d4\u24a1\3\2\2\2\u04d6\u24a3\3\2\2\2\u04d8\u24a8\3\2"+
		"\2\2\u04da\u24b0\3\2\2\2\u04dc\u24b5\3\2\2\2\u04de\u24bc\3\2\2\2\u04e0"+
		"\u24cd\3\2\2\2\u04e2\u24cf\3\2\2\2\u04e4\u24d9\3\2\2\2\u04e6\u24e2\3\2"+
		"\2\2\u04e8\u24e7\3\2\2\2\u04ea\u24e9\3\2\2\2\u04ec\u24f1\3\2\2\2\u04ee"+
		"\u24fb\3\2\2\2\u04f0\u24fd\3\2\2\2\u04f2\u2506\3\2\2\2\u04f4\u250c\3\2"+
		"\2\2\u04f6\u251b\3\2\2\2\u04f8\u2523\3\2\2\2\u04fa\u252c\3\2\2\2\u04fc"+
		"\u2538\3\2\2\2\u04fe\u2546\3\2\2\2\u0500\u2548\3\2\2\2\u0502\u254f\3\2"+
		"\2\2\u0504\u2555\3\2\2\2\u0506\u2559\3\2\2\2\u0508\u255b\3\2\2\2\u050a"+
		"\u2563\3\2\2\2\u050c\u256b\3\2\2\2\u050e\u2579\3\2\2\2\u0510\u257b\3\2"+
		"\2\2\u0512\u2583\3\2\2\2\u0514\u2590\3\2\2\2\u0516\u2592\3\2\2\2\u0518"+
		"\u259a\3\2\2\2\u051a\u25a1\3\2\2\2\u051c\u25ae\3\2\2\2\u051e\u25b8\3\2"+
		"\2\2\u0520\u25ba\3\2\2\2\u0522\u25bc\3\2\2\2\u0524\u25ca\3\2\2\2\u0526"+
		"\u25e8\3\2\2\2\u0528\u25f1\3\2\2\2\u052a\u25f8\3\2\2\2\u052c\u25fa\3\2"+
		"\2\2\u052e\u2601\3\2\2\2\u0530\u2605\3\2\2\2\u0532\u260d\3\2\2\2\u0534"+
		"\u2611\3\2\2\2\u0536\u2613\3\2\2\2\u0538\u2626\3\2\2\2\u053a\u262a\3\2"+
		"\2\2\u053c\u262d\3\2\2\2\u053e\u2634\3\2\2\2\u0540\u2639\3\2\2\2\u0542"+
		"\u263b\3\2\2\2\u0544\u264b\3\2\2\2\u0546\u264d\3\2\2\2\u0548\u2655\3\2"+
		"\2\2\u054a\u2659\3\2\2\2\u054c\u2661\3\2\2\2\u054e\u2663\3\2\2\2\u0550"+
		"\u2665\3\2\2\2\u0552\u266b\3\2\2\2\u0554\u268d\3\2\2\2\u0556\u268f\3\2"+
		"\2\2\u0558\u2691\3\2\2\2\u055a\u2693\3\2\2\2\u055c\u2695\3\2\2\2\u055e"+
		"\u2697\3\2\2\2\u0560\u26a5\3\2\2\2\u0562\u26aa\3\2\2\2\u0564\u26b1\3\2"+
		"\2\2\u0566\u26b3\3\2\2\2\u0568\u26b8\3\2\2\2\u056a\u26ba\3\2\2\2\u056c"+
		"\u26c6\3\2\2\2\u056e\u26cc\3\2\2\2\u0570\u26d2\3\2\2\2\u0572\u26da\3\2"+
		"\2\2\u0574\u26e3\3\2\2\2\u0576\u26e5\3\2\2\2\u0578\u26e7\3\2\2\2\u057a"+
		"\u271c\3\2\2\2\u057c\u271e\3\2\2\2\u057e\u2720\3\2\2\2\u0580\u2722\3\2"+
		"\2\2\u0582\u2729\3\2\2\2\u0584\u2740\3\2\2\2\u0586\u2742\3\2\2\2\u0588"+
		"\u2748\3\2\2\2\u058a\u274c\3\2\2\2\u058c\u274e\3\2\2\2\u058e\u2755\3\2"+
		"\2\2\u0590\u275c\3\2\2\2\u0592\u275f\3\2\2\2\u0594\u2763\3\2\2\2\u0596"+
		"\u276a\3\2\2\2\u0598\u276c\3\2\2\2\u059a\u2784\3\2\2\2\u059c\u2786\3\2"+
		"\2\2\u059e\u278d\3\2\2\2\u05a0\u278f\3\2\2\2\u05a2\u2797\3\2\2\2\u05a4"+
		"\u279a\3\2\2\2\u05a6\u279e\3\2\2\2\u05a8\u27a0\3\2\2\2\u05aa\u27a4\3\2"+
		"\2\2\u05ac\u27a6\3\2\2\2\u05ae\u27ab\3\2\2\2\u05b0\u27b0\3\2\2\2\u05b2"+
		"\u27b6\3\2\2\2\u05b4\u27ba\3\2\2\2\u05b6\u27bc\3\2\2\2\u05b8\u27c1\3\2"+
		"\2\2\u05ba\u27df\3\2\2\2\u05bc\u27e1\3\2\2\2\u05be\u27f3\3\2\2\2\u05c0"+
		"\u27f7\3\2\2\2\u05c2\u27f9\3\2\2\2\u05c4\u27fe\3\2\2\2\u05c6\u2807\3\2"+
		"\2\2\u05c8\u2809\3\2\2\2\u05ca\u2811\3\2\2\2\u05cc\u2815\3\2\2\2\u05ce"+
		"\u2817\3\2\2\2\u05d0\u281b\3\2\2\2\u05d2\u2826\3\2\2\2\u05d4\u2837\3\2"+
		"\2\2\u05d6\u283d\3\2\2\2\u05d8\u283f\3\2\2\2\u05da\u2849\3\2\2\2\u05dc"+
		"\u284c\3\2\2\2\u05de\u2850\3\2\2\2\u05e0\u2858\3\2\2\2\u05e2\u285a\3\2"+
		"\2\2\u05e4\u285d\3\2\2\2\u05e6\u2862\3\2\2\2\u05e8\u2867\3\2\2\2\u05ea"+
		"\u287d\3\2\2\2\u05ec\u288b\3\2\2\2\u05ee\u288f\3\2\2\2\u05f0\u2894\3\2"+
		"\2\2\u05f2\u2896\3\2\2\2\u05f4\u2898\3\2\2\2\u05f6\u28a4\3\2\2\2\u05f8"+
		"\u28a6\3\2\2\2\u05fa\u28ab\3\2\2\2\u05fc\u28ad\3\2\2\2\u05fe\u28bf\3\2"+
		"\2\2\u0600\u28db\3\2\2\2\u0602\u28e5\3\2\2\2\u0604\u28ee\3\2\2\2\u0606"+
		"\u28f3\3\2\2\2\u0608\u28f5\3\2\2\2\u060a\u28f9\3\2\2\2\u060c\u2901\3\2"+
		"\2\2\u060e\u2909\3\2\2\2\u0610\u290b\3\2\2\2\u0612\u2912\3\2\2\2\u0614"+
		"\u2915\3\2\2\2\u0616\u2925\3\2\2\2\u0618\u2927\3\2\2\2\u061a\u2935\3\2"+
		"\2\2\u061c\u2937\3\2\2\2\u061e\u2952\3\2\2\2\u0620\u2954\3\2\2\2\u0622"+
		"\u295f\3\2\2\2\u0624\u2965\3\2\2\2\u0626\u2969\3\2\2\2\u0628\u296b\3\2"+
		"\2\2\u062a\u2973\3\2\2\2\u062c\u2978\3\2\2\2\u062e\u298b\3\2\2\2\u0630"+
		"\u298d\3\2\2\2\u0632\u2992\3\2\2\2\u0634\u2996\3\2\2\2\u0636\u2999\3\2"+
		"\2\2\u0638\u299d\3\2\2\2\u063a\u29a7\3\2\2\2\u063c\u29b5\3\2\2\2\u063e"+
		"\u29b9\3\2\2\2\u0640\u29be\3\2\2\2\u0642\u29c1\3\2\2\2\u0644\u29c5\3\2"+
		"\2\2\u0646\u29ca\3\2\2\2\u0648\u29d5\3\2\2\2\u064a\u29d9\3\2\2\2\u064c"+
		"\u29dd\3\2\2\2\u064e\u29e1\3\2\2\2\u0650\u29e6\3\2\2\2\u0652\u29ea\3\2"+
		"\2\2\u0654\u29ec\3\2\2\2\u0656\u29ee\3\2\2\2\u0658\u29f6\3\2\2\2\u065a"+
		"\u29f8\3\2\2\2\u065c\u29fa\3\2\2\2\u065e\u29fc\3\2\2\2\u0660\u29fe\3\2"+
		"\2\2\u0662\u2a06\3\2\2\2\u0664\u0665\5\6\4\2\u0665\u0666\7\2\2\3\u0666"+
		"\3\3\2\2\2\u0667\u0668\5\u0580\u02c1\2\u0668\5\3\2\2\2\u0669\u066a\5\b"+
		"\5\2\u066a\7\3\2\2\2\u066b\u066d\5\n\6\2\u066c\u066e\7\t\2\2\u066d\u066c"+
		"\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u0670\3\2\2\2\u066f\u066b\3\2\2\2\u0670"+
		"\u0673\3\2\2\2\u0671\u066f\3\2\2\2\u0671\u0672\3\2\2\2\u0672\t\3\2\2\2"+
		"\u0673\u0671\3\2\2\2\u0674\u06f4\5\u01da\u00ee\2\u0675\u06f4\5\u0352\u01aa"+
		"\2\u0676\u06f4\5\u0348\u01a5\2\u0677\u06f4\5\u034a\u01a6\2\u0678\u06f4"+
		"\5\u0258\u012d\2\u0679\u06f4\5\u0358\u01ad\2\u067a\u06f4\5\u01f4\u00fb"+
		"\2\u067b\u06f4\5\u0158\u00ad\2\u067c\u06f4\5\u015e\u00b0\2\u067d\u06f4"+
		"\5\u0168\u00b5\2\u067e\u06f4\5\u0182\u00c2\2\u067f\u06f4\5\u02b4\u015b"+
		"\2\u0680\u06f4\5(\25\2\u0681\u06f4\5\u02f0\u0179\2\u0682\u06f4\5\u02f4"+
		"\u017b\2\u0683\u06f4\5\u0300\u0181\2\u0684\u06f4\5\u02f6\u017c\2\u0685"+
		"\u06f4\5\u02fe\u0180\2\u0686\u06f4\5\u0196\u00cc\2\u0687\u06f4\5\u0128"+
		"\u0095\2\u0688\u06f4\5\u0354\u01ab\2\u0689\u06f4\5n8\2\u068a\u06f4\5\u02e8"+
		"\u0175\2\u068b\u06f4\5\u0096L\2\u068c\u06f4\5\u0308\u0185\2\u068d\u06f4"+
		"\5\"\22\2\u068e\u06f4\5\36\20\2\u068f\u06f4\5\u0310\u0189\2\u0690\u06f4"+
		"\5\u0116\u008c\2\u0691\u06f4\5\u035e\u01b0\2\u0692\u06f4\5\u035c\u01af"+
		"\2\u0693\u06f4\5\u0192\u00ca\2\u0694\u06f4\5\u036a\u01b6\2\u0695\u06f4"+
		"\5\16\b\2\u0696\u06f4\5j\66\2\u0697\u06f4\5\u009cO\2\u0698\u06f4\5\u0364"+
		"\u01b3\2\u0699\u06f4\5\u022c\u0117\2\u069a\u06f4\5d\63\2\u069b\u06f4\5"+
		"\u009eP\2\u069c\u06f4\5\u01a6\u00d4\2\u069d\u06f4\5\u0118\u008d\2\u069e"+
		"\u06f4\5\u01de\u00f0\2\u069f\u06f4\5\u02ce\u0168\2\u06a0\u06f4\5\u02e6"+
		"\u0174\2\u06a1\u06f4\5\u0362\u01b2\2\u06a2\u06f4\5\u0356\u01ac\2\u06a3"+
		"\u06f4\5\u0152\u00aa\2\u06a4\u06f4\5\u0160\u00b1\2\u06a5\u06f4\5\u017a"+
		"\u00be\2\u06a6\u06f4\5\u0184\u00c3\2\u06a7\u06f4\5\u027e\u0140\2\u06a8"+
		"\u06f4\5&\24\2\u06a9\u06f4\5,\27\2\u06aa\u06f4\5\u011e\u0090\2\u06ab\u06f4"+
		"\5\u01f8\u00fd\2\u06ac\u06f4\5\u0206\u0104\2\u06ad\u06f4\5\u0302\u0182"+
		"\2\u06ae\u06f4\5\u0208\u0105\2\u06af\u06f4\5\u0194\u00cb\2\u06b0\u06f4"+
		"\5\u0138\u009d\2\u06b1\u06f4\5\u0146\u00a4\2\u06b2\u06f4\58\35\2\u06b3"+
		"\u06f4\5\u0126\u0094\2\u06b4\u06f4\5\u00bc_\2\u06b5\u06f4\5\u030a\u0186"+
		"\2\u06b6\u06f4\5\u0114\u008b\2\u06b7\u06f4\5\u014c\u00a7\2\u06b8\u06f4"+
		"\5\u02d6\u016c\2\u06b9\u06f4\5\u01aa\u00d6\2\u06ba\u06f4\5\u01d2\u00ea"+
		"\2\u06bb\u06f4\5\20\t\2\u06bc\u06f4\5\34\17\2\u06bd\u06f4\5\u018c\u00c7"+
		"\2\u06be\u06f4\5\u033c\u019f\2\u06bf\u06f4\5\u039c\u01cf\2\u06c0\u06f4"+
		"\5\u03c8\u01e5\2\u06c1\u06f4\5\u01e0\u00f1\2\u06c2\u06f4\5\u03b0\u01d9"+
		"\2\u06c3\u06f4\5l\67\2\u06c4\u06f4\5\u02c8\u0165\2\u06c5\u06f4\5\u02d2"+
		"\u016a\2\u06c6\u06f4\5\u020e\u0108\2\u06c7\u06f4\5\u0210\u0109\2\u06c8"+
		"\u06f4\5\u0212\u010a\2\u06c9\u06f4\5\u0216\u010c\2\u06ca\u06f4\5\u0312"+
		"\u018a\2\u06cb\u06f4\5\u0150\u00a9\2\u06cc\u06f4\5\u02da\u016e\2\u06cd"+
		"\u06f4\5$\23\2\u06ce\u06f4\5\u0190\u00c9\2\u06cf\u06f4\5\u034c\u01a7\2"+
		"\u06d0\u06f4\5\u0398\u01cd\2\u06d1\u06f4\5\u0386\u01c4\2\u06d2\u06f4\5"+
		"\u0236\u011c\2\u06d3\u06f4\5\u023e\u0120\2\u06d4\u06f4\5\u0250\u0129\2"+
		"\u06d5\u06f4\5\u0186\u00c4\2\u06d6\u06f4\5\u0262\u0132\2\u06d7\u06f4\5"+
		"\u039e\u01d0\2\u06d8\u06f4\5\u0326\u0194\2\u06d9\u06f4\5\u0124\u0093\2"+
		"\u06da\u06f4\5\u033a\u019e\2\u06db\u06f4\5\u03b4\u01db\2\u06dc\u06f4\5"+
		"\u0322\u0192\2\u06dd\u06f4\5\u0392\u01ca\2\u06de\u06f4\5\u0214\u010b\2"+
		"\u06df\u06f4\5\u02dc\u016f\2\u06e0\u06f4\5\u02bc\u015f\2\u06e1\u06f4\5"+
		"\u02ba\u015e\2\u06e2\u06f4\5\u02be\u0160\2\u06e3\u06f4\5\u02ea\u0176\2"+
		"\u06e4\u06f4\5\u0240\u0121\2\u06e5\u06f4\5\u0252\u012a\2\u06e6\u06f4\5"+
		"\u0314\u018b\2\u06e7\u06f4\5\u0230\u0119\2\u06e8\u06f4\5\u03d0\u01e9\2"+
		"\u06e9\u06f4\5\u032a\u0196\2\u06ea\u06f4\5\u0228\u0115\2\u06eb\u06f4\5"+
		"\u0328\u0195\2\u06ec\u06f4\5\u03be\u01e0\2\u06ed\u06f4\5\u0368\u01b5\2"+
		"\u06ee\u06f4\5X-\2\u06ef\u06f4\5@!\2\u06f0\u06f4\5b\62\2\u06f1\u06f4\5"+
		"\u0336\u019c\2\u06f2\u06f4\5\f\7\2\u06f3\u0674\3\2\2\2\u06f3\u0675\3\2"+
		"\2\2\u06f3\u0676\3\2\2\2\u06f3\u0677\3\2\2\2\u06f3\u0678\3\2\2\2\u06f3"+
		"\u0679\3\2\2\2\u06f3\u067a\3\2\2\2\u06f3\u067b\3\2\2\2\u06f3\u067c\3\2"+
		"\2\2\u06f3\u067d\3\2\2\2\u06f3\u067e\3\2\2\2\u06f3\u067f\3\2\2\2\u06f3"+
		"\u0680\3\2\2\2\u06f3\u0681\3\2\2\2\u06f3\u0682\3\2\2\2\u06f3\u0683\3\2"+
		"\2\2\u06f3\u0684\3\2\2\2\u06f3\u0685\3\2\2\2\u06f3\u0686\3\2\2\2\u06f3"+
		"\u0687\3\2\2\2\u06f3\u0688\3\2\2\2\u06f3\u0689\3\2\2\2\u06f3\u068a\3\2"+
		"\2\2\u06f3\u068b\3\2\2\2\u06f3\u068c\3\2\2\2\u06f3\u068d\3\2\2\2\u06f3"+
		"\u068e\3\2\2\2\u06f3\u068f\3\2\2\2\u06f3\u0690\3\2\2\2\u06f3\u0691\3\2"+
		"\2\2\u06f3\u0692\3\2\2\2\u06f3\u0693\3\2\2\2\u06f3\u0694\3\2\2\2\u06f3"+
		"\u0695\3\2\2\2\u06f3\u0696\3\2\2\2\u06f3\u0697\3\2\2\2\u06f3\u0698\3\2"+
		"\2\2\u06f3\u0699\3\2\2\2\u06f3\u069a\3\2\2\2\u06f3\u069b\3\2\2\2\u06f3"+
		"\u069c\3\2\2\2\u06f3\u069d\3\2\2\2\u06f3\u069e\3\2\2\2\u06f3\u069f\3\2"+
		"\2\2\u06f3\u06a0\3\2\2\2\u06f3\u06a1\3\2\2\2\u06f3\u06a2\3\2\2\2\u06f3"+
		"\u06a3\3\2\2\2\u06f3\u06a4\3\2\2\2\u06f3\u06a5\3\2\2\2\u06f3\u06a6\3\2"+
		"\2\2\u06f3\u06a7\3\2\2\2\u06f3\u06a8\3\2\2\2\u06f3\u06a9\3\2\2\2\u06f3"+
		"\u06aa\3\2\2\2\u06f3\u06ab\3\2\2\2\u06f3\u06ac\3\2\2\2\u06f3\u06ad\3\2"+
		"\2\2\u06f3\u06ae\3\2\2\2\u06f3\u06af\3\2\2\2\u06f3\u06b0\3\2\2\2\u06f3"+
		"\u06b1\3\2\2\2\u06f3\u06b2\3\2\2\2\u06f3\u06b3\3\2\2\2\u06f3\u06b4\3\2"+
		"\2\2\u06f3\u06b5\3\2\2\2\u06f3\u06b6\3\2\2\2\u06f3\u06b7\3\2\2\2\u06f3"+
		"\u06b8\3\2\2\2\u06f3\u06b9\3\2\2\2\u06f3\u06ba\3\2\2\2\u06f3\u06bb\3\2"+
		"\2\2\u06f3\u06bc\3\2\2\2\u06f3\u06bd\3\2\2\2\u06f3\u06be\3\2\2\2\u06f3"+
		"\u06bf\3\2\2\2\u06f3\u06c0\3\2\2\2\u06f3\u06c1\3\2\2\2\u06f3\u06c2\3\2"+
		"\2\2\u06f3\u06c3\3\2\2\2\u06f3\u06c4\3\2\2\2\u06f3\u06c5\3\2\2\2\u06f3"+
		"\u06c6\3\2\2\2\u06f3\u06c7\3\2\2\2\u06f3\u06c8\3\2\2\2\u06f3\u06c9\3\2"+
		"\2\2\u06f3\u06ca\3\2\2\2\u06f3\u06cb\3\2\2\2\u06f3\u06cc\3\2\2\2\u06f3"+
		"\u06cd\3\2\2\2\u06f3\u06ce\3\2\2\2\u06f3\u06cf\3\2\2\2\u06f3\u06d0\3\2"+
		"\2\2\u06f3\u06d1\3\2\2\2\u06f3\u06d2\3\2\2\2\u06f3\u06d3\3\2\2\2\u06f3"+
		"\u06d4\3\2\2\2\u06f3\u06d5\3\2\2\2\u06f3\u06d6\3\2\2\2\u06f3\u06d7\3\2"+
		"\2\2\u06f3\u06d8\3\2\2\2\u06f3\u06d9\3\2\2\2\u06f3\u06da\3\2\2\2\u06f3"+
		"\u06db\3\2\2\2\u06f3\u06dc\3\2\2\2\u06f3\u06dd\3\2\2\2\u06f3\u06de\3\2"+
		"\2\2\u06f3\u06df\3\2\2\2\u06f3\u06e0\3\2\2\2\u06f3\u06e1\3\2\2\2\u06f3"+
		"\u06e2\3\2\2\2\u06f3\u06e3\3\2\2\2\u06f3\u06e4\3\2\2\2\u06f3\u06e5\3\2"+
		"\2\2\u06f3\u06e6\3\2\2\2\u06f3\u06e7\3\2\2\2\u06f3\u06e8\3\2\2\2\u06f3"+
		"\u06e9\3\2\2\2\u06f3\u06ea\3\2\2\2\u06f3\u06eb\3\2\2\2\u06f3\u06ec\3\2"+
		"\2\2\u06f3\u06ed\3\2\2\2\u06f3\u06ee\3\2\2\2\u06f3\u06ef\3\2\2\2\u06f3"+
		"\u06f0\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f3\u06f2\3\2\2\2\u06f4\13\3\2\2"+
		"\2\u06f5\u06f7\7\u0232\2\2\u06f6\u06f8\7\u0233\2\2\u06f7\u06f6\3\2\2\2"+
		"\u06f7\u06f8\3\2\2\2\u06f8\r\3\2\2\2\u06f9\u06fa\7\u01b9\2\2\u06fa\u06fb"+
		"\5\u04ca\u0266\2\u06fb\17\3\2\2\2\u06fc\u06fd\7\66\2\2\u06fd\u06fe\7\u0146"+
		"\2\2\u06fe\u06ff\5\u0566\u02b4\2\u06ff\u0700\5\22\n\2\u0700\u0701\5\24"+
		"\13\2\u0701\21\3\2\2\2\u0702\u0705\7z\2\2\u0703\u0705\3\2\2\2\u0704\u0702"+
		"\3\2\2\2\u0704\u0703\3\2\2\2\u0705\23\3\2\2\2\u0706\u0708\5\32\16\2\u0707"+
		"\u0706\3\2\2\2\u0708\u070b\3\2\2\2\u0709\u0707\3\2\2\2\u0709\u070a\3\2"+
		"\2\2\u070a\25\3\2\2\2\u070b\u0709\3\2\2\2\u070c\u070e\5\30\r\2\u070d\u070c"+
		"\3\2\2\2\u070e\u0711\3\2\2\2\u070f\u070d\3\2\2\2\u070f\u0710\3\2\2\2\u0710"+
		"\27\3\2\2\2\u0711\u070f\3\2\2\2\u0712\u0715\7\u0127\2\2\u0713\u0716\5"+
		"\u055e\u02b0\2\u0714\u0716\7[\2\2\u0715\u0713\3\2\2\2\u0715\u0714\3\2"+
		"\2\2\u0716\u0725\3\2\2\2\u0717\u0718\t\2\2\2\u0718\u0719\7\u0127\2\2\u0719"+
		"\u0725\5\u055e\u02b0\2\u071a\u0725\7\u00f5\2\2\u071b\u071c\7\u00b5\2\2"+
		"\u071c\u071d\7W\2\2\u071d\u0725\5\u0564\u02b3\2\u071e\u071f\7\u017b\2"+
		"\2\u071f\u0720\7\u0178\2\2\u0720\u0725\5\u055e\u02b0\2\u0721\u0722\7t"+
		"\2\2\u0722\u0725\5\u056a\u02b6\2\u0723\u0725\5\u0574\u02bb\2\u0724\u0712"+
		"\3\2\2\2\u0724\u0717\3\2\2\2\u0724\u071a\3\2\2\2\u0724\u071b\3\2\2\2\u0724"+
		"\u071e\3\2\2\2\u0724\u0721\3\2\2\2\u0724\u0723\3\2\2\2\u0725\31\3\2\2"+
		"\2\u0726\u0731\5\30\r\2\u0727\u0728\7\u0164\2\2\u0728\u0731\5\u055c\u02af"+
		"\2\u0729\u072a\7\u0097\2\2\u072a\u0731\5\u056a\u02b6\2\u072b\u072c\7\u0146"+
		"\2\2\u072c\u0731\5\u056a\u02b6\2\u072d\u072e\7L\2\2\u072e\u072f\t\3\2"+
		"\2\u072f\u0731\5\u056a\u02b6\2\u0730\u0726\3\2\2\2\u0730\u0727\3\2\2\2"+
		"\u0730\u0729\3\2\2\2\u0730\u072b\3\2\2\2\u0730\u072d\3\2\2\2\u0731\33"+
		"\3\2\2\2\u0732\u0733\7\66\2\2\u0733\u0734\7t\2\2\u0734\u0735\5\u0566\u02b4"+
		"\2\u0735\u0736\5\22\n\2\u0736\u0737\5\24\13\2\u0737\35\3\2\2\2\u0738\u0739"+
		"\7\u009b\2\2\u0739\u073a\t\4\2\2\u073a\u073b\5\u0568\u02b5\2\u073b\u073c"+
		"\5\22\n\2\u073c\u073d\5\26\f\2\u073d\37\3\2\2\2\u073e\u0743\3\2\2\2\u073f"+
		"\u0740\7L\2\2\u0740\u0741\7\u00c0\2\2\u0741\u0743\5\u054c\u02a7\2\u0742"+
		"\u073e\3\2\2\2\u0742\u073f\3\2\2\2\u0743!\3\2\2\2\u0744\u0745\7\u009b"+
		"\2\2\u0745\u0747\t\4\2\2\u0746\u0748\7!\2\2\u0747\u0746\3\2\2\2\u0747"+
		"\u0748\3\2\2\2\u0748\u0749\3\2\2\2\u0749\u074a\5\u0568\u02b5\2\u074a\u074b"+
		"\5 \21\2\u074b\u074c\5^\60\2\u074c#\3\2\2\2\u074d\u074e\7\u00d0\2\2\u074e"+
		"\u0751\t\5\2\2\u074f\u0750\7\u00ed\2\2\u0750\u0752\7\u0194\2\2\u0751\u074f"+
		"\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u0754\5\u056a\u02b6"+
		"\2\u0754%\3\2\2\2\u0755\u0756\7\66\2\2\u0756\u0757\7J\2\2\u0757\u0758"+
		"\5\u0566\u02b4\2\u0758\u0759\5\22\n\2\u0759\u075a\5\24\13\2\u075a\'\3"+
		"\2\2\2\u075b\u075c\7\u009b\2\2\u075c\u075d\7J\2\2\u075d\u075e\5\u0568"+
		"\u02b5\2\u075e\u075f\5*\26\2\u075f\u0760\7t\2\2\u0760\u0761\5\u056a\u02b6"+
		"\2\u0761)\3\2\2\2\u0762\u0763\t\6\2\2\u0763+\3\2\2\2\u0764\u0765\7\66"+
		"\2\2\u0765\u0766\7U\2\2\u0766\u076a\5\u0548\u02a5\2\u0767\u0768\7]\2\2"+
		"\u0768\u0769\7\u00a0\2\2\u0769\u076b\5\u0548\u02a5\2\u076a\u0767\3\2\2"+
		"\2\u076a\u076b\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076d\7u\2\2\u076d\u076e"+
		"\7S\2\2\u076e\u076f\5.\30\2\u076f\u0770\7a\2\2\u0770\u0771\7\'\2\2\u0771"+
		"\u0772\5\60\31\2\u0772-\3\2\2\2\u0773\u0774\7\4\2\2\u0774\u0779\7\37\2"+
		"\2\u0775\u0776\7\b\2\2\u0776\u0778\7\37\2\2\u0777\u0775\3\2\2\2\u0778"+
		"\u077b\3\2\2\2\u0779\u0777\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u077c\3\2"+
		"\2\2\u077b\u0779\3\2\2\2\u077c\u077d\7\5\2\2\u077d/\3\2\2\2\u077e\u077f"+
		"\7\4\2\2\u077f\u0780\5\62\32\2\u0780\u0781\7\5\2\2\u0781\61\3\2\2\2\u0782"+
		"\u0783\7o\2\2\u0783\u0784\7\37\2\2\u0784\u0785\7\b\2\2\u0785\u0786\7+"+
		"\2\2\u0786\u0787\7\37\2\2\u0787\u0788\7\b\2\2\u0788\u0789\7`\2\2\u0789"+
		"\u078a\5\64\33\2\u078a\63\3\2\2\2\u078b\u0790\5\66\34\2\u078c\u078d\7"+
		"\b\2\2\u078d\u078f\5\66\34\2\u078e\u078c\3\2\2\2\u078f\u0792\3\2\2\2\u0790"+
		"\u078e\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0794\3\2\2\2\u0792\u0790\3\2"+
		"\2\2\u0793\u078b\3\2\2\2\u0793\u0794\3\2\2\2\u0794\65\3\2\2\2\u0795\u0796"+
		"\7\37\2\2\u0796\u0797\7\22\2\2\u0797\u0798\7\37\2\2\u0798\67\3\2\2\2\u0799"+
		"\u079a\7\66\2\2\u079a\u079e\7\u014b\2\2\u079b\u079c\7\u00ed\2\2\u079c"+
		"\u079d\7Z\2\2\u079d\u079f\7\u0194\2\2\u079e\u079b\3\2\2\2\u079e\u079f"+
		"\3\2\2\2\u079f\u07a5\3\2\2\2\u07a0\u07a1\5:\36\2\u07a1\u07a2\7{\2\2\u07a2"+
		"\u07a3\5\u0568\u02b5\2\u07a3\u07a6\3\2\2\2\u07a4\u07a6\5\u056c\u02b7\2"+
		"\u07a5\u07a0\3\2\2\2\u07a5\u07a4\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7\u07a8"+
		"\5<\37\2\u07a89\3\2\2\2\u07a9\u07ac\5\u056c\u02b7\2\u07aa\u07ac\3\2\2"+
		"\2\u07ab\u07a9\3\2\2\2\u07ab\u07aa\3\2\2\2\u07ac;\3\2\2\2\u07ad\u07af"+
		"\5> \2\u07ae\u07ad\3\2\2\2\u07af\u07b2\3\2\2\2\u07b0\u07ae\3\2\2\2\u07b0"+
		"\u07b1\3\2\2\2\u07b1=\3\2\2\2\u07b2\u07b0\3\2\2\2\u07b3\u07ba\5\u00bc"+
		"_\2\u07b4\u07ba\5\u0262\u0132\2\u07b5\u07ba\5\u0126\u0094\2\u07b6\u07ba"+
		"\5\u01aa\u00d6\2\u07b7\u07ba\5\u023e\u0120\2\u07b8\u07ba\5\u0336\u019c"+
		"\2\u07b9\u07b3\3\2\2\2\u07b9\u07b4\3\2\2\2\u07b9\u07b5\3\2\2\2\u07b9\u07b6"+
		"\3\2\2\2\u07b9\u07b7\3\2\2\2\u07b9\u07b8\3\2\2\2\u07ba?\3\2\2\2\u07bb"+
		"\u07bd\7\u0155\2\2\u07bc\u07be\t\7\2\2\u07bd\u07bc\3\2\2\2\u07bd\u07be"+
		"\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c0\5B\"\2\u07c0A\3\2\2\2\u07c1\u07c2"+
		"\7\u016c\2\2\u07c2\u07ca\5\u0330\u0199\2\u07c3\u07c4\7\u0154\2\2\u07c4"+
		"\u07c5\7\u00ab\2\2\u07c5\u07c6\7\'\2\2\u07c6\u07c7\7\u016c\2\2\u07c7\u07ca"+
		"\5\u0330\u0199\2\u07c8\u07ca\5F$\2\u07c9\u07c1\3\2\2\2\u07c9\u07c3\3\2"+
		"\2\2\u07c9\u07c8\3\2\2\2\u07caC\3\2\2\2\u07cb\u07cc\5H%\2\u07cc\u07cd"+
		"\t\b\2\2\u07cd\u07ce\5J&\2\u07ceE\3\2\2\2\u07cf\u07e9\5D#\2\u07d0\u07d1"+
		"\5H%\2\u07d1\u07d2\7H\2\2\u07d2\u07d3\7\u01ba\2\2\u07d3\u07e9\3\2\2\2"+
		"\u07d4\u07d5\7\u01aa\2\2\u07d5\u07d6\7\u018a\2\2\u07d6\u07e9\5R*\2\u07d7"+
		"\u07d8\7\u01bb\2\2\u07d8\u07e9\5\u055e\u02b0\2\u07d9\u07da\7\u014b\2\2"+
		"\u07da\u07e9\5\u055e\u02b0\2\u07db\u07dc\7\u0113\2\2\u07dc\u07e9\5T+\2"+
		"\u07dd\u07de\7\u0146\2\2\u07de\u07e9\5V,\2\u07df\u07e0\7\u0154\2\2\u07e0"+
		"\u07e1\7{\2\2\u07e1\u07e9\5V,\2\u07e2\u07e3\7\u0187\2\2\u07e3\u07e4\7"+
		"\u011f\2\2\u07e4\u07e9\5\u04dc\u026f\2\u07e5\u07e6\7\u016c\2\2\u07e6\u07e7"+
		"\7\u0159\2\2\u07e7\u07e9\5\u055e\u02b0\2\u07e8\u07cf\3\2\2\2\u07e8\u07d0"+
		"\3\2\2\2\u07e8\u07d4\3\2\2\2\u07e8\u07d7\3\2\2\2\u07e8\u07d9\3\2\2\2\u07e8"+
		"\u07db\3\2\2\2\u07e8\u07dd\3\2\2\2\u07e8\u07df\3\2\2\2\u07e8\u07e2\3\2"+
		"\2\2\u07e8\u07e5\3\2\2\2\u07e9G\3\2\2\2\u07ea\u07ef\5\u056c\u02b7\2\u07eb"+
		"\u07ec\7\r\2\2\u07ec\u07ee\5\u056c\u02b7\2\u07ed\u07eb\3\2\2\2\u07ee\u07f1"+
		"\3\2\2\2\u07ef\u07ed\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0I\3\2\2\2\u07f1"+
		"\u07ef\3\2\2\2\u07f2\u07f7\5L\'\2\u07f3\u07f4\7\b\2\2\u07f4\u07f6\5L\'"+
		"\2\u07f5\u07f3\3\2\2\2\u07f6\u07f9\3\2\2\2\u07f7\u07f5\3\2\2\2\u07f7\u07f8"+
		"\3\2\2\2\u07f8K\3\2\2\2\u07f9\u07f7\3\2\2\2\u07fa\u07fd\5P)\2\u07fb\u07fd"+
		"\5\u0134\u009b\2\u07fc\u07fa\3\2\2\2\u07fc\u07fb\3\2\2\2\u07fdM\3\2\2"+
		"\2\u07fe\u07ff\7\u0134\2\2\u07ff\u0804\t\t\2\2\u0800\u0801\7\u013e\2\2"+
		"\u0801\u0804\7\u0134\2\2\u0802\u0804\7\u0152\2\2\u0803\u07fe\3\2\2\2\u0803"+
		"\u0800\3\2\2\2\u0803\u0802\3\2\2\2\u0804O\3\2\2\2\u0805\u080a\7q\2\2\u0806"+
		"\u080a\7D\2\2\u0807\u080a\7]\2\2\u0808\u080a\5V,\2\u0809\u0805\3\2\2\2"+
		"\u0809\u0806\3\2\2\2\u0809\u0807\3\2\2\2\u0809\u0808\3\2\2\2\u080aQ\3"+
		"\2\2\2\u080b\u081b\5\u055e\u02b0\2\u080c\u081b\5\u0574\u02bb\2\u080d\u080e"+
		"\5\u0492\u024a\2\u080e\u080f\5\u055e\u02b0\2\u080f\u0810\5\u0496\u024c"+
		"\2\u0810\u081b\3\2\2\2\u0811\u0812\5\u0492\u024a\2\u0812\u0813\7\4\2\2"+
		"\u0813\u0814\5\u055c\u02af\2\u0814\u0815\7\5\2\2\u0815\u0816\5\u055e\u02b0"+
		"\2\u0816\u081b\3\2\2\2\u0817\u081b\5\u0134\u009b\2\u0818\u081b\7=\2\2"+
		"\u0819\u081b\7\u0106\2\2\u081a\u080b\3\2\2\2\u081a\u080c\3\2\2\2\u081a"+
		"\u080d\3\2\2\2\u081a\u0811\3\2\2\2\u081a\u0817\3\2\2\2\u081a\u0818\3\2"+
		"\2\2\u081a\u0819\3\2\2\2\u081bS\3\2\2\2\u081c\u0820\5\u055e\u02b0\2\u081d"+
		"\u0820\7=\2\2\u081e\u0820\3\2\2\2\u081f\u081c\3\2\2\2\u081f\u081d\3\2"+
		"\2\2\u081f\u081e\3\2\2\2\u0820U\3\2\2\2\u0821\u0824\5\u0570\u02b9\2\u0822"+
		"\u0824\5\u055e\u02b0\2\u0823\u0821\3\2\2\2\u0823\u0822\3\2\2\2\u0824W"+
		"\3\2\2\2\u0825\u0826\7\u0141\2\2\u0826\u0827\5Z.\2\u0827Y\3\2\2\2\u0828"+
		"\u0831\5\\/\2\u0829\u082a\7\u01aa\2\2\u082a\u0831\7\u018a\2\2\u082b\u082c"+
		"\7\u016c\2\2\u082c\u082d\7\u00fc\2\2\u082d\u0831\7\u0103\2\2\u082e\u082f"+
		"\7\u0154\2\2\u082f\u0831\7{\2\2\u0830\u0828\3\2\2\2\u0830\u0829\3\2\2"+
		"\2\u0830\u082b\3\2\2\2\u0830\u082e\3\2\2\2\u0831[\3\2\2\2\u0832\u0835"+
		"\5H%\2\u0833\u0835\7!\2\2\u0834\u0832\3\2\2\2\u0834\u0833\3\2\2\2\u0835"+
		"]\3\2\2\2\u0836\u0837\7\u0155\2\2\u0837\u083a\5B\"\2\u0838\u083a\5X-\2"+
		"\u0839\u0836\3\2\2\2\u0839\u0838\3\2\2\2\u083a_\3\2\2\2\u083b\u083c\7"+
		"\u0155\2\2\u083c\u083f\5F$\2\u083d\u083f\5X-\2\u083e\u083b\3\2\2\2\u083e"+
		"\u083d\3\2\2\2\u083fa\3\2\2\2\u0840\u084a\7\u0157\2\2\u0841\u084b\5H%"+
		"\2\u0842\u0843\7\u01aa\2\2\u0843\u084b\7\u018a\2\2\u0844\u0845\7\u016c"+
		"\2\2\u0845\u0846\7\u00fc\2\2\u0846\u084b\7\u0103\2\2\u0847\u0848\7\u0154"+
		"\2\2\u0848\u084b\7{\2\2\u0849\u084b\7!\2\2\u084a\u0841\3\2\2\2\u084a\u0842"+
		"\3\2\2\2\u084a\u0844\3\2\2\2\u084a\u0847\3\2\2\2\u084a\u0849\3\2\2\2\u084b"+
		"c\3\2\2\2\u084c\u084d\7\u0155\2\2\u084d\u084e\7\u00b6\2\2\u084e\u084f"+
		"\5f\64\2\u084f\u0850\5h\65\2\u0850e\3\2\2\2\u0851\u0854\7!\2\2\u0852\u0854"+
		"\5\u0546\u02a4\2\u0853\u0851\3\2\2\2\u0853\u0852\3\2\2\2\u0854g\3\2\2"+
		"\2\u0855\u0856\t\n\2\2\u0856i\3\2\2\2\u0857\u0858\7\u00ac\2\2\u0858k\3"+
		"\2\2\2\u0859\u085a\7\u00cc\2\2\u085a\u085b\t\13\2\2\u085bm\3\2\2\2\u085c"+
		"\u085d\7\u009b\2\2\u085d\u0860\7l\2\2\u085e\u085f\7\u00ed\2\2\u085f\u0861"+
		"\7\u0194\2\2\u0860\u085e\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u0862\3\2\2"+
		"\2\u0862\u0865\5\u0444\u0223\2\u0863\u0866\5p9\2\u0864\u0866\5r:\2\u0865"+
		"\u0863\3\2\2\2\u0865\u0864\3\2\2\2\u0866\u08ca\3\2\2\2\u0867\u0868\7\u009b"+
		"\2\2\u0868\u0869\7l\2\2\u0869\u086a\7!\2\2\u086a\u086b\7L\2\2\u086b\u086c"+
		"\7\u0167\2\2\u086c\u0870\5\u054c\u02a7\2\u086d\u086e\7\u0121\2\2\u086e"+
		"\u086f\7\u00a4\2\2\u086f\u0871\5\u056a\u02b6\2\u0870\u086d\3\2\2\2\u0870"+
		"\u0871\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0873\7\u0155\2\2\u0873\u0874"+
		"\7\u0167\2\2\u0874\u0875\5\u054c\u02a7\2\u0875\u0876\5\u03ba\u01de\2\u0876"+
		"\u08ca\3\2\2\2\u0877\u0878\7\u009b\2\2\u0878\u087b\7\u00f3\2\2\u0879\u087a"+
		"\7\u00ed\2\2\u087a\u087c\7\u0194\2\2\u087b\u0879\3\2\2\2\u087b\u087c\3"+
		"\2\2\2\u087c\u087d\3\2\2\2\u087d\u0880\5\u0548\u02a5\2\u087e\u0881\5p"+
		"9\2\u087f\u0881\5t;\2\u0880\u087e\3\2\2\2\u0880\u087f\3\2\2\2\u0881\u08ca"+
		"\3\2\2\2\u0882\u0883\7\u009b\2\2\u0883\u0884\7\u00f3\2\2\u0884\u0885\7"+
		"!\2\2\u0885\u0886\7L\2\2\u0886\u0887\7\u0167\2\2\u0887\u088b\5\u054c\u02a7"+
		"\2\u0888\u0889\7\u0121\2\2\u0889\u088a\7\u00a4\2\2\u088a\u088c\5\u056a"+
		"\u02b6\2\u088b\u0888\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u088d\3\2\2\2\u088d"+
		"\u088e\7\u0155\2\2\u088e\u088f\7\u0167\2\2\u088f\u0890\5\u054c\u02a7\2"+
		"\u0890\u0891\5\u03ba\u01de\2\u0891\u08ca\3\2\2\2\u0892\u0893\7\u009b\2"+
		"\2\u0893\u0896\7\u0150\2\2\u0894\u0895\7\u00ed\2\2\u0895\u0897\7\u0194"+
		"\2\2\u0896\u0894\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u0898\3\2\2\2\u0898"+
		"\u0899\5\u0548\u02a5\2\u0899\u089a\5p9\2\u089a\u08ca\3\2\2\2\u089b\u089c"+
		"\7\u009b\2\2\u089c\u089f\7\u0180\2\2\u089d\u089e\7\u00ed\2\2\u089e\u08a0"+
		"\7\u0194\2\2\u089f\u089d\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u08a1\3\2\2"+
		"\2\u08a1\u08a2\5\u0548\u02a5\2\u08a2\u08a3\5p9\2\u08a3\u08ca\3\2\2\2\u08a4"+
		"\u08a5\7\u009b\2\2\u08a5\u08a6\7\u010b\2\2\u08a6\u08a9\7\u0180\2\2\u08a7"+
		"\u08a8\7\u00ed\2\2\u08a8\u08aa\7\u0194\2\2\u08a9\u08a7\3\2\2\2\u08a9\u08aa"+
		"\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08ac\5\u0548\u02a5\2\u08ac\u08ad\5"+
		"p9\2\u08ad\u08ca\3\2\2\2\u08ae\u08af\7\u009b\2\2\u08af\u08b0\7\u010b\2"+
		"\2\u08b0\u08b1\7\u0180\2\2\u08b1\u08b2\7!\2\2\u08b2\u08b3\7L\2\2\u08b3"+
		"\u08b4\7\u0167\2\2\u08b4\u08b8\5\u054c\u02a7\2\u08b5\u08b6\7\u0121\2\2"+
		"\u08b6\u08b7\7\u00a4\2\2\u08b7\u08b9\5\u056a\u02b6\2\u08b8\u08b5\3\2\2"+
		"\2\u08b8\u08b9\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bb\7\u0155\2\2\u08bb"+
		"\u08bc\7\u0167\2\2\u08bc\u08bd\5\u054c\u02a7\2\u08bd\u08be\5\u03ba\u01de"+
		"\2\u08be\u08ca\3\2\2\2\u08bf\u08c0\7\u009b\2\2\u08c0\u08c1\7G\2\2\u08c1"+
		"\u08c4\7l\2\2\u08c2\u08c3\7\u00ed\2\2\u08c3\u08c5\7\u0194\2\2\u08c4\u08c2"+
		"\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7\5\u0444\u0223"+
		"\2\u08c7\u08c8\5p9\2\u08c8\u08ca\3\2\2\2\u08c9\u085c\3\2\2\2\u08c9\u0867"+
		"\3\2\2\2\u08c9\u0877\3\2\2\2\u08c9\u0882\3\2\2\2\u08c9\u0892\3\2\2\2\u08c9"+
		"\u089b\3\2\2\2\u08c9\u08a4\3\2\2\2\u08c9\u08ae\3\2\2\2\u08c9\u08bf\3\2"+
		"\2\2\u08cao\3\2\2\2\u08cb\u08d0\5v<\2\u08cc\u08cd\7\b\2\2\u08cd\u08cf"+
		"\5v<\2\u08ce\u08cc\3\2\2\2\u08cf\u08d2\3\2\2\2\u08d0\u08ce\3\2\2\2\u08d0"+
		"\u08d1\3\2\2\2\u08d1q\3\2\2\2\u08d2\u08d0\3\2\2\2\u08d3\u08d4\7\u01bc"+
		"\2\2\u08d4\u08d5\7\u0125\2\2\u08d5\u08d6\5\u0548\u02a5\2\u08d6\u08d7\5"+
		"\u0090I\2\u08d7\u08dc\3\2\2\2\u08d8\u08d9\7\u01bd\2\2\u08d9\u08da\7\u0125"+
		"\2\2\u08da\u08dc\5\u0548\u02a5\2\u08db\u08d3\3\2\2\2\u08db\u08d8\3\2\2"+
		"\2\u08dcs\3\2\2\2\u08dd\u08de\7\u01bc\2\2\u08de\u08df\7\u0125\2\2\u08df"+
		"\u08e0\5\u0548\u02a5\2\u08e0u\3\2\2\2\u08e1\u08e2\7\u0096\2\2\u08e2\u0a10"+
		"\5\u00ccg\2\u08e3\u08e4\7\u0096\2\2\u08e4\u08e5\7\u00ed\2\2\u08e5\u08e6"+
		"\7Z\2\2\u08e6\u08e7\7\u0194\2\2\u08e7\u0a10\5\u00ccg\2\u08e8\u08e9\7\u0096"+
		"\2\2\u08e9\u08ea\7\63\2\2\u08ea\u0a10\5\u00ccg\2\u08eb\u08ec\7\u0096\2"+
		"\2\u08ec\u08ed\7\63\2\2\u08ed\u08ee\7\u00ed\2\2\u08ee\u08ef\7Z\2\2\u08ef"+
		"\u08f0\7\u0194\2\2\u08f0\u0a10\5\u00ccg\2\u08f1\u08f2\7\u0096\2\2\u08f2"+
		"\u08f3\7U\2\2\u08f3\u08f4\5\u0548\u02a5\2\u08f4\u08f5\7]\2\2\u08f5\u08f6"+
		"\7\u00a0\2\2\u08f6\u08f7\5x=\2\u08f7\u0a10\3\2\2\2\u08f8\u08f9\7\u0096"+
		"\2\2\u08f9\u08fa\7U\2\2\u08fa\u08fb\7P\2\2\u08fb\u08fc\7]\2\2\u08fc\u08fd"+
		"\7\u00a0\2\2\u08fd\u0a10\5x=\2\u08fe\u08ff\7\u0096\2\2\u08ff\u0900\7U"+
		"\2\2\u0900\u0901\7Q\2\2\u0901\u0902\7]\2\2\u0902\u0903\7\u00a0\2\2\u0903"+
		"\u0a10\5x=\2\u0904\u0905\7\u0096\2\2\u0905\u0906\7U\2\2\u0906\u0907\7"+
		"R\2\2\u0907\u0908\7]\2\2\u0908\u0909\7\u00a0\2\2\u0909\u0a10\5x=\2\u090a"+
		"\u090b\7\u0096\2\2\u090b\u090c\7\64\2\2\u090c\u090d\5\u0548\u02a5\2\u090d"+
		"\u090e\7]\2\2\u090e\u090f\7\u00a0\2\2\u090f\u0910\5x=\2\u0910\u0a10\3"+
		"\2\2\2\u0911\u0912\7\u0096\2\2\u0912\u0913\7\64\2\2\u0913\u0914\7,\2\2"+
		"\u0914\u0915\7]\2\2\u0915\u0916\7\u00a0\2\2\u0916\u0a10\5x=\2\u0917\u0918"+
		"\7\u0096\2\2\u0918\u0919\7\64\2\2\u0919\u091a\7-\2\2\u091a\u091b\7]\2"+
		"\2\u091b\u091c\7\u00a0\2\2\u091c\u0a10\5x=\2\u091d\u091e\7\u0096\2\2\u091e"+
		"\u091f\7\64\2\2\u091f\u0920\7.\2\2\u0920\u0921\7]\2\2\u0921\u0922\7\u00a0"+
		"\2\2\u0922\u0a10\5x=\2\u0923\u0924\7\u009b\2\2\u0924\u0925\5\u02ec\u0177"+
		"\2\u0925\u0926\5\u056c\u02b7\2\u0926\u0927\5z>\2\u0927\u0a10\3\2\2\2\u0928"+
		"\u0929\7\u009b\2\2\u0929\u092a\5\u02ec\u0177\2\u092a\u092b\5\u056c\u02b7"+
		"\2\u092b\u092c\7\u00d0\2\2\u092c\u092d\7Z\2\2\u092d\u092e\7[\2\2\u092e"+
		"\u0a10\3\2\2\2\u092f\u0930\7\u009b\2\2\u0930\u0931\5\u02ec\u0177\2\u0931"+
		"\u0932\5\u056c\u02b7\2\u0932\u0933\7\u0155\2\2\u0933\u0934\7Z\2\2\u0934"+
		"\u0935\7[\2\2\u0935\u0a10\3\2\2\2\u0936\u0937\7\u009b\2\2\u0937\u0938"+
		"\5\u02ec\u0177\2\u0938\u0939\5\u056c\u02b7\2\u0939\u093a\7\u00d0\2\2\u093a"+
		"\u093b\7\u01be\2\2\u093b\u0a10\3\2\2\2\u093c\u093d\7\u009b\2\2\u093d\u093e"+
		"\5\u02ec\u0177\2\u093e\u093f\5\u056c\u02b7\2\u093f\u0940\7\u00d0\2\2\u0940"+
		"\u0941\7\u01be\2\2\u0941\u0942\7\u00ed\2\2\u0942\u0943\7\u0194\2\2\u0943"+
		"\u0a10\3\2\2\2\u0944\u0945\7\u009b\2\2\u0945\u0946\5\u02ec\u0177\2\u0946"+
		"\u0947\5\u056c\u02b7\2\u0947\u0948\7\u0155\2\2\u0948\u0949\7\u015e\2\2"+
		"\u0949\u094a\5\u0564\u02b3\2\u094a\u0a10\3\2\2\2\u094b\u094c\7\u009b\2"+
		"\2\u094c\u094d\5\u02ec\u0177\2\u094d\u094e\5\u055c\u02af\2\u094e\u094f"+
		"\7\u0155\2\2\u094f\u0950\7\u015e\2\2\u0950\u0951\5\u0564\u02b3\2\u0951"+
		"\u0a10\3\2\2\2\u0952\u0953\7\u009b\2\2\u0953\u0954\5\u02ec\u0177\2\u0954"+
		"\u0955\5\u056c\u02b7\2\u0955\u0956\7\u0155\2\2\u0956\u0957\5\u0084C\2"+
		"\u0957\u0a10\3\2\2\2\u0958\u0959\7\u009b\2\2\u0959\u095a\5\u02ec\u0177"+
		"\2\u095a\u095b\5\u056c\u02b7\2\u095b\u095c\7\u0141\2\2\u095c\u095d\5\u0084"+
		"C\2\u095d\u0a10\3\2\2\2\u095e\u095f\7\u009b\2\2\u095f\u0960\5\u02ec\u0177"+
		"\2\u0960\u0961\5\u056c\u02b7\2\u0961\u0962\7\u0155\2\2\u0962\u0963\7\u0161"+
		"\2\2\u0963\u0964\5\u056c\u02b7\2\u0964\u0a10\3\2\2\2\u0965\u0966\7\u009b"+
		"\2\2\u0966\u0967\5\u02ec\u0177\2\u0967\u0968\5\u056c\u02b7\2\u0968\u0969"+
		"\7\u0096\2\2\u0969\u096a\7\u01bf\2\2\u096a\u096b\5\u00d6l\2\u096b\u096c"+
		"\7\'\2\2\u096c\u096d\7\u00ec\2\2\u096d\u096e\5\u012c\u0097\2\u096e\u0a10"+
		"\3\2\2\2\u096f\u0970\7\u009b\2\2\u0970\u0971\5\u02ec\u0177\2\u0971\u0972"+
		"\5\u056c\u02b7\2\u0972\u0973\5\u008cG\2\u0973\u0a10\3\2\2\2\u0974\u0975"+
		"\7\u009b\2\2\u0975\u0976\5\u02ec\u0177\2\u0976\u0977\5\u056c\u02b7\2\u0977"+
		"\u0978\7\u00d0\2\2\u0978\u0979\7\u00ec\2\2\u0979\u0a10\3\2\2\2\u097a\u097b"+
		"\7\u009b\2\2\u097b\u097c\5\u02ec\u0177\2\u097c\u097d\5\u056c\u02b7\2\u097d"+
		"\u097e\7\u00d0\2\2\u097e\u097f\7\u00ec\2\2\u097f\u0980\7\u00ed\2\2\u0980"+
		"\u0981\7\u0194\2\2\u0981\u0a10\3\2\2\2\u0982\u0983\7\u00d0\2\2\u0983\u0984"+
		"\5\u02ec\u0177\2\u0984\u0985\7\u00ed\2\2\u0985\u0986\7\u0194\2\2\u0986"+
		"\u0987\5\u056c\u02b7\2\u0987\u0988\5|?\2\u0988\u0a10\3\2\2\2\u0989\u098a"+
		"\7\u00d0\2\2\u098a\u098b\5\u02ec\u0177\2\u098b\u098c\5\u056c\u02b7\2\u098c"+
		"\u098d\5|?\2\u098d\u0a10\3\2\2\2\u098e\u098f\7\u009b\2\2\u098f\u0990\5"+
		"\u02ec\u0177\2\u0990\u0991\5\u056c\u02b7\2\u0991\u0992\5\u02ee\u0178\2"+
		"\u0992\u0993\7\u0170\2\2\u0993\u0994\5\u0470\u0239\2\u0994\u0995\5~@\2"+
		"\u0995\u0996\5\u0080A\2\u0996\u0a10\3\2\2\2\u0997\u0998\7\u009b\2\2\u0998"+
		"\u0999\5\u02ec\u0177\2\u0999\u099a\5\u056c\u02b7\2\u099a\u099b\5\u016e"+
		"\u00b8\2\u099b\u0a10\3\2\2\2\u099c\u099d\7\u0096\2\2\u099d\u0a10\5\u00e0"+
		"q\2\u099e\u099f\7\u009b\2\2\u099f\u09a0\7\65\2\2\u09a0\u09a1\5\u054c\u02a7"+
		"\2\u09a1\u09a2\5\u01ce\u00e8\2\u09a2\u0a10\3\2\2\2\u09a3\u09a4\7\u017c"+
		"\2\2\u09a4\u09a5\7\65\2\2\u09a5\u0a10\5\u054c\u02a7\2\u09a6\u09a7\7\u00d0"+
		"\2\2\u09a7\u09a8\7\65\2\2\u09a8\u09a9\7\u00ed\2\2\u09a9\u09aa\7\u0194"+
		"\2\2\u09aa\u09ab\5\u054c\u02a7\2\u09ab\u09ac\5|?\2\u09ac\u0a10\3\2\2\2"+
		"\u09ad\u09ae\7\u00d0\2\2\u09ae\u09af\7\65\2\2\u09af\u09b0\5\u054c\u02a7"+
		"\2\u09b0\u09b1\5|?\2\u09b1\u0a10\3\2\2\2\u09b2\u09b3\7\u0155\2\2\u09b3"+
		"\u09b4\7\u0183\2\2\u09b4\u0a10\7\u011d\2\2\u09b5\u09b6\7\u00af\2\2\u09b6"+
		"\u09b7\7]\2\2\u09b7\u0a10\5\u054c\u02a7\2\u09b8\u09b9\7\u0155\2\2\u09b9"+
		"\u09ba\7\u0183\2\2\u09ba\u0a10\7\u00af\2\2\u09bb\u09bc\7\u0155\2\2\u09bc"+
		"\u0a10\7\u01c0\2\2\u09bd\u09be\7\u0155\2\2\u09be\u0a10\7\u0177\2\2\u09bf"+
		"\u09c0\7\u00d2\2\2\u09c0\u09c1\7\u016d\2\2\u09c1\u0a10\5\u054c\u02a7\2"+
		"\u09c2\u09c3\7\u00d2\2\2\u09c3\u09c4\7\u009c\2\2\u09c4\u09c5\7\u016d\2"+
		"\2\u09c5\u0a10\5\u054c\u02a7\2\u09c6\u09c7\7\u00d2\2\2\u09c7\u09c8\7\u0140"+
		"\2\2\u09c8\u09c9\7\u016d\2\2\u09c9\u0a10\5\u054c\u02a7\2\u09ca\u09cb\7"+
		"\u00d2\2\2\u09cb\u09cc\7\u016d\2\2\u09cc\u0a10\7!\2\2\u09cd\u09ce\7\u00d2"+
		"\2\2\u09ce\u09cf\7\u016d\2\2\u09cf\u0a10\7t\2\2\u09d0\u09d1\7\u00cb\2"+
		"\2\u09d1\u09d2\7\u016d\2\2\u09d2\u0a10\5\u054c\u02a7\2\u09d3\u09d4\7\u00cb"+
		"\2\2\u09d4\u09d5\7\u016d\2\2\u09d5\u0a10\7!\2\2\u09d6\u09d7\7\u00cb\2"+
		"\2\u09d7\u09d8\7\u016d\2\2\u09d8\u0a10\7t\2\2\u09d9\u09da\7\u00d2\2\2"+
		"\u09da\u09db\7\u0149\2\2\u09db\u0a10\5\u054c\u02a7\2\u09dc\u09dd\7\u00d2"+
		"\2\2\u09dd\u09de\7\u009c\2\2\u09de\u09df\7\u0149\2\2\u09df\u0a10\5\u054c"+
		"\u02a7\2\u09e0\u09e1\7\u00d2\2\2\u09e1\u09e2\7\u0140\2\2\u09e2\u09e3\7"+
		"\u0149\2\2\u09e3\u0a10\5\u054c\u02a7\2\u09e4\u09e5\7\u00cb\2\2\u09e5\u09e6"+
		"\7\u0149\2\2\u09e6\u0a10\5\u054c\u02a7\2\u09e7\u09e8\7\u00f5\2\2\u09e8"+
		"\u0a10\5\u0548\u02a5\2\u09e9\u09ea\7\u0115\2\2\u09ea\u09eb\7\u00f5\2\2"+
		"\u09eb\u0a10\5\u0548\u02a5\2\u09ec\u09ed\7\u011b\2\2\u09ed\u0a10\5\u0222"+
		"\u0112\2\u09ee\u09ef\7Z\2\2\u09ef\u0a10\7\u011b\2\2\u09f0\u09f1\7\u0122"+
		"\2\2\u09f1\u09f2\7n\2\2\u09f2\u0a10\5\u0568\u02b5\2\u09f3\u09f4\7\u0155"+
		"\2\2\u09f4\u09f5\7\u0167\2\2\u09f5\u0a10\5\u054c\u02a7\2\u09f6\u09f7\7"+
		"\u0155\2\2\u09f7\u0a10\5\u0084C\2\u09f8\u09f9\7\u0141\2\2\u09f9\u0a10"+
		"\5\u0084C\2\u09fa\u09fb\7\u0140\2\2\u09fb\u09fc\7\u00ec\2\2\u09fc\u0a10"+
		"\5\u0082B\2\u09fd\u09fe\7\u00d2\2\2\u09fe\u09ff\7\u01a6\2\2\u09ff\u0a00"+
		"\7\u0103\2\2\u0a00\u0a10\7\u014f\2\2\u0a01\u0a02\7\u00cb\2\2\u0a02\u0a03"+
		"\7\u01a6\2\2\u0a03\u0a04\7\u0103\2\2\u0a04\u0a10\7\u014f\2\2\u0a05\u0a06"+
		"\7\u00e2\2\2\u0a06\u0a07\7\u01a6\2\2\u0a07\u0a08\7\u0103\2\2\u0a08\u0a10"+
		"\7\u014f\2\2\u0a09\u0a0a\7\u0115\2\2\u0a0a\u0a0b\7\u00e2\2\2\u0a0b\u0a0c"+
		"\7\u01a6\2\2\u0a0c\u0a0d\7\u0103\2\2\u0a0d\u0a10\7\u014f\2\2\u0a0e\u0a10"+
		"\5\u016e\u00b8\2\u0a0f\u08e1\3\2\2\2\u0a0f\u08e3\3\2\2\2\u0a0f\u08e8\3"+
		"\2\2\2\u0a0f\u08eb\3\2\2\2\u0a0f\u08f1\3\2\2\2\u0a0f\u08f8\3\2\2\2\u0a0f"+
		"\u08fe\3\2\2\2\u0a0f\u0904\3\2\2\2\u0a0f\u090a\3\2\2\2\u0a0f\u0911\3\2"+
		"\2\2\u0a0f\u0917\3\2\2\2\u0a0f\u091d\3\2\2\2\u0a0f\u0923\3\2\2\2\u0a0f"+
		"\u0928\3\2\2\2\u0a0f\u092f\3\2\2\2\u0a0f\u0936\3\2\2\2\u0a0f\u093c\3\2"+
		"\2\2\u0a0f\u0944\3\2\2\2\u0a0f\u094b\3\2\2\2\u0a0f\u0952\3\2\2\2\u0a0f"+
		"\u0958\3\2\2\2\u0a0f\u095e\3\2\2\2\u0a0f\u0965\3\2\2\2\u0a0f\u096f\3\2"+
		"\2\2\u0a0f\u0974\3\2\2\2\u0a0f\u097a\3\2\2\2\u0a0f\u0982\3\2\2\2\u0a0f"+
		"\u0989\3\2\2\2\u0a0f\u098e\3\2\2\2\u0a0f\u0997\3\2\2\2\u0a0f\u099c\3\2"+
		"\2\2\u0a0f\u099e\3\2\2\2\u0a0f\u09a3\3\2\2\2\u0a0f\u09a6\3\2\2\2\u0a0f"+
		"\u09ad\3\2\2\2\u0a0f\u09b2\3\2\2\2\u0a0f\u09b5\3\2\2\2\u0a0f\u09b8\3\2"+
		"\2\2\u0a0f\u09bb\3\2\2\2\u0a0f\u09bd\3\2\2\2\u0a0f\u09bf\3\2\2\2\u0a0f"+
		"\u09c2\3\2\2\2\u0a0f\u09c6\3\2\2\2\u0a0f\u09ca\3\2\2\2\u0a0f\u09cd\3\2"+
		"\2\2\u0a0f\u09d0\3\2\2\2\u0a0f\u09d3\3\2\2\2\u0a0f\u09d6\3\2\2\2\u0a0f"+
		"\u09d9\3\2\2\2\u0a0f\u09dc\3\2\2\2\u0a0f\u09e0\3\2\2\2\u0a0f\u09e4\3\2"+
		"\2\2\u0a0f\u09e7\3\2\2\2\u0a0f\u09e9\3\2\2\2\u0a0f\u09ec\3\2\2\2\u0a0f"+
		"\u09ee\3\2\2\2\u0a0f\u09f0\3\2\2\2\u0a0f\u09f3\3\2\2\2\u0a0f\u09f6\3\2"+
		"\2\2\u0a0f\u09f8\3\2\2\2\u0a0f\u09fa\3\2\2\2\u0a0f\u09fd\3\2\2\2\u0a0f"+
		"\u0a01\3\2\2\2\u0a0f\u0a05\3\2\2\2\u0a0f\u0a09\3\2\2\2\u0a0f\u0a0e\3\2"+
		"\2\2\u0a10w\3\2\2\2\u0a11\u0a16\5\u054e\u02a8\2\u0a12\u0a13\7\b\2\2\u0a13"+
		"\u0a15\5\u054e\u02a8\2\u0a14\u0a12\3\2\2\2\u0a15\u0a18\3\2\2\2\u0a16\u0a14"+
		"\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17y\3\2\2\2\u0a18\u0a16\3\2\2\2\u0a19"+
		"\u0a1a\7\u0155\2\2\u0a1a\u0a1b\7=\2\2\u0a1b\u0a1f\5\u049c\u024f\2\u0a1c"+
		"\u0a1d\7\u00d0\2\2\u0a1d\u0a1f\7=\2\2\u0a1e\u0a19\3\2\2\2\u0a1e\u0a1c"+
		"\3\2\2\2\u0a1f{\3\2\2\2\u0a20\u0a24\7\u00a7\2\2\u0a21\u0a24\7\u0143\2"+
		"\2\u0a22\u0a24\3\2\2\2\u0a23\u0a20\3\2\2\2\u0a23\u0a21\3\2\2\2\u0a23\u0a22"+
		"\3\2\2\2\u0a24}\3\2\2\2\u0a25\u0a26\7\62\2\2\u0a26\u0a29\5\u0222\u0112"+
		"\2\u0a27\u0a29\3\2\2\2\u0a28\u0a25\3\2\2\2\u0a28\u0a27\3\2\2\2\u0a29\177"+
		"\3\2\2\2\u0a2a\u0a2b\7u\2\2\u0a2b\u0a2e\5\u049c\u024f\2\u0a2c\u0a2e\3"+
		"\2\2\2\u0a2d\u0a2a\3\2\2\2\u0a2d\u0a2c\3\2\2\2\u0a2e\u0081\3\2\2\2\u0a2f"+
		"\u0a36\7\u0116\2\2\u0a30\u0a36\7\u0082\2\2\u0a31\u0a36\7=\2\2\u0a32\u0a33"+
		"\7u\2\2\u0a33\u0a34\7\u00f3\2\2\u0a34\u0a36\5\u054c\u02a7\2\u0a35\u0a2f"+
		"\3\2\2\2\u0a35\u0a30\3\2\2\2\u0a35\u0a31\3\2\2\2\u0a35\u0a32\3\2\2\2\u0a36"+
		"\u0083\3\2\2\2\u0a37\u0a38\7\4\2\2\u0a38\u0a39\5\u0088E\2\u0a39\u0a3a"+
		"\7\5\2\2\u0a3a\u0085\3\2\2\2\u0a3b\u0a3c\7z\2\2\u0a3c\u0a3f\5\u0084C\2"+
		"\u0a3d\u0a3f\3\2\2\2\u0a3e\u0a3b\3\2\2\2\u0a3e\u0a3d\3\2\2\2\u0a3f\u0087"+
		"\3\2\2\2\u0a40\u0a45\5\u008aF\2\u0a41\u0a42\7\b\2\2\u0a42\u0a44\5\u008a"+
		"F\2\u0a43\u0a41\3\2\2\2\u0a44\u0a47\3\2\2\2\u0a45\u0a43\3\2\2\2\u0a45"+
		"\u0a46\3\2\2\2\u0a46\u0089\3\2\2\2\u0a47\u0a45\3\2\2\2\u0a48\u0a51\5\u0572"+
		"\u02ba\2\u0a49\u0a4a\7\f\2\2\u0a4a\u0a52\5\u01e8\u00f5\2\u0a4b\u0a4c\7"+
		"\r\2\2\u0a4c\u0a4f\5\u0572\u02ba\2\u0a4d\u0a4e\7\f\2\2\u0a4e\u0a50\5\u01e8"+
		"\u00f5\2\u0a4f\u0a4d\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a52\3\2\2\2\u0a51"+
		"\u0a49\3\2\2\2\u0a51\u0a4b\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u008b\3\2"+
		"\2\2\u0a53\u0a55\5\u008eH\2\u0a54\u0a53\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56"+
		"\u0a54\3\2\2\2\u0a56\u0a57\3\2\2\2\u0a57\u008d\3\2\2\2\u0a58\u0a5c\7\u0142"+
		"\2\2\u0a59\u0a5a\5\22\n\2\u0a5a\u0a5b\5\u0134\u009b\2\u0a5b\u0a5d\3\2"+
		"\2\2\u0a5c\u0a59\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a65\3\2\2\2\u0a5e"+
		"\u0a62\7\u0155\2\2\u0a5f\u0a63\5\u0130\u0099\2\u0a60\u0a61\7\u01bf\2\2"+
		"\u0a61\u0a63\5\u00d6l\2\u0a62\u0a5f\3\2\2\2\u0a62\u0a60\3\2\2\2\u0a63"+
		"\u0a65\3\2\2\2\u0a64\u0a58\3\2\2\2\u0a64\u0a5e\3\2\2\2\u0a65\u008f\3\2"+
		"\2\2\u0a66\u0a67\7F\2\2\u0a67\u0a68\7\u01ae\2\2\u0a68\u0a69\7z\2\2\u0a69"+
		"\u0a6a\7\4\2\2\u0a6a\u0a6b\5\u0094K\2\u0a6b\u0a6c\7\5\2\2\u0a6c\u0a81"+
		"\3\2\2\2\u0a6d\u0a6e\7F\2\2\u0a6e\u0a6f\7\u01ae\2\2\u0a6f\u0a70\7L\2\2"+
		"\u0a70\u0a71\7\4\2\2\u0a71\u0a72\5\u0510\u0289\2\u0a72\u0a73\7\5\2\2\u0a73"+
		"\u0a81\3\2\2\2\u0a74\u0a75\7F\2\2\u0a75\u0a76\7\u01ae\2\2\u0a76\u0a77"+
		"\7H\2\2\u0a77\u0a78\7\4\2\2\u0a78\u0a79\5\u0510\u0289\2\u0a79\u0a7a\7"+
		"\5\2\2\u0a7a\u0a7b\7n\2\2\u0a7b\u0a7c\7\4\2\2\u0a7c\u0a7d\5\u0510\u0289"+
		"\2\u0a7d\u0a7e\7\5\2\2\u0a7e\u0a81\3\2\2\2\u0a7f\u0a81\7=\2\2\u0a80\u0a66"+
		"\3\2\2\2\u0a80\u0a6d\3\2\2\2\u0a80\u0a74\3\2\2\2\u0a80\u0a7f\3\2\2\2\u0a81"+
		"\u0091\3\2\2\2\u0a82\u0a83\5\u0570\u02b9\2\u0a83\u0a84\5\u055c\u02af\2"+
		"\u0a84\u0093\3\2\2\2\u0a85\u0a8a\5\u0092J\2\u0a86\u0a87\7\b\2\2\u0a87"+
		"\u0a89\5\u0092J\2\u0a88\u0a86\3\2\2\2\u0a89\u0a8c\3\2\2\2\u0a8a\u0a88"+
		"\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0095\3\2\2\2\u0a8c\u0a8a\3\2\2\2\u0a8d"+
		"\u0a8e\7\u009b\2\2\u0a8e\u0a8f\7\u0170\2\2\u0a8f\u0a90\5\u0222\u0112\2"+
		"\u0a90\u0a91\5\u0098M\2\u0a91\u0097\3\2\2\2\u0a92\u0a97\5\u009aN\2\u0a93"+
		"\u0a94\7\b\2\2\u0a94\u0a96\5\u009aN\2\u0a95\u0a93\3\2\2\2\u0a96\u0a99"+
		"\3\2\2\2\u0a97\u0a95\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0099\3\2\2\2\u0a99"+
		"\u0a97\3\2\2\2\u0a9a\u0a9b\7\u0096\2\2\u0a9b\u0a9c\7\u00a0\2\2\u0a9c\u0a9d"+
		"\5\u0460\u0231\2\u0a9d\u0a9e\5|?\2\u0a9e\u0ab2\3\2\2\2\u0a9f\u0aa0\7\u00d0"+
		"\2\2\u0aa0\u0aa3\7\u00a0\2\2\u0aa1\u0aa2\7\u00ed\2\2\u0aa2\u0aa4\7\u0194"+
		"\2\2\u0aa3\u0aa1\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5"+
		"\u0aa6\5\u056c\u02b7\2\u0aa6\u0aa7\5|?\2\u0aa7\u0ab2\3\2\2\2\u0aa8\u0aa9"+
		"\7\u009b\2\2\u0aa9\u0aaa\7\u00a0\2\2\u0aaa\u0aab\5\u056c\u02b7\2\u0aab"+
		"\u0aac\5\u02ee\u0178\2\u0aac\u0aad\7\u0170\2\2\u0aad\u0aae\5\u0470\u0239"+
		"\2\u0aae\u0aaf\5~@\2\u0aaf\u0ab0\5|?\2\u0ab0\u0ab2\3\2\2\2\u0ab1\u0a9a"+
		"\3\2\2\2\u0ab1\u0a9f\3\2\2\2\u0ab1\u0aa8\3\2\2\2\u0ab2\u009b\3\2\2\2\u0ab3"+
		"\u0ab6\7\u00ae\2\2\u0ab4\u0ab7\5\u03ca\u01e6\2\u0ab5\u0ab7\7!\2\2\u0ab6"+
		"\u0ab4\3\2\2\2\u0ab6\u0ab5\3\2\2\2\u0ab7\u009d\3\2\2\2\u0ab8\u0ab9\7\u00ba"+
		"\2\2\u0ab9\u0aba\5\u00acW\2\u0aba\u0abb\5\u0548\u02a5\2\u0abb\u0abc\5"+
		"\u00e6t\2\u0abc\u0abd\5\u00a0Q\2\u0abd\u0abe\5\u00a2R\2\u0abe\u0abf\5"+
		"\u00a4S\2\u0abf\u0ac0\5\u00aeX\2\u0ac0\u0ac1\5\22\n\2\u0ac1\u0ac2\5\u00a6"+
		"T\2\u0ac2\u0ac3\5\u0458\u022d\2\u0ac3\u0acf\3\2\2\2\u0ac4\u0ac5\7\u00ba"+
		"\2\2\u0ac5\u0ac6\7\4\2\2\u0ac6\u0ac7\5\u0396\u01cc\2\u0ac7\u0ac8\7\5\2"+
		"\2\u0ac8\u0ac9\7n\2\2\u0ac9\u0aca\5\u00a2R\2\u0aca\u0acb\5\u00a4S\2\u0acb"+
		"\u0acc\5\22\n\2\u0acc\u0acd\5\u00a6T\2\u0acd\u0acf\3\2\2\2\u0ace\u0ab8"+
		"\3\2\2\2\u0ace\u0ac4\3\2\2\2\u0acf\u009f\3\2\2\2\u0ad0\u0ad1\t\f\2\2\u0ad1"+
		"\u00a1\3\2\2\2\u0ad2\u0ad5\7\u0131\2\2\u0ad3\u0ad5\3\2\2\2\u0ad4\u0ad2"+
		"\3\2\2\2\u0ad4\u0ad3\3\2\2\2\u0ad5\u00a3\3\2\2\2\u0ad6\u0ada\5\u055e\u02b0"+
		"\2\u0ad7\u0ada\7\u015f\2\2\u0ad8\u0ada\7\u0160\2\2\u0ad9\u0ad6\3\2\2\2"+
		"\u0ad9\u0ad7\3\2\2\2\u0ad9\u0ad8\3\2\2\2\u0ada\u00a5\3\2\2\2\u0adb\u0ae1"+
		"\5\u00a8U\2\u0adc\u0add\7\4\2\2\u0add\u0ade\5\u00b2Z\2\u0ade\u0adf\7\5"+
		"\2\2\u0adf\u0ae1\3\2\2\2\u0ae0\u0adb\3\2\2\2\u0ae0\u0adc\3\2\2\2\u0ae1"+
		"\u00a7\3\2\2\2\u0ae2\u0ae4\5\u00aaV\2\u0ae3\u0ae2\3\2\2\2\u0ae4\u0ae7"+
		"\3\2\2\2\u0ae5\u0ae3\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u00a9\3\2\2\2\u0ae7"+
		"\u0ae5\3\2\2\2\u0ae8\u0b0c\7|\2\2\u0ae9\u0b0c\7\u0081\2\2\u0aea\u0aeb"+
		"\7\u00c8\2\2\u0aeb\u0aec\5\u035a\u01ae\2\u0aec\u0aed\5\u055e\u02b0\2\u0aed"+
		"\u0b0c\3\2\2\2\u0aee\u0aef\7[\2\2\u0aef\u0af0\5\u035a\u01ae\2\u0af0\u0af1"+
		"\5\u055e\u02b0\2\u0af1\u0b0c\3\2\2\2\u0af2\u0b0c\7\u00bc\2\2\u0af3\u0b0c"+
		"\7\u00e9\2\2\u0af4\u0af5\7\u0132\2\2\u0af5\u0af6\5\u035a\u01ae\2\u0af6"+
		"\u0af7\5\u055e\u02b0\2\u0af7\u0b0c\3\2\2\2\u0af8\u0af9\7\u00d6\2\2\u0af9"+
		"\u0afa\5\u035a\u01ae\2\u0afa\u0afb\5\u055e\u02b0\2\u0afb\u0b0c\3\2\2\2"+
		"\u0afc\u0afd\7\u00e2\2\2\u0afd\u0afe\7\u0132\2\2\u0afe\u0b0c\5\u00e8u"+
		"\2\u0aff\u0b00\7\u00e2\2\2\u0b00\u0b01\7\u0132\2\2\u0b01\u0b0c\7\13\2"+
		"\2\u0b02\u0b03\7\u00e2\2\2\u0b03\u0b04\7Z\2\2\u0b04\u0b05\7[\2\2\u0b05"+
		"\u0b0c\5\u00e8u\2\u0b06\u0b07\7\u00e2\2\2\u0b07\u0b08\7[\2\2\u0b08\u0b0c"+
		"\5\u00e8u\2\u0b09\u0b0a\7\u00d3\2\2\u0b0a\u0b0c\5\u055e\u02b0\2\u0b0b"+
		"\u0ae8\3\2\2\2\u0b0b\u0ae9\3\2\2\2\u0b0b\u0aea\3\2\2\2\u0b0b\u0aee\3\2"+
		"\2\2\u0b0b\u0af2\3\2\2\2\u0b0b\u0af3\3\2\2\2\u0b0b\u0af4\3\2\2\2\u0b0b"+
		"\u0af8\3\2\2\2\u0b0b\u0afc\3\2\2\2\u0b0b\u0aff\3\2\2\2\u0b0b\u0b02\3\2"+
		"\2\2\u0b0b\u0b06\3\2\2\2\u0b0b\u0b09\3\2\2\2\u0b0c\u00ab\3\2\2\2\u0b0d"+
		"\u0b10\7|\2\2\u0b0e\u0b10\3\2\2\2\u0b0f\u0b0d\3\2\2\2\u0b0f\u0b0e\3\2"+
		"\2\2\u0b10\u00ad\3\2\2\2\u0b11\u0b12\5\u00b0Y\2\u0b12\u0b13\7\u00c9\2"+
		"\2\u0b13\u0b14\5\u055e\u02b0\2\u0b14\u0b17\3\2\2\2\u0b15\u0b17\3\2\2\2"+
		"\u0b16\u0b11\3\2\2\2\u0b16\u0b15\3\2\2\2\u0b17\u00af\3\2\2\2\u0b18\u0b1b"+
		"\7u\2\2\u0b19\u0b1b\3\2\2\2\u0b1a\u0b18\3\2\2\2\u0b1a\u0b19\3\2\2\2\u0b1b"+
		"\u00b1\3\2\2\2\u0b1c\u0b21\5\u00b4[\2\u0b1d\u0b1e\7\b\2\2\u0b1e\u0b20"+
		"\5\u00b4[\2\u0b1f\u0b1d\3\2\2\2\u0b20\u0b23\3\2\2\2\u0b21\u0b1f\3\2\2"+
		"\2\u0b21\u0b22\3\2\2\2\u0b22\u00b3\3\2\2\2\u0b23\u0b21\3\2\2\2\u0b24\u0b25"+
		"\5\u0572\u02ba\2\u0b25\u0b26\5\u00b6\\\2\u0b26\u00b5\3\2\2\2\u0b27\u0b30"+
		"\5P)\2\u0b28\u0b30\5\u0134\u009b\2\u0b29\u0b30\7\13\2\2\u0b2a\u0b2b\7"+
		"\4\2\2\u0b2b\u0b2c\5\u00b8]\2\u0b2c\u0b2d\7\5\2\2\u0b2d\u0b30\3\2\2\2"+
		"\u0b2e\u0b30\3\2\2\2\u0b2f\u0b27\3\2\2\2\u0b2f\u0b28\3\2\2\2\u0b2f\u0b29"+
		"\3\2\2\2\u0b2f\u0b2a\3\2\2\2\u0b2f\u0b2e\3\2\2\2\u0b30\u00b7\3\2\2\2\u0b31"+
		"\u0b36\5\u00ba^\2\u0b32\u0b33\7\b\2\2\u0b33\u0b35\5\u00ba^\2\u0b34\u0b32"+
		"\3\2\2\2\u0b35\u0b38\3\2\2\2\u0b36\u0b34\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37"+
		"\u00b9\3\2\2\2\u0b38\u0b36\3\2\2\2\u0b39\u0b3a\5P)\2\u0b3a\u00bb\3\2\2"+
		"\2\u0b3b\u0b3c\7\66\2\2\u0b3c\u0b3d\5\u00be`\2\u0b3d\u0b41\7l\2\2\u0b3e"+
		"\u0b3f\7\u00ed\2\2\u0b3f\u0b40\7Z\2\2\u0b40\u0b42\7\u0194\2\2\u0b41\u0b3e"+
		"\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0b43\3\2\2\2\u0b43\u0b62\5\u0548\u02a5"+
		"\2\u0b44\u0b45\7\4\2\2\u0b45\u0b46\5\u00c0a\2\u0b46\u0b47\7\5\2\2\u0b47"+
		"\u0b48\5\u00fe\u0080\2\u0b48\u0b49\5\u0100\u0081\2\u0b49\u0b4a\5\u0108"+
		"\u0085\2\u0b4a\u0b4b\5\u010a\u0086\2\u0b4b\u0b4c\5\u010c\u0087\2\u0b4c"+
		"\u0b4d\5\u010e\u0088\2\u0b4d\u0b63\3\2\2\2\u0b4e\u0b4f\7\u011b\2\2\u0b4f"+
		"\u0b50\5\u0222\u0112\2\u0b50\u0b51\5\u00c2b\2\u0b51\u0b52\5\u0100\u0081"+
		"\2\u0b52\u0b53\5\u0108\u0085\2\u0b53\u0b54\5\u010a\u0086\2\u0b54\u0b55"+
		"\5\u010c\u0087\2\u0b55\u0b56\5\u010e\u0088\2\u0b56\u0b63\3\2\2\2\u0b57"+
		"\u0b58\7\u0125\2\2\u0b58\u0b59\7\u011b\2\2\u0b59\u0b5a\5\u0548\u02a5\2"+
		"\u0b5a\u0b5b\5\u00c2b\2\u0b5b\u0b5c\5\u0090I\2\u0b5c\u0b5d\5\u0100\u0081"+
		"\2\u0b5d\u0b5e\5\u0108\u0085\2\u0b5e\u0b5f\5\u010a\u0086\2\u0b5f\u0b60"+
		"\5\u010c\u0087\2\u0b60\u0b61\5\u010e\u0088\2\u0b61\u0b63\3\2\2\2\u0b62"+
		"\u0b44\3\2\2\2\u0b62\u0b4e\3\2\2\2\u0b62\u0b57\3\2\2\2\u0b63\u00bd\3\2"+
		"\2\2\u0b64\u0b6d\7\u016a\2\2\u0b65\u0b6d\7\u0168\2\2\u0b66\u0b67\7\u0106"+
		"\2\2\u0b67\u0b6d\t\r\2\2\u0b68\u0b69\7\u00e6\2\2\u0b69\u0b6d\t\r\2\2\u0b6a"+
		"\u0b6d\7\u0177\2\2\u0b6b\u0b6d\3\2\2\2\u0b6c\u0b64\3\2\2\2\u0b6c\u0b65"+
		"\3\2\2\2\u0b6c\u0b66\3\2\2\2\u0b6c\u0b68\3\2\2\2\u0b6c\u0b6a\3\2\2\2\u0b6c"+
		"\u0b6b\3\2\2\2\u0b6d\u00bf\3\2\2\2\u0b6e\u0b71\5\u00c4c\2\u0b6f\u0b71"+
		"\3\2\2\2\u0b70\u0b6e\3\2\2\2\u0b70\u0b6f\3\2\2\2\u0b71\u00c1\3\2\2\2\u0b72"+
		"\u0b73\7\4\2\2\u0b73\u0b74\5\u00c6d\2\u0b74\u0b75\7\5\2\2\u0b75\u0b78"+
		"\3\2\2\2\u0b76\u0b78\3\2\2\2\u0b77\u0b72\3\2\2\2\u0b77\u0b76\3\2\2\2\u0b78"+
		"\u00c3\3\2\2\2\u0b79\u0b7e\5\u00c8e\2\u0b7a\u0b7b\7\b\2\2\u0b7b\u0b7d"+
		"\5\u00c8e\2\u0b7c\u0b7a\3\2\2\2\u0b7d\u0b80\3\2\2\2\u0b7e\u0b7c\3\2\2"+
		"\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u00c5\3\2\2\2\u0b80\u0b7e\3\2\2\2\u0b81\u0b86"+
		"\5\u00caf\2\u0b82\u0b83\7\b\2\2\u0b83\u0b85\5\u00caf\2\u0b84\u0b82\3\2"+
		"\2\2\u0b85\u0b88\3\2\2\2\u0b86\u0b84\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87"+
		"\u00c7\3\2\2\2\u0b88\u0b86\3\2\2\2\u0b89\u0b8d\5\u00ccg\2\u0b8a\u0b8d"+
		"\5\u00dan\2\u0b8b\u0b8d\5\u00e0q\2\u0b8c\u0b89\3\2\2\2\u0b8c\u0b8a\3\2"+
		"\2\2\u0b8c\u0b8b\3\2\2\2\u0b8d\u00c9\3\2\2\2\u0b8e\u0b91\5\u00ceh\2\u0b8f"+
		"\u0b91\5\u00e0q\2\u0b90\u0b8e\3\2\2\2\u0b90\u0b8f\3\2\2\2\u0b91\u00cb"+
		"\3\2\2\2\u0b92\u0b93\5\u056c\u02b7\2\u0b93\u0b94\5\u0470\u0239\2\u0b94"+
		"\u0b95\5\u016a\u00b6\2\u0b95\u0b96\5\u00d0i\2\u0b96\u00cd\3\2\2\2\u0b97"+
		"\u0b9a\5\u056c\u02b7\2\u0b98\u0b99\7z\2\2\u0b99\u0b9b\7\u0120\2\2\u0b9a"+
		"\u0b98\3\2\2\2\u0b9a\u0b9b\3\2\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u0b9d\5\u00d0"+
		"i\2\u0b9d\u00cf\3\2\2\2\u0b9e\u0ba0\5\u00d2j\2\u0b9f\u0b9e\3\2\2\2\u0ba0"+
		"\u0ba3\3\2\2\2\u0ba1\u0b9f\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u00d1\3\2"+
		"\2\2\u0ba3\u0ba1\3\2\2\2\u0ba4\u0ba5\7\65\2\2\u0ba5\u0ba6\5\u054c\u02a7"+
		"\2\u0ba6\u0ba7\5\u00d4k\2\u0ba7\u0bad\3\2\2\2\u0ba8\u0bad\5\u00d4k\2\u0ba9"+
		"\u0bad\5\u00d8m\2\u0baa\u0bab\7\62\2\2\u0bab\u0bad\5\u0222\u0112\2\u0bac"+
		"\u0ba4\3\2\2\2\u0bac\u0ba8\3\2\2\2\u0bac\u0ba9\3\2\2\2\u0bac\u0baa\3\2"+
		"\2\2\u0bad\u00d3\3\2\2\2\u0bae\u0baf\7Z\2\2\u0baf\u0bd5\7[\2\2\u0bb0\u0bd5"+
		"\7[\2\2\u0bb1\u0bb2\7s\2\2\u0bb2\u0bb3\5\u02ae\u0158\2\u0bb3\u0bb4\5\u0110"+
		"\u0089\2\u0bb4\u0bd5\3\2\2\2\u0bb5\u0bb6\7d\2\2\u0bb6\u0bb7\7\u00fd\2"+
		"\2\u0bb7\u0bb8\5\u02ae\u0158\2\u0bb8\u0bb9\5\u0110\u0089\2\u0bb9\u0bd5"+
		"\3\2\2\2\u0bba\u0bbb\7\61\2\2\u0bbb\u0bbc\7\4\2\2\u0bbc\u0bbd\5\u049c"+
		"\u024f\2\u0bbd\u0bbe\7\5\2\2\u0bbe\u0bbf\5\u00e4s\2\u0bbf\u0bd5\3\2\2"+
		"\2\u0bc0\u0bc1\7=\2\2\u0bc1\u0bd5\5\u04c4\u0263\2\u0bc2\u0bc3\7\u01bf"+
		"\2\2\u0bc3\u0bc4\5\u00d6l\2\u0bc4\u0bcc\7\'\2\2\u0bc5\u0bc6\7\u00ec\2"+
		"\2\u0bc6\u0bcd\5\u012c\u0097\2\u0bc7\u0bc8\7\4\2\2\u0bc8\u0bc9\5\u049c"+
		"\u024f\2\u0bc9\u0bca\7\5\2\2\u0bca\u0bcb\7\u01c1\2\2\u0bcb\u0bcd\3\2\2"+
		"\2\u0bcc\u0bc5\3\2\2\2\u0bcc\u0bc7\3\2\2\2\u0bcd\u0bd5\3\2\2\2\u0bce\u0bcf"+
		"\7f\2\2\u0bcf\u0bd0\5\u0548\u02a5\2\u0bd0\u0bd1\5\u00e6t\2\u0bd1\u0bd2"+
		"\5\u00eex\2\u0bd2\u0bd3\5\u00f6|\2\u0bd3\u0bd5\3\2\2\2\u0bd4\u0bae\3\2"+
		"\2\2\u0bd4\u0bb0\3\2\2\2\u0bd4\u0bb1\3\2\2\2\u0bd4\u0bb5\3\2\2\2\u0bd4"+
		"\u0bba\3\2\2\2\u0bd4\u0bc0\3\2\2\2\u0bd4\u0bc2\3\2\2\2\u0bd4\u0bce\3\2"+
		"\2\2\u0bd5\u00d5\3\2\2\2\u0bd6\u0bda\7\u009c\2\2\u0bd7\u0bd8\7\u00a4\2"+
		"\2\u0bd8\u0bda\7=\2\2\u0bd9\u0bd6\3\2\2\2\u0bd9\u0bd7\3\2\2\2\u0bda\u00d7"+
		"\3\2\2\2\u0bdb\u0be1\7>\2\2\u0bdc\u0bdd\7Z\2\2\u0bdd\u0be1\7>\2\2\u0bde"+
		"\u0bdf\7M\2\2\u0bdf\u0be1\t\n\2\2\u0be0\u0bdb\3\2\2\2\u0be0\u0bdc\3\2"+
		"\2\2\u0be0\u0bde\3\2\2\2\u0be1\u00d9\3\2\2\2\u0be2\u0be3\7\u0089\2\2\u0be3"+
		"\u0be4\5\u0548\u02a5\2\u0be4\u0be5\5\u00dco\2\u0be5\u00db\3\2\2\2\u0be6"+
		"\u0be7\t\16\2\2\u0be7\u0be9\5\u00dep\2\u0be8\u0be6\3\2\2\2\u0be9\u0bec"+
		"\3\2\2\2\u0bea\u0be8\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u00dd\3\2\2\2\u0bec"+
		"\u0bea\3\2\2\2\u0bed\u0bee\t\17\2\2\u0bee\u00df\3\2\2\2\u0bef\u0bf0\7"+
		"\65\2\2\u0bf0\u0bf1\5\u054c\u02a7\2\u0bf1\u0bf2\5\u00e2r\2\u0bf2\u0bf5"+
		"\3\2\2\2\u0bf3\u0bf5\5\u00e2r\2\u0bf4\u0bef\3\2\2\2\u0bf4\u0bf3\3\2\2"+
		"\2\u0bf5\u00e1\3\2\2\2\u0bf6\u0bf7\7\61\2\2\u0bf7\u0bf8\7\4\2\2\u0bf8"+
		"\u0bf9\5\u049c\u024f\2\u0bf9\u0bfa\7\5\2\2\u0bfa\u0bfb\5\u01ce\u00e8\2"+
		"\u0bfb\u0c31\3\2\2\2\u0bfc\u0c08\7s\2\2\u0bfd\u0bfe\7\4\2\2\u0bfe\u0bff"+
		"\5\u00e8u\2\u0bff\u0c00\7\5\2\2\u0c00\u0c01\5\u00ecw\2\u0c01\u0c02\5\u02ae"+
		"\u0158\2\u0c02\u0c03\5\u0110\u0089\2\u0c03\u0c04\5\u01ce\u00e8\2\u0c04"+
		"\u0c09\3\2\2\2\u0c05\u0c06\5\u0112\u008a\2\u0c06\u0c07\5\u01ce\u00e8\2"+
		"\u0c07\u0c09\3\2\2\2\u0c08\u0bfd\3\2\2\2\u0c08\u0c05\3\2\2\2\u0c09\u0c31"+
		"\3\2\2\2\u0c0a\u0c0b\7d\2\2\u0c0b\u0c17\7\u00fd\2\2\u0c0c\u0c0d\7\4\2"+
		"\2\u0c0d\u0c0e\5\u00e8u\2\u0c0e\u0c0f\7\5\2\2\u0c0f\u0c10\5\u00ecw\2\u0c10"+
		"\u0c11\5\u02ae\u0158\2\u0c11\u0c12\5\u0110\u0089\2\u0c12\u0c13\5\u01ce"+
		"\u00e8\2\u0c13\u0c18\3\2\2\2\u0c14\u0c15\5\u0112\u008a\2\u0c15\u0c16\5"+
		"\u01ce\u00e8\2\u0c16\u0c18\3\2\2\2\u0c17\u0c0c\3\2\2\2\u0c17\u0c14\3\2"+
		"\2\2\u0c18\u0c31\3\2\2\2\u0c19\u0c1a\7\u00d8\2\2\u0c1a\u0c1b\5\u026a\u0136"+
		"\2\u0c1b\u0c1c\7\4\2\2\u0c1c\u0c1d\5\u00f0y\2\u0c1d\u0c1e\7\5\2\2\u0c1e"+
		"\u0c1f\5\u00ecw\2\u0c1f\u0c20\5\u02ae\u0158\2\u0c20\u0c21\5\u0110\u0089"+
		"\2\u0c21\u0c22\5\u00f4{\2\u0c22\u0c23\5\u01ce\u00e8\2\u0c23\u0c31\3\2"+
		"\2\2\u0c24\u0c25\7G\2\2\u0c25\u0c26\7\u00fd\2\2\u0c26\u0c27\7\4\2\2\u0c27"+
		"\u0c28\5\u00e8u\2\u0c28\u0c29\7\5\2\2\u0c29\u0c2a\7f\2\2\u0c2a\u0c2b\5"+
		"\u0548\u02a5\2\u0c2b\u0c2c\5\u00e6t\2\u0c2c\u0c2d\5\u00eex\2\u0c2d\u0c2e"+
		"\5\u00f6|\2\u0c2e\u0c2f\5\u01ce\u00e8\2\u0c2f\u0c31\3\2\2\2\u0c30\u0bf6"+
		"\3\2\2\2\u0c30\u0bfc\3\2\2\2\u0c30\u0c0a\3\2\2\2\u0c30\u0c19\3\2\2\2\u0c30"+
		"\u0c24\3\2\2\2\u0c31\u00e3\3\2\2\2\u0c32\u0c33\7\u0115\2\2\u0c33\u0c36"+
		"\7\u00f5\2\2\u0c34\u0c36\3\2\2\2\u0c35\u0c32\3\2\2\2\u0c35\u0c34\3\2\2"+
		"\2\u0c36\u00e5\3\2\2\2\u0c37\u0c38\7\4\2\2\u0c38\u0c39\5\u00e8u\2\u0c39"+
		"\u0c3a\7\5\2\2\u0c3a\u0c3d\3\2\2\2\u0c3b\u0c3d\3\2\2\2\u0c3c\u0c37\3\2"+
		"\2\2\u0c3c\u0c3b\3\2\2\2\u0c3d\u00e7\3\2\2\2\u0c3e\u0c43\5\u00eav\2\u0c3f"+
		"\u0c40\7\b\2\2\u0c40\u0c42\5\u00eav\2\u0c41\u0c3f\3\2\2\2\u0c42\u0c45"+
		"\3\2\2\2\u0c43\u0c41\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u00e9\3\2\2\2\u0c45"+
		"\u0c43\3\2\2\2\u0c46\u0c47\5\u056c\u02b7\2\u0c47\u00eb\3\2\2\2\u0c48\u0c49"+
		"\7\u01c2\2\2\u0c49\u0c4a\7\4\2\2\u0c4a\u0c4b\5\u00e8u\2\u0c4b\u0c4c\7"+
		"\5\2\2\u0c4c\u0c4f\3\2\2\2\u0c4d\u0c4f\3\2\2\2\u0c4e\u0c48\3\2\2\2\u0c4e"+
		"\u0c4d\3\2\2\2\u0c4f\u00ed\3\2\2\2\u0c50\u0c51\7\u010a\2\2\u0c51\u0c54"+
		"\t\20\2\2\u0c52\u0c54\3\2\2\2\u0c53\u0c50\3\2\2\2\u0c53\u0c52\3\2\2\2"+
		"\u0c54\u00ef\3\2\2\2\u0c55\u0c5a\5\u00f2z\2\u0c56\u0c57\7\b\2\2\u0c57"+
		"\u0c59\5\u00f2z\2\u0c58\u0c56\3\2\2\2\u0c59\u0c5c\3\2\2\2\u0c5a\u0c58"+
		"\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u00f1\3\2\2\2\u0c5c\u0c5a\3\2\2\2\u0c5d"+
		"\u0c5e\5\u0270\u0139\2\u0c5e\u0c65\7z\2\2\u0c5f\u0c66\5\u02c2\u0162\2"+
		"\u0c60\u0c61\7\u011e\2\2\u0c61\u0c62\7\4\2\2\u0c62\u0c63\5\u02c2\u0162"+
		"\2\u0c63\u0c64\7\5\2\2\u0c64\u0c66\3\2\2\2\u0c65\u0c5f\3\2\2\2\u0c65\u0c60"+
		"\3\2\2\2\u0c66\u00f3\3\2\2\2\u0c67\u0c68\7x\2\2\u0c68\u0c69\7\4\2\2\u0c69"+
		"\u0c6a\5\u049c\u024f\2\u0c6a\u0c6b\7\5\2\2\u0c6b\u0c6e\3\2\2\2\u0c6c\u0c6e"+
		"\3\2\2\2\u0c6d\u0c67\3\2\2\2\u0c6d\u0c6c\3\2\2\2\u0c6e\u00f5\3\2\2\2\u0c6f"+
		"\u0c79\5\u00f8}\2\u0c70\u0c79\5\u00fa~\2\u0c71\u0c72\5\u00f8}\2\u0c72"+
		"\u0c73\5\u00fa~\2\u0c73\u0c79\3\2\2\2\u0c74\u0c75\5\u00fa~\2\u0c75\u0c76"+
		"\5\u00f8}\2\u0c76\u0c79\3\2\2\2\u0c77\u0c79\3\2\2\2\u0c78\u0c6f\3\2\2"+
		"\2\u0c78\u0c70\3\2\2\2\u0c78\u0c71\3\2\2\2\u0c78\u0c74\3\2\2\2\u0c78\u0c77"+
		"\3\2\2\2\u0c79\u00f7\3\2\2\2\u0c7a\u0c7b\7]\2\2\u0c7b\u0c7c\7\u0179\2"+
		"\2\u0c7c\u0c7d\5\u00fc\177\2\u0c7d\u00f9\3\2\2\2\u0c7e\u0c7f\7]\2\2\u0c7f"+
		"\u0c80\7\u00c7\2\2\u0c80\u0c81\5\u00fc\177\2\u0c81\u00fb\3\2\2\2\u0c82"+
		"\u0c83\7\u0115\2\2\u0c83\u0c89\7\u0095\2\2\u0c84\u0c89\7\u0143\2\2\u0c85"+
		"\u0c89\7\u00a7\2\2\u0c86\u0c87\7\u0155\2\2\u0c87\u0c89\t\21\2\2\u0c88"+
		"\u0c82\3\2\2\2\u0c88\u0c84\3\2\2\2\u0c88\u0c85\3\2\2\2\u0c88\u0c86\3\2"+
		"\2\2\u0c89\u00fd\3\2\2\2\u0c8a\u0c8b\7\u00f6\2\2\u0c8b\u0c8c\7\4\2\2\u0c8c"+
		"\u0c8d\5\u0546\u02a4\2\u0c8d\u0c8e\7\5\2\2\u0c8e\u0c91\3\2\2\2\u0c8f\u0c91"+
		"\3\2\2\2\u0c90\u0c8a\3\2\2\2\u0c90\u0c8f\3\2\2\2\u0c91\u00ff\3\2\2\2\u0c92"+
		"\u0c95\5\u0102\u0082\2\u0c93\u0c95\3\2\2\2\u0c94\u0c92\3\2\2\2\u0c94\u0c93"+
		"\3\2\2\2\u0c95\u0101\3\2\2\2\u0c96\u0c97\7\u0125\2\2\u0c97\u0c98\7\u00a4"+
		"\2\2\u0c98\u0c99\5\u056c\u02b7\2\u0c99\u0c9a\7\4\2\2\u0c9a\u0c9b\5\u0104"+
		"\u0083\2\u0c9b\u0c9c\7\5\2\2\u0c9c\u0103\3\2\2\2\u0c9d\u0ca2\5\u0106\u0084"+
		"\2\u0c9e\u0c9f\7\b\2\2\u0c9f\u0ca1\5\u0106\u0084\2\u0ca0\u0c9e\3\2\2\2"+
		"\u0ca1\u0ca4\3\2\2\2\u0ca2\u0ca0\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0105"+
		"\3\2\2\2\u0ca4\u0ca2\3\2\2\2\u0ca5\u0ca6\5\u056c\u02b7\2\u0ca6\u0ca7\5"+
		"\u0276\u013c\2\u0ca7\u0ca8\5\u0278\u013d\2\u0ca8\u0cb4\3\2\2\2\u0ca9\u0caa"+
		"\5\u04ce\u0268\2\u0caa\u0cab\5\u0276\u013c\2\u0cab\u0cac\5\u0278\u013d"+
		"\2\u0cac\u0cb4\3\2\2\2\u0cad\u0cae\7\4\2\2\u0cae\u0caf\5\u049c\u024f\2"+
		"\u0caf\u0cb0\7\5\2\2\u0cb0\u0cb1\5\u0276\u013c\2\u0cb1\u0cb2\5\u0278\u013d"+
		"\2\u0cb2\u0cb4\3\2\2\2\u0cb3\u0ca5\3\2\2\2\u0cb3\u0ca9\3\2\2\2\u0cb3\u0cad"+
		"\3\2\2\2\u0cb4\u0107\3\2\2\2\u0cb5\u0cb6\7u\2\2\u0cb6\u0cb9\5\u054c\u02a7"+
		"\2\u0cb7\u0cb9\3\2\2\2\u0cb8\u0cb5\3\2\2\2\u0cb8\u0cb7\3\2\2\2\u0cb9\u0109"+
		"\3\2\2\2\u0cba\u0cbb\7z\2\2\u0cbb\u0cc0\5\u0084C\2\u0cbc\u0cbd\7\u0183"+
		"\2\2\u0cbd\u0cc0\7\u011d\2\2\u0cbe\u0cc0\3\2\2\2\u0cbf\u0cba\3\2\2\2\u0cbf"+
		"\u0cbc\3\2\2\2\u0cbf\u0cbe\3\2\2\2\u0cc0\u010b\3\2\2\2\u0cc1\u0cc2\7]"+
		"\2\2\u0cc2\u0cc8\7\u00b2\2\2\u0cc3\u0cc9\7\u00d0\2\2\u0cc4\u0cc5\7\u00c7"+
		"\2\2\u0cc5\u0cc9\7\u0148\2\2\u0cc6\u0cc7\7\u012c\2\2\u0cc7\u0cc9\7\u0148"+
		"\2\2\u0cc8\u0cc3\3\2\2\2\u0cc8\u0cc4\3\2\2\2\u0cc8\u0cc6\3\2\2\2\u0cc9"+
		"\u0ccc\3\2\2\2\u0cca\u0ccc\3\2\2\2\u0ccb\u0cc1\3\2\2\2\u0ccb\u0cca\3\2"+
		"\2\2\u0ccc\u010d\3\2\2\2\u0ccd\u0cce\7\u0167\2\2\u0cce\u0cd1\5\u054c\u02a7"+
		"\2\u0ccf\u0cd1\3\2\2\2\u0cd0\u0ccd\3\2\2\2\u0cd0\u0ccf\3\2\2\2\u0cd1\u010f"+
		"\3\2\2\2\u0cd2\u0cd3\7u\2\2\u0cd3\u0cd4\7\u00f3\2\2\u0cd4\u0cd5\7\u0167"+
		"\2\2\u0cd5\u0cd8\5\u054c\u02a7\2\u0cd6\u0cd8\3\2\2\2\u0cd7\u0cd2\3\2\2"+
		"\2\u0cd7\u0cd6\3\2\2\2\u0cd8\u0111\3\2\2\2\u0cd9\u0cda\7u\2\2\u0cda\u0cdb"+
		"\7\u00f3\2\2\u0cdb\u0cdc\5\u054c\u02a7\2\u0cdc\u0113\3\2\2\2\u0cdd\u0cde"+
		"\7\66\2\2\u0cde\u0ce2\7\u015e\2\2\u0cdf\u0ce0\7\u00ed\2\2\u0ce0\u0ce1"+
		"\7Z\2\2\u0ce1\u0ce3\7\u0194\2\2\u0ce2\u0cdf\3\2\2\2\u0ce2\u0ce3\3\2\2"+
		"\2\u0ce3\u0ce4\3\2\2\2\u0ce4\u0ce5\5\u0222\u0112\2\u0ce5\u0ce6\5\u037e"+
		"\u01c0\2\u0ce6\u0ce7\7]\2\2\u0ce7\u0ce8\5\u0510\u0289\2\u0ce8\u0ce9\7"+
		"H\2\2\u0ce9\u0cea\5\u0436\u021c\2\u0cea\u0115\3\2\2\2\u0ceb\u0cec\7\u009b"+
		"\2\2\u0cec\u0cef\7\u015e\2\2\u0ced\u0cee\7\u00ed\2\2\u0cee\u0cf0\7\u0194"+
		"\2\2\u0cef\u0ced\3\2\2\2\u0cef\u0cf0\3\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1"+
		"\u0cf2\5\u0222\u0112\2\u0cf2\u0cf3\7\u0155\2\2\u0cf3\u0cf4\7\u015e\2\2"+
		"\u0cf4\u0cf5\5\u0564\u02b3\2\u0cf5\u0117\3\2\2\2\u0cf6\u0cf7\7\66\2\2"+
		"\u0cf7\u0cf8\5\u00be`\2\u0cf8\u0cfc\7l\2\2\u0cf9\u0cfa\7\u00ed\2\2\u0cfa"+
		"\u0cfb\7Z\2\2\u0cfb\u0cfd\7\u0194\2\2\u0cfc\u0cf9\3\2\2\2\u0cfc\u0cfd"+
		"\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe\u0cff\5\u011a\u008e\2\u0cff\u0d00\7"+
		"\'\2\2\u0d00\u0d01\5\u03d0\u01e9\2\u0d01\u0d02\5\u011c\u008f\2\u0d02\u0119"+
		"\3\2\2\2\u0d03\u0d04\5\u0548\u02a5\2\u0d04\u0d05\5\u00e6t\2\u0d05\u0d06"+
		"\5\u0108\u0085\2\u0d06\u0d07\5\u010a\u0086\2\u0d07\u0d08\5\u010c\u0087"+
		"\2\u0d08\u0d09\5\u010e\u0088\2\u0d09\u011b\3\2\2\2\u0d0a\u0d0e\7z\2\2"+
		"\u0d0b\u0d0f\7\u00bf\2\2\u0d0c\u0d0d\7\u0115\2\2\u0d0d\u0d0f\7\u00bf\2"+
		"\2\u0d0e\u0d0b\3\2\2\2\u0d0e\u0d0c\3\2\2\2\u0d0f\u0d12\3\2\2\2\u0d10\u0d12"+
		"\3\2\2\2\u0d11\u0d0a\3\2\2\2\u0d11\u0d10\3\2\2\2\u0d12\u011d\3\2\2\2\u0d13"+
		"\u0d14\7\66\2\2\u0d14\u0d15\5\u0122\u0092\2\u0d15\u0d16\7\u010b\2\2\u0d16"+
		"\u0d1a\7\u0180\2\2\u0d17\u0d18\7\u00ed\2\2\u0d18\u0d19\7Z\2\2\u0d19\u0d1b"+
		"\7\u0194\2\2\u0d1a\u0d17\3\2\2\2\u0d1a\u0d1b\3\2\2\2\u0d1b\u0d1c\3\2\2"+
		"\2\u0d1c\u0d1d\5\u0120\u0091\2\u0d1d\u0d1e\7\'\2\2\u0d1e\u0d1f\5\u03d0"+
		"\u01e9\2\u0d1f\u0d20\5\u011c\u008f\2\u0d20\u011f\3\2\2\2\u0d21\u0d22\5"+
		"\u0548\u02a5\2\u0d22\u0d23\5\u00e6t\2\u0d23\u0d24\5\u0108\u0085\2\u0d24"+
		"\u0d25\5\u0086D\2\u0d25\u0d26\5\u010e\u0088\2\u0d26\u0121\3\2\2\2\u0d27"+
		"\u0d2a\7\u0177\2\2\u0d28\u0d2a\3\2\2\2\u0d29\u0d27\3\2\2\2\u0d29\u0d28"+
		"\3\2\2\2\u0d2a\u0123\3\2\2\2\u0d2b\u0d2c\7\u0139\2\2\u0d2c\u0d2d\7\u010b"+
		"\2\2\u0d2d\u0d2e\7\u0180\2\2\u0d2e\u0d2f\5\u0266\u0134\2\u0d2f\u0d30\5"+
		"\u0548\u02a5\2\u0d30\u0d31\5\u011c\u008f\2\u0d31\u0125\3\2\2\2\u0d32\u0d33"+
		"\7\66\2\2\u0d33\u0d34\5\u00be`\2\u0d34\u0d38\7\u0150\2\2\u0d35\u0d36\7"+
		"\u00ed\2\2\u0d36\u0d37\7Z\2\2\u0d37\u0d39\7\u0194\2\2\u0d38\u0d35\3\2"+
		"\2\2\u0d38\u0d39\3\2\2\2\u0d39\u0d3a\3\2\2\2\u0d3a\u0d3b\5\u0548\u02a5"+
		"\2\u0d3b\u0d3c\5\u012a\u0096\2\u0d3c\u0127\3\2\2\2\u0d3d\u0d3e\7\u009b"+
		"\2\2\u0d3e\u0d41\7\u0150\2\2\u0d3f\u0d40\7\u00ed\2\2\u0d40\u0d42\7\u0194"+
		"\2\2\u0d41\u0d3f\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d43\3\2\2\2\u0d43"+
		"\u0d44\5\u0548\u02a5\2\u0d44\u0d45\5\u012e\u0098\2\u0d45\u0129\3\2\2\2"+
		"\u0d46\u0d49\5\u012e\u0098\2\u0d47\u0d49\3\2\2\2\u0d48\u0d46\3\2\2\2\u0d48"+
		"\u0d47\3\2\2\2\u0d49\u012b\3\2\2\2\u0d4a\u0d4b\7\4\2\2\u0d4b\u0d4c\5\u012e"+
		"\u0098\2\u0d4c\u0d4d\7\5\2\2\u0d4d\u0d50\3\2\2\2\u0d4e\u0d50\3\2\2\2\u0d4f"+
		"\u0d4a\3\2\2\2\u0d4f\u0d4e\3\2\2\2\u0d50\u012d\3\2\2\2\u0d51\u0d53\5\u0130"+
		"\u0099\2\u0d52\u0d51\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d52\3\2\2\2\u0d54"+
		"\u0d55\3\2\2\2\u0d55\u012f\3\2\2\2\u0d56\u0d57\7\'\2\2\u0d57\u0d75\5\u0474"+
		"\u023b\2\u0d58\u0d59\7\u00a5\2\2\u0d59\u0d75\5\u0134\u009b\2\u0d5a\u0d75"+
		"\7\u00be\2\2\u0d5b\u0d5c\7\u00f2\2\2\u0d5c\u0d5d\5\u0132\u009a\2\u0d5d"+
		"\u0d5e\5\u0134\u009b\2\u0d5e\u0d75\3\2\2\2\u0d5f\u0d60\7\u010c\2\2\u0d60"+
		"\u0d75\5\u0134\u009b\2\u0d61\u0d62\7\u010e\2\2\u0d62\u0d75\5\u0134\u009b"+
		"\2\u0d63\u0d64\7\u0115\2\2\u0d64\u0d75\t\22\2\2\u0d65\u0d66\7\u0121\2"+
		"\2\u0d66\u0d67\7\u00a4\2\2\u0d67\u0d75\5\u0222\u0112\2\u0d68\u0d69\7\u0150"+
		"\2\2\u0d69\u0d6a\7\u0112\2\2\u0d6a\u0d75\5\u0222\u0112\2\u0d6b\u0d6c\7"+
		"\u015c\2\2\u0d6c\u0d6d\5\22\n\2\u0d6d\u0d6e\5\u0134\u009b\2\u0d6e\u0d75"+
		"\3\2\2\2\u0d6f\u0d70\7\u0142\2\2\u0d70\u0d72\5\22\n\2\u0d71\u0d73\5\u0134"+
		"\u009b\2\u0d72\u0d71\3\2\2\2\u0d72\u0d73\3\2\2\2\u0d73\u0d75\3\2\2\2\u0d74"+
		"\u0d56\3\2\2\2\u0d74\u0d58\3\2\2\2\u0d74\u0d5a\3\2\2\2\u0d74\u0d5b\3\2"+
		"\2\2\u0d74\u0d5f\3\2\2\2\u0d74\u0d61\3\2\2\2\u0d74\u0d63\3\2\2\2\u0d74"+
		"\u0d65\3\2\2\2\u0d74\u0d68\3\2\2\2\u0d74\u0d6b\3\2\2\2\u0d74\u0d6f\3\2"+
		"\2\2\u0d75\u0131\3\2\2\2\u0d76\u0d79\7\u00a4\2\2\u0d77\u0d79\3\2\2\2\u0d78"+
		"\u0d76\3\2\2\2\u0d78\u0d77\3\2\2\2\u0d79\u0133\3\2\2\2\u0d7a\u0d81\5\u055a"+
		"\u02ae\2\u0d7b\u0d7c\7\16\2\2\u0d7c\u0d81\5\u055a\u02ae\2\u0d7d\u0d7e"+
		"\7\17\2\2\u0d7e\u0d81\5\u055a\u02ae\2\u0d7f\u0d81\5\u0564\u02b3\2\u0d80"+
		"\u0d7a\3\2\2\2\u0d80\u0d7b\3\2\2\2\u0d80\u0d7d\3\2\2\2\u0d80\u0d7f\3\2"+
		"\2\2\u0d81\u0135\3\2\2\2\u0d82\u0d87\5\u0134\u009b\2\u0d83\u0d84\7\b\2"+
		"\2\u0d84\u0d86\5\u0134\u009b\2\u0d85\u0d83\3\2\2\2\u0d86\u0d89\3\2\2\2"+
		"\u0d87\u0d85\3\2\2\2\u0d87\u0d88\3\2\2\2\u0d88\u0137\3\2\2\2\u0d89\u0d87"+
		"\3\2\2\2\u0d8a\u0d8b\7\66\2\2\u0d8b\u0d8c\5\u0280\u0141\2\u0d8c\u0d8d"+
		"\5\u013a\u009e\2\u0d8d\u0d8e\5\u0144\u00a3\2\u0d8e\u0d8f\7\u00ff\2\2\u0d8f"+
		"\u0d95\5\u054c\u02a7\2\u0d90\u0d91\7\u00e8\2\2\u0d91\u0d92\5\u013c\u009f"+
		"\2\u0d92\u0d93\5\u013e\u00a0\2\u0d93\u0d94\5\u0142\u00a2\2\u0d94\u0d96"+
		"\3\2\2\2\u0d95\u0d90\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u0139\3\2\2\2\u0d97"+
		"\u0d9a\7\u016f\2\2\u0d98\u0d9a\3\2\2\2\u0d99\u0d97\3\2\2\2\u0d99\u0d98"+
		"\3\2\2\2\u0d9a\u013b\3\2\2\2\u0d9b\u0d9d\5\u054c\u02a7\2\u0d9c\u0d9e\5"+
		"\u0224\u0113\2\u0d9d\u0d9c\3\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u013d\3\2"+
		"\2\2\u0d9f\u0da0\7\u00f7\2\2\u0da0\u0da3\5\u013c\u009f\2\u0da1\u0da3\3"+
		"\2\2\2\u0da2\u0d9f\3\2\2\2\u0da2\u0da1\3\2\2\2\u0da3\u013f\3\2\2\2\u0da4"+
		"\u0da5\7\u017d\2\2\u0da5\u0da9\5\u013c\u009f\2\u0da6\u0da7\7\u0115\2\2"+
		"\u0da7\u0da9\7\u017d\2\2\u0da8\u0da4\3\2\2\2\u0da8\u0da6\3\2\2\2\u0da9"+
		"\u0141\3\2\2\2\u0daa\u0dad\5\u0140\u00a1\2\u0dab\u0dad\3\2\2\2\u0dac\u0daa"+
		"\3\2\2\2\u0dac\u0dab\3\2\2\2\u0dad\u0143\3\2\2\2\u0dae\u0db1\7\u012f\2"+
		"\2\u0daf\u0db1\3\2\2\2\u0db0\u0dae\3\2\2\2\u0db0\u0daf\3\2\2\2\u0db1\u0145"+
		"\3\2\2\2\u0db2\u0db3\7\66\2\2\u0db3\u0db4\7e\2\2\u0db4\u0db5\5\u0548\u02a5"+
		"\2\u0db5\u0db6\7]\2\2\u0db6\u0db7\7l\2\2\u0db7\u0db8\5\u0548\u02a5\2\u0db8"+
		"\u0db9\7\'\2\2\u0db9\u0dba\5\u0148\u00a5\2\u0dba\u0147\3\2\2\2\u0dbb\u0dbc"+
		"\7\4\2\2\u0dbc\u0dc1\5\u014a\u00a6\2\u0dbd\u0dbe\7\b\2\2\u0dbe\u0dc0\5"+
		"\u014a\u00a6\2\u0dbf\u0dbd\3\2\2\2\u0dc0\u0dc3\3\2\2\2\u0dc1\u0dbf\3\2"+
		"\2\2\u0dc1\u0dc2\3\2\2\2\u0dc2\u0dc4\3\2\2\2\u0dc3\u0dc1\3\2\2\2\u0dc4"+
		"\u0dc5\7\5\2\2\u0dc5\u0149\3\2\2\2\u0dc6\u0dc7\7\37\2\2\u0dc7\u0dc8\7"+
		"]\2\2\u0dc8\u0dc9\7\u00a0\2\2\u0dc9\u0dcd\5\u0548\u02a5\2\u0dca\u0dcb"+
		"\7o\2\2\u0dcb\u0dcd\7b\2\2\u0dcc\u0dc6\3\2\2\2\u0dcc\u0dca\3\2\2\2\u0dcd"+
		"\u014b\3\2\2\2\u0dce\u0dcf\7\66\2\2\u0dcf\u0dd0\7\u0167\2\2\u0dd0\u0dd1"+
		"\5\u054c\u02a7\2\u0dd1\u0dd2\5\u014e\u00a8\2\u0dd2\u0dd3\7\u0107\2\2\u0dd3"+
		"\u0dd4\5\u055e\u02b0\2\u0dd4\u0dd5\5\u0086D\2\u0dd5\u014d\3\2\2\2\u0dd6"+
		"\u0dd7\7\u0122\2\2\u0dd7\u0dda\5\u0568\u02b5\2\u0dd8\u0dda\3\2\2\2\u0dd9"+
		"\u0dd6\3\2\2\2\u0dd9\u0dd8\3\2\2\2\u0dda\u014f\3\2\2\2\u0ddb\u0ddc\7\u00d0"+
		"\2\2\u0ddc\u0ddf\7\u0167\2\2\u0ddd\u0dde\7\u00ed\2\2\u0dde\u0de0\7\u0194"+
		"\2\2\u0ddf\u0ddd\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1"+
		"\u0de2\5\u054c\u02a7\2\u0de2\u0151\3\2\2\2\u0de3\u0de4\7\66\2\2\u0de4"+
		"\u0de8\7\u00dd\2\2\u0de5\u0de6\7\u00ed\2\2\u0de6\u0de7\7Z\2\2\u0de7\u0de9"+
		"\7\u0194\2\2\u0de8\u0de5\3\2\2\2\u0de8\u0de9\3\2\2\2\u0de9\u0dea\3\2\2"+
		"\2\u0dea\u0deb\5\u054c\u02a7\2\u0deb\u0dec\5\22\n\2\u0dec\u0ded\5\u0154"+
		"\u00ab\2\u0ded\u0153\3\2\2\2\u0dee\u0df0\5\u0156\u00ac\2\u0def\u0dee\3"+
		"\2\2\2\u0df0\u0df3\3\2\2\2\u0df1\u0def\3\2\2\2\u0df1\u0df2\3\2\2\2\u0df2"+
		"\u0155\3\2\2\2\u0df3\u0df1\3\2\2\2\u0df4\u0df5\7\u014b\2\2\u0df5\u0dfc"+
		"\5\u054c\u02a7\2\u0df6\u0df7\7\u017f\2\2\u0df7\u0dfc\5V,\2\u0df8\u0df9"+
		"\7H\2\2\u0df9\u0dfc\5V,\2\u0dfa\u0dfc\7\u00a7\2\2\u0dfb\u0df4\3\2\2\2"+
		"\u0dfb\u0df6\3\2\2\2\u0dfb\u0df8\3\2\2\2\u0dfb\u0dfa\3\2\2\2\u0dfc\u0157"+
		"\3\2\2\2\u0dfd\u0dfe\7\u009b\2\2\u0dfe\u0dff\7\u00dd\2\2\u0dff\u0e00\5"+
		"\u054c\u02a7\2\u0e00\u0e01\7\u0179\2\2\u0e01\u0e02\5\u015a\u00ae\2\u0e02"+
		"\u0159\3\2\2\2\u0e03\u0e05\5\u015c\u00af\2\u0e04\u0e03\3\2\2\2\u0e05\u0e08"+
		"\3\2\2\2\u0e06\u0e04\3\2\2\2\u0e06\u0e07\3\2\2\2\u0e07\u015b\3\2\2\2\u0e08"+
		"\u0e06\3\2\2\2\u0e09\u0e0a\7n\2\2\u0e0a\u0e0b\5V,\2\u0e0b\u015d\3\2\2"+
		"\2\u0e0c\u0e0d\7\u009b\2\2\u0e0d\u0e0e\7\u00dd\2\2\u0e0e\u0e0f\5\u054c"+
		"\u02a7\2\u0e0f\u0e10\5*\26\2\u0e10\u0e11\5\u021a\u010e\2\u0e11\u0e12\5"+
		"\u054c\u02a7\2\u0e12\u0e75\3\2\2\2\u0e13\u0e14\7\u009b\2\2\u0e14\u0e15"+
		"\7\u00dd\2\2\u0e15\u0e16\5\u054c\u02a7\2\u0e16\u0e17\5*\26\2\u0e17\u0e18"+
		"\5\u0218\u010d\2\u0e18\u0e19\5\u0222\u0112\2\u0e19\u0e75\3\2\2\2\u0e1a"+
		"\u0e1b\7\u009b\2\2\u0e1b\u0e1c\7\u00dd\2\2\u0e1c\u0e1d\5\u054c\u02a7\2"+
		"\u0e1d\u0e1e\5*\26\2\u0e1e\u0e1f\7\u0099\2\2\u0e1f\u0e20\5\u02a0\u0151"+
		"\2\u0e20\u0e75\3\2\2\2\u0e21\u0e22\7\u009b\2\2\u0e22\u0e23\7\u00dd\2\2"+
		"\u0e23\u0e24\5\u054c\u02a7\2\u0e24\u0e25\5*\26\2\u0e25\u0e26\7\60\2\2"+
		"\u0e26\u0e27\7\4\2\2\u0e27\u0e28\5\u0470\u0239\2\u0e28\u0e29\7\'\2\2\u0e29"+
		"\u0e2a\5\u0470\u0239\2\u0e2a\u0e2b\7\5\2\2\u0e2b\u0e75\3\2\2\2\u0e2c\u0e2d"+
		"\7\u009b\2\2\u0e2d\u0e2e\7\u00dd\2\2\u0e2e\u0e2f\5\u054c\u02a7\2\u0e2f"+
		"\u0e30\5*\26\2\u0e30\u0e31\7\u00ce\2\2\u0e31\u0e32\5\u0470\u0239\2\u0e32"+
		"\u0e75\3\2\2\2\u0e33\u0e34\7\u009b\2\2\u0e34\u0e35\7\u00dd\2\2\u0e35\u0e36"+
		"\5\u054c\u02a7\2\u0e36\u0e37\5*\26\2\u0e37\u0e38\7\u00e4\2\2\u0e38\u0e39"+
		"\5\u0288\u0145\2\u0e39\u0e75\3\2\2\2\u0e3a\u0e3b\7\u009b\2\2\u0e3b\u0e3c"+
		"\7\u00dd\2\2\u0e3c\u0e3d\5\u054c\u02a7\2\u0e3d\u0e3e\5*\26\2\u0e3e\u0e3f"+
		"\7\u011e\2\2\u0e3f\u0e40\5\u02c6\u0164\2\u0e40\u0e75\3\2\2\2\u0e41\u0e42"+
		"\7\u009b\2\2\u0e42\u0e43\7\u00dd\2\2\u0e43\u0e44\5\u054c\u02a7\2\u0e44"+
		"\u0e45\5*\26\2\u0e45\u0e46\7\u011e\2\2\u0e46\u0e47\7\u00ad\2\2\u0e47\u0e48"+
		"\5\u0222\u0112\2\u0e48\u0e49\7u\2\2\u0e49\u0e4a\5\u054c\u02a7\2\u0e4a"+
		"\u0e75\3\2\2\2\u0e4b\u0e4c\7\u009b\2\2\u0e4c\u0e4d\7\u00dd\2\2\u0e4d\u0e4e"+
		"\5\u054c\u02a7\2\u0e4e\u0e4f\5*\26\2\u0e4f\u0e50\7\u011e\2\2\u0e50\u0e51"+
		"\7\u00df\2\2\u0e51\u0e52\5\u0222\u0112\2\u0e52\u0e53\7u\2\2\u0e53\u0e54"+
		"\5\u054c\u02a7\2\u0e54\u0e75\3\2\2\2\u0e55\u0e56\7\u009b\2\2\u0e56\u0e57"+
		"\7\u00dd\2\2\u0e57\u0e58\5\u054c\u02a7\2\u0e58\u0e59\5*\26\2\u0e59\u0e5a"+
		"\7\u0130\2\2\u0e5a\u0e5b\5\u0288\u0145\2\u0e5b\u0e75\3\2\2\2\u0e5c\u0e5d"+
		"\7\u009b\2\2\u0e5d\u0e5e\7\u00dd\2\2\u0e5e\u0e5f\5\u054c\u02a7\2\u0e5f"+
		"\u0e60\5*\26\2\u0e60\u0e61\7\u01c3\2\2\u0e61\u0e62\5\u0288\u0145\2\u0e62"+
		"\u0e75\3\2\2\2\u0e63\u0e64\7\u009b\2\2\u0e64\u0e65\7\u00dd\2\2\u0e65\u0e66"+
		"\5\u054c\u02a7\2\u0e66\u0e67\5*\26\2\u0e67\u0e68\7\u01c4\2\2\u0e68\u0e69"+
		"\7";
	private static final String _serializedATNSegment2 =
		"F\2\2\u0e69\u0e6a\5\u0470\u0239\2\u0e6a\u0e6b\7\u00ff\2\2\u0e6b\u0e6c"+
		"\5\u054c\u02a7\2\u0e6c\u0e75\3\2\2\2\u0e6d\u0e6e\7\u009b\2\2\u0e6e\u0e6f"+
		"\7\u00dd\2\2\u0e6f\u0e70\5\u054c\u02a7\2\u0e70\u0e71\5*\26\2\u0e71\u0e72"+
		"\7\u0170\2\2\u0e72\u0e73\5\u0470\u0239\2\u0e73\u0e75\3\2\2\2\u0e74\u0e0c"+
		"\3\2\2\2\u0e74\u0e13\3\2\2\2\u0e74\u0e1a\3\2\2\2\u0e74\u0e21\3\2\2\2\u0e74"+
		"\u0e2c\3\2\2\2\u0e74\u0e33\3\2\2\2\u0e74\u0e3a\3\2\2\2\u0e74\u0e41\3\2"+
		"\2\2\u0e74\u0e4b\3\2\2\2\u0e74\u0e55\3\2\2\2\u0e74\u0e5c\3\2\2\2\u0e74"+
		"\u0e63\3\2\2\2\u0e74\u0e6d\3\2\2\2\u0e75\u015f\3\2\2\2\u0e76\u0e77\7\66"+
		"\2\2\u0e77\u0e78\7G\2\2\u0e78\u0e79\7\u00bf\2\2\u0e79\u0e7a\7\u0185\2"+
		"\2\u0e7a\u0e7b\5\u054c\u02a7\2\u0e7b\u0e7c\5\u0166\u00b4\2\u0e7c\u0e7d"+
		"\5\u016a\u00b6\2\u0e7d\u0161\3\2\2\2\u0e7e\u0e7f\7\u00e8\2\2\u0e7f\u0e87"+
		"\5\u013c\u009f\2\u0e80\u0e81\7\u0115\2\2\u0e81\u0e87\7\u00e8\2\2\u0e82"+
		"\u0e83\7\u017d\2\2\u0e83\u0e87\5\u013c\u009f\2\u0e84\u0e85\7\u0115\2\2"+
		"\u0e85\u0e87\7\u017d\2\2\u0e86\u0e7e\3\2\2\2\u0e86\u0e80\3\2\2\2\u0e86"+
		"\u0e82\3\2\2\2\u0e86\u0e84\3\2\2\2\u0e87\u0163\3\2\2\2\u0e88\u0e8a\5\u0162"+
		"\u00b2\2\u0e89\u0e88\3\2\2\2\u0e8a\u0e8b\3\2\2\2\u0e8b\u0e89\3\2\2\2\u0e8b"+
		"\u0e8c\3\2\2\2\u0e8c\u0165\3\2\2\2\u0e8d\u0e90\5\u0164\u00b3\2\u0e8e\u0e90"+
		"\3\2\2\2\u0e8f\u0e8d\3\2\2\2\u0e8f\u0e8e\3\2\2\2\u0e90\u0167\3\2\2\2\u0e91"+
		"\u0e92\7\u009b\2\2\u0e92\u0e93\7G\2\2\u0e93\u0e94\7\u00bf\2\2\u0e94\u0e95"+
		"\7\u0185\2\2\u0e95\u0e96\5\u054c\u02a7\2\u0e96\u0e97\5\u0166\u00b4\2\u0e97"+
		"\u0e98\5\u016e\u00b8\2\u0e98\u0ea1\3\2\2\2\u0e99\u0e9a\7\u009b\2\2\u0e9a"+
		"\u0e9b\7G\2\2\u0e9b\u0e9c\7\u00bf\2\2\u0e9c\u0e9d\7\u0185\2\2\u0e9d\u0e9e"+
		"\5\u054c\u02a7\2\u0e9e\u0e9f\5\u0164\u00b3\2\u0e9f\u0ea1\3\2\2\2\u0ea0"+
		"\u0e91\3\2\2\2\u0ea0\u0e99\3\2\2\2\u0ea1\u0169\3\2\2\2\u0ea2\u0ea3\7\u0120"+
		"\2\2\u0ea3\u0ea4\7\4\2\2\u0ea4\u0ea5\5\u016c\u00b7\2\u0ea5\u0ea6\7\5\2"+
		"\2\u0ea6\u0ea9\3\2\2\2\u0ea7\u0ea9\3\2\2\2\u0ea8\u0ea2\3\2\2\2\u0ea8\u0ea7"+
		"\3\2\2\2\u0ea9\u016b\3\2\2\2\u0eaa\u0eaf\5\u0174\u00bb\2\u0eab\u0eac\7"+
		"\b\2\2\u0eac\u0eae\5\u0174\u00bb\2\u0ead\u0eab\3\2\2\2\u0eae\u0eb1\3\2"+
		"\2\2\u0eaf\u0ead\3\2\2\2\u0eaf\u0eb0\3\2\2\2\u0eb0\u016d\3\2\2\2\u0eb1"+
		"\u0eaf\3\2\2\2\u0eb2\u0eb3\7\u0120\2\2\u0eb3\u0eb4\7\4\2\2\u0eb4\u0eb5"+
		"\5\u0170\u00b9\2\u0eb5\u0eb6\7\5\2\2\u0eb6\u016f\3\2\2\2\u0eb7\u0ebc\5"+
		"\u0172\u00ba\2\u0eb8\u0eb9\7\b\2\2\u0eb9\u0ebb\5\u0172\u00ba\2\u0eba\u0eb8"+
		"\3\2\2\2\u0ebb\u0ebe\3\2\2\2\u0ebc\u0eba\3\2\2\2\u0ebc\u0ebd\3\2\2\2\u0ebd"+
		"\u0171\3\2\2\2\u0ebe\u0ebc\3\2\2\2\u0ebf\u0ec7\5\u0174\u00bb\2\u0ec0\u0ec1"+
		"\7\u0155\2\2\u0ec1\u0ec7\5\u0174\u00bb\2\u0ec2\u0ec3\7\u0096\2\2\u0ec3"+
		"\u0ec7\5\u0174\u00bb\2\u0ec4\u0ec5\7\u00d0\2\2\u0ec5\u0ec7\5\u0176\u00bc"+
		"\2\u0ec6\u0ebf\3\2\2\2\u0ec6\u0ec0\3\2\2\2\u0ec6\u0ec2\3\2\2\2\u0ec6\u0ec4"+
		"\3\2\2\2\u0ec7\u0173\3\2\2\2\u0ec8\u0ec9\5\u0176\u00bc\2\u0ec9\u0eca\5"+
		"\u0178\u00bd\2\u0eca\u0175\3\2\2\2\u0ecb\u0ecc\5\u0572\u02ba\2\u0ecc\u0177"+
		"\3\2\2\2\u0ecd\u0ece\5\u055e\u02b0\2\u0ece\u0179\3\2\2\2\u0ecf\u0ed0\7"+
		"\66\2\2\u0ed0\u0ed1\7\u0153\2\2\u0ed1\u0ed2\5\u054c\u02a7\2\u0ed2\u0ed3"+
		"\5\u017c\u00bf\2\u0ed3\u0ed4\5\u0180\u00c1\2\u0ed4\u0ed5\7G\2\2\u0ed5"+
		"\u0ed6\7\u00bf\2\2\u0ed6\u0ed7\7\u0185\2\2\u0ed7\u0ed8\5\u054c\u02a7\2"+
		"\u0ed8\u0ed9\5\u016a\u00b6\2\u0ed9\u0ee9\3\2\2\2\u0eda\u0edb\7\66\2\2"+
		"\u0edb\u0edc\7\u0153\2\2\u0edc\u0edd\7\u00ed\2\2\u0edd\u0ede\7Z\2\2\u0ede"+
		"\u0edf\7\u0194\2\2\u0edf\u0ee0\5\u054c\u02a7\2\u0ee0\u0ee1\5\u017c\u00bf"+
		"\2\u0ee1\u0ee2\5\u0180\u00c1\2\u0ee2\u0ee3\7G\2\2\u0ee3\u0ee4\7\u00bf"+
		"\2\2\u0ee4\u0ee5\7\u0185\2\2\u0ee5\u0ee6\5\u054c\u02a7\2\u0ee6\u0ee7\5"+
		"\u016a\u00b6\2\u0ee7\u0ee9\3\2\2\2\u0ee8\u0ecf\3\2\2\2\u0ee8\u0eda\3\2"+
		"\2\2\u0ee9\u017b\3\2\2\2\u0eea\u0eeb\7\u0170\2\2\u0eeb\u0eee\5\u055e\u02b0"+
		"\2\u0eec\u0eee\3\2\2\2\u0eed\u0eea\3\2\2\2\u0eed\u0eec\3\2\2\2\u0eee\u017d"+
		"\3\2\2\2\u0eef\u0ef2\7\u017f\2\2\u0ef0\u0ef3\5\u055e\u02b0\2\u0ef1\u0ef3"+
		"\7[\2\2\u0ef2\u0ef0\3\2\2\2\u0ef2\u0ef1\3\2\2\2\u0ef3\u017f\3\2\2\2\u0ef4"+
		"\u0ef7\5\u017e\u00c0\2\u0ef5\u0ef7\3\2\2\2\u0ef6\u0ef4\3\2\2\2\u0ef6\u0ef5"+
		"\3\2\2\2\u0ef7\u0181\3\2\2\2\u0ef8\u0ef9\7\u009b\2\2\u0ef9\u0efa\7\u0153"+
		"\2\2\u0efa\u0f00\5\u054c\u02a7\2\u0efb\u0f01\5\u016e\u00b8\2\u0efc\u0efe"+
		"\5\u017e\u00c0\2\u0efd\u0eff\5\u016e\u00b8\2\u0efe\u0efd\3\2\2\2\u0efe"+
		"\u0eff\3\2\2\2\u0eff\u0f01\3\2\2\2\u0f00\u0efb\3\2\2\2\u0f00\u0efc\3\2"+
		"\2\2\u0f01\u0183\3\2\2\2\u0f02\u0f03\7\66\2\2\u0f03\u0f04\7G\2\2\u0f04"+
		"\u0f05\7l\2\2\u0f05\u0f06\5\u0548\u02a5\2\u0f06\u0f07\7\4\2\2\u0f07\u0f08"+
		"\5\u00c0a\2\u0f08\u0f09\7\5\2\2\u0f09\u0f0a\5\u00fe\u0080\2\u0f0a\u0f0b"+
		"\7\u0153\2\2\u0f0b\u0f0c\5\u054c\u02a7\2\u0f0c\u0f0d\5\u016a\u00b6\2\u0f0d"+
		"\u0f3b\3\2\2\2\u0f0e\u0f0f\7\66\2\2\u0f0f\u0f10\7G\2\2\u0f10\u0f11\7l"+
		"\2\2\u0f11\u0f12\7\u00ed\2\2\u0f12\u0f13\7Z\2\2\u0f13\u0f14\7\u0194\2"+
		"\2\u0f14\u0f15\5\u0548\u02a5\2\u0f15\u0f16\7\4\2\2\u0f16\u0f17\5\u00c0"+
		"a\2\u0f17\u0f18\7\5\2\2\u0f18\u0f19\5\u00fe\u0080\2\u0f19\u0f1a\7\u0153"+
		"\2\2\u0f1a\u0f1b\5\u054c\u02a7\2\u0f1b\u0f1c\5\u016a\u00b6\2\u0f1c\u0f3b"+
		"\3\2\2\2\u0f1d\u0f1e\7\66\2\2\u0f1e\u0f1f\7G\2\2\u0f1f\u0f20\7l\2\2\u0f20"+
		"\u0f21\5\u0548\u02a5\2\u0f21\u0f22\7\u0125\2\2\u0f22\u0f23\7\u011b\2\2"+
		"\u0f23\u0f24\5\u0548\u02a5\2\u0f24\u0f25\5\u00c2b\2\u0f25\u0f26\5\u0090"+
		"I\2\u0f26\u0f27\7\u0153\2\2\u0f27\u0f28\5\u054c\u02a7\2\u0f28\u0f29\5"+
		"\u016a\u00b6\2\u0f29\u0f3b\3\2\2\2\u0f2a\u0f2b\7\66\2\2\u0f2b\u0f2c\7"+
		"G\2\2\u0f2c\u0f2d\7l\2\2\u0f2d\u0f2e\7\u00ed\2\2\u0f2e\u0f2f\7Z\2\2\u0f2f"+
		"\u0f30\7\u0194\2\2\u0f30\u0f31\5\u0548\u02a5\2\u0f31\u0f32\7\u0125\2\2"+
		"\u0f32\u0f33\7\u011b\2\2\u0f33\u0f34\5\u0548\u02a5\2\u0f34\u0f35\5\u00c2"+
		"b\2\u0f35\u0f36\5\u0090I\2\u0f36\u0f37\7\u0153\2\2\u0f37\u0f38\5\u054c"+
		"\u02a7\2\u0f38\u0f39\5\u016a\u00b6\2\u0f39\u0f3b\3\2\2\2\u0f3a\u0f02\3"+
		"\2\2\2\u0f3a\u0f0e\3\2\2\2\u0f3a\u0f1d\3\2\2\2\u0f3a\u0f2a\3\2\2\2\u0f3b"+
		"\u0185\3\2\2\2\u0f3c\u0f3d\7\u01c5\2\2\u0f3d\u0f3e\7G\2\2\u0f3e\u0f3f"+
		"\7\u014b\2\2\u0f3f\u0f40\5\u054c\u02a7\2\u0f40\u0f41\5\u018a\u00c6\2\u0f41"+
		"\u0f42\7H\2\2\u0f42\u0f43\7\u0153\2\2\u0f43\u0f44\5\u054c\u02a7\2\u0f44"+
		"\u0f45\7O\2\2\u0f45\u0f46\5\u054c\u02a7\2\u0f46\u0f47\5\u016a\u00b6\2"+
		"\u0f47\u0187\3\2\2\2\u0f48\u0f49\7W\2\2\u0f49\u0f4c\7n\2\2\u0f4a\u0f4c"+
		"\7C\2\2\u0f4b\u0f48\3\2\2\2\u0f4b\u0f4a\3\2\2\2\u0f4c\u0189\3\2\2\2\u0f4d"+
		"\u0f4e\5\u0188\u00c5\2\u0f4e\u0f4f\7\4\2\2\u0f4f\u0f50\5\u0446\u0224\2"+
		"\u0f50\u0f51\7\5\2\2\u0f51\u0f54\3\2\2\2\u0f52\u0f54\3\2\2\2\u0f53\u0f4d"+
		"\3\2\2\2\u0f53\u0f52\3\2\2\2\u0f54\u018b\3\2\2\2\u0f55\u0f56\7\66\2\2"+
		"\u0f56\u0f57\7t\2\2\u0f57\u0f58\7\u0109\2\2\u0f58\u0f59\7F\2\2\u0f59\u0f5a"+
		"\5\u018e\u00c8\2\u0f5a\u0f5b\7\u0153\2\2\u0f5b\u0f5c\5\u054c\u02a7\2\u0f5c"+
		"\u0f5d\5\u016a\u00b6\2\u0f5d\u0f6b\3\2\2\2\u0f5e\u0f5f\7\66\2\2\u0f5f"+
		"\u0f60\7t\2\2\u0f60\u0f61\7\u0109\2\2\u0f61\u0f62\7\u00ed\2\2\u0f62\u0f63"+
		"\7Z\2\2\u0f63\u0f64\7\u0194\2\2\u0f64\u0f65\7F\2\2\u0f65\u0f66\5\u018e"+
		"\u00c8\2\u0f66\u0f67\7\u0153\2\2\u0f67\u0f68\5\u054c\u02a7\2\u0f68\u0f69"+
		"\5\u016a\u00b6\2\u0f69\u0f6b\3\2\2\2\u0f6a\u0f55\3\2\2\2\u0f6a\u0f5e\3"+
		"\2\2\2\u0f6b\u018d\3\2\2\2\u0f6c\u0f6f\5\u0568\u02b5\2\u0f6d\u0f6f\7t"+
		"\2\2\u0f6e\u0f6c\3\2\2\2\u0f6e\u0f6d\3\2\2\2\u0f6f\u018f\3\2\2\2\u0f70"+
		"\u0f71\7\u00d0\2\2\u0f71\u0f72\7t\2\2\u0f72\u0f73\7\u0109\2\2\u0f73\u0f74"+
		"\7F\2\2\u0f74\u0f75\5\u018e\u00c8\2\u0f75\u0f76\7\u0153\2\2\u0f76\u0f77"+
		"\5\u054c\u02a7\2\u0f77\u0f83\3\2\2\2\u0f78\u0f79\7\u00d0\2\2\u0f79\u0f7a"+
		"\7t\2\2\u0f7a\u0f7b\7\u0109\2\2\u0f7b\u0f7c\7\u00ed\2\2\u0f7c\u0f7d\7"+
		"\u0194\2\2\u0f7d\u0f7e\7F\2\2\u0f7e\u0f7f\5\u018e\u00c8\2\u0f7f\u0f80"+
		"\7\u0153\2\2\u0f80\u0f81\5\u054c\u02a7\2\u0f81\u0f83\3\2\2\2\u0f82\u0f70"+
		"\3\2\2\2\u0f82\u0f78\3\2\2\2\u0f83\u0191\3\2\2\2\u0f84\u0f85\7\u009b\2"+
		"\2\u0f85\u0f86\7t\2\2\u0f86\u0f87\7\u0109\2\2\u0f87\u0f88\7F\2\2\u0f88"+
		"\u0f89\5\u018e\u00c8\2\u0f89\u0f8a\7\u0153\2\2\u0f8a\u0f8b\5\u054c\u02a7"+
		"\2\u0f8b\u0f8c\5\u016e\u00b8\2\u0f8c\u0193\3\2\2\2\u0f8d\u0f8e\7\66\2"+
		"\2\u0f8e\u0f8f\7\u01c6\2\2\u0f8f\u0f90\5\u054c\u02a7\2\u0f90\u0f91\7]"+
		"\2\2\u0f91\u0f92\5\u0548\u02a5\2\u0f92\u0f93\5\u01a0\u00d1\2\u0f93\u0f94"+
		"\5\u01a2\u00d2\2\u0f94\u0f95\5\u019c\u00cf\2\u0f95\u0f96\5\u0198\u00cd"+
		"\2\u0f96\u0f97\5\u019a\u00ce\2\u0f97\u0195\3\2\2\2\u0f98\u0f99\7\u009b"+
		"\2\2\u0f99\u0f9a\7\u01c6\2\2\u0f9a\u0f9b\5\u054c\u02a7\2\u0f9b\u0f9c\7"+
		"]\2\2\u0f9c\u0f9d\5\u0548\u02a5\2\u0f9d\u0f9e\5\u019e\u00d0\2\u0f9e\u0f9f"+
		"\5\u0198\u00cd\2\u0f9f\u0fa0\5\u019a\u00ce\2\u0fa0\u0197\3\2\2\2\u0fa1"+
		"\u0fa2\7u\2\2\u0fa2\u0fa3\7\4\2\2\u0fa3\u0fa4\5\u049c\u024f\2\u0fa4\u0fa5"+
		"\7\5\2\2\u0fa5\u0fa8\3\2\2\2\u0fa6\u0fa8\3\2\2\2\u0fa7\u0fa1\3\2\2\2\u0fa7"+
		"\u0fa6\3\2\2\2\u0fa8\u0199\3\2\2\2\u0fa9\u0faa\7z\2\2\u0faa\u0fab\7\61"+
		"\2\2\u0fab\u0fac\7\4\2\2\u0fac\u0fad\5\u049c\u024f\2\u0fad\u0fae\7\5\2"+
		"\2\u0fae\u0fb1\3\2\2\2\u0faf\u0fb1\3\2\2\2\u0fb0\u0fa9\3\2\2\2\u0fb0\u0faf"+
		"\3\2\2\2\u0fb1\u019b\3\2\2\2\u0fb2\u0fb3\7n\2\2\u0fb3\u0fb6\5\u056a\u02b6"+
		"\2\u0fb4\u0fb6\3\2\2\2\u0fb5\u0fb2\3\2\2\2\u0fb5\u0fb4\3\2\2\2\u0fb6\u019d"+
		"\3\2\2\2\u0fb7\u0fb8\7n\2\2\u0fb8\u0fbb\5\u056a\u02b6\2\u0fb9\u0fbb\3"+
		"\2\2\2\u0fba\u0fb7\3\2\2\2\u0fba\u0fb9\3\2\2\2\u0fbb\u019f\3\2\2\2\u0fbc"+
		"\u0fbd\7\'\2\2\u0fbd\u0fc0\5\u0574\u02bb\2\u0fbe\u0fc0\3\2\2\2\u0fbf\u0fbc"+
		"\3\2\2\2\u0fbf\u0fbe\3\2\2\2\u0fc0\u01a1\3\2\2\2\u0fc1\u0fc2\7F\2\2\u0fc2"+
		"\u0fc5\5\u01a4\u00d3\2\u0fc3\u0fc5\3\2\2\2\u0fc4\u0fc1\3\2\2\2\u0fc4\u0fc3"+
		"\3\2\2\2\u0fc5\u01a3\3\2\2\2\u0fc6\u0fc7\t\23\2\2\u0fc7\u01a5\3\2\2\2"+
		"\u0fc8\u0fc9\7\66\2\2\u0fc9\u0fca\7\u0094\2\2\u0fca\u0fcb\7\u01c7\2\2"+
		"\u0fcb\u0fcc\5\u054c\u02a7\2\u0fcc\u0fcd\7\u0170\2\2\u0fcd\u0fce\5\u01a8"+
		"\u00d5\2\u0fce\u0fcf\7\u00e8\2\2\u0fcf\u0fd0\5\u013c\u009f\2\u0fd0\u01a7"+
		"\3\2\2\2\u0fd1\u0fd2\t\24\2\2\u0fd2\u01a9\3\2\2\2\u0fd3\u0fd4\7\66\2\2"+
		"\u0fd4\u0fd5\7\u016d\2\2\u0fd5\u0fd6\5\u054c\u02a7\2\u0fd6\u0fd7\5\u01ac"+
		"\u00d7\2\u0fd7\u0fd8\5\u01ae\u00d8\2\u0fd8\u0fd9\7]\2\2\u0fd9\u0fda\5"+
		"\u0548\u02a5\2\u0fda\u0fdb\5\u01b2\u00da\2\u0fdb\u0fdc\5\u01be\u00e0\2"+
		"\u0fdc\u0fdd\5\u01c4\u00e3\2\u0fdd\u0fde\7\u00db\2\2\u0fde\u0fdf\5\u01c6"+
		"\u00e4\2\u0fdf\u0fe0\5\u0552\u02aa\2\u0fe0\u0fe1\7\4\2\2\u0fe1\u0fe2\5"+
		"\u01c8\u00e5\2\u0fe2\u0fe3\7\5\2\2\u0fe3\u0ffa\3\2\2\2\u0fe4\u0fe5\7\66"+
		"\2\2\u0fe5\u0fe6\7\65\2\2\u0fe6\u0fe7\7\u016d\2\2\u0fe7\u0fe8\5\u054c"+
		"\u02a7\2\u0fe8\u0fe9\7\u0098\2\2\u0fe9\u0fea\5\u01ae\u00d8\2\u0fea\u0feb"+
		"\7]\2\2\u0feb\u0fec\5\u0548\u02a5\2\u0fec\u0fed\5\u01cc\u00e7\2\u0fed"+
		"\u0fee\5\u01ce\u00e8\2\u0fee\u0fef\7F\2\2\u0fef\u0ff0\7\u00d1\2\2\u0ff0"+
		"\u0ff1\7\u01a6\2\2\u0ff1\u0ff2\5\u01c4\u00e3\2\u0ff2\u0ff3\7\u00db\2\2"+
		"\u0ff3\u0ff4\5\u01c6\u00e4\2\u0ff4\u0ff5\5\u0552\u02aa\2\u0ff5\u0ff6\7"+
		"\4\2\2\u0ff6\u0ff7\5\u01c8\u00e5\2\u0ff7\u0ff8\7\5\2\2\u0ff8\u0ffa\3\2"+
		"\2\2\u0ff9\u0fd3\3\2\2\2\u0ff9\u0fe4\3\2\2\2\u0ffa\u01ab\3\2\2\2\u0ffb"+
		"\u1000\7\u00a2\2\2\u0ffc\u1000\7\u0098\2\2\u0ffd\u0ffe\7\u00fa\2\2\u0ffe"+
		"\u1000\7\u011b\2\2\u0fff\u0ffb\3\2\2\2\u0fff\u0ffc\3\2\2\2\u0fff\u0ffd"+
		"\3\2\2\2\u1000\u01ad\3\2\2\2\u1001\u1006\5\u01b0\u00d9\2\u1002\u1003\7"+
		"_\2\2\u1003\u1005\5\u01b0\u00d9\2\u1004\u1002\3\2\2\2\u1005\u1008\3\2"+
		"\2\2\u1006\u1004\3\2\2\2\u1006\u1007\3\2\2\2\u1007\u01af\3\2\2\2\u1008"+
		"\u1006\3\2\2\2\u1009\u1011\7\u00f9\2\2\u100a\u1011\7\u00c7\2\2\u100b\u1011"+
		"\7\u0179\2\2\u100c\u100d\7\u0179\2\2\u100d\u100e\7\u011b\2\2\u100e\u1011"+
		"\5\u00e8u\2\u100f\u1011\7\u016e\2\2\u1010\u1009\3\2\2\2\u1010\u100a\3"+
		"\2\2\2\u1010\u100b\3\2\2\2\u1010\u100c\3\2\2\2\u1010\u100f\3\2\2\2\u1011"+
		"\u01b1\3\2\2\2\u1012\u1013\7\u01c8\2\2\u1013\u1016\5\u01b4\u00db\2\u1014"+
		"\u1016\3\2\2\2\u1015\u1012\3\2\2\2\u1015\u1014\3\2\2\2\u1016\u01b3\3\2"+
		"\2\2\u1017\u1019\5\u01b6\u00dc\2\u1018\u1017\3\2\2\2\u1019\u101a\3\2\2"+
		"\2\u101a\u1018\3\2\2\2\u101a\u101b\3\2\2\2\u101b\u01b5\3\2\2\2\u101c\u101d"+
		"\5\u01b8\u00dd\2\u101d\u101e\5\u01ba\u00de\2\u101e\u101f\5\u035a\u01ae"+
		"\2\u101f\u1020\5\u01bc\u00df\2\u1020\u01b7\3\2\2\2\u1021\u1022\t\25\2"+
		"\2\u1022\u01b9\3\2\2\2\u1023\u1024\t\26\2\2\u1024\u01bb\3\2\2\2\u1025"+
		"\u1026\5\u056c\u02b7\2\u1026\u01bd\3\2\2\2\u1027\u1028\7F\2\2\u1028\u1029"+
		"\5\u01c0\u00e1\2\u1029\u102a\5\u01c2\u00e2\2\u102a\u102d\3\2\2\2\u102b"+
		"\u102d\3\2\2\2\u102c\u1027\3\2\2\2\u102c\u102b\3\2\2\2\u102d\u01bf\3\2"+
		"\2\2\u102e\u1031\7\u00d1\2\2\u102f\u1031\3\2\2\2\u1030\u102e\3\2\2\2\u1030"+
		"\u102f\3\2\2\2\u1031\u01c1\3\2\2\2\u1032\u1033\t\27\2\2\u1033\u01c3\3"+
		"\2\2\2\u1034\u1035\7w\2\2\u1035\u1036\7\4\2\2\u1036\u1037\5\u049c\u024f"+
		"\2\u1037\u1038\7\5\2\2\u1038\u103b\3\2\2\2\u1039\u103b\3\2\2\2\u103a\u1034"+
		"\3\2\2\2\u103a\u1039\3\2\2\2\u103b\u01c5\3\2\2\2\u103c\u103d\t\30\2\2"+
		"\u103d\u01c7\3\2\2\2\u103e\u1041\5\u01ca\u00e6\2\u103f\u1041\3\2\2\2\u1040"+
		"\u103e\3\2\2\2\u1040\u103f\3\2\2\2\u1041\u1046\3\2\2\2\u1042\u1043\7\b"+
		"\2\2\u1043\u1045\5\u01ca\u00e6\2\u1044\u1042\3\2\2\2\u1045\u1048\3\2\2"+
		"\2\u1046\u1044\3\2\2\2\u1046\u1047\3\2\2\2\u1047\u01c9\3\2\2\2\u1048\u1046"+
		"\3\2\2\2\u1049\u104e\5\u055c\u02af\2\u104a\u104e\5\u055a\u02ae\2\u104b"+
		"\u104e\5\u055e\u02b0\2\u104c\u104e\5\u0572\u02ba\2\u104d\u1049\3\2\2\2"+
		"\u104d\u104a\3\2\2\2\u104d\u104b\3\2\2\2\u104d\u104c\3\2\2\2\u104e\u01cb"+
		"\3\2\2\2\u104f\u1050\7H\2\2\u1050\u1053\5\u0548\u02a5\2\u1051\u1053\3"+
		"\2\2\2\u1052\u104f\3\2\2\2\u1052\u1051\3\2\2\2\u1053\u01cd\3\2\2\2\u1054"+
		"\u1056\5\u01d0\u00e9\2\u1055\u1054\3\2\2\2\u1056\u1059\3\2\2\2\u1057\u1055"+
		"\3\2\2\2\u1057\u1058\3\2\2\2\u1058\u01cf\3\2\2\2\u1059\u1057\3\2\2\2\u105a"+
		"\u105b\7Z\2\2\u105b\u1066\7>\2\2\u105c\u1066\7>\2\2\u105d\u105e\7M\2\2"+
		"\u105e\u1066\7\u00ee\2\2\u105f\u1060\7M\2\2\u1060\u1066\7\u00c5\2\2\u1061"+
		"\u1062\7Z\2\2\u1062\u1066\7\u017b\2\2\u1063\u1064\7\u0115\2\2\u1064\u1066"+
		"\7\u00f5\2\2\u1065\u105a\3\2\2\2\u1065\u105c\3\2\2\2\u1065\u105d\3\2\2"+
		"\2\u1065\u105f\3\2\2\2\u1065\u1061\3\2\2\2\u1065\u1063\3\2\2\2\u1066\u01d1"+
		"\3\2\2\2\u1067\u1068\7\66\2\2\u1068\u1069\7\u00d7\2\2\u1069\u106a\7\u016d"+
		"\2\2\u106a\u106b\5\u054c\u02a7\2\u106b\u106c\7]\2\2\u106c\u106d\5\u0572"+
		"\u02ba\2\u106d\u106e\7\u00db\2\2\u106e\u106f\5\u01c6\u00e4\2\u106f\u1070"+
		"\5\u0552\u02aa\2\u1070\u1071\7\4\2\2\u1071\u1072\7\5\2\2\u1072\u1082\3"+
		"\2\2\2\u1073\u1074\7\66\2\2\u1074\u1075\7\u00d7\2\2\u1075\u1076\7\u016d"+
		"\2\2\u1076\u1077\5\u054c\u02a7\2\u1077\u1078\7]\2\2\u1078\u1079\5\u0572"+
		"\u02ba\2\u1079\u107a\7w\2\2\u107a\u107b\5\u01d4\u00eb\2\u107b\u107c\7"+
		"\u00db\2\2\u107c\u107d\5\u01c6\u00e4\2\u107d\u107e\5\u0552\u02aa\2\u107e"+
		"\u107f\7\4\2\2\u107f\u1080\7\5\2\2\u1080\u1082\3\2\2\2\u1081\u1067\3\2"+
		"\2\2\u1081\u1073\3\2\2\2\u1082\u01d3\3\2\2\2\u1083\u1088\5\u01d6\u00ec"+
		"\2\u1084\u1085\7$\2\2\u1085\u1087\5\u01d6\u00ec\2\u1086\u1084\3\2\2\2"+
		"\u1087\u108a\3\2\2\2\u1088\u1086\3\2\2\2\u1088\u1089\3\2\2\2\u1089\u01d5"+
		"\3\2\2\2\u108a\u1088\3\2\2\2\u108b\u108c\5\u056c\u02b7\2\u108c\u108d\7"+
		"L\2\2\u108d\u108e\7\4\2\2\u108e\u108f\5\u01d8\u00ed\2\u108f\u1090\7\5"+
		"\2\2\u1090\u01d7\3\2\2\2\u1091\u1096\5\u055e\u02b0\2\u1092\u1093\7\b\2"+
		"\2\u1093\u1095\5\u055e\u02b0\2\u1094\u1092\3\2\2\2\u1095\u1098\3\2\2\2"+
		"\u1096\u1094\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u01d9\3\2\2\2\u1098\u1096"+
		"\3\2\2\2\u1099\u109a\7\u009b\2\2\u109a\u109b\7\u00d7\2\2\u109b\u109c\7"+
		"\u016d\2\2\u109c\u109d\5\u054c\u02a7\2\u109d\u109e\5\u01dc\u00ef\2\u109e"+
		"\u01db\3\2\2\2\u109f\u10a6\7\u00d2\2\2\u10a0\u10a1\7\u00d2\2\2\u10a1\u10a6"+
		"\7\u0140\2\2\u10a2\u10a3\7\u00d2\2\2\u10a3\u10a6\7\u009c\2\2\u10a4\u10a6"+
		"\7\u00cb\2\2\u10a5\u109f\3\2\2\2\u10a5\u10a0\3\2\2\2\u10a5\u10a2\3\2\2"+
		"\2\u10a5\u10a4\3\2\2\2\u10a6\u01dd\3\2\2\2\u10a7\u10a8\7\66\2\2\u10a8"+
		"\u10a9\7\u009d\2\2\u10a9\u10aa\5\u0222\u0112\2\u10aa\u10ab\7\61\2\2\u10ab"+
		"\u10ac\7\4\2\2\u10ac\u10ad\5\u049c\u024f\2\u10ad\u10ae\7\5\2\2\u10ae\u10af"+
		"\5\u01ce\u00e8\2\u10af\u01df\3\2\2\2\u10b0\u10b1\7\66\2\2\u10b1\u10b2"+
		"\5\u0280\u0141\2\u10b2\u10b3\7\u0099\2\2\u10b3\u10b4\5\u0552\u02aa\2\u10b4"+
		"\u10b5\5\u029c\u014f\2\u10b5\u10b6\5\u01e2\u00f2\2\u10b6\u111b\3\2\2\2"+
		"\u10b7\u10b8\7\66\2\2\u10b8\u10b9\5\u0280\u0141\2\u10b9\u10ba\7\u0099"+
		"\2\2\u10ba\u10bb\5\u0552\u02aa\2\u10bb\u10bc\5\u01ea\u00f6\2\u10bc\u111b"+
		"\3\2\2\2\u10bd\u10be\7\66\2\2\u10be\u10bf\7\u011e\2\2\u10bf\u10c0\5\u02c2"+
		"\u0162\2\u10c0\u10c1\5\u01e2\u00f2\2\u10c1\u111b\3\2\2\2\u10c2\u10c3\7"+
		"\66\2\2\u10c3\u10c4\7\u0170\2\2\u10c4\u10c5\5\u0222\u0112\2\u10c5\u10c6"+
		"\5\u01e2\u00f2\2\u10c6\u111b\3\2\2\2\u10c7\u10c8\7\66\2\2\u10c8\u10c9"+
		"\7\u0170\2\2\u10c9\u111b\5\u0222\u0112\2\u10ca\u10cb\7\66\2\2\u10cb\u10cc"+
		"\7\u0170\2\2\u10cc\u10cd\5\u0222\u0112\2\u10cd\u10ce\7\'\2\2\u10ce\u10cf"+
		"\7\4\2\2\u10cf\u10d0\5\u045c\u022f\2\u10d0\u10d1\7\5\2\2\u10d1\u111b\3"+
		"\2\2\2\u10d2\u10d3\7\66\2\2\u10d3\u10d4\7\u0170\2\2\u10d4\u10d5\5\u0222"+
		"\u0112\2\u10d5\u10d6\7\'\2\2\u10d6\u10d7\7\u00d5\2\2\u10d7\u10d8\7\4\2"+
		"\2\u10d8\u10d9\5\u01f0\u00f9\2\u10d9\u10da\7\5\2\2\u10da\u111b\3\2\2\2"+
		"\u10db\u10dc\7\66\2\2\u10dc\u10dd\7\u0170\2\2\u10dd\u10de\5\u0222\u0112"+
		"\2\u10de\u10df\7\'\2\2\u10df\u10e0\7\u0133\2\2\u10e0\u10e1\5\u01e2\u00f2"+
		"\2\u10e1\u111b\3\2\2\2\u10e2\u10e3\7\66\2\2\u10e3\u10e4\7\u016b\2\2\u10e4"+
		"\u10e5\7\u014d\2\2\u10e5\u10e6\7\u0123\2\2\u10e6\u10e7\5\u0222\u0112\2"+
		"\u10e7\u10e8\5\u01e2\u00f2\2\u10e8\u111b\3\2\2\2\u10e9\u10ea\7\66\2\2"+
		"\u10ea\u10eb\7\u016b\2\2\u10eb\u10ec\7\u014d\2\2\u10ec\u10ed\7\u00ca\2"+
		"\2\u10ed\u10ee\5\u0222\u0112\2\u10ee\u10ef\5\u01e2\u00f2\2\u10ef\u111b"+
		"\3\2\2\2\u10f0\u10f1\7\66\2\2\u10f1\u10f2\7\u016b\2\2\u10f2\u10f3\7\u014d"+
		"\2\2\u10f3\u10f4\7\u0169\2\2\u10f4\u10f5\5\u0222\u0112\2\u10f5\u10f6\5"+
		"\u01e2\u00f2\2\u10f6\u111b\3\2\2\2\u10f7\u10f8\7\66\2\2\u10f8\u10f9\7"+
		"\u016b\2\2\u10f9\u10fa\7\u014d\2\2\u10fa\u10fb\7\u00b4\2\2\u10fb\u10fc"+
		"\5\u0222\u0112\2\u10fc\u10fd\5\u01e2\u00f2\2\u10fd\u111b\3\2\2\2\u10fe"+
		"\u10ff\7\66\2\2\u10ff\u1100\7}\2\2\u1100\u1101\5\u0222\u0112\2\u1101\u1102"+
		"\5\u01e2\u00f2\2\u1102\u111b\3\2\2\2\u1103\u1104\7\66\2\2\u1104\u1105"+
		"\7}\2\2\u1105\u1106\7\u00ed\2\2\u1106\u1107\7Z\2\2\u1107\u1108\7\u0194"+
		"\2\2\u1108\u1109\5\u0222\u0112\2\u1109\u110a\5\u01e2\u00f2\2\u110a\u111b"+
		"\3\2\2\2\u110b\u110c\7\66\2\2\u110c\u110d\7}\2\2\u110d\u110e\5\u0222\u0112"+
		"\2\u110e\u110f\7H\2\2\u110f\u1110\5\u0222\u0112\2\u1110\u111b\3\2\2\2"+
		"\u1111\u1112\7\66\2\2\u1112\u1113\7}\2\2\u1113\u1114\7\u00ed\2\2\u1114"+
		"\u1115\7Z\2\2\u1115\u1116\7\u0194\2\2\u1116\u1117\5\u0222\u0112\2\u1117"+
		"\u1118\7H\2\2\u1118\u1119\5\u0222\u0112\2\u1119\u111b\3\2\2\2\u111a\u10b0"+
		"\3\2\2\2\u111a\u10b7\3\2\2\2\u111a\u10bd\3\2\2\2\u111a\u10c2\3\2\2\2\u111a"+
		"\u10c7\3\2\2\2\u111a\u10ca\3\2\2\2\u111a\u10d2\3\2\2\2\u111a\u10db\3\2"+
		"\2\2\u111a\u10e2\3\2\2\2\u111a\u10e9\3\2\2\2\u111a\u10f0\3\2\2\2\u111a"+
		"\u10f7\3\2\2\2\u111a\u10fe\3\2\2\2\u111a\u1103\3\2\2\2\u111a\u110b\3\2"+
		"\2\2\u111a\u1111\3\2\2\2\u111b\u01e1\3\2\2\2\u111c\u111d\7\4\2\2\u111d"+
		"\u111e\5\u01e4\u00f3\2\u111e\u111f\7\5\2\2\u111f\u01e3\3\2\2\2\u1120\u1125"+
		"\5\u01e6\u00f4\2\u1121\u1122\7\b\2\2\u1122\u1124\5\u01e6\u00f4\2\u1123"+
		"\u1121\3\2\2\2\u1124\u1127\3\2\2\2\u1125\u1123\3\2\2\2\u1125\u1126\3\2"+
		"\2\2\u1126\u01e5\3\2\2\2\u1127\u1125\3\2\2\2\u1128\u112b\5\u0572\u02ba"+
		"\2\u1129\u112a\7\f\2\2\u112a\u112c\5\u01e8\u00f5\2\u112b\u1129\3\2\2\2"+
		"\u112b\u112c\3\2\2\2\u112c\u01e7\3\2\2\2\u112d\u1134\5\u0296\u014c\2\u112e"+
		"\u1134\5\u057e\u02c0\2\u112f\u1134\5\u050c\u0287\2\u1130\u1134\5\u0134"+
		"\u009b\2\u1131\u1134\5\u055e\u02b0\2\u1132\u1134\7\u019f\2\2\u1133\u112d"+
		"\3\2\2\2\u1133\u112e\3\2\2\2\u1133\u112f\3\2\2\2\u1133\u1130\3\2\2\2\u1133"+
		"\u1131\3\2\2\2\u1133\u1132\3\2\2\2\u1134\u01e9\3\2\2\2\u1135\u1136\7\4"+
		"\2\2\u1136\u1137\5\u01ec\u00f7\2\u1137\u1138\7\5\2\2\u1138\u01eb\3\2\2"+
		"\2\u1139\u113e\5\u01ee\u00f8\2\u113a\u113b\7\b\2\2\u113b\u113d\5\u01ee"+
		"\u00f8\2\u113c\u113a\3\2\2\2\u113d\u1140\3\2\2\2\u113e\u113c\3\2\2\2\u113e"+
		"\u113f\3\2\2\2\u113f\u01ed\3\2\2\2\u1140\u113e\3\2\2\2\u1141\u1142\5\u0574"+
		"\u02bb\2\u1142\u1143\7\f\2\2\u1143\u1144\5\u01e8\u00f5\2\u1144\u01ef\3"+
		"\2\2\2\u1145\u1148\5\u01f2\u00fa\2\u1146\u1148\3\2\2\2\u1147\u1145\3\2"+
		"\2\2\u1147\u1146\3\2\2\2\u1148\u01f1\3\2\2\2\u1149\u114e\5\u055e\u02b0"+
		"\2\u114a\u114b\7\b\2\2\u114b\u114d\5\u055e\u02b0\2\u114c\u114a\3\2\2\2"+
		"\u114d\u1150\3\2\2\2\u114e\u114c\3\2\2\2\u114e\u114f\3\2\2\2\u114f\u01f3"+
		"\3\2\2\2\u1150\u114e\3\2\2\2\u1151\u1152\7\u009b\2\2\u1152\u1153\7\u0170"+
		"\2\2\u1153\u1154\5\u0222\u0112\2\u1154\u1155\7\u0096\2\2\u1155\u1156\7"+
		"\u01cb\2\2\u1156\u1157\5\u01f6\u00fc\2\u1157\u1158\5\u055e\u02b0\2\u1158"+
		"\u1177\3\2\2\2\u1159\u115a\7\u009b\2\2\u115a\u115b\7\u0170\2\2\u115b\u115c"+
		"\5\u0222\u0112\2\u115c\u115d\7\u0096\2\2\u115d\u115e\7\u01cb\2\2\u115e"+
		"\u115f\5\u01f6\u00fc\2\u115f\u1160\5\u055e\u02b0\2\u1160\u1161\7\u00a2"+
		"\2\2\u1161\u1162\5\u055e\u02b0\2\u1162\u1177\3\2\2\2\u1163\u1164\7\u009b"+
		"\2\2\u1164\u1165\7\u0170\2\2\u1165\u1166\5\u0222\u0112\2\u1166\u1167\7"+
		"\u0096\2\2\u1167\u1168\7\u01cb\2\2\u1168\u1169\5\u01f6\u00fc\2\u1169\u116a"+
		"\5\u055e\u02b0\2\u116a\u116b\7\u0098\2\2\u116b\u116c\5\u055e\u02b0\2\u116c"+
		"\u1177\3\2\2\2\u116d\u116e\7\u009b\2\2\u116e\u116f\7\u0170\2\2\u116f\u1170"+
		"\5\u0222\u0112\2\u1170\u1171\7\u013d\2\2\u1171\u1172\7\u01cb\2\2\u1172"+
		"\u1173\5\u055e\u02b0\2\u1173\u1174\7n\2\2\u1174\u1175\5\u055e\u02b0\2"+
		"\u1175\u1177\3\2\2\2\u1176\u1151\3\2\2\2\u1176\u1159\3\2\2\2\u1176\u1163"+
		"\3\2\2\2\u1176\u116d\3\2\2\2\u1177\u01f5\3\2\2\2\u1178\u1179\7\u00ed\2"+
		"\2\u1179\u117a\7Z\2\2\u117a\u117d\7\u0194\2\2\u117b\u117d\3\2\2\2\u117c"+
		"\u1178\3\2\2\2\u117c\u117b\3\2\2\2\u117d\u01f7\3\2\2\2\u117e\u117f\7\66"+
		"\2\2\u117f\u1180\7\u011e\2\2\u1180\u1181\7\u00ad\2\2\u1181\u1182\5\u0222"+
		"\u0112\2\u1182\u1183\5\u01fe\u0100\2\u1183\u1184\7F\2\2\u1184\u1185\7"+
		"\u0170\2\2\u1185\u1186\5\u0470\u0239\2\u1186\u1187\7u\2\2\u1187\u1188"+
		"\5\u054c\u02a7\2\u1188\u1189\5\u0200\u0101\2\u1189\u118a\7\'\2\2\u118a"+
		"\u118b\5\u01fa\u00fe\2\u118b\u01f9\3\2\2\2\u118c\u1191\5\u01fc\u00ff\2"+
		"\u118d\u118e\7\b\2\2\u118e\u1190\5\u01fc\u00ff\2\u118f\u118d\3\2\2\2\u1190"+
		"\u1193\3\2\2\2\u1191\u118f\3\2\2\2\u1191\u1192\3\2\2\2\u1192\u01fb\3\2"+
		"\2\2\u1193\u1191\3\2\2\2\u1194\u1195\7\u011e\2\2\u1195\u1196\5\u055c\u02af"+
		"\2\u1196\u1197\5\u02c2\u0162\2\u1197\u1198\5\u0202\u0102\2\u1198\u1199"+
		"\5\u0204\u0103\2\u1199\u11ae\3\2\2\2\u119a\u119b\7\u011e\2\2\u119b\u119c"+
		"\5\u055c\u02af\2\u119c\u119d\5\u02c6\u0164\2\u119d\u119e\5\u0202\u0102"+
		"\2\u119e\u119f\5\u0204\u0103\2\u119f\u11ae\3\2\2\2\u11a0\u11a1\7\u00e4"+
		"\2\2\u11a1\u11a2\5\u055c\u02af\2\u11a2\u11a3\5\u0288\u0145\2\u11a3\u11ae"+
		"\3\2\2\2\u11a4\u11a5\7\u00e4\2\2\u11a5\u11a6\5\u055c\u02af\2\u11a6\u11a7"+
		"\7\4\2\2\u11a7\u11a8\5\u0516\u028c\2\u11a8\u11a9\7\5\2\2\u11a9\u11aa\5"+
		"\u0288\u0145\2\u11aa\u11ae\3\2\2\2\u11ab\u11ac\7\u0161\2\2\u11ac\u11ae"+
		"\5\u0470\u0239\2\u11ad\u1194\3\2\2\2\u11ad\u119a\3\2\2\2\u11ad\u11a0\3"+
		"\2\2\2\u11ad\u11a4\3\2\2\2\u11ad\u11ab\3\2\2\2\u11ae\u01fd\3\2\2\2\u11af"+
		"\u11b2\7=\2\2\u11b0\u11b2\3\2\2\2\u11b1\u11af\3\2\2\2\u11b1\u11b0\3\2"+
		"\2\2\u11b2\u01ff\3\2\2\2\u11b3\u11b4\7\u00df\2\2\u11b4\u11b7\5\u0222\u0112"+
		"\2\u11b5\u11b7\3\2\2\2\u11b6\u11b3\3\2\2\2\u11b6\u11b5\3\2\2\2\u11b7\u0201"+
		"\3\2\2\2\u11b8\u11b9\7F\2\2\u11b9\u11c0\7\u014d\2\2\u11ba\u11bb\7F\2\2"+
		"\u11bb\u11bc\7`\2\2\u11bc\u11bd\7\u00a4\2\2\u11bd\u11c0\5\u0222\u0112"+
		"\2\u11be\u11c0\3\2\2\2\u11bf\u11b8\3\2\2\2\u11bf\u11ba\3\2\2\2\u11bf\u11be"+
		"\3\2\2\2\u11c0\u0203\3\2\2\2\u11c1\u11c4\7\u0136\2\2\u11c2\u11c4\3\2\2"+
		"\2\u11c3\u11c1\3\2\2\2\u11c3\u11c2\3\2\2\2\u11c4\u0205\3\2\2\2\u11c5\u11c6"+
		"\7\66\2\2\u11c6\u11c7\7\u011e\2\2\u11c7\u11c8\7\u00df\2\2\u11c8\u11c9"+
		"\5\u0222\u0112\2\u11c9\u11ca\7u\2\2\u11ca\u11cb\5\u054c\u02a7\2\u11cb"+
		"\u0207\3\2\2\2\u11cc\u11cd\7\u009b\2\2\u11cd\u11ce\7\u011e\2\2\u11ce\u11cf"+
		"\7\u00df\2\2\u11cf\u11d0\5\u0222\u0112\2\u11d0\u11d1\7u\2\2\u11d1\u11d2"+
		"\5\u054c\u02a7\2\u11d2\u11d3\7\u0096\2\2\u11d3\u11d4\5\u01fa\u00fe\2\u11d4"+
		"\u11df\3\2\2\2\u11d5\u11d6\7\u009b\2\2\u11d6\u11d7\7\u011e\2\2\u11d7\u11d8"+
		"\7\u00df\2\2\u11d8\u11d9\5\u0222\u0112\2\u11d9\u11da\7u\2\2\u11da\u11db"+
		"\5\u054c\u02a7\2\u11db\u11dc\7\u00d0\2\2\u11dc\u11dd\5\u020a\u0106\2\u11dd"+
		"\u11df\3\2\2\2\u11de\u11cc\3\2\2\2\u11de\u11d5\3\2\2\2\u11df\u0209\3\2"+
		"\2\2\u11e0\u11e5\5\u020c\u0107\2\u11e1\u11e2\7\b\2\2\u11e2\u11e4\5\u020c"+
		"\u0107\2\u11e3\u11e1\3\2\2\2\u11e4\u11e7\3\2\2\2\u11e5\u11e3\3\2\2\2\u11e5"+
		"\u11e6\3\2\2\2\u11e6\u020b\3\2\2\2\u11e7\u11e5\3\2\2\2\u11e8\u11e9\7\u011e"+
		"\2\2\u11e9\u11ea\5\u055c\u02af\2\u11ea\u11eb\7\4\2\2\u11eb\u11ec\5\u0516"+
		"\u028c\2\u11ec\u11ed\7\5\2\2\u11ed\u11f5\3\2\2\2\u11ee\u11ef\7\u00e4\2"+
		"\2\u11ef\u11f0\5\u055c\u02af\2\u11f0\u11f1\7\4\2\2\u11f1\u11f2\5\u0516"+
		"\u028c\2\u11f2\u11f3\7\5\2\2\u11f3\u11f5\3\2\2\2\u11f4\u11e8\3\2\2\2\u11f4"+
		"\u11ee\3\2\2\2\u11f5\u020d\3\2\2\2\u11f6\u11f7\7\u00d0\2\2\u11f7\u11f8"+
		"\7\u011e\2\2\u11f8\u11f9\7\u00ad\2\2\u11f9\u11fa\5\u0222\u0112\2\u11fa"+
		"\u11fb\7u\2\2\u11fb\u11fc\5\u054c\u02a7\2\u11fc\u11fd\5|?\2\u11fd\u1209"+
		"\3\2\2\2\u11fe\u11ff\7\u00d0\2\2\u11ff\u1200\7\u011e\2\2\u1200\u1201\7"+
		"\u00ad\2\2\u1201\u1202\7\u00ed\2\2\u1202\u1203\7\u0194\2\2\u1203\u1204"+
		"\5\u0222\u0112\2\u1204\u1205\7u\2\2\u1205\u1206\5\u054c\u02a7\2\u1206"+
		"\u1207\5|?\2\u1207\u1209\3\2\2\2\u1208\u11f6\3\2\2\2\u1208\u11fe\3\2\2"+
		"\2\u1209\u020f\3\2\2\2\u120a\u120b\7\u00d0\2\2\u120b\u120c\7\u011e\2\2"+
		"\u120c\u120d\7\u00df\2\2\u120d\u120e\5\u0222\u0112\2\u120e\u120f\7u\2"+
		"\2\u120f\u1210\5\u054c\u02a7\2\u1210\u1211\5|?\2\u1211\u121d\3\2\2\2\u1212"+
		"\u1213\7\u00d0\2\2\u1213\u1214\7\u011e\2\2\u1214\u1215\7\u00df\2\2\u1215"+
		"\u1216\7\u00ed\2\2\u1216\u1217\7\u0194\2\2\u1217\u1218\5\u0222\u0112\2"+
		"\u1218\u1219\7u\2\2\u1219\u121a\5\u054c\u02a7\2\u121a\u121b\5|?\2\u121b"+
		"\u121d\3\2\2\2\u121c\u120a\3\2\2\2\u121c\u1212\3\2\2\2\u121d\u0211\3\2"+
		"\2\2\u121e\u121f\7\u00d0\2\2\u121f\u1220\7\u0121\2\2\u1220\u1221\7\u00a4"+
		"\2\2\u1221\u1222\5\u056a\u02b6\2\u1222\u1223\5|?\2\u1223\u0213\3\2\2\2"+
		"\u1224\u1225\7\u0135\2\2\u1225\u1226\7\u0121\2\2\u1226\u1227\7\u00a4\2"+
		"\2\u1227\u1228\5\u056a\u02b6\2\u1228\u1229\7n\2\2\u1229\u122a\5\u0568"+
		"\u02b5\2\u122a\u0215\3\2\2\2\u122b\u122c\7\u00d0\2\2\u122c\u122d\5\u0218"+
		"\u010d\2\u122d\u122e\7\u00ed\2\2\u122e\u122f\7\u0194\2\2\u122f\u1230\5"+
		"\u0220\u0111\2\u1230\u1231\5|?\2\u1231\u127a\3\2\2\2\u1232\u1233\7\u00d0"+
		"\2\2\u1233\u1234\5\u0218\u010d\2\u1234\u1235\5\u0220\u0111\2\u1235\u1236"+
		"\5|?\2\u1236\u127a\3\2\2\2\u1237\u1238\7\u00d0\2\2\u1238\u1239\5\u021c"+
		"\u010f\2\u1239\u123a\7\u00ed\2\2\u123a\u123b\7\u0194\2\2\u123b\u123c\5"+
		"\u054a\u02a6\2\u123c\u123d\5|?\2\u123d\u127a\3\2\2\2\u123e\u123f\7\u00d0"+
		"\2\2\u123f\u1240\5\u021c\u010f\2\u1240\u1241\5\u054a\u02a6\2\u1241\u1242"+
		"\5|?\2\u1242\u127a\3\2\2\2\u1243\u1244\7\u00d0\2\2\u1244\u1245\5\u021e"+
		"\u0110\2\u1245\u1246\5\u054c\u02a7\2\u1246\u1247\7]\2\2\u1247\u1248\5"+
		"\u0222\u0112\2\u1248\u1249\5|?\2\u1249\u127a\3\2\2\2\u124a\u124b\7\u00d0"+
		"\2\2\u124b\u124c\5\u021e\u0110\2\u124c\u124d\7\u00ed\2\2\u124d\u124e\7"+
		"\u0194\2\2\u124e\u124f\5\u054c\u02a7\2\u124f\u1250\7]\2\2\u1250\u1251"+
		"\5\u0222\u0112\2\u1251\u1252\5|?\2\u1252\u127a\3\2\2\2\u1253\u1254\7\u00d0"+
		"\2\2\u1254\u1255\7\u0170\2\2\u1255\u1256\5\u0226\u0114\2\u1256\u1257\5"+
		"|?\2\u1257\u127a\3\2\2\2\u1258\u1259\7\u00d0\2\2\u1259\u125a\7\u0170\2"+
		"\2\u125a\u125b\7\u00ed\2\2\u125b\u125c\7\u0194\2\2\u125c\u125d\5\u0226"+
		"\u0114\2\u125d\u125e\5|?\2\u125e\u127a\3\2\2\2\u125f\u1260\7\u00d0\2\2"+
		"\u1260\u1261\7\u00ce\2\2\u1261\u1262\5\u0226\u0114\2\u1262\u1263\5|?\2"+
		"\u1263\u127a\3\2\2\2\u1264\u1265\7\u00d0\2\2\u1265\u1266\7\u00ce\2\2\u1266"+
		"\u1267\7\u00ed\2\2\u1267\u1268\7\u0194\2\2\u1268\u1269\5\u0226\u0114\2"+
		"\u1269\u126a\5|?\2\u126a\u127a\3\2\2\2\u126b\u126c\7\u00d0\2\2\u126c\u126d"+
		"\7\u00f3\2\2\u126d\u126e\7~\2\2\u126e\u126f\5\u0220\u0111\2\u126f\u1270"+
		"\5|?\2\u1270\u127a\3\2\2\2\u1271\u1272\7\u00d0\2\2\u1272\u1273\7\u00f3"+
		"\2\2\u1273\u1274\7~\2\2\u1274\u1275\7\u00ed\2\2\u1275\u1276\7\u0194\2"+
		"\2\u1276\u1277\5\u0220\u0111\2\u1277\u1278\5|?\2\u1278\u127a\3\2\2\2\u1279"+
		"\u122b\3\2\2\2\u1279\u1232\3\2\2\2\u1279\u1237\3\2\2\2\u1279\u123e\3\2"+
		"\2\2\u1279\u1243\3\2\2\2\u1279\u124a\3\2\2\2\u1279\u1253\3\2\2\2\u1279"+
		"\u1258\3\2\2\2\u1279\u125f\3\2\2\2\u1279\u1264\3\2\2\2\u1279\u126b\3\2"+
		"\2\2\u1279\u1271\3\2\2\2\u127a\u0217\3\2\2\2\u127b\u1293\7l\2\2\u127c"+
		"\u1293\7\u0150\2\2\u127d\u1293\7\u0180\2\2\u127e\u127f\7\u010b\2\2\u127f"+
		"\u1293\7\u0180\2\2\u1280\u1293\7\u00f3\2\2\u1281\u1282\7G\2\2\u1282\u1293"+
		"\7l\2\2\u1283\u1293\7}\2\2\u1284\u1293\7\u00b9\2\2\u1285\u1293\7\u015e"+
		"\2\2\u1286\u1287\7\u016b\2\2\u1287\u1288\7\u014d\2\2\u1288\u1293\7\u0123"+
		"\2\2\u1289\u128a\7\u016b\2\2\u128a\u128b\7\u014d\2\2\u128b\u1293\7\u00ca"+
		"\2\2\u128c\u128d\7\u016b\2\2\u128d\u128e\7\u014d\2\2\u128e\u1293\7\u0169"+
		"\2\2\u128f\u1290\7\u016b\2\2\u1290\u1291\7\u014d\2\2\u1291\u1293\7\u00b4"+
		"\2\2\u1292\u127b\3\2\2\2\u1292\u127c\3\2\2\2\u1292\u127d\3\2\2\2\u1292"+
		"\u127e\3\2\2\2\u1292\u1280\3\2\2\2\u1292\u1281\3\2\2\2\u1292\u1283\3\2"+
		"\2\2\u1292\u1284\3\2\2\2\u1292\u1285\3\2\2\2\u1292\u1286\3\2\2\2\u1292"+
		"\u1289\3\2\2\2\u1292\u128c\3\2\2\2\u1292\u128f\3\2\2\2\u1293\u0219\3\2"+
		"\2\2\u1294\u129a\5\u021c\u010f\2\u1295\u129a\7\u00c0\2\2\u1296\u129a\7"+
		"\u0146\2\2\u1297\u129a\7\u01cc\2\2\u1298\u129a\7\u0167\2\2\u1299\u1294"+
		"\3\2\2\2\u1299\u1295\3\2\2\2\u1299\u1296\3\2\2\2\u1299\u1297\3\2\2\2\u1299"+
		"\u1298\3\2\2\2\u129a\u021b\3\2\2\2\u129b\u129c\7\u0094\2\2\u129c\u12aa"+
		"\7\u01c7\2\2\u129d\u129e\7\u00d7\2\2\u129e\u12aa\7\u016d\2\2\u129f\u12aa"+
		"\7\u00dd\2\2\u12a0\u12a1\7G\2\2\u12a1\u12a2\7\u00bf\2\2\u12a2\u12aa\7"+
		"\u0185\2\2\u12a3\u12a4\5\u0144\u00a3\2\u12a4\u12a5\7\u00ff\2\2\u12a5\u12aa"+
		"\3\2\2\2\u12a6\u12aa\7\u01cd\2\2\u12a7\u12aa\7\u014b\2\2\u12a8\u12aa\7"+
		"\u0153\2\2\u12a9\u129b\3\2\2\2\u12a9\u129d\3\2\2\2\u12a9\u129f\3\2\2\2"+
		"\u12a9\u12a0\3\2\2\2\u12a9\u12a3\3\2\2\2\u12a9\u12a6\3\2\2\2\u12a9\u12a7"+
		"\3\2\2\2\u12a9\u12a8\3\2\2\2\u12aa\u021d\3\2\2\2\u12ab\u12ac\t\31\2\2"+
		"\u12ac\u021f\3\2\2\2\u12ad\u12b2\5\u0222\u0112\2\u12ae\u12af\7\b\2\2\u12af"+
		"\u12b1\5\u0222\u0112\2\u12b0\u12ae\3\2\2\2\u12b1\u12b4\3\2\2\2\u12b2\u12b0"+
		"\3\2\2\2\u12b2\u12b3\3\2\2\2\u12b3\u0221\3\2\2\2\u12b4\u12b2\3\2\2\2\u12b5"+
		"\u12b7\5\u056c\u02b7\2\u12b6\u12b8\5\u0224\u0113\2\u12b7\u12b6\3\2\2\2"+
		"\u12b7\u12b8\3\2\2\2\u12b8\u0223\3\2\2\2\u12b9\u12bb\7\r\2\2\u12ba\u12bc"+
		"\5\u054e\u02a8\2\u12bb\u12ba\3\2\2\2\u12bc\u12bd\3\2\2\2\u12bd\u12bb\3"+
		"\2\2\2\u12bd\u12be\3\2\2\2\u12be\u0225\3\2\2\2\u12bf\u12c4\5\u0470\u0239"+
		"\2\u12c0\u12c1\7\b\2\2\u12c1\u12c3\5\u0470\u0239\2\u12c2\u12c0\3\2\2\2"+
		"\u12c3\u12c6\3\2\2\2\u12c4\u12c2\3\2\2\2\u12c4\u12c5\3\2\2\2\u12c5\u0227"+
		"\3\2\2\2\u12c6\u12c4\3\2\2\2\u12c7\u12c8\7\u016e\2\2\u12c8\u12c9\5\u03f2"+
		"\u01fa\2\u12c9\u12ca\5\u0446\u0224\2\u12ca\u12cb\5\u022a\u0116\2\u12cb"+
		"\u12cc\5|?\2\u12cc\u0229\3\2\2\2\u12cd\u12ce\7\u00b8\2\2\u12ce\u12d3\7"+
		"\u00ec\2\2\u12cf\u12d0\7\u0142\2\2\u12d0\u12d3\7\u00ec\2\2\u12d1\u12d3"+
		"\3\2\2\2\u12d2\u12cd\3\2\2\2\u12d2\u12cf\3\2\2\2\u12d2\u12d1\3\2\2\2\u12d3"+
		"\u022b\3\2\2\2\u12d4\u12d5\7\u00b0\2\2\u12d5\u12d6\7]\2\2\u12d6\u12d7"+
		"\5\u0218\u010d\2\u12d7\u12d8\5\u0222\u0112\2\u12d8\u12d9\7\u0085\2\2\u12d9"+
		"\u12da\5\u022e\u0118\2\u12da\u1368\3\2\2\2\u12db\u12dc\7\u00b0\2\2\u12dc"+
		"\u12dd\7]\2\2\u12dd\u12de\7\63\2\2\u12de\u12df\5\u0222\u0112\2\u12df\u12e0"+
		"\7\u0085\2\2\u12e0\u12e1\5\u022e\u0118\2\u12e1\u1368\3\2\2\2\u12e2\u12e3"+
		"\7\u00b0\2\2\u12e3\u12e4\7]\2\2\u12e4\u12e5\5\u021a\u010e\2\u12e5\u12e6"+
		"\5\u054c\u02a7\2\u12e6\u12e7\7\u0085\2\2\u12e7\u12e8\5\u022e\u0118\2\u12e8"+
		"\u1368\3\2\2\2\u12e9\u12ea\7\u00b0\2\2\u12ea\u12eb\7]\2\2\u12eb\u12ec"+
		"\7\u0170\2\2\u12ec\u12ed\5\u0470\u0239\2\u12ed\u12ee\7\u0085\2\2\u12ee"+
		"\u12ef\5\u022e\u0118\2\u12ef\u1368\3\2\2\2\u12f0\u12f1\7\u00b0\2\2\u12f1"+
		"\u12f2\7]\2\2\u12f2\u12f3\7\u00ce\2\2\u12f3\u12f4\5\u0470\u0239\2\u12f4"+
		"\u12f5\7\u0085\2\2\u12f5\u12f6\5\u022e\u0118\2\u12f6\u1368\3\2\2\2\u12f7"+
		"\u12f8\7\u00b0\2\2\u12f8\u12f9\7]\2\2\u12f9\u12fa\7\u0099\2\2\u12fa\u12fb"+
		"\5\u02a0\u0151\2\u12fb\u12fc\7\u0085\2\2\u12fc\u12fd\5\u022e\u0118\2\u12fd"+
		"\u1368\3\2\2\2\u12fe\u12ff\7\u00b0\2\2\u12ff\u1300\7]\2\2\u1300\u1301"+
		"\7\u00e4\2\2\u1301\u1302\5\u0288\u0145\2\u1302\u1303\7\u0085\2\2\u1303"+
		"\u1304\5\u022e\u0118\2\u1304\u1368\3\2\2\2\u1305\u1306\7\u00b0\2\2\u1306"+
		"\u1307\7]\2\2\u1307\u1308\7\u011e\2\2\u1308\u1309\5\u02c6\u0164\2\u1309"+
		"\u130a\7\u0085\2\2\u130a\u130b\5\u022e\u0118\2\u130b\u1368\3\2\2\2\u130c"+
		"\u130d\7\u00b0\2\2\u130d\u130e\7]\2\2\u130e\u130f\7\65\2\2\u130f\u1310"+
		"\5\u054c\u02a7\2\u1310\u1311\7]\2\2\u1311\u1312\5\u0222\u0112\2\u1312"+
		"\u1313\7\u0085\2\2\u1313\u1314\5\u022e\u0118\2\u1314\u1368\3\2\2\2\u1315"+
		"\u1316\7\u00b0\2\2\u1316\u1317\7]\2\2\u1317\u1318\7\65\2\2\u1318\u1319"+
		"\5\u054c\u02a7\2\u1319\u131a\7]\2\2\u131a\u131b\7\u00ce\2\2\u131b\u131c"+
		"\5\u0222\u0112\2\u131c\u131d\7\u0085\2\2\u131d\u131e\5\u022e\u0118\2\u131e"+
		"\u1368\3\2\2\2\u131f\u1320\7\u00b0\2\2\u1320\u1321\7]\2\2\u1321\u1322"+
		"\5\u021e\u0110\2\u1322\u1323\5\u054c\u02a7\2\u1323\u1324\7]\2\2\u1324"+
		"\u1325\5\u0222\u0112\2\u1325\u1326\7\u0085\2\2\u1326\u1327\5\u022e\u0118"+
		"\2\u1327\u1368\3\2\2\2\u1328\u1329\7\u00b0\2\2\u1329\u132a\7]\2\2\u132a"+
		"\u132b\7\u0130\2\2\u132b\u132c\5\u0288\u0145\2\u132c\u132d\7\u0085\2\2"+
		"\u132d\u132e\5\u022e\u0118\2\u132e\u1368\3\2\2\2\u132f\u1330\7\u00b0\2"+
		"\2\u1330\u1331\7]\2\2\u1331\u1332\7\u01c3\2\2\u1332\u1333\5\u0288\u0145"+
		"\2\u1333\u1334\7\u0085\2\2\u1334\u1335\5\u022e\u0118\2\u1335\u1368\3\2"+
		"\2\2\u1336\u1337\7\u00b0\2\2\u1337\u1338\7]\2\2\u1338\u1339\7\u01c4\2"+
		"\2\u1339\u133a\7F\2\2\u133a\u133b\5\u0470\u0239\2\u133b\u133c\7\u00ff"+
		"\2\2\u133c\u133d\5\u054c\u02a7\2\u133d\u133e\7\u0085\2\2\u133e\u133f\5"+
		"\u022e\u0118\2\u133f\u1368\3\2\2\2\u1340\u1341\7\u00b0\2\2\u1341\u1342"+
		"\7]\2\2\u1342\u1343\7\u011e\2\2\u1343\u1344\7\u00ad\2\2\u1344\u1345\5"+
		"\u0222\u0112\2\u1345\u1346\7u\2\2\u1346\u1347\5\u054c\u02a7\2\u1347\u1348"+
		"\7\u0085\2\2\u1348\u1349\5\u022e\u0118\2\u1349\u1368\3\2\2\2\u134a\u134b"+
		"\7\u00b0\2\2\u134b\u134c\7]\2\2\u134c\u134d\7\u011e\2\2\u134d\u134e\7"+
		"\u00df\2\2\u134e\u134f\5\u0222\u0112\2\u134f\u1350\7u\2\2\u1350\u1351"+
		"\5\u054c\u02a7\2\u1351\u1352\7\u0085\2\2\u1352\u1353\5\u022e\u0118\2\u1353"+
		"\u1368\3\2\2\2\u1354\u1355\7\u00b0\2\2\u1355\u1356\7]\2\2\u1356\u1357"+
		"\7\u0100\2\2\u1357\u1358\7\u011a\2\2\u1358\u1359\5\u0134\u009b\2\u1359"+
		"\u135a\7\u0085\2\2\u135a\u135b\5\u022e\u0118\2\u135b\u1368\3\2\2\2\u135c"+
		"\u135d\7\u00b0\2\2\u135d\u135e\7]\2\2\u135e\u135f\7\60\2\2\u135f\u1360"+
		"\7\4\2\2\u1360\u1361\5\u0470\u0239\2\u1361\u1362\7\'\2\2\u1362\u1363\5"+
		"\u0470\u0239\2\u1363\u1364\7\5\2\2\u1364\u1365\7\u0085\2\2\u1365\u1366"+
		"\5\u022e\u0118\2\u1366\u1368\3\2\2\2\u1367\u12d4\3\2\2\2\u1367\u12db\3"+
		"\2\2\2\u1367\u12e2\3\2\2\2\u1367\u12e9\3\2\2\2\u1367\u12f0\3\2\2\2\u1367"+
		"\u12f7\3\2\2\2\u1367\u12fe\3\2\2\2\u1367\u1305\3\2\2\2\u1367\u130c\3\2"+
		"\2\2\u1367\u1315\3\2\2\2\u1367\u131f\3\2\2\2\u1367\u1328\3\2\2\2\u1367"+
		"\u132f\3\2\2\2\u1367\u1336\3\2\2\2\u1367\u1340\3\2\2\2\u1367\u134a\3\2"+
		"\2\2\u1367\u1354\3\2\2\2\u1367\u135c\3\2\2\2\u1368\u022d\3\2\2\2\u1369"+
		"\u136c\5\u055e\u02b0\2\u136a\u136c\7[\2\2\u136b\u1369\3\2\2\2\u136b\u136a"+
		"\3\2\2\2\u136c\u022f\3\2\2\2\u136d\u136e\7\u014f\2\2\u136e\u136f\7\u00fe"+
		"\2\2\u136f\u1370\5\u0232\u011a\2\u1370\u1371\7]\2\2\u1371\u1372\5\u0218"+
		"\u010d\2\u1372\u1373\5\u0222\u0112\2\u1373\u1374\7\u0085\2\2\u1374\u1375"+
		"\5\u0234\u011b\2\u1375\u13c9\3\2\2\2\u1376\u1377\7\u014f\2\2\u1377\u1378"+
		"\7\u00fe\2\2\u1378\u1379\5\u0232\u011a\2\u1379\u137a\7]\2\2\u137a\u137b"+
		"\7\63\2\2\u137b\u137c\5\u0222\u0112\2\u137c\u137d\7\u0085\2\2\u137d\u137e"+
		"\5\u0234\u011b\2\u137e\u13c9\3\2\2\2\u137f\u1380\7\u014f\2\2\u1380\u1381"+
		"\7\u00fe\2\2\u1381\u1382\5\u0232\u011a\2\u1382\u1383\7]\2\2\u1383\u1384"+
		"\5\u021a\u010e\2\u1384\u1385\5\u054c\u02a7\2\u1385\u1386\7\u0085\2\2\u1386"+
		"\u1387\5\u0234\u011b\2\u1387\u13c9\3\2\2\2\u1388\u1389\7\u014f\2\2\u1389"+
		"\u138a\7\u00fe\2\2\u138a\u138b\5\u0232\u011a\2\u138b\u138c\7]\2\2\u138c"+
		"\u138d\7\u0170\2\2\u138d\u138e\5\u0470\u0239\2\u138e\u138f\7\u0085\2\2"+
		"\u138f\u1390\5\u0234\u011b\2\u1390\u13c9\3\2\2\2\u1391\u1392\7\u014f\2"+
		"\2\u1392\u1393\7\u00fe\2\2\u1393\u1394\5\u0232\u011a\2\u1394\u1395\7]"+
		"\2\2\u1395\u1396\7\u00ce\2\2\u1396\u1397\5\u0470\u0239\2\u1397\u1398\7"+
		"\u0085\2\2\u1398\u1399\5\u0234\u011b\2\u1399\u13c9\3\2\2\2\u139a\u139b"+
		"\7\u014f\2\2\u139b\u139c\7\u00fe\2\2\u139c\u139d\5\u0232\u011a\2\u139d"+
		"\u139e\7]\2\2\u139e\u139f\7\u0099\2\2\u139f\u13a0\5\u02a0\u0151\2\u13a0"+
		"\u13a1\7\u0085\2\2\u13a1\u13a2\5\u0234\u011b\2\u13a2\u13c9\3\2\2\2\u13a3"+
		"\u13a4\7\u014f\2\2\u13a4\u13a5\7\u00fe\2\2\u13a5\u13a6\5\u0232\u011a\2"+
		"\u13a6\u13a7\7]\2\2\u13a7\u13a8\7\u00e4\2\2\u13a8\u13a9\5\u0288\u0145"+
		"\2\u13a9\u13aa\7\u0085\2\2\u13aa\u13ab\5\u0234\u011b\2\u13ab\u13c9\3\2"+
		"\2\2\u13ac\u13ad\7\u014f\2\2\u13ad\u13ae\7\u00fe\2\2\u13ae\u13af\5\u0232"+
		"\u011a\2\u13af\u13b0\7]\2\2\u13b0\u13b1\7\u0100\2\2\u13b1\u13b2\7\u011a"+
		"\2\2\u13b2\u13b3\5\u0134\u009b\2\u13b3\u13b4\7\u0085\2\2\u13b4\u13b5\5"+
		"\u0234\u011b\2\u13b5\u13c9\3\2\2\2\u13b6\u13b7\7\u014f\2\2\u13b7\u13b8"+
		"\7\u00fe\2\2\u13b8\u13b9\5\u0232\u011a\2\u13b9\u13ba\7]\2\2\u13ba\u13bb"+
		"\7\u0130\2\2\u13bb\u13bc\5\u0288\u0145\2\u13bc\u13bd\7\u0085\2\2\u13bd"+
		"\u13be\5\u0234\u011b\2\u13be\u13c9\3\2\2\2\u13bf\u13c0\7\u014f\2\2\u13c0"+
		"\u13c1\7\u00fe\2\2\u13c1\u13c2\5\u0232\u011a\2\u13c2\u13c3\7]\2\2\u13c3"+
		"\u13c4\7\u01c3\2\2\u13c4\u13c5\5\u0288\u0145\2\u13c5\u13c6\7\u0085\2\2"+
		"\u13c6\u13c7\5\u0234\u011b\2\u13c7\u13c9\3\2\2\2\u13c8\u136d\3\2\2\2\u13c8"+
		"\u1376\3\2\2\2\u13c8\u137f\3\2\2\2\u13c8\u1388\3\2\2\2\u13c8\u1391\3\2"+
		"\2\2\u13c8\u139a\3\2\2\2\u13c8\u13a3\3\2\2\2\u13c8\u13ac\3\2\2\2\u13c8"+
		"\u13b6\3\2\2\2\u13c8\u13bf\3\2\2\2\u13c9\u0231\3\2\2\2\u13ca\u13cb\7F"+
		"\2\2\u13cb\u13ce\5V,\2\u13cc\u13ce\3\2\2\2\u13cd\u13ca\3\2\2\2\u13cd\u13cc"+
		"\3\2\2\2\u13ce\u0233\3\2\2\2\u13cf\u13d2\5\u055e\u02b0\2\u13d0\u13d2\7"+
		"[\2\2\u13d1\u13cf\3\2\2\2\u13d1\u13d0\3\2\2\2\u13d2\u0235\3\2\2\2\u13d3"+
		"\u13d4\7E\2\2\u13d4\u13d8\5\u0238\u011d\2\u13d5\u13d6\7\u0111\2\2\u13d6"+
		"\u13d8\5\u0238\u011d\2\u13d7\u13d3\3\2\2\2\u13d7\u13d5\3\2\2\2\u13d8\u0237"+
		"\3\2\2\2\u13d9\u141c\5\u03ca\u01e6\2\u13da\u13db\5\u023a\u011e\2\u13db"+
		"\u13dc\5\u03ca\u01e6\2\u13dc\u141c\3\2\2\2\u13dd\u13de\7\u0114\2\2\u13de"+
		"\u13df\5\u023c\u011f\2\u13df\u13e0\5\u03ca\u01e6\2\u13e0\u141c\3\2\2\2"+
		"\u13e1\u13e2\7\u012d\2\2\u13e2\u13e3\5\u023c\u011f\2\u13e3\u13e4\5\u03ca"+
		"\u01e6\2\u13e4\u141c\3\2\2\2\u13e5\u13e6\7\u00e0\2\2\u13e6\u13e7\5\u023c"+
		"\u011f\2\u13e7\u13e8\5\u03ca\u01e6\2\u13e8\u141c\3\2\2\2\u13e9\u13ea\7"+
		"\u0101\2\2\u13ea\u13eb\5\u023c\u011f\2\u13eb\u13ec\5\u03ca\u01e6\2\u13ec"+
		"\u141c\3\2\2\2\u13ed\u13ee\7\u0093\2\2\u13ee\u13ef\5\u0564\u02b3\2\u13ef"+
		"\u13f0\5\u023c\u011f\2\u13f0\u13f1\5\u03ca\u01e6\2\u13f1\u141c\3\2\2\2"+
		"\u13f2\u13f3\7\u013b\2\2\u13f3\u13f4\5\u0564\u02b3\2\u13f4\u13f5\5\u023c"+
		"\u011f\2\u13f5\u13f6\5\u03ca\u01e6\2\u13f6\u141c\3\2\2\2\u13f7\u13f8\5"+
		"\u0564\u02b3\2\u13f8\u13f9\5\u023c\u011f\2\u13f9\u13fa\5\u03ca\u01e6\2"+
		"\u13fa\u141c\3\2\2\2\u13fb\u13fc\7!\2\2\u13fc\u13fd\5\u023c\u011f\2\u13fd"+
		"\u13fe\5\u03ca\u01e6\2\u13fe\u141c\3\2\2\2\u13ff\u1400\7\u00e3\2\2\u1400"+
		"\u1401\5\u023c\u011f\2\u1401\u1402\5\u03ca\u01e6\2\u1402\u141c\3\2\2\2"+
		"\u1403\u1404\7\u00e3\2\2\u1404\u1405\5\u0564\u02b3\2\u1405\u1406\5\u023c"+
		"\u011f\2\u1406\u1407\5\u03ca\u01e6\2\u1407\u141c\3\2\2\2\u1408\u1409\7"+
		"\u00e3\2\2\u1409\u140a\7!\2\2\u140a\u140b\5\u023c\u011f\2\u140b\u140c"+
		"\5\u03ca\u01e6\2\u140c\u141c\3\2\2\2\u140d\u140e\7\u00a1\2\2\u140e\u140f"+
		"\5\u023c\u011f\2\u140f\u1410\5\u03ca\u01e6\2\u1410\u141c\3\2\2\2\u1411"+
		"\u1412\7\u00a1\2\2\u1412\u1413\5\u0564\u02b3\2\u1413\u1414\5\u023c\u011f"+
		"\2\u1414\u1415\5\u03ca\u01e6\2\u1415\u141c\3\2\2\2\u1416\u1417\7\u00a1"+
		"\2\2\u1417\u1418\7!\2\2\u1418\u1419\5\u023c\u011f\2\u1419\u141a\5\u03ca"+
		"\u01e6\2\u141a\u141c\3\2\2\2\u141b\u13d9\3\2\2\2\u141b\u13da\3\2\2\2\u141b"+
		"\u13dd\3\2\2\2\u141b\u13e1\3\2\2\2\u141b\u13e5\3\2\2\2\u141b\u13e9\3\2"+
		"\2\2\u141b\u13ed\3\2\2\2\u141b\u13f2\3\2\2\2\u141b\u13f7\3\2\2\2\u141b"+
		"\u13fb\3\2\2\2\u141b\u13ff\3\2\2\2\u141b\u1403\3\2\2\2\u141b\u1408\3\2"+
		"\2\2\u141b\u140d\3\2\2\2\u141b\u1411\3\2\2\2\u141b\u1416\3\2\2\2\u141c"+
		"\u0239\3\2\2\2\u141d\u141e\t\32\2\2\u141e\u023b\3\2\2\2\u141f\u1422\5"+
		"\u023a\u011e\2\u1420\u1422\3\2\2\2\u1421\u141f\3\2\2\2\u1421\u1420\3\2"+
		"\2\2\u1422\u023d\3\2\2\2\u1423\u1424\7I\2\2\u1424\u1425\5\u0242\u0122"+
		"\2\u1425\u1426\7]\2\2\u1426\u1427\5\u0248\u0125\2\u1427\u1428\7n\2\2\u1428"+
		"\u1429\5\u024a\u0126\2\u1429\u142a\5\u024e\u0128\2\u142a\u023f\3\2\2\2"+
		"\u142b\u142c\7\u0145\2\2\u142c\u142d\5\u0242\u0122\2\u142d\u142e\7]\2"+
		"\2\u142e\u142f\5\u0248\u0125\2\u142f\u1430\7H\2\2\u1430\u1431\5\u024a"+
		"\u0126\2\u1431\u1432\5|?\2\u1432\u143f\3\2\2\2\u1433\u1434\7\u0145\2\2"+
		"\u1434\u1435\7I\2\2\u1435\u1436\7\u011f\2\2\u1436\u1437\7F\2\2\u1437\u1438"+
		"\5\u0242\u0122\2\u1438\u1439\7]\2\2\u1439\u143a\5\u0248\u0125\2\u143a"+
		"\u143b\7H\2\2\u143b\u143c\5\u024a\u0126\2\u143c\u143d\5|?\2\u143d\u143f"+
		"\3\2\2\2\u143e\u142b\3\2\2\2\u143e\u1433\3\2\2\2\u143f\u0241\3\2\2\2\u1440"+
		"\u1450\5\u0244\u0123\2\u1441\u1450\7!\2\2\u1442\u1443\7!\2\2\u1443\u1450"+
		"\7\u012e\2\2\u1444\u1445\7!\2\2\u1445\u1446\7\4\2\2\u1446\u1447\5\u00e8"+
		"u\2\u1447\u1448\7\5\2\2\u1448\u1450\3\2\2\2\u1449\u144a\7!\2\2\u144a\u144b"+
		"\7\u012e\2\2\u144b\u144c\7\4\2\2\u144c\u144d\5\u00e8u\2\u144d\u144e\7"+
		"\5\2\2\u144e\u1450\3\2\2\2\u144f\u1440\3\2\2\2\u144f\u1441\3\2\2\2\u144f"+
		"\u1442\3\2\2\2\u144f\u1444\3\2\2\2\u144f\u1449\3\2\2\2\u1450\u0243\3\2"+
		"\2\2\u1451\u1456\5\u0246\u0124\2\u1452\u1453\7\b\2\2\u1453\u1455\5\u0246"+
		"\u0124\2\u1454\u1452\3\2\2\2\u1455\u1458\3\2\2\2\u1456\u1454\3\2\2\2\u1456"+
		"\u1457\3\2\2\2\u1457\u0245\3\2\2\2\u1458\u1456\3\2\2\2\u1459\u145a\7h"+
		"\2\2\u145a\u1463\5\u00e6t\2\u145b\u145c\7f\2\2\u145c\u1463\5\u00e6t\2"+
		"\u145d\u145e\7\66\2\2\u145e\u1463\5\u00e6t\2\u145f\u1460\5\u056c\u02b7"+
		"\2\u1460\u1461\5\u00e6t\2\u1461\u1463\3\2\2\2\u1462\u1459\3\2\2\2\u1462"+
		"\u145b\3\2\2\2\u1462\u145d\3\2\2\2\u1462\u145f\3\2\2\2\u1463\u0247\3\2"+
		"\2\2\u1464\u149f\5\u0546\u02a4\2\u1465\u1466\7l\2\2\u1466\u149f\5\u0546"+
		"\u02a4\2\u1467\u1468\7\u0150\2\2\u1468\u149f\5\u0546\u02a4\2\u1469\u146a"+
		"\7G\2\2\u146a\u146b\7\u00bf\2\2\u146b\u146c\7\u0185\2\2\u146c\u149f\5"+
		"\u054a\u02a6\2\u146d\u146e\7G\2\2\u146e\u146f\7\u0153\2\2\u146f\u149f"+
		"\5\u054a\u02a6\2\u1470\u1471\7\u00e4\2\2\u1471\u149f\5\u0286\u0144\2\u1472"+
		"\u1473\7\u0130\2\2\u1473\u149f\5\u0286\u0144\2\u1474\u1475\7\u01c3\2\2"+
		"\u1475\u149f\5\u0286\u0144\2\u1476\u1477\7\u00c0\2\2\u1477\u149f\5\u054a"+
		"\u02a6\2\u1478\u1479\7\u00ce\2\2\u1479\u149f\5\u0220\u0111\2\u147a\u147b"+
		"\7\u00ff\2\2\u147b\u149f\5\u054a\u02a6\2\u147c\u147d\7\u0100\2\2\u147d"+
		"\u147e\7\u011a\2\2\u147e\u149f\5\u0136\u009c\2\u147f\u1480\7\u014b\2\2"+
		"\u1480\u149f\5\u054a\u02a6\2\u1481\u1482\7\u0167\2\2\u1482\u149f\5\u054a"+
		"\u02a6\2\u1483\u1484\7\u0170\2\2\u1484\u149f\5\u0220\u0111\2\u1485\u1486"+
		"\7!\2\2\u1486\u1487\7\u0166\2\2\u1487\u1488\7L\2\2\u1488\u1489\7\u014b"+
		"\2\2\u1489\u149f\5\u054a\u02a6\2\u148a\u148b\7!\2\2\u148b\u148c\7\u0151"+
		"\2\2\u148c\u148d\7L\2\2\u148d\u148e\7\u014b\2\2\u148e\u149f\5\u054a\u02a6"+
		"\2\u148f\u1490\7!\2\2\u1490\u1491\7\u00e5\2\2\u1491\u1492\7L\2\2\u1492"+
		"\u1493\7\u014b\2\2\u1493\u149f\5\u054a\u02a6\2\u1494\u1495\7!\2\2\u1495"+
		"\u1496\7\u01d2\2\2\u1496\u1497\7L\2\2\u1497\u1498\7\u014b\2\2\u1498\u149f"+
		"\5\u054a\u02a6\2\u1499\u149a\7!\2\2\u149a\u149b\7\u01d0\2\2\u149b\u149c"+
		"\7L\2\2\u149c\u149d\7\u014b\2\2\u149d\u149f\5\u054a\u02a6\2\u149e\u1464"+
		"\3\2\2\2\u149e\u1465\3\2\2\2\u149e\u1467\3\2\2\2\u149e\u1469\3\2\2\2\u149e"+
		"\u146d\3\2\2\2\u149e\u1470\3\2\2\2\u149e\u1472\3\2\2\2\u149e\u1474\3\2"+
		"\2\2\u149e\u1476\3\2\2\2\u149e\u1478\3\2\2\2\u149e\u147a\3\2\2\2\u149e"+
		"\u147c\3\2\2\2\u149e\u147f\3\2\2\2\u149e\u1481\3\2\2\2\u149e\u1483\3\2"+
		"\2\2\u149e\u1485\3\2\2\2\u149e\u148a\3\2\2\2\u149e\u148f\3\2\2\2\u149e"+
		"\u1494\3\2\2\2\u149e\u1499\3\2\2\2\u149f\u0249\3\2\2\2\u14a0\u14a5\5\u024c"+
		"\u0127\2\u14a1\u14a2\7\b\2\2\u14a2\u14a4\5\u024c\u0127\2\u14a3\u14a1\3"+
		"\2\2\2\u14a4\u14a7\3\2\2\2\u14a5\u14a3\3\2\2\2\u14a5\u14a6\3\2\2\2\u14a6"+
		"\u024b\3\2\2\2\u14a7\u14a5\3\2\2\2\u14a8\u14ac\5\u0568\u02b5\2\u14a9\u14aa"+
		"\7J\2\2\u14aa\u14ac\5\u0568\u02b5\2\u14ab\u14a8\3\2\2\2\u14ab\u14a9\3"+
		"\2\2\2\u14ac\u024d\3\2\2\2\u14ad\u14ae\7z\2\2\u14ae\u14af\7I\2\2\u14af"+
		"\u14b2\7\u011f\2\2\u14b0\u14b2\3\2\2\2\u14b1\u14ad\3\2\2\2\u14b1\u14b0"+
		"\3\2\2\2\u14b2\u024f\3\2\2\2\u14b3\u14b4\7I\2\2\u14b4\u14b5\5\u0244\u0123"+
		"\2\u14b5\u14b6\7n\2\2\u14b6\u14b7\5\u056a\u02b6\2\u14b7\u14b8\5\u0254"+
		"\u012b\2\u14b8\u14b9\5\u0256\u012c\2\u14b9\u0251\3\2\2\2\u14ba\u14bb\7"+
		"\u0145\2\2\u14bb\u14bc\5\u0244\u0123\2\u14bc\u14bd\7H\2\2\u14bd\u14be"+
		"\5\u056a\u02b6\2\u14be\u14bf\5\u0256\u012c\2\u14bf\u14c0\5|?\2\u14c0\u14cc"+
		"\3\2\2\2\u14c1\u14c2\7\u0145\2\2\u14c2\u14c3\7\u0097\2\2\u14c3\u14c4\7"+
		"\u011f\2\2\u14c4\u14c5\7F\2\2\u14c5\u14c6\5\u0244\u0123\2\u14c6\u14c7"+
		"\7H\2\2\u14c7\u14c8\5\u056a\u02b6\2\u14c8\u14c9\5\u0256\u012c\2\u14c9"+
		"\u14ca\5|?\2\u14ca\u14cc\3\2\2\2\u14cb\u14ba\3\2\2\2\u14cb\u14c1\3\2\2"+
		"\2\u14cc\u0253\3\2\2\2\u14cd\u14ce\7z\2\2\u14ce\u14cf\7\u0097\2\2\u14cf"+
		"\u14d2\7\u011f\2\2\u14d0\u14d2\3\2\2\2\u14d1\u14cd\3\2\2\2\u14d1\u14d0"+
		"\3\2\2\2\u14d2\u0255\3\2\2\2\u14d3\u14d4\7\u00e7\2\2\u14d4\u14d5\7\u00a4"+
		"\2\2\u14d5\u14d8\5\u0568\u02b5\2\u14d6\u14d8\3\2\2\2\u14d7\u14d3\3\2\2"+
		"\2\u14d7\u14d6\3\2\2\2\u14d8\u0257\3\2\2\2\u14d9\u14da\7\u009b\2\2\u14da"+
		"\u14db\7=\2\2\u14db\u14dc\7\u012e\2\2\u14dc\u14dd\5\u025a\u012e\2\u14dd"+
		"\u14de\5\u025e\u0130\2\u14de\u0259\3\2\2\2\u14df\u14e1\5\u025c\u012f\2"+
		"\u14e0\u14df\3\2\2\2\u14e1\u14e4\3\2\2\2\u14e2\u14e0\3\2\2\2\u14e2\u14e3"+
		"\3\2\2\2\u14e3\u025b\3\2\2\2\u14e4\u14e2\3\2\2\2\u14e5\u14e6\7L\2\2\u14e6"+
		"\u14e7\7\u014b\2\2\u14e7\u14ef\5\u054a\u02a6\2\u14e8\u14e9\7F\2\2\u14e9"+
		"\u14ea\7\u0146\2\2\u14ea\u14ef\5\u056a\u02b6\2\u14eb\u14ec\7F\2\2\u14ec"+
		"\u14ed\7t\2\2\u14ed\u14ef\5\u056a\u02b6\2\u14ee\u14e5\3\2\2\2\u14ee\u14e8"+
		"\3\2\2\2\u14ee\u14eb\3\2\2\2\u14ef\u025d\3\2\2\2\u14f0\u14f1\7I\2\2\u14f1"+
		"\u14f2\5\u0242\u0122\2\u14f2\u14f3\7]\2\2\u14f3\u14f4\5\u0260\u0131\2"+
		"\u14f4\u14f5\7n\2\2\u14f5\u14f6\5\u024a\u0126\2\u14f6\u14f7\5\u024e\u0128"+
		"\2\u14f7\u150c\3\2\2\2\u14f8\u14f9\7\u0145\2\2\u14f9\u14fa\5\u0242\u0122"+
		"\2\u14fa\u14fb\7]\2\2\u14fb\u14fc\5\u0260\u0131\2\u14fc\u14fd\7H\2\2\u14fd"+
		"\u14fe\5\u024a\u0126\2\u14fe\u14ff\5|?\2\u14ff\u150c\3\2\2\2\u1500\u1501"+
		"\7\u0145\2\2\u1501\u1502\7I\2\2\u1502\u1503\7\u011f\2\2\u1503\u1504\7"+
		"F\2\2\u1504\u1505\5\u0242\u0122\2\u1505\u1506\7]\2\2\u1506\u1507\5\u0260"+
		"\u0131\2\u1507\u1508\7H\2\2\u1508\u1509\5\u024a\u0126\2\u1509\u150a\5"+
		"|?\2\u150a\u150c\3\2\2\2\u150b\u14f0\3\2\2\2\u150b\u14f8\3\2\2\2\u150b"+
		"\u1500\3\2\2\2\u150c\u025f\3\2\2\2\u150d\u150e\t\33\2\2\u150e\u0261\3"+
		"\2\2\2\u150f\u1510\7\66\2\2\u1510\u1511\5\u0264\u0133\2\u1511\u1512\7"+
		"\u00f3\2\2\u1512\u1513\5\u0266\u0134\2\u1513\u1514\5\u0268\u0135\2\u1514"+
		"\u1515\7]\2\2\u1515\u1516\5\u0444\u0223\2\u1516\u1517\5\u026a\u0136\2"+
		"\u1517\u1518\7\4\2\2\u1518\u1519\5\u026c\u0137\2\u1519\u151a\7\5\2\2\u151a"+
		"\u151b\5\u0272\u013a\2\u151b\u151c\5\u0086D\2\u151c\u151d\5\u010e\u0088"+
		"\2\u151d\u151e\5\u0458\u022d\2\u151e\u1533\3\2\2\2\u151f\u1520\7\66\2"+
		"\2\u1520\u1521\5\u0264\u0133\2\u1521\u1522\7\u00f3\2\2\u1522\u1523\5\u0266"+
		"\u0134\2\u1523\u1524\7\u00ed\2\2\u1524\u1525\7Z\2\2\u1525\u1526\7\u0194"+
		"\2\2\u1526\u1527\5\u054c\u02a7\2\u1527\u1528\7]\2\2\u1528\u1529\5\u0444"+
		"\u0223\2\u1529\u152a\5\u026a\u0136\2\u152a\u152b\7\4\2\2\u152b\u152c\5"+
		"\u026c\u0137\2\u152c\u152d\7\5\2\2\u152d\u152e\5\u0272\u013a\2\u152e\u152f"+
		"\5\u0086D\2\u152f\u1530\5\u010e\u0088\2\u1530\u1531\5\u0458\u022d\2\u1531"+
		"\u1533\3\2\2\2\u1532\u150f\3\2\2\2\u1532\u151f\3\2\2\2\u1533\u0263\3\2"+
		"\2\2\u1534\u1537\7s\2\2\u1535\u1537\3\2\2\2\u1536\u1534\3\2\2\2\u1536"+
		"\u1535\3\2\2\2\u1537\u0265\3\2\2\2\u1538\u153b\7~\2\2\u1539\u153b\3\2"+
		"\2\2\u153a\u1538\3\2\2\2\u153a\u1539\3\2\2\2\u153b\u0267\3\2\2\2\u153c"+
		"\u153f\5\u054c\u02a7\2\u153d\u153f\3\2\2\2\u153e\u153c\3\2\2\2\u153e\u153d"+
		"\3\2\2\2\u153f\u0269\3\2\2\2\u1540\u1541\7u\2\2\u1541\u1544\5\u054c\u02a7"+
		"\2\u1542\u1544\3\2\2\2\u1543\u1540\3\2\2\2\u1543\u1542\3\2\2\2\u1544\u026b"+
		"\3\2\2\2\u1545\u154a\5\u0270\u0139\2\u1546\u1547\7\b\2\2\u1547\u1549\5"+
		"\u0270\u0139\2\u1548\u1546\3\2\2\2\u1549\u154c\3\2\2\2\u154a\u1548\3\2"+
		"\2\2\u154a\u154b\3\2\2\2\u154b\u026d\3\2\2\2\u154c\u154a\3\2\2\2\u154d"+
		"\u154e\5\u0276\u013c\2\u154e\u154f\5\u0278\u013d\2\u154f\u1550\5\u027a"+
		"\u013e\2\u1550\u1551\5\u027c\u013f\2\u1551\u1559\3\2\2\2\u1552\u1553\5"+
		"\u0276\u013c\2\u1553\u1554\5\u0222\u0112\2\u1554\u1555\5\u0084C\2\u1555"+
		"\u1556\5\u027a\u013e\2\u1556\u1557\5\u027c\u013f\2\u1557\u1559\3\2\2\2"+
		"\u1558\u154d\3\2\2\2\u1558\u1552\3\2\2\2\u1559\u026f\3\2\2\2\u155a\u155b"+
		"\5\u056c\u02b7\2\u155b\u155c\5\u026e\u0138\2\u155c\u1566\3\2\2\2\u155d"+
		"\u155e\5\u04ce\u0268\2\u155e\u155f\5\u026e\u0138\2\u155f\u1566\3\2\2\2"+
		"\u1560\u1561\7\4\2\2\u1561\u1562\5\u049c\u024f\2\u1562\u1563\7\5\2\2\u1563"+
		"\u1564\5\u026e\u0138\2\u1564\u1566\3\2\2\2\u1565\u155a\3\2\2\2\u1565\u155d"+
		"\3\2\2\2\u1565\u1560\3\2\2\2\u1566\u0271\3\2\2\2\u1567\u1568\7\u01c2\2"+
		"\2\u1568\u1569\7\4\2\2\u1569\u156a\5\u0274\u013b\2\u156a\u156b\7\5\2\2"+
		"\u156b\u156e\3\2\2\2\u156c\u156e\3\2\2\2\u156d\u1567\3\2\2\2\u156d\u156c"+
		"\3\2\2\2\u156e\u0273\3\2\2\2\u156f\u1574\5\u0270\u0139\2\u1570\u1571\7"+
		"\b\2\2\u1571\u1573\5\u0270\u0139\2\u1572\u1570\3\2\2\2\u1573\u1576\3\2"+
		"\2\2\u1574\u1572\3\2\2\2\u1574\u1575\3\2\2\2\u1575\u0275\3\2\2\2\u1576"+
		"\u1574\3\2\2\2\u1577\u1578\7\62\2\2\u1578\u157b\5\u0222\u0112\2\u1579"+
		"\u157b\3\2\2\2\u157a\u1577\3\2\2\2\u157a\u1579\3\2\2\2\u157b\u0277\3\2"+
		"\2\2\u157c\u157f\5\u0222\u0112\2\u157d\u157f\3\2\2\2\u157e\u157c\3\2\2"+
		"\2\u157e\u157d\3\2\2\2\u157f\u0279\3\2\2\2\u1580\u1584\7(\2\2\u1581\u1584"+
		"\7?\2\2\u1582\u1584\3\2\2\2\u1583\u1580\3\2\2\2\u1583\u1581\3\2\2\2\u1583"+
		"\u1582\3\2\2\2\u1584\u027b\3\2\2\2\u1585\u1586\7\u0119\2\2\u1586\u158b"+
		"\7\u00e0\2\2\u1587\u1588\7\u0119\2\2\u1588\u158b\7\u0101\2\2\u1589\u158b"+
		"\3\2\2\2\u158a\u1585\3\2\2\2\u158a\u1587\3\2\2\2\u158a\u1589\3\2\2\2\u158b"+
		"\u027d\3\2\2\2\u158c\u158d\7\66\2\2\u158d\u158e\5\u0280\u0141\2\u158e"+
		"\u158f\t\30\2\2\u158f\u1590\5\u0552\u02aa\2\u1590\u159a\5\u028a\u0146"+
		"\2\u1591\u1598\7\u0144\2\2\u1592\u1599\5\u0294\u014b\2\u1593\u1594\7l"+
		"\2\2\u1594\u1595\7\4\2\2\u1595\u1596\5\u02b2\u015a\2\u1596\u1597\7\5\2"+
		"\2\u1597\u1599\3\2\2\2\u1598\u1592\3\2\2\2\u1598\u1593\3\2\2\2\u1599\u159b"+
		"\3\2\2\2\u159a\u1591\3\2\2\2\u159a\u159b\3\2\2\2\u159b\u159c\3\2\2\2\u159c"+
		"\u159d\5\u02a4\u0153\2\u159d\u027f\3\2\2\2\u159e\u159f\7_\2\2\u159f\u15a2"+
		"\7\u013f\2\2\u15a0\u15a2\3\2\2\2\u15a1\u159e\3\2\2\2\u15a1\u15a0\3\2\2"+
		"\2\u15a2\u0281\3\2\2\2\u15a3\u15a5\7\4\2\2\u15a4\u15a6\5\u0284\u0143\2"+
		"\u15a5\u15a4\3\2\2\2\u15a5\u15a6\3\2\2\2\u15a6\u15a7\3\2\2\2\u15a7\u15a8"+
		"\7\5\2\2\u15a8\u0283\3\2\2\2\u15a9\u15ae\5\u028e\u0148\2\u15aa\u15ab\7"+
		"\b\2\2\u15ab\u15ad\5\u028e\u0148\2\u15ac\u15aa\3\2\2\2\u15ad\u15b0\3\2"+
		"\2\2\u15ae\u15ac\3\2\2\2\u15ae\u15af\3\2\2\2\u15af\u0285\3\2\2\2\u15b0"+
		"\u15ae\3\2\2\2\u15b1\u15b6\5\u0288\u0145\2\u15b2\u15b3\7\b\2\2\u15b3\u15b5"+
		"\5\u0288\u0145\2\u15b4\u15b2\3\2\2\2\u15b5\u15b8\3\2\2\2\u15b6\u15b4\3"+
		"\2\2\2\u15b6\u15b7\3\2\2\2\u15b7\u0287\3\2\2\2\u15b8\u15b6\3\2\2\2\u15b9"+
		"\u15ba\5\u0552\u02aa\2\u15ba\u15bb\5\u0282\u0142\2\u15bb\u15c2\3\2\2\2"+
		"\u15bc\u15c2\5\u057c\u02bf\2\u15bd\u15bf\5\u056c\u02b7\2\u15be\u15c0\5"+
		"\u053c\u029f\2\u15bf\u15be\3\2\2\2\u15bf\u15c0\3\2\2\2\u15c0\u15c2\3\2"+
		"\2\2\u15c1\u15b9\3\2\2\2\u15c1\u15bc\3\2\2\2\u15c1\u15bd\3\2\2\2\u15c2"+
		"\u0289\3\2\2\2\u15c3\u15c5\7\4\2\2\u15c4\u15c6\5\u028c\u0147\2\u15c5\u15c4"+
		"\3\2\2\2\u15c5\u15c6\3\2\2\2\u15c6\u15c7\3\2\2\2\u15c7\u15c8\7\5\2\2\u15c8"+
		"\u028b\3\2\2\2\u15c9\u15ce\5\u0298\u014d\2\u15ca\u15cb\7\b\2\2\u15cb\u15cd"+
		"\5\u0298\u014d\2\u15cc\u15ca\3\2\2\2\u15cd\u15d0\3\2\2\2\u15ce\u15cc\3"+
		"\2\2\2\u15ce\u15cf\3\2\2\2\u15cf\u028d\3\2\2\2\u15d0\u15ce\3\2\2\2\u15d1"+
		"\u15d3\5\u0290\u0149\2\u15d2\u15d4\5\u0292\u014a\2\u15d3\u15d2\3\2\2\2"+
		"\u15d3\u15d4\3\2\2\2\u15d4\u15d5\3\2\2\2\u15d5\u15d6\5\u0296\u014c\2\u15d6"+
		"\u15df\3\2\2\2\u15d7\u15d9\5\u0292\u014a\2\u15d8\u15da\5\u0290\u0149\2"+
		"\u15d9\u15d8\3\2\2\2\u15d9\u15da\3\2\2\2\u15da\u15db\3\2\2\2\u15db\u15dc"+
		"\5\u0296\u014c\2\u15dc\u15df\3\2\2\2\u15dd\u15df\5\u0296\u014c\2\u15de"+
		"\u15d1\3\2\2\2\u15de\u15d7\3\2\2\2\u15de\u15dd\3\2\2\2\u15df\u028f\3\2"+
		"\2\2\u15e0\u15e2\7L\2\2\u15e1\u15e3\7\u01ce\2\2\u15e2\u15e1\3\2\2\2\u15e2"+
		"\u15e3\3\2\2\2\u15e3\u15e8\3\2\2\2\u15e4\u15e8\7\u01ce\2\2\u15e5\u15e8"+
		"\7\u0198\2\2\u15e6\u15e8\7v\2\2\u15e7\u15e0\3\2\2\2\u15e7\u15e4\3\2\2"+
		"\2\u15e7\u15e5\3\2\2\2\u15e7\u15e6\3\2\2\2\u15e8\u0291\3\2\2\2\u15e9\u15ea"+
		"\5\u056e\u02b8\2\u15ea\u0293\3\2\2\2\u15eb\u15ec\5\u0296\u014c\2\u15ec"+
		"\u0295\3\2\2\2\u15ed\u15fa\5\u0470\u0239\2\u15ee\u15ef\5\u056e\u02b8\2"+
		"\u15ef\u15f0\5\u0224\u0113\2\u15f0\u15f1\7\35\2\2\u15f1\u15f2\7\u0170"+
		"\2\2\u15f2\u15fa\3\2\2\2\u15f3\u15f4\7\u01a7\2\2\u15f4\u15f5\5\u056e\u02b8"+
		"\2\u15f5\u15f6\5\u0224\u0113\2\u15f6\u15f7\7\35\2\2\u15f7\u15f8\7\u0170"+
		"\2\2\u15f8\u15fa\3\2\2\2\u15f9\u15ed\3\2\2\2\u15f9\u15ee\3\2\2\2\u15f9"+
		"\u15f3\3\2\2\2\u15fa\u0297\3\2\2\2\u15fb\u15fe\5\u028e\u0148\2\u15fc\u15fd"+
		"\t\34\2\2\u15fd\u15ff\5\u049c\u024f\2\u15fe\u15fc\3\2\2\2\u15fe\u15ff"+
		"\3\2\2\2\u15ff\u0299\3\2\2\2\u1600\u1601\5\u028e\u0148\2\u1601\u029b\3"+
		"\2\2\2\u1602\u160d\7\4\2\2\u1603\u160e\7\13\2\2\u1604\u160e\5\u029e\u0150"+
		"\2\u1605\u1606\7`\2\2\u1606\u1607\7\u00a4\2\2\u1607\u160e\5\u029e\u0150"+
		"\2\u1608\u1609\5\u029e\u0150\2\u1609\u160a\7`\2\2\u160a\u160b\7\u00a4"+
		"\2\2\u160b\u160c\5\u029e\u0150\2\u160c\u160e\3\2\2\2\u160d\u1603\3\2\2"+
		"\2\u160d\u1604\3\2\2\2\u160d\u1605\3\2\2\2\u160d\u1608\3\2\2\2\u160e\u160f"+
		"\3\2\2\2\u160f\u1610\7\5\2\2\u1610\u029d\3\2\2\2\u1611\u1616\5\u029a\u014e"+
		"\2\u1612\u1613\7\b\2\2\u1613\u1615\5\u029a\u014e\2\u1614\u1612\3\2\2\2"+
		"\u1615\u1618\3\2\2\2\u1616\u1614\3\2\2\2\u1616\u1617\3\2\2\2\u1617\u029f"+
		"\3\2\2\2\u1618\u1616\3\2\2\2\u1619\u161a\5\u0552\u02aa\2\u161a\u161b\5"+
		"\u029c\u014f\2\u161b\u02a1\3\2\2\2\u161c\u1621\5\u02a0\u0151\2\u161d\u161e"+
		"\7\b\2\2\u161e\u1620\5\u02a0\u0151\2\u161f\u161d\3\2\2\2\u1620\u1623\3"+
		"\2\2\2\u1621\u161f\3\2\2\2\u1621\u1622\3\2\2\2\u1622\u02a3\3\2\2\2\u1623"+
		"\u1621\3\2\2\2\u1624\u1626\5\u02a8\u0155\2\u1625\u1624\3\2\2\2\u1626\u1627"+
		"\3\2\2\2\u1627\u1625\3\2\2\2\u1627\u1628\3\2\2\2\u1628\u1629\3\2\2\2\u1629"+
		"\u162a\b\u0153\1\2\u162a\u02a5\3\2\2\2\u162b\u162c\7\u00a6\2\2\u162c\u162d"+
		"\7]\2\2\u162d\u162e\7[\2\2\u162e\u164f\7\u01d3\2\2\u162f\u1630\7\u0144"+
		"\2\2\u1630\u1631\7[\2\2\u1631\u1632\7]\2\2\u1632\u1633\7[\2\2\u1633\u164f"+
		"\7\u01d3\2\2\u1634\u164f\7\u0162\2\2\u1635\u164f\7\u00ef\2\2\u1636\u164f"+
		"\7\u015a\2\2\u1637\u164f\7\u0181\2\2\u1638\u1639\7\u00de\2\2\u1639\u163a"+
		"\7\u014f\2\2\u163a\u164f\7\u00c6\2\2\u163b\u163c\7\u00de\2\2\u163c\u163d"+
		"\7\u014f\2\2\u163d\u164f\7\u00fb\2\2\u163e\u163f\7\u014f\2\2\u163f\u164f"+
		"\7\u00c6\2\2\u1640\u1641\7\u014f\2\2\u1641\u164f\7\u00fb\2\2\u1642\u164f"+
		"\7\u0102\2\2\u1643\u1644\7Z\2\2\u1644\u164f\7\u0102\2\2\u1645\u1646\7"+
		"\u00bb\2\2\u1646\u164f\5\u0134\u009b\2\u1647\u1648\7\u0148\2\2\u1648\u164f"+
		"\5\u0134\u009b\2\u1649\u164a\7\u01d4\2\2\u164a\u164f\5\u0222\u0112\2\u164b"+
		"\u164f\5`\61\2\u164c\u164d\7\u01d5\2\2\u164d\u164f\5\u056c\u02b7\2\u164e"+
		"\u162b\3\2\2\2\u164e\u162f\3\2\2\2\u164e\u1634\3\2\2\2\u164e\u1635\3\2"+
		"\2\2\u164e\u1636\3\2\2\2\u164e\u1637\3\2\2\2\u164e\u1638\3\2\2\2\u164e"+
		"\u163b\3\2\2\2\u164e\u163e\3\2\2\2\u164e\u1640\3\2\2\2\u164e\u1642\3\2"+
		"\2\2\u164e\u1643\3\2\2\2\u164e\u1645\3\2\2\2\u164e\u1647\3\2\2\2\u164e"+
		"\u1649\3\2\2\2\u164e\u164b\3\2\2\2\u164e\u164c\3\2\2\2\u164f\u02a7\3\2"+
		"\2\2\u1650\u1651\7\'\2\2\u1651\u1659\5\u02aa\u0156\2\u1652\u1653\7\u00ff"+
		"\2\2\u1653\u1659\5V,\2\u1654\u1655\7\u01c4\2\2\u1655\u1659\5\u02ac\u0157"+
		"\2\u1656\u1659\7y\2\2\u1657\u1659\5\u02a6\u0154\2\u1658\u1650\3\2\2\2"+
		"\u1658\u1652\3\2\2\2\u1658\u1654\3\2\2\2\u1658\u1656\3\2\2\2\u1658\u1657"+
		"\3\2\2\2\u1659\u02a9\3\2\2\2\u165a\u1660\5\u055e\u02b0\2\u165b\u165c\5"+
		"\u055e\u02b0\2\u165c\u165d\7\b\2\2\u165d\u165e\5\u055e\u02b0\2\u165e\u1660"+
		"\3\2\2\2\u165f\u165a\3\2\2\2\u165f\u165b\3\2\2\2\u1660\u02ab\3\2\2\2\u1661"+
		"\u1662\7F\2\2\u1662\u1663\7\u0170\2\2\u1663\u166a\5\u0470\u0239\2\u1664"+
		"\u1665\7\b\2\2\u1665\u1666\7F\2\2\u1666\u1667\7\u0170\2\2\u1667\u1669"+
		"\5\u0470\u0239\2\u1668\u1664\3\2\2\2\u1669\u166c\3\2\2\2\u166a\u1668\3"+
		"\2\2\2\u166a\u166b\3\2\2\2\u166b\u02ad\3\2\2\2\u166c\u166a\3\2\2\2\u166d"+
		"\u166e\7z\2\2\u166e\u1671\5\u01e2\u00f2\2\u166f\u1671\3\2\2\2\u1670\u166d"+
		"\3\2\2\2\u1670\u166f\3\2\2\2\u1671\u02af\3\2\2\2\u1672\u1673\5\u0292\u014a"+
		"\2\u1673\u1674\5\u0296\u014c\2\u1674\u02b1\3\2\2\2\u1675\u167a\5\u02b0"+
		"\u0159\2\u1676\u1677\7\b\2\2\u1677\u1679\5\u02b0\u0159\2\u1678\u1676\3"+
		"\2\2\2\u1679\u167c\3\2\2\2\u167a\u1678\3\2\2\2\u167a\u167b\3\2\2\2\u167b"+
		"\u02b3\3\2\2\2\u167c\u167a\3\2\2\2\u167d\u167e\7\u009b\2\2\u167e\u167f"+
		"\t\35\2\2\u167f\u1680\5\u0288\u0145\2\u1680\u1681\5\u02b6\u015c\2\u1681"+
		"\u1682\5\u02b8\u015d\2\u1682\u02b5\3\2\2\2\u1683\u1685\5\u02a6\u0154\2"+
		"\u1684\u1683\3\2\2\2\u1685\u1686\3\2\2\2\u1686\u1684\3\2\2\2\u1686\u1687"+
		"\3\2\2\2\u1687\u02b7\3\2\2\2\u1688\u168b\7\u0143\2\2\u1689\u168b\3\2\2"+
		"\2\u168a\u1688\3\2\2\2\u168a\u1689\3\2\2\2\u168b\u02b9\3\2\2\2\u168c\u168d"+
		"\7\u00d0\2\2\u168d\u168e\7\u00e4\2\2\u168e\u168f\5\u0286\u0144\2\u168f"+
		"\u1690\5|?\2\u1690\u16b1\3\2\2\2\u1691\u1692\7\u00d0\2\2\u1692\u1693\7"+
		"\u00e4\2\2\u1693\u1694\7\u00ed\2\2\u1694\u1695\7\u0194\2\2\u1695\u1696"+
		"\5\u0286\u0144\2\u1696\u1697\5|?\2\u1697\u16b1\3\2\2\2\u1698\u1699\7\u00d0"+
		"\2\2\u1699\u169a\7\u0130\2\2\u169a\u169b\5\u0286\u0144\2\u169b\u169c\5"+
		"|?\2\u169c\u16b1\3\2\2\2\u169d\u169e\7\u00d0\2\2\u169e\u169f\7\u0130\2"+
		"\2\u169f\u16a0\7\u00ed\2\2\u16a0\u16a1\7\u0194\2\2\u16a1\u16a2\5\u0286"+
		"\u0144\2\u16a2\u16a3\5|?\2\u16a3\u16b1\3\2\2\2\u16a4\u16a5\7\u00d0\2\2"+
		"\u16a5\u16a6\7\u01c3\2\2\u16a6\u16a7\5\u0286\u0144\2\u16a7\u16a8\5|?\2"+
		"\u16a8\u16b1\3\2\2\2\u16a9\u16aa\7\u00d0\2\2\u16aa\u16ab\7\u01c3\2\2\u16ab"+
		"\u16ac\7\u00ed\2\2\u16ac\u16ad\7\u0194\2\2\u16ad\u16ae\5\u0286\u0144\2"+
		"\u16ae\u16af\5|?\2\u16af\u16b1\3\2\2\2\u16b0\u168c\3\2\2\2\u16b0\u1691"+
		"\3\2\2\2\u16b0\u1698\3\2\2\2\u16b0\u169d\3\2\2\2\u16b0\u16a4\3\2\2\2\u16b0"+
		"\u16a9\3\2\2\2\u16b1\u02bb\3\2\2\2\u16b2\u16b3\7\u00d0\2\2\u16b3\u16b4"+
		"\7\u0099\2\2\u16b4\u16b5\5\u02a2\u0152\2\u16b5\u16b6\5|?\2\u16b6\u16bf"+
		"\3\2\2\2\u16b7\u16b8\7\u00d0\2\2\u16b8\u16b9\7\u0099\2\2\u16b9\u16ba\7"+
		"\u00ed\2\2\u16ba\u16bb\7\u0194\2\2\u16bb\u16bc\5\u02a2\u0152\2\u16bc\u16bd"+
		"\5|?\2\u16bd\u16bf\3\2\2\2\u16be\u16b2\3\2\2\2\u16be\u16b7\3\2\2\2\u16bf"+
		"\u02bd\3\2\2\2\u16c0\u16c1\7\u00d0\2\2\u16c1\u16c2\7\u011e\2\2\u16c2\u16c3"+
		"\5\u02c4\u0163\2\u16c3\u16c4\5|?\2\u16c4\u16cd\3\2\2\2\u16c5\u16c6\7\u00d0"+
		"\2\2\u16c6\u16c7\7\u011e\2\2\u16c7\u16c8\7\u00ed\2\2\u16c8\u16c9\7\u0194"+
		"\2\2\u16c9\u16ca\5\u02c4\u0163\2\u16ca\u16cb\5|?\2\u16cb\u16cd\3\2\2\2"+
		"\u16cc\u16c0\3\2\2\2\u16cc\u16c5\3\2\2\2\u16cd\u02bf\3\2\2\2\u16ce\u16cf"+
		"\7\4\2\2\u16cf\u16d0\5\u0470\u0239\2\u16d0\u16d1\7\5\2\2\u16d1\u16e5\3"+
		"\2\2\2\u16d2\u16d3\7\4\2\2\u16d3\u16d4\5\u0470\u0239\2\u16d4\u16d5\7\b"+
		"\2\2\u16d5\u16d6\5\u0470\u0239\2\u16d6\u16d7\7\5\2\2\u16d7\u16e5\3\2\2"+
		"\2\u16d8\u16d9\7\4\2\2\u16d9\u16da\7\u019f\2\2\u16da\u16db\7\b\2\2\u16db"+
		"\u16dc\5\u0470\u0239\2\u16dc\u16dd\7\5\2\2\u16dd\u16e5\3\2\2\2\u16de\u16df"+
		"\7\4\2\2\u16df\u16e0\5\u0470\u0239\2\u16e0\u16e1\7\b\2\2\u16e1\u16e2\7"+
		"\u019f\2\2\u16e2\u16e3\7\5\2\2\u16e3\u16e5\3\2\2\2\u16e4\u16ce\3\2\2\2"+
		"\u16e4\u16d2\3\2\2\2\u16e4\u16d8\3\2\2\2\u16e4\u16de\3\2\2\2\u16e5\u02c1"+
		"\3\2\2\2\u16e6\u16e7\5\u056c\u02b7\2\u16e7\u16e8\7\r\2\2\u16e8\u16ea\3"+
		"\2\2\2\u16e9\u16e6\3\2\2\2\u16ea\u16ed\3\2\2\2\u16eb\u16e9\3\2\2\2\u16eb"+
		"\u16ec\3\2\2\2\u16ec\u16ee\3\2\2\2\u16ed\u16eb\3\2\2\2\u16ee\u16ef\5\u0506"+
		"\u0284\2\u16ef\u02c3\3\2\2\2\u16f0\u16f5\5\u02c6\u0164\2\u16f1\u16f2\7"+
		"\b\2\2\u16f2\u16f4\5\u02c6\u0164\2\u16f3\u16f1\3\2\2\2\u16f4\u16f7\3\2"+
		"\2\2\u16f5\u16f3\3\2\2\2\u16f5\u16f6\3\2\2\2\u16f6\u02c5\3\2\2\2\u16f7"+
		"\u16f5\3\2\2\2\u16f8\u16f9\5\u02c2\u0162\2\u16f9\u16fa\5\u02c0\u0161\2"+
		"\u16fa\u02c7\3\2\2\2\u16fb\u16fc\7A\2\2\u16fc\u16fd\5\u02ca\u0166\2\u16fd"+
		"\u02c9\3\2\2\2\u16fe\u1700\5\u02cc\u0167\2\u16ff\u16fe\3\2\2\2\u1700\u1701"+
		"\3\2\2\2\u1701\u16ff\3\2\2\2\u1701\u1702\3\2\2\2\u1702\u02cb\3\2\2\2\u1703"+
		"\u1707\5\u055e\u02b0\2\u1704\u1705\7\u00ff\2\2\u1705\u1707\5V,\2\u1706"+
		"\u1703\3\2\2\2\u1706\u1704\3\2\2\2\u1707\u02cd\3\2\2\2\u1708\u1709\7\66"+
		"\2\2\u1709\u170a\7\60\2\2\u170a\u170b\7\4\2\2\u170b\u170c\5\u0470\u0239"+
		"\2\u170c\u170d\7\'\2\2\u170d\u170e\5\u0470\u0239\2\u170e\u170f\7\5\2\2"+
		"\u170f\u1710\7z\2\2\u1710\u1711\7\u00e4\2\2\u1711\u1712\5\u0288\u0145"+
		"\2\u1712\u1713\5\u02d0\u0169\2\u1713\u172b\3\2\2\2\u1714\u1715\7\66\2"+
		"\2\u1715\u1716\7\60\2\2\u1716\u1717\7\4\2\2\u1717\u1718\5\u0470\u0239"+
		"\2\u1718\u1719\7\'\2\2\u1719\u171a\5\u0470\u0239\2\u171a\u171b\7\5\2\2"+
		"\u171b\u171c\7\u0183\2\2\u171c\u171d\7\u00e4\2\2\u171d\u171e\5\u02d0\u0169"+
		"\2\u171e\u172b\3\2\2\2\u171f\u1720\7\66\2\2\u1720\u1721\7\60\2\2\u1721"+
		"\u1722\7\4\2\2\u1722\u1723\5\u0470\u0239\2\u1723\u1724\7\'\2\2\u1724\u1725"+
		"\5\u0470\u0239\2\u1725\u1726\7\5\2\2\u1726\u1727\7z\2\2\u1727\u1728\7"+
		"\u0198\2\2\u1728\u1729\5\u02d0\u0169\2\u1729\u172b\3\2\2\2\u172a\u1708"+
		"\3\2\2\2\u172a\u1714\3\2\2\2\u172a\u171f\3\2\2\2\u172b\u02cf\3\2\2\2\u172c"+
		"\u172d\7\'\2\2\u172d\u1732\7\u00f0\2\2\u172e\u172f\7\'\2\2\u172f\u1732"+
		"\7\u009e\2\2\u1730\u1732\3\2\2\2\u1731\u172c\3\2\2\2\u1731\u172e\3\2\2"+
		"\2\u1731\u1730\3\2\2\2\u1732\u02d1\3\2\2\2\u1733\u1734\7\u00d0\2\2\u1734"+
		"\u1735\7\60\2\2\u1735\u1736\5\u02d4\u016b\2\u1736\u1737\7\4\2\2\u1737"+
		"\u1738\5\u0470\u0239\2\u1738\u1739\7\'\2\2\u1739\u173a\5\u0470\u0239\2"+
		"\u173a\u173b\7\5\2\2\u173b\u173c\5|?\2\u173c\u02d3\3\2\2\2\u173d\u173e"+
		"\7\u00ed\2\2\u173e\u1741\7\u0194\2\2\u173f\u1741\3\2\2\2\u1740\u173d\3"+
		"\2\2\2\u1740\u173f\3\2\2\2\u1741\u02d5\3\2\2\2\u1742\u1743\7\66\2\2\u1743"+
		"\u1744\5\u0280\u0141\2\u1744\u1745\7\u01c4\2\2\u1745\u1746\7F\2\2\u1746"+
		"\u1747\5\u0470\u0239\2\u1747\u1748\7\u00ff\2\2\u1748\u1749\5\u054c\u02a7"+
		"\2\u1749\u174a\7\4\2\2\u174a\u174b\5\u02d8\u016d\2\u174b\u174c\7\5\2\2"+
		"\u174c\u02d7\3\2\2\2\u174d\u174e\7H\2\2\u174e\u174f\7\u01d6\2\2\u174f"+
		"\u1750\7z\2\2\u1750\u1751\7\u00e4\2\2\u1751\u1752\5\u0288\u0145\2\u1752"+
		"\u1753\7\b\2\2\u1753\u1754\7n\2\2\u1754\u1755\7\u01d6\2\2\u1755\u1756"+
		"\7z\2\2\u1756\u1757\7\u00e4\2\2\u1757\u1758\5\u0288\u0145\2\u1758\u1770"+
		"\3\2\2\2\u1759\u175a\7n\2\2\u175a\u175b\7\u01d6\2\2\u175b\u175c\7z\2\2"+
		"\u175c\u175d\7\u00e4\2\2\u175d\u175e\5\u0288\u0145\2\u175e\u175f\7\b\2"+
		"\2\u175f\u1760\7H\2\2\u1760\u1761\7\u01d6\2\2\u1761\u1762\7z\2\2\u1762"+
		"\u1763\7\u00e4\2\2\u1763\u1764\5\u0288\u0145\2\u1764\u1770\3\2\2\2\u1765"+
		"\u1766\7H\2\2\u1766\u1767\7\u01d6\2\2\u1767\u1768\7z\2\2\u1768\u1769\7"+
		"\u00e4\2\2\u1769\u1770\5\u0288\u0145\2\u176a\u176b\7n\2\2\u176b\u176c"+
		"\7\u01d6\2\2\u176c\u176d\7z\2\2\u176d\u176e\7\u00e4\2\2\u176e\u1770\5"+
		"\u0288\u0145\2\u176f\u174d\3\2\2\2\u176f\u1759\3\2\2\2\u176f\u1765\3\2"+
		"\2\2\u176f\u176a\3\2\2\2\u1770\u02d9\3\2\2\2\u1771\u1772\7\u00d0\2\2\u1772"+
		"\u1773\7\u01c4\2\2\u1773\u1774\5\u02d4\u016b\2\u1774\u1775\7F\2\2\u1775"+
		"\u1776\5\u0470\u0239\2\u1776\u1777\7\u00ff\2\2\u1777\u1778\5\u054c\u02a7"+
		"\2\u1778\u1779\5|?\2\u1779\u02db\3\2\2\2\u177a\u177b\7\u013a\2\2\u177b"+
		"\u177c\5\u02de\u0170\2\u177c\u177d\5\u0266\u0134\2\u177d\u177e\5\u0548"+
		"\u02a5\2\u177e\u1795\3\2\2\2\u177f\u1780\7\u013a\2\2\u1780\u1781\5\u02e0"+
		"\u0171\2\u1781\u1782\5\u0266\u0134\2\u1782\u1783\5\u054c\u02a7\2\u1783"+
		"\u1795\3\2\2\2\u1784\u1785\7\u013a\2\2\u1785\u1786\7\4\2\2\u1786\u1787"+
		"\5\u02e2\u0172\2\u1787\u1788\7\5\2\2\u1788\u1789\5\u02de\u0170\2\u1789"+
		"\u178a\5\u0266\u0134\2\u178a\u178b\5\u0548\u02a5\2\u178b\u1795\3\2\2\2"+
		"\u178c\u178d\7\u013a\2\2\u178d\u178e\7\4\2\2\u178e\u178f\5\u02e2\u0172"+
		"\2\u178f\u1790\7\5\2\2\u1790\u1791\5\u02e0\u0171\2\u1791\u1792\5\u0266"+
		"\u0134\2\u1792\u1793\5\u054c\u02a7\2\u1793\u1795\3\2\2\2\u1794\u177a\3"+
		"\2\2\2\u1794\u177f\3\2\2\2\u1794\u1784\3\2\2\2\u1794\u178c\3\2\2\2\u1795"+
		"\u02dd\3\2\2\2\u1796\u1797\t\24\2\2\u1797\u02df\3\2\2\2\u1798\u1799\t"+
		"\36\2\2\u1799\u02e1\3\2\2\2\u179a\u179f\5\u02e4\u0173\2\u179b\u179c\7"+
		"\b\2\2\u179c\u179e\5\u02e4\u0173\2\u179d\u179b\3\2\2\2\u179e\u17a1\3\2"+
		"\2\2\u179f\u179d\3\2\2\2\u179f\u17a0\3\2\2\2\u17a0\u02e3\3\2\2\2\u17a1"+
		"\u179f\3\2\2\2\u17a2\u17a3\7\u0091\2\2\u17a3\u02e5\3\2\2\2\u17a4\u17a5"+
		"\7\66\2\2\u17a5\u17a6\7\64\2\2\u17a6\u17a7\5\u0548\u02a5\2\u17a7\u17a8"+
		"\7]\2\2\u17a8\u17a9\7U\2\2\u17a9\u17aa\5\u0548\u02a5\2\u17aa\u17ab\5."+
		"\30\2\u17ab\u17b2\7\'\2\2\u17ac\u17ad\7/\2\2\u17ad\u17ae\7\37\2\2\u17ae"+
		"\u17af\7\n\2\2\u17af\u17b1\5\u049c\u024f\2\u17b0\u17ac\3\2\2\2\u17b1\u17b4"+
		"\3\2\2\2\u17b2\u17b0\3\2\2\2\u17b2\u17b3\3\2\2\2\u17b3\u17b5\3\2\2\2\u17b4"+
		"\u17b2\3\2\2\2\u17b5\u17b6\7b\2\2\u17b6\u17b7\7\37\2\2\u17b7\u02e7\3\2"+
		"\2\2\u17b8\u17b9\7\u009b\2\2\u17b9\u17ba\7\u0167\2\2\u17ba\u17bb\5\u054c"+
		"\u02a7\2\u17bb\u17bc\7\u0155\2\2\u17bc\u17bd\5\u0084C\2\u17bd\u17c5\3"+
		"\2\2\2\u17be\u17bf\7\u009b\2\2\u17bf\u17c0\7\u0167\2\2\u17c0\u17c1\5\u054c"+
		"\u02a7\2\u17c1\u17c2\7\u0141\2\2\u17c2\u17c3\5\u0084C\2\u17c3\u17c5\3"+
		"\2\2\2\u17c4\u17b8\3\2\2\2\u17c4\u17be\3\2\2\2\u17c5\u02e9\3\2\2\2\u17c6"+
		"\u17c7\7\u009b\2\2\u17c7\u17c8\7\u0099\2\2\u17c8\u17c9\5\u02a0\u0151\2"+
		"\u17c9\u17ca\7\u013d\2\2\u17ca\u17cb\7n\2\2\u17cb\u17cc\5\u054c\u02a7"+
		"\2\u17cc\u199b\3\2\2\2\u17cd\u17ce\7\u009b\2\2\u17ce\u17cf\7}\2\2\u17cf"+
		"\u17d0\5\u0222\u0112\2\u17d0\u17d1\7\u013d\2\2\u17d1\u17d2\7n\2\2\u17d2"+
		"\u17d3\5\u054c\u02a7\2\u17d3\u199b\3\2\2\2\u17d4\u17d5\7\u009b\2\2\u17d5"+
		"\u17d6\7\u00b9\2\2\u17d6\u17d7\5\u0222\u0112\2\u17d7\u17d8\7\u013d\2\2"+
		"\u17d8\u17d9\7n\2\2\u17d9\u17da\5\u054c\u02a7\2\u17da\u199b\3\2\2\2\u17db"+
		"\u17dc\7\u009b\2\2\u17dc\u17dd\7\u00c0\2\2\u17dd\u17de\5\u054c\u02a7\2"+
		"\u17de\u17df\7\u013d\2\2\u17df\u17e0\7n\2\2\u17e0\u17e1\5\u054c\u02a7"+
		"\2\u17e1\u199b\3\2\2\2\u17e2\u17e3\7\u009b\2\2\u17e3\u17e4\7\u00ce\2\2"+
		"\u17e4\u17e5\5\u0222\u0112\2\u17e5\u17e6\7\u013d\2\2\u17e6\u17e7\7n\2"+
		"\2\u17e7\u17e8\5\u054c\u02a7\2\u17e8\u199b\3\2\2\2\u17e9\u17ea\7\u009b"+
		"\2\2\u17ea\u17eb\7\u00ce\2\2\u17eb\u17ec\5\u0222\u0112\2\u17ec\u17ed\7"+
		"\u013d\2\2\u17ed\u17ee\7\65\2\2\u17ee\u17ef\5\u054c\u02a7\2\u17ef\u17f0"+
		"\7n\2\2\u17f0\u17f1\5\u054c\u02a7\2\u17f1\u199b\3\2\2\2\u17f2\u17f3\7"+
		"\u009b\2\2\u17f3\u17f4\7G\2\2\u17f4\u17f5\7\u00bf\2\2\u17f5\u17f6\7\u0185"+
		"\2\2\u17f6\u17f7\5\u054c\u02a7\2\u17f7\u17f8\7\u013d\2\2\u17f8\u17f9\7"+
		"n\2\2\u17f9\u17fa\5\u054c\u02a7\2\u17fa\u199b\3\2\2\2\u17fb\u17fc\7\u009b"+
		"\2\2\u17fc\u17fd\7\u00e4\2\2\u17fd\u17fe\5\u0288\u0145\2\u17fe\u17ff\7"+
		"\u013d\2\2\u17ff\u1800\7n\2\2\u1800\u1801\5\u054c\u02a7\2\u1801\u199b"+
		"\3\2\2\2\u1802\u1803\7\u009b\2\2\u1803\u1804\7J\2\2\u1804\u1805\5\u0566"+
		"\u02b4\2\u1805\u1806\7\u013d\2\2\u1806\u1807\7n\2\2\u1807\u1808\5\u0566"+
		"\u02b4\2\u1808\u199b\3\2\2\2\u1809\u180a\7\u009b\2\2\u180a\u180b\5\u0144"+
		"\u00a3\2\u180b\u180c\7\u00ff\2\2\u180c\u180d\5\u054c\u02a7\2\u180d\u180e"+
		"\7\u013d\2\2\u180e\u180f\7n\2\2\u180f\u1810\5\u054c\u02a7\2\u1810\u199b"+
		"\3\2\2\2\u1811\u1812\7\u009b\2\2\u1812\u1813\7\u011e\2\2\u1813\u1814\7"+
		"\u00ad\2\2\u1814\u1815\5\u0222\u0112\2\u1815\u1816\7u\2\2\u1816\u1817"+
		"\5\u054c\u02a7\2\u1817\u1818\7\u013d\2\2\u1818\u1819\7n\2\2\u1819\u181a"+
		"\5\u054c\u02a7\2\u181a\u199b\3\2\2\2\u181b\u181c\7\u009b\2\2\u181c\u181d"+
		"\7\u011e\2\2\u181d\u181e\7\u00df\2\2\u181e\u181f\5\u0222\u0112\2\u181f"+
		"\u1820\7u\2\2\u1820\u1821\5\u054c\u02a7\2\u1821\u1822\7\u013d\2\2\u1822"+
		"\u1823\7n\2\2\u1823\u1824\5\u054c\u02a7\2\u1824\u199b\3\2\2\2\u1825\u1826"+
		"\7\u009b\2\2\u1826\u1827\7\u01c6\2\2\u1827\u1828\5\u054c\u02a7\2\u1828"+
		"\u1829\7]\2\2\u1829\u182a\5\u0548\u02a5\2\u182a\u182b\7\u013d\2\2\u182b"+
		"\u182c\7n\2\2\u182c\u182d\5\u054c\u02a7\2\u182d\u199b\3\2\2\2\u182e\u182f"+
		"\7\u009b\2\2\u182f\u1830\7\u01c6\2\2\u1830\u1831\7\u00ed\2\2\u1831\u1832"+
		"\7\u0194\2\2\u1832\u1833\5\u054c\u02a7\2\u1833\u1834\7]\2\2\u1834\u1835"+
		"\5\u0548\u02a5\2\u1835\u1836\7\u013d\2\2\u1836\u1837\7n\2\2\u1837\u1838"+
		"\5\u054c\u02a7\2\u1838\u199b\3\2\2\2\u1839\u183a\7\u009b\2\2\u183a\u183b"+
		"\7\u0130\2\2\u183b\u183c\5\u0288\u0145\2\u183c\u183d\7\u013d\2\2\u183d"+
		"\u183e\7n\2\2\u183e\u183f\5\u054c\u02a7\2\u183f\u199b\3\2\2\2\u1840\u1841"+
		"\7\u009b\2\2\u1841\u1842\7\u01cd\2\2\u1842\u1843\5\u054c\u02a7\2\u1843"+
		"\u1844\7\u013d\2\2\u1844\u1845\7n\2\2\u1845\u1846\5\u054c\u02a7\2\u1846"+
		"\u199b\3\2\2\2\u1847\u1848\7\u009b\2\2\u1848\u1849\7\u01c3\2\2\u1849\u184a"+
		"\5\u0288\u0145\2\u184a\u184b\7\u013d\2\2\u184b\u184c\7n\2\2\u184c\u184d"+
		"\5\u054c\u02a7\2\u184d\u199b\3\2\2\2\u184e\u184f\7\u009b\2\2\u184f\u1850"+
		"\7\u014b\2\2\u1850\u1851\5\u054c\u02a7\2\u1851\u1852\7\u013d\2\2\u1852"+
		"\u1853\7n\2\2\u1853\u1854\5\u054c\u02a7\2\u1854\u199b\3\2\2\2\u1855\u1856"+
		"\7\u009b\2\2\u1856\u1857\7\u0153\2\2\u1857\u1858\5\u054c\u02a7\2\u1858"+
		"\u1859\7\u013d\2\2\u1859\u185a\7n\2\2\u185a\u185b\5\u054c\u02a7\2\u185b"+
		"\u199b\3\2\2\2\u185c\u185d\7\u009b\2\2\u185d\u185e\7\u01cc\2\2\u185e\u185f"+
		"\5\u054c\u02a7\2\u185f\u1860\7\u013d\2\2\u1860\u1861\7n\2\2\u1861\u1862"+
		"\5\u054c\u02a7\2\u1862\u199b\3\2\2\2\u1863\u1864\7\u009b\2\2\u1864\u1865"+
		"\7l\2\2\u1865\u1866\5\u0444\u0223\2\u1866\u1867\7\u013d\2\2\u1867\u1868"+
		"\7n\2\2\u1868\u1869\5\u054c\u02a7\2\u1869\u199b\3\2\2\2\u186a\u186b\7"+
		"\u009b\2\2\u186b\u186c\7l\2\2\u186c\u186d\7\u00ed\2\2\u186d\u186e\7\u0194"+
		"\2\2\u186e\u186f\5\u0444\u0223\2\u186f\u1870\7\u013d\2\2\u1870\u1871\7"+
		"n\2\2\u1871\u1872\5\u054c\u02a7\2\u1872\u199b\3\2\2\2\u1873\u1874\7\u009b"+
		"\2\2\u1874\u1875\7\u0150\2\2\u1875\u1876\5\u0548\u02a5\2\u1876\u1877\7"+
		"\u013d\2\2\u1877\u1878\7n\2\2\u1878\u1879\5\u054c\u02a7\2\u1879\u199b"+
		"\3\2\2\2\u187a\u187b\7\u009b\2\2\u187b\u187c\7\u0150\2\2\u187c\u187d\7"+
		"\u00ed\2\2\u187d\u187e\7\u0194\2\2\u187e\u187f\5\u0548\u02a5\2\u187f\u1880"+
		"\7\u013d\2\2\u1880\u1881\7n\2\2\u1881\u1882\5\u054c\u02a7\2\u1882\u199b"+
		"\3\2\2\2\u1883\u1884\7\u009b\2\2\u1884\u1885\7\u0180\2\2\u1885\u1886\5"+
		"\u0548\u02a5\2\u1886\u1887\7\u013d\2\2\u1887\u1888\7n\2\2\u1888\u1889"+
		"\5\u054c\u02a7\2\u1889\u199b\3\2\2\2\u188a\u188b\7\u009b\2\2\u188b\u188c"+
		"\7\u0180\2\2\u188c\u188d\7\u00ed\2\2\u188d\u188e\7\u0194\2\2\u188e\u188f"+
		"\5\u0548\u02a5\2\u188f\u1890\7\u013d\2\2\u1890\u1891\7n\2\2\u1891\u1892"+
		"\5\u054c\u02a7\2\u1892\u199b\3\2\2\2\u1893\u1894\7\u009b\2\2\u1894\u1895"+
		"\7\u010b\2\2\u1895\u1896\7\u0180\2\2\u1896\u1897\5\u0548\u02a5\2\u1897"+
		"\u1898\7\u013d\2\2\u1898\u1899\7n\2\2\u1899\u189a\5\u054c\u02a7\2\u189a"+
		"\u199b\3\2\2\2\u189b\u189c\7\u009b\2\2\u189c\u189d\7\u010b\2\2\u189d\u189e"+
		"\7\u0180\2\2\u189e\u189f\7\u00ed\2\2\u189f\u18a0\7\u0194\2\2\u18a0\u18a1"+
		"\5\u0548\u02a5\2\u18a1\u18a2\7\u013d\2\2\u18a2\u18a3\7n\2\2\u18a3\u18a4"+
		"\5\u054c\u02a7\2\u18a4\u199b\3\2\2\2\u18a5\u18a6\7\u009b\2\2\u18a6\u18a7"+
		"\7\u00f3\2\2\u18a7\u18a8\5\u0548\u02a5\2\u18a8\u18a9\7\u013d\2\2\u18a9"+
		"\u18aa\7n\2\2\u18aa\u18ab\5\u054c\u02a7\2\u18ab\u199b\3\2\2\2\u18ac\u18ad"+
		"\7\u009b\2\2\u18ad\u18ae\7\u00f3\2\2\u18ae\u18af\7\u00ed\2\2\u18af\u18b0"+
		"\7\u0194\2\2\u18b0\u18b1\5\u0548\u02a5\2\u18b1\u18b2\7\u013d\2\2\u18b2"+
		"\u18b3\7n\2\2\u18b3\u18b4\5\u054c\u02a7\2\u18b4\u199b\3\2\2\2\u18b5\u18b6"+
		"\7\u009b\2\2\u18b6\u18b7\7G\2\2\u18b7\u18b8\7l\2\2\u18b8\u18b9\5\u0444"+
		"\u0223\2\u18b9\u18ba\7\u013d\2\2\u18ba\u18bb\7n\2\2\u18bb\u18bc\5\u054c"+
		"\u02a7\2\u18bc\u199b\3\2\2\2\u18bd\u18be\7\u009b\2\2\u18be\u18bf\7G\2"+
		"\2\u18bf\u18c0\7l\2\2\u18c0\u18c1\7\u00ed\2\2\u18c1\u18c2\7\u0194\2\2"+
		"\u18c2\u18c3\5\u0444\u0223\2\u18c3\u18c4\7\u013d\2\2\u18c4\u18c5\7n\2"+
		"\2\u18c5\u18c6\5\u054c\u02a7\2\u18c6\u199b\3\2\2\2\u18c7\u18c8\7\u009b"+
		"\2\2\u18c8\u18c9\7l\2\2\u18c9\u18ca\5\u0444\u0223\2\u18ca\u18cb\7\u013d"+
		"\2\2\u18cb\u18cc\5\u02ec\u0177\2\u18cc\u18cd\5\u054c\u02a7\2\u18cd\u18ce"+
		"\7n\2\2\u18ce\u18cf\5\u054c\u02a7\2\u18cf\u199b\3\2\2\2\u18d0\u18d1\7"+
		"\u009b\2\2\u18d1\u18d2\7l\2\2\u18d2\u18d3\7\u00ed\2\2\u18d3\u18d4\7\u0194"+
		"\2\2\u18d4\u18d5\5\u0444\u0223\2\u18d5\u18d6\7\u013d\2\2\u18d6\u18d7\5"+
		"\u02ec\u0177\2\u18d7\u18d8\5\u054c\u02a7\2\u18d8\u18d9\7n\2\2\u18d9\u18da"+
		"\5\u054c\u02a7\2\u18da\u199b\3\2\2\2\u18db\u18dc\7\u009b\2\2\u18dc\u18dd"+
		"\7\u0180\2\2\u18dd\u18de\5\u0548\u02a5\2\u18de\u18df\7\u013d\2\2\u18df"+
		"\u18e0\5\u02ec\u0177\2\u18e0\u18e1\5\u054c\u02a7\2\u18e1\u18e2\7n\2\2"+
		"\u18e2\u18e3\5\u054c\u02a7\2\u18e3\u199b\3\2\2\2\u18e4\u18e5\7\u009b\2"+
		"\2\u18e5\u18e6\7\u0180\2\2\u18e6\u18e7\7\u00ed\2\2\u18e7\u18e8\7\u0194"+
		"\2\2\u18e8\u18e9\5\u0548\u02a5\2\u18e9\u18ea\7\u013d\2\2\u18ea\u18eb\5"+
		"\u02ec\u0177\2\u18eb\u18ec\5\u054c\u02a7\2\u18ec\u18ed\7n\2\2\u18ed\u18ee"+
		"\5\u054c\u02a7\2\u18ee\u199b\3\2\2\2\u18ef\u18f0\7\u009b\2\2\u18f0\u18f1"+
		"\7\u010b\2\2\u18f1\u18f2\7\u0180\2\2\u18f2\u18f3\5\u0548\u02a5\2\u18f3"+
		"\u18f4\7\u013d\2\2\u18f4\u18f5\5\u02ec\u0177\2\u18f5\u18f6\5\u054c\u02a7"+
		"\2\u18f6\u18f7\7n\2\2\u18f7\u18f8\5\u054c\u02a7\2\u18f8\u199b\3\2\2\2"+
		"\u18f9\u18fa\7\u009b\2\2\u18fa\u18fb\7\u010b\2\2\u18fb\u18fc\7\u0180\2"+
		"\2\u18fc\u18fd\7\u00ed\2\2\u18fd\u18fe\7\u0194\2\2\u18fe\u18ff\5\u0548"+
		"\u02a5\2\u18ff\u1900\7\u013d\2\2\u1900\u1901\5\u02ec\u0177\2\u1901\u1902"+
		"\5\u054c\u02a7\2\u1902\u1903\7n\2\2\u1903\u1904\5\u054c\u02a7\2\u1904"+
		"\u199b\3\2\2\2\u1905\u1906\7\u009b\2\2\u1906\u1907\7l\2\2\u1907\u1908"+
		"\5\u0444\u0223\2\u1908\u1909\7\u013d\2\2\u1909\u190a\7\65\2\2\u190a\u190b"+
		"\5\u054c\u02a7\2\u190b\u190c\7n\2\2\u190c\u190d\5\u054c\u02a7\2\u190d"+
		"\u199b\3\2\2\2\u190e\u190f\7\u009b\2\2\u190f\u1910\7l\2\2\u1910\u1911"+
		"\7\u00ed\2\2\u1911\u1912\7\u0194\2\2\u1912\u1913\5\u0444\u0223\2\u1913"+
		"\u1914\7\u013d\2\2\u1914\u1915\7\65\2\2\u1915\u1916\5\u054c\u02a7\2\u1916"+
		"\u1917\7n\2\2\u1917\u1918\5\u054c\u02a7\2\u1918\u199b\3\2\2\2\u1919\u191a"+
		"\7\u009b\2\2\u191a\u191b\7G\2\2\u191b\u191c\7l\2\2\u191c\u191d\5\u0444"+
		"\u0223\2\u191d\u191e\7\u013d\2\2\u191e\u191f\5\u02ec\u0177\2\u191f\u1920"+
		"\5\u054c\u02a7\2\u1920\u1921\7n\2\2\u1921\u1922\5\u054c\u02a7\2\u1922"+
		"\u199b\3\2\2\2\u1923\u1924\7\u009b\2\2\u1924\u1925\7G\2\2\u1925\u1926"+
		"\7l\2\2\u1926\u1927\7\u00ed\2\2\u1927\u1928\7\u0194\2\2\u1928\u1929\5"+
		"\u0444\u0223\2\u1929\u192a\7\u013d\2\2\u192a\u192b\5\u02ec\u0177\2\u192b"+
		"\u192c\5\u054c\u02a7\2\u192c\u192d\7n\2\2\u192d\u192e\5\u054c\u02a7\2"+
		"\u192e\u199b\3\2\2\2\u192f\u1930\7\u009b\2\2\u1930\u1931\7\u0149\2\2\u1931"+
		"\u1932\5\u054c\u02a7\2\u1932\u1933\7]\2\2\u1933\u1934\5\u0548\u02a5\2"+
		"\u1934\u1935\7\u013d\2\2\u1935\u1936\7n\2\2\u1936\u1937\5\u054c\u02a7"+
		"\2\u1937\u199b\3\2\2\2\u1938\u1939\7\u009b\2\2\u1939\u193a\7\u016d\2\2"+
		"\u193a\u193b\5\u054c\u02a7\2\u193b\u193c\7]\2\2\u193c\u193d\5\u0548\u02a5"+
		"\2\u193d\u193e\7\u013d\2\2\u193e\u193f\7n\2\2\u193f\u1940\5\u054c\u02a7"+
		"\2\u1940\u199b\3\2\2\2\u1941\u1942\7\u009b\2\2\u1942\u1943\7\u00d7\2\2"+
		"\u1943\u1944\7\u016d\2\2\u1944\u1945\5\u054c\u02a7\2\u1945\u1946\7\u013d"+
		"\2\2\u1946\u1947\7n\2\2\u1947\u1948\5\u054c\u02a7\2\u1948\u199b\3\2\2"+
		"\2\u1949\u194a\7\u009b\2\2\u194a\u194b\7\u0146\2\2\u194b\u194c\5\u0566"+
		"\u02b4\2\u194c\u194d\7\u013d\2\2\u194d\u194e\7n\2\2\u194e\u194f\5\u0566"+
		"\u02b4\2\u194f\u199b\3\2\2\2\u1950\u1951\7\u009b\2\2\u1951\u1952\7t\2"+
		"\2\u1952\u1953\5\u0566\u02b4\2\u1953\u1954\7\u013d\2\2\u1954\u1955\7n"+
		"\2\2\u1955\u1956\5\u0566\u02b4\2\u1956\u199b\3\2\2\2\u1957\u1958\7\u009b"+
		"\2\2\u1958\u1959\7\u0167\2\2\u1959\u195a\5\u054c\u02a7\2\u195a\u195b\7"+
		"\u013d\2\2\u195b\u195c\7n\2\2\u195c\u195d\5\u054c\u02a7\2\u195d\u199b"+
		"\3\2\2\2\u195e\u195f\7\u009b\2\2\u195f\u1960\7\u015e\2\2\u1960\u1961\5"+
		"\u0222\u0112\2\u1961\u1962\7\u013d\2\2\u1962\u1963\7n\2\2\u1963\u1964"+
		"\5\u054c\u02a7\2\u1964\u199b\3\2\2\2\u1965\u1966\7\u009b\2\2\u1966\u1967"+
		"\7\u016b\2\2\u1967\u1968\7\u014d\2\2\u1968\u1969\7\u0123\2\2\u1969\u196a"+
		"\5\u0222\u0112\2\u196a\u196b\7\u013d\2\2\u196b\u196c\7n\2\2\u196c\u196d"+
		"\5\u054c\u02a7\2\u196d\u199b\3\2\2\2\u196e\u196f\7\u009b\2\2\u196f\u1970"+
		"\7\u016b\2\2\u1970\u1971\7\u014d\2\2\u1971\u1972\7\u00ca\2\2\u1972\u1973"+
		"\5\u0222\u0112\2\u1973\u1974\7\u013d\2\2\u1974\u1975\7n\2\2\u1975\u1976"+
		"\5\u054c\u02a7\2\u1976\u199b\3\2\2\2\u1977\u1978\7\u009b\2\2\u1978\u1979"+
		"\7\u016b\2\2\u1979\u197a\7\u014d\2\2\u197a\u197b\7\u0169\2\2\u197b\u197c"+
		"\5\u0222\u0112\2\u197c\u197d\7\u013d\2\2\u197d\u197e\7n\2\2\u197e\u197f"+
		"\5\u054c\u02a7\2\u197f\u199b\3\2\2\2\u1980\u1981\7\u009b\2\2\u1981\u1982"+
		"\7\u016b\2\2\u1982\u1983\7\u014d\2\2\u1983\u1984\7\u00b4\2\2\u1984\u1985"+
		"\5\u0222\u0112\2\u1985\u1986\7\u013d\2\2\u1986\u1987\7n\2\2\u1987\u1988"+
		"\5\u054c\u02a7\2\u1988\u199b\3\2\2\2\u1989\u198a\7\u009b\2\2\u198a\u198b"+
		"\7\u0170\2\2\u198b\u198c\5\u0222\u0112\2\u198c\u198d\7\u013d\2\2\u198d"+
		"\u198e\7n\2\2\u198e\u198f\5\u054c\u02a7\2\u198f\u199b\3\2\2\2\u1990\u1991"+
		"\7\u009b\2\2\u1991\u1992\7\u0170\2\2\u1992\u1993\5\u0222\u0112\2\u1993"+
		"\u1994\7\u013d\2\2\u1994\u1995\7\u00a0\2\2\u1995\u1996\5\u054c\u02a7\2"+
		"\u1996\u1997\7n\2\2\u1997\u1998\5\u054c\u02a7\2\u1998\u1999\5|?\2\u1999"+
		"\u199b\3\2\2\2\u199a\u17c6\3\2\2\2\u199a\u17cd\3\2\2\2\u199a\u17d4\3\2"+
		"\2\2\u199a\u17db\3\2\2\2\u199a\u17e2\3\2\2\2\u199a\u17e9\3\2\2\2\u199a"+
		"\u17f2\3\2\2\2\u199a\u17fb\3\2\2\2\u199a\u1802\3\2\2\2\u199a\u1809\3\2"+
		"\2\2\u199a\u1811\3\2\2\2\u199a\u181b\3\2\2\2\u199a\u1825\3\2\2\2\u199a"+
		"\u182e\3\2\2\2\u199a\u1839\3\2\2\2\u199a\u1840\3\2\2\2\u199a\u1847\3\2"+
		"\2\2\u199a\u184e\3\2\2\2\u199a\u1855\3\2\2\2\u199a\u185c\3\2\2\2\u199a"+
		"\u1863\3\2\2\2\u199a\u186a\3\2\2\2\u199a\u1873\3\2\2\2\u199a\u187a\3\2"+
		"\2\2\u199a\u1883\3\2\2\2\u199a\u188a\3\2\2\2\u199a\u1893\3\2\2\2\u199a"+
		"\u189b\3\2\2\2\u199a\u18a5\3\2\2\2\u199a\u18ac\3\2\2\2\u199a\u18b5\3\2"+
		"\2\2\u199a\u18bd\3\2\2\2\u199a\u18c7\3\2\2\2\u199a\u18d0\3\2\2\2\u199a"+
		"\u18db\3\2\2\2\u199a\u18e4\3\2\2\2\u199a\u18ef\3\2\2\2\u199a\u18f9\3\2"+
		"\2\2\u199a\u1905\3\2\2\2\u199a\u190e\3\2\2\2\u199a\u1919\3\2\2\2\u199a"+
		"\u1923\3\2\2\2\u199a\u192f\3\2\2\2\u199a\u1938\3\2\2\2\u199a\u1941\3\2"+
		"\2\2\u199a\u1949\3\2\2\2\u199a\u1950\3\2\2\2\u199a\u1957\3\2\2\2\u199a"+
		"\u195e\3\2\2\2\u199a\u1965\3\2\2\2\u199a\u196e\3\2\2\2\u199a\u1977\3\2"+
		"\2\2\u199a\u1980\3\2\2\2\u199a\u1989\3\2\2\2\u199a\u1990\3\2\2\2\u199b"+
		"\u02eb\3\2\2\2\u199c\u199f\7\63\2\2\u199d\u199f\3\2\2\2\u199e\u199c\3"+
		"\2\2\2\u199e\u199d\3\2\2\2\u199f\u02ed\3\2\2\2\u19a0\u19a1\7\u0155\2\2"+
		"\u19a1\u19a4\7\u00bf\2\2\u19a2\u19a4\3\2\2\2\u19a3\u19a0\3\2\2\2\u19a3"+
		"\u19a2\3\2\2\2\u19a4\u02ef\3\2\2\2\u19a5\u19a6\7\u009b\2\2\u19a6\u19a7"+
		"\7\u00e4\2\2\u19a7\u19a8\5\u0288\u0145\2\u19a8\u19a9\5\u02f2\u017a\2\u19a9"+
		"\u19aa\7\u01d7\2\2\u19aa\u19ab\7]\2\2\u19ab\u19ac\7\u00dd\2\2\u19ac\u19ad"+
		"\5\u054c\u02a7\2\u19ad\u19df\3\2\2\2\u19ae\u19af\7\u009b\2\2\u19af\u19b0"+
		"\7\u0130\2\2\u19b0\u19b1\5\u0288\u0145\2\u19b1\u19b2\5\u02f2\u017a\2\u19b2"+
		"\u19b3\7\u01d7\2\2\u19b3\u19b4\7]\2\2\u19b4\u19b5\7\u00dd\2\2\u19b5\u19b6"+
		"\5\u054c\u02a7\2\u19b6\u19df\3\2\2\2\u19b7\u19b8\7\u009b\2\2\u19b8\u19b9"+
		"\7\u01c3\2\2\u19b9\u19ba\5\u0288\u0145\2\u19ba\u19bb\5\u02f2\u017a\2\u19bb"+
		"\u19bc\7\u01d7\2\2\u19bc\u19bd\7]\2\2\u19bd\u19be\7\u00dd\2\2\u19be\u19bf"+
		"\5\u054c\u02a7\2\u19bf\u19df\3\2\2\2\u19c0\u19c1\7\u009b\2\2\u19c1\u19c2"+
		"\7\u016d\2\2\u19c2\u19c3\5\u054c\u02a7\2\u19c3\u19c4\7]\2\2\u19c4\u19c5"+
		"\5\u0548\u02a5\2\u19c5\u19c6\5\u02f2\u017a\2\u19c6\u19c7\7\u01d7\2\2\u19c7"+
		"\u19c8\7]\2\2\u19c8\u19c9\7\u00dd\2\2\u19c9\u19ca\5\u054c\u02a7\2\u19ca"+
		"\u19df\3\2\2\2\u19cb\u19cc\7\u009b\2\2\u19cc\u19cd\7\u010b\2\2\u19cd\u19ce"+
		"\7\u0180\2\2\u19ce\u19cf\5\u0548\u02a5\2\u19cf\u19d0\5\u02f2\u017a\2\u19d0"+
		"\u19d1\7\u01d7\2\2\u19d1\u19d2\7]\2\2\u19d2\u19d3\7\u00dd\2\2\u19d3\u19d4"+
		"\5\u054c\u02a7\2\u19d4\u19df\3\2\2\2\u19d5\u19d6\7\u009b\2\2\u19d6\u19d7"+
		"\7\u00f3\2\2\u19d7\u19d8\5\u0548\u02a5\2\u19d8\u19d9\5\u02f2\u017a\2\u19d9"+
		"\u19da\7\u01d7\2\2\u19da\u19db\7]\2\2\u19db\u19dc\7\u00dd\2\2\u19dc\u19dd"+
		"\5\u054c\u02a7\2\u19dd\u19df\3\2\2\2\u19de\u19a5\3\2\2\2\u19de\u19ae\3"+
		"\2\2\2\u19de\u19b7\3\2\2\2\u19de\u19c0\3\2\2\2\u19de\u19cb\3\2\2\2\u19de"+
		"\u19d5\3\2\2\2\u19df\u02f1\3\2\2\2\u19e0\u19e3\7\u0115\2\2\u19e1\u19e3"+
		"\3\2\2\2\u19e2\u19e0\3\2\2\2\u19e2\u19e1\3\2\2\2\u19e3\u02f3\3\2\2\2\u19e4"+
		"\u19e5\7\u009b\2\2\u19e5\u19e6\7\u0099\2\2\u19e6\u19e7\5\u02a0\u0151\2"+
		"\u19e7\u19e8\7\u0155\2\2\u19e8\u19e9\7\u014b\2\2\u19e9\u19ea\5\u054c\u02a7"+
		"\2\u19ea\u1abe\3\2\2\2\u19eb\u19ec\7\u009b\2\2\u19ec\u19ed\7}\2\2\u19ed"+
		"\u19ee\5\u0222\u0112\2\u19ee\u19ef\7\u0155\2\2\u19ef\u19f0\7\u014b\2\2"+
		"\u19f0\u19f1\5\u054c\u02a7\2\u19f1\u1abe\3\2\2\2\u19f2\u19f3\7\u009b\2"+
		"\2\u19f3\u19f4\7\u00b9\2\2\u19f4\u19f5\5\u0222\u0112\2\u19f5\u19f6\7\u0155"+
		"\2\2\u19f6\u19f7\7\u014b\2\2\u19f7\u19f8\5\u054c\u02a7\2\u19f8\u1abe\3"+
		"\2\2\2\u19f9\u19fa\7\u009b\2\2\u19fa\u19fb\7\u00ce\2\2\u19fb\u19fc\5\u0222"+
		"\u0112\2\u19fc\u19fd\7\u0155\2\2\u19fd\u19fe\7\u014b\2\2\u19fe\u19ff\5"+
		"\u054c\u02a7\2\u19ff\u1abe\3\2\2\2\u1a00\u1a01\7\u009b\2\2\u1a01\u1a02"+
		"\7\u00dd\2\2\u1a02\u1a03\5\u054c\u02a7\2\u1a03\u1a04\7\u0155\2\2\u1a04"+
		"\u1a05\7\u014b\2\2\u1a05\u1a06\5\u054c\u02a7\2\u1a06\u1abe\3\2\2\2\u1a07"+
		"\u1a08\7\u009b\2\2\u1a08\u1a09\7\u00e4\2\2\u1a09\u1a0a\5\u0288\u0145\2"+
		"\u1a0a\u1a0b\7\u0155\2\2\u1a0b\u1a0c\7\u014b\2\2\u1a0c\u1a0d\5\u054c\u02a7"+
		"\2\u1a0d\u1abe\3\2\2\2\u1a0e\u1a0f\7\u009b\2\2\u1a0f\u1a10\7\u011e\2\2"+
		"\u1a10\u1a11\5\u02c6\u0164\2\u1a11\u1a12\7\u0155\2\2\u1a12\u1a13\7\u014b"+
		"\2\2\u1a13\u1a14\5\u054c\u02a7\2\u1a14\u1abe\3\2\2\2\u1a15\u1a16\7\u009b"+
		"\2\2\u1a16\u1a17\7\u011e\2\2\u1a17\u1a18\7\u00ad\2\2\u1a18\u1a19\5\u0222"+
		"\u0112\2\u1a19\u1a1a\7u\2\2\u1a1a\u1a1b\5\u054c\u02a7\2\u1a1b\u1a1c\7"+
		"\u0155\2\2\u1a1c\u1a1d\7\u014b\2\2\u1a1d\u1a1e\5\u054c\u02a7\2\u1a1e\u1abe"+
		"\3\2\2\2\u1a1f\u1a20\7\u009b\2\2\u1a20\u1a21\7\u011e\2\2\u1a21\u1a22\7"+
		"\u00df\2\2\u1a22\u1a23\5\u0222\u0112\2\u1a23\u1a24\7u\2\2\u1a24\u1a25"+
		"\5\u054c\u02a7\2\u1a25\u1a26\7\u0155\2\2\u1a26\u1a27\7\u014b\2\2\u1a27"+
		"\u1a28\5\u054c\u02a7\2\u1a28\u1abe\3\2\2\2\u1a29\u1a2a\7\u009b\2\2\u1a2a"+
		"\u1a2b\7\u0130\2\2\u1a2b\u1a2c\5\u0288\u0145\2\u1a2c\u1a2d\7\u0155\2\2"+
		"\u1a2d\u1a2e\7\u014b\2\2\u1a2e\u1a2f\5\u054c\u02a7\2\u1a2f\u1abe\3\2\2"+
		"\2\u1a30\u1a31\7\u009b\2\2\u1a31\u1a32\7\u01c3\2\2\u1a32\u1a33\5\u0288"+
		"\u0145\2\u1a33\u1a34\7\u0155\2\2\u1a34\u1a35\7\u014b\2\2\u1a35\u1a36\5"+
		"\u054c\u02a7\2\u1a36\u1abe\3\2\2\2\u1a37\u1a38\7\u009b\2\2\u1a38\u1a39"+
		"\7l\2\2\u1a39\u1a3a\5\u0444\u0223\2\u1a3a\u1a3b\7\u0155\2\2\u1a3b\u1a3c"+
		"\7\u014b\2\2\u1a3c\u1a3d\5\u054c\u02a7\2\u1a3d\u1abe\3\2\2\2\u1a3e\u1a3f"+
		"\7\u009b\2\2\u1a3f\u1a40\7l\2\2\u1a40\u1a41\7\u00ed\2\2\u1a41\u1a42\7"+
		"\u0194\2\2\u1a42\u1a43\5\u0444\u0223\2\u1a43\u1a44\7\u0155\2\2\u1a44\u1a45"+
		"\7\u014b\2\2\u1a45\u1a46\5\u054c\u02a7\2\u1a46\u1abe\3\2\2\2\u1a47\u1a48"+
		"\7\u009b\2\2\u1a48\u1a49\7\u015e\2\2\u1a49\u1a4a\5\u0222\u0112\2\u1a4a"+
		"\u1a4b\7\u0155\2\2\u1a4b\u1a4c\7\u014b\2\2\u1a4c\u1a4d\5\u054c\u02a7\2"+
		"\u1a4d\u1abe\3\2\2\2\u1a4e\u1a4f\7\u009b\2\2\u1a4f\u1a50\7\u016b\2\2\u1a50"+
		"\u1a51\7\u014d\2\2\u1a51\u1a52\7\u0123\2\2\u1a52\u1a53\5\u0222\u0112\2"+
		"\u1a53\u1a54\7\u0155\2\2\u1a54\u1a55\7\u014b\2\2\u1a55\u1a56\5\u054c\u02a7"+
		"\2\u1a56\u1abe\3\2\2\2\u1a57\u1a58\7\u009b\2\2\u1a58\u1a59\7\u016b\2\2"+
		"\u1a59\u1a5a\7\u014d\2\2\u1a5a\u1a5b\7\u00ca\2\2\u1a5b\u1a5c\5\u0222\u0112"+
		"\2\u1a5c\u1a5d\7\u0155\2\2\u1a5d\u1a5e\7\u014b\2\2\u1a5e\u1a5f\5\u054c"+
		"\u02a7\2\u1a5f\u1abe\3\2\2\2\u1a60\u1a61\7\u009b\2\2\u1a61\u1a62\7\u016b"+
		"\2\2\u1a62\u1a63\7\u014d\2\2\u1a63\u1a64\7\u0169\2\2\u1a64\u1a65\5\u0222"+
		"\u0112\2\u1a65\u1a66\7\u0155\2\2\u1a66\u1a67\7\u014b\2\2\u1a67\u1a68\5"+
		"\u054c\u02a7\2\u1a68\u1abe\3\2\2\2\u1a69\u1a6a\7\u009b\2\2\u1a6a\u1a6b"+
		"\7\u016b\2\2\u1a6b\u1a6c\7\u014d\2\2\u1a6c\u1a6d\7\u00b4\2\2\u1a6d\u1a6e"+
		"\5\u0222\u0112\2\u1a6e\u1a6f\7\u0155\2\2\u1a6f\u1a70\7\u014b\2\2\u1a70"+
		"\u1a71\5\u054c\u02a7\2\u1a71\u1abe\3\2\2\2\u1a72\u1a73\7\u009b\2\2\u1a73"+
		"\u1a74\7\u0150\2\2\u1a74\u1a75\5\u0548\u02a5\2\u1a75\u1a76\7\u0155\2\2"+
		"\u1a76\u1a77\7\u014b\2\2\u1a77\u1a78\5\u054c\u02a7\2\u1a78\u1abe\3\2\2"+
		"\2\u1a79\u1a7a\7\u009b\2\2\u1a7a\u1a7b\7\u0150\2\2\u1a7b\u1a7c\7\u00ed"+
		"\2\2\u1a7c\u1a7d\7\u0194\2\2\u1a7d\u1a7e\5\u0548\u02a5\2\u1a7e\u1a7f\7"+
		"\u0155\2\2\u1a7f\u1a80\7\u014b\2\2\u1a80\u1a81\5\u054c\u02a7\2\u1a81\u1abe"+
		"\3\2\2\2\u1a82\u1a83\7\u009b\2\2\u1a83\u1a84\7\u0180\2\2\u1a84\u1a85\5"+
		"\u0548\u02a5\2\u1a85\u1a86\7\u0155\2\2\u1a86\u1a87\7\u014b\2\2\u1a87\u1a88"+
		"\5\u054c\u02a7\2\u1a88\u1abe\3\2\2\2\u1a89\u1a8a\7\u009b\2\2\u1a8a\u1a8b"+
		"\7\u0180\2\2\u1a8b\u1a8c\7\u00ed\2\2\u1a8c\u1a8d\7\u0194\2\2\u1a8d\u1a8e"+
		"\5\u0548\u02a5\2\u1a8e\u1a8f\7\u0155\2\2\u1a8f\u1a90\7\u014b\2\2\u1a90"+
		"\u1a91\5\u054c\u02a7\2\u1a91\u1abe\3\2\2\2\u1a92\u1a93\7\u009b\2\2\u1a93"+
		"\u1a94\7\u010b\2\2\u1a94\u1a95\7\u0180\2\2\u1a95\u1a96\5\u0548\u02a5\2"+
		"\u1a96\u1a97\7\u0155\2\2\u1a97\u1a98\7\u014b\2\2\u1a98\u1a99\5\u054c\u02a7"+
		"\2\u1a99\u1abe\3\2\2\2\u1a9a\u1a9b\7\u009b\2\2\u1a9b\u1a9c\7\u010b\2\2"+
		"\u1a9c\u1a9d\7\u0180\2\2\u1a9d\u1a9e\7\u00ed\2\2\u1a9e\u1a9f\7\u0194\2"+
		"\2\u1a9f\u1aa0\5\u0548\u02a5\2\u1aa0\u1aa1\7\u0155\2\2\u1aa1\u1aa2\7\u014b"+
		"\2\2\u1aa2\u1aa3\5\u054c\u02a7\2\u1aa3\u1abe\3\2\2\2\u1aa4\u1aa5\7\u009b"+
		"\2\2\u1aa5\u1aa6\7G\2\2\u1aa6\u1aa7\7l\2\2\u1aa7\u1aa8\5\u0444\u0223\2"+
		"\u1aa8\u1aa9\7\u0155\2\2\u1aa9\u1aaa\7\u014b\2\2\u1aaa\u1aab\5\u054c\u02a7"+
		"\2\u1aab\u1abe\3\2\2\2\u1aac\u1aad\7\u009b\2\2\u1aad\u1aae\7G\2\2\u1aae"+
		"\u1aaf\7l\2\2\u1aaf\u1ab0\7\u00ed\2\2\u1ab0\u1ab1\7\u0194\2\2\u1ab1\u1ab2"+
		"\5\u0444\u0223\2\u1ab2\u1ab3\7\u0155\2\2\u1ab3\u1ab4\7\u014b\2\2\u1ab4"+
		"\u1ab5\5\u054c\u02a7\2\u1ab5\u1abe\3\2\2\2\u1ab6\u1ab7\7\u009b\2\2\u1ab7"+
		"\u1ab8\7\u0170\2\2\u1ab8\u1ab9\5\u0222\u0112\2\u1ab9\u1aba\7\u0155\2\2"+
		"\u1aba\u1abb\7\u014b\2\2\u1abb\u1abc\5\u054c\u02a7\2\u1abc\u1abe\3\2\2"+
		"\2\u1abd\u19e4\3\2\2\2\u1abd\u19eb\3\2\2\2\u1abd\u19f2\3\2\2\2\u1abd\u19f9"+
		"\3\2\2\2\u1abd\u1a00\3\2\2\2\u1abd\u1a07\3\2\2\2\u1abd\u1a0e\3\2\2\2\u1abd"+
		"\u1a15\3\2\2\2\u1abd\u1a1f\3\2\2\2\u1abd\u1a29\3\2\2\2\u1abd\u1a30\3\2"+
		"\2\2\u1abd\u1a37\3\2\2\2\u1abd\u1a3e\3\2\2\2\u1abd\u1a47\3\2\2\2\u1abd"+
		"\u1a4e\3\2\2\2\u1abd\u1a57\3\2\2\2\u1abd\u1a60\3\2\2\2\u1abd\u1a69\3\2"+
		"\2\2\u1abd\u1a72\3\2\2\2\u1abd\u1a79\3\2\2\2\u1abd\u1a82\3\2\2\2\u1abd"+
		"\u1a89\3\2\2\2\u1abd\u1a92\3\2\2\2\u1abd\u1a9a\3\2\2\2\u1abd\u1aa4\3\2"+
		"\2\2\u1abd\u1aac\3\2\2\2\u1abd\u1ab6\3\2\2\2\u1abe\u02f5\3\2\2\2\u1abf"+
		"\u1ac0\7\u009b\2\2\u1ac0\u1ac1\7\u011e\2\2\u1ac1\u1ac2\5\u02c6\u0164\2"+
		"\u1ac2\u1ac3\7\u0155\2\2\u1ac3\u1ac4\7\4\2\2\u1ac4\u1ac5\5\u02f8\u017d"+
		"\2\u1ac5\u1ac6\7\5\2\2\u1ac6\u02f7\3\2\2\2\u1ac7\u1acc\5\u02fa\u017e\2"+
		"\u1ac8\u1ac9\7\b\2\2\u1ac9\u1acb\5\u02fa\u017e\2\u1aca\u1ac8\3\2\2\2\u1acb"+
		"\u1ace\3\2\2\2\u1acc\u1aca\3\2\2\2\u1acc\u1acd\3\2\2\2\u1acd\u02f9\3\2"+
		"\2\2\u1ace\u1acc\3\2\2\2\u1acf\u1ad0\5\u0572\u02ba\2\u1ad0\u1ad1\7\f\2"+
		"\2\u1ad1\u1ad2\7\u019f\2\2\u1ad2\u1ad8\3\2\2\2\u1ad3\u1ad4\5\u0572\u02ba"+
		"\2\u1ad4\u1ad5\7\f\2\2\u1ad5\u1ad6\5\u02fc\u017f\2\u1ad6\u1ad8\3\2\2\2"+
		"\u1ad7\u1acf\3\2\2\2\u1ad7\u1ad3\3\2\2\2\u1ad8\u02fb\3\2\2\2\u1ad9\u1adf"+
		"\5\u0296\u014c\2\u1ada\u1adf\5\u057e\u02c0\2\u1adb\u1adf\5\u050c\u0287"+
		"\2\u1adc\u1adf\5\u0134\u009b\2\u1add\u1adf\5\u055e\u02b0\2\u1ade\u1ad9"+
		"\3\2\2\2\u1ade\u1ada\3\2\2\2\u1ade\u1adb\3\2\2\2\u1ade\u1adc\3\2\2\2\u1ade"+
		"\u1add\3\2\2\2\u1adf\u02fd\3\2\2\2\u1ae0\u1ae1\7\u009b\2\2\u1ae1\u1ae2"+
		"\7\u0170\2\2\u1ae2\u1ae3\5\u0222\u0112\2\u1ae3\u1ae4\7\u0155\2\2\u1ae4"+
		"\u1ae5\7\4\2\2\u1ae5\u1ae6\5\u02f8\u017d\2\u1ae6\u1ae7\7\5\2\2\u1ae7\u02ff"+
		"\3\2\2\2\u1ae8\u1ae9\7\u009b\2\2\u1ae9\u1aea\7\u0099\2\2\u1aea\u1aeb\5"+
		"\u02a0\u0151\2\u1aeb\u1aec\7\u0122\2\2\u1aec\u1aed";
	private static final String _serializedATNSegment3 =
		"\7n\2\2\u1aed\u1aee\5\u0568\u02b5\2\u1aee\u1ba0\3\2\2\2\u1aef\u1af0\7"+
		"\u009b\2\2\u1af0\u1af1\7}\2\2\u1af1\u1af2\5\u0222\u0112\2\u1af2\u1af3"+
		"\7\u0122\2\2\u1af3\u1af4\7n\2\2\u1af4\u1af5\5\u0568\u02b5\2\u1af5\u1ba0"+
		"\3\2\2\2\u1af6\u1af7\7\u009b\2\2\u1af7\u1af8\7\u00b9\2\2\u1af8\u1af9\5"+
		"\u0222\u0112\2\u1af9\u1afa\7\u0122\2\2\u1afa\u1afb\7n\2\2\u1afb\u1afc"+
		"\5\u0568\u02b5\2\u1afc\u1ba0\3\2\2\2\u1afd\u1afe\7\u009b\2\2\u1afe\u1aff"+
		"\7\u00c0\2\2\u1aff\u1b00\5\u054c\u02a7\2\u1b00\u1b01\7\u0122\2\2\u1b01"+
		"\u1b02\7n\2\2\u1b02\u1b03\5\u0568\u02b5\2\u1b03\u1ba0\3\2\2\2\u1b04\u1b05"+
		"\7\u009b\2\2\u1b05\u1b06\7\u00ce\2\2\u1b06\u1b07\5\u0222\u0112\2\u1b07"+
		"\u1b08\7\u0122\2\2\u1b08\u1b09\7n\2\2\u1b09\u1b0a\5\u0568\u02b5\2\u1b0a"+
		"\u1ba0\3\2\2\2\u1b0b\u1b0c\7\u009b\2\2\u1b0c\u1b0d\7\u00e4\2\2\u1b0d\u1b0e"+
		"\5\u0288\u0145\2\u1b0e\u1b0f\7\u0122\2\2\u1b0f\u1b10\7n\2\2\u1b10\u1b11"+
		"\5\u0568\u02b5\2\u1b11\u1ba0\3\2\2\2\u1b12\u1b13\7\u009b\2\2\u1b13\u1b14"+
		"\5\u0144\u00a3\2\u1b14\u1b15\7\u00ff\2\2\u1b15\u1b16\5\u054c\u02a7\2\u1b16"+
		"\u1b17\7\u0122\2\2\u1b17\u1b18\7n\2\2\u1b18\u1b19\5\u0568\u02b5\2\u1b19"+
		"\u1ba0\3\2\2\2\u1b1a\u1b1b\7\u009b\2\2\u1b1b\u1b1c\7\u0100\2\2\u1b1c\u1b1d"+
		"\7\u011a\2\2\u1b1d\u1b1e\5\u0134\u009b\2\u1b1e\u1b1f\7\u0122\2\2\u1b1f"+
		"\u1b20\7n\2\2\u1b20\u1b21\5\u0568\u02b5\2\u1b21\u1ba0\3\2\2\2\u1b22\u1b23"+
		"\7\u009b\2\2\u1b23\u1b24\7\u011e\2\2\u1b24\u1b25\5\u02c6\u0164\2\u1b25"+
		"\u1b26\7\u0122\2\2\u1b26\u1b27\7n\2\2\u1b27\u1b28\5\u0568\u02b5\2\u1b28"+
		"\u1ba0\3\2\2\2\u1b29\u1b2a\7\u009b\2\2\u1b2a\u1b2b\7\u011e\2\2\u1b2b\u1b2c"+
		"\7\u00ad\2\2\u1b2c\u1b2d\5\u0222\u0112\2\u1b2d\u1b2e\7u\2\2\u1b2e\u1b2f"+
		"\5\u054c\u02a7\2\u1b2f\u1b30\7\u0122\2\2\u1b30\u1b31\7n\2\2\u1b31\u1b32"+
		"\5\u0568\u02b5\2\u1b32\u1ba0\3\2\2\2\u1b33\u1b34\7\u009b\2\2\u1b34\u1b35"+
		"\7\u011e\2\2\u1b35\u1b36\7\u00df\2\2\u1b36\u1b37\5\u0222\u0112\2\u1b37"+
		"\u1b38\7u\2\2\u1b38\u1b39\5\u054c\u02a7\2\u1b39\u1b3a\7\u0122\2\2\u1b3a"+
		"\u1b3b\7n\2\2\u1b3b\u1b3c\5\u0568\u02b5\2\u1b3c\u1ba0\3\2\2\2\u1b3d\u1b3e"+
		"\7\u009b\2\2\u1b3e\u1b3f\7\u0130\2\2\u1b3f\u1b40\5\u0288\u0145\2\u1b40"+
		"\u1b41\7\u0122\2\2\u1b41\u1b42\7n\2\2\u1b42\u1b43\5\u0568\u02b5\2\u1b43"+
		"\u1ba0\3\2\2\2\u1b44\u1b45\7\u009b\2\2\u1b45\u1b46\7\u01c3\2\2\u1b46\u1b47"+
		"\5\u0288\u0145\2\u1b47\u1b48\7\u0122\2\2\u1b48\u1b49\7n\2\2\u1b49\u1b4a"+
		"\5\u0568\u02b5\2\u1b4a\u1ba0\3\2\2\2\u1b4b\u1b4c\7\u009b\2\2\u1b4c\u1b4d"+
		"\7\u014b\2\2\u1b4d\u1b4e\5\u054c\u02a7\2\u1b4e\u1b4f\7\u0122\2\2\u1b4f"+
		"\u1b50\7n\2\2\u1b50\u1b51\5\u0568\u02b5\2\u1b51\u1ba0\3\2\2\2\u1b52\u1b53"+
		"\7\u009b\2\2\u1b53\u1b54\7\u0170\2\2\u1b54\u1b55\5\u0222\u0112\2\u1b55"+
		"\u1b56\7\u0122\2\2\u1b56\u1b57\7n\2\2\u1b57\u1b58\5\u0568\u02b5\2\u1b58"+
		"\u1ba0\3\2\2\2\u1b59\u1b5a\7\u009b\2\2\u1b5a\u1b5b\7\u0167\2\2\u1b5b\u1b5c"+
		"\5\u054c\u02a7\2\u1b5c\u1b5d\7\u0122\2\2\u1b5d\u1b5e\7n\2\2\u1b5e\u1b5f"+
		"\5\u0568\u02b5\2\u1b5f\u1ba0\3\2\2\2\u1b60\u1b61\7\u009b\2\2\u1b61\u1b62"+
		"\7\u015e\2\2\u1b62\u1b63\5\u0222\u0112\2\u1b63\u1b64\7\u0122\2\2\u1b64"+
		"\u1b65\7n\2\2\u1b65\u1b66\5\u0568\u02b5\2\u1b66\u1ba0\3\2\2\2\u1b67\u1b68"+
		"\7\u009b\2\2\u1b68\u1b69\7\u016b\2\2\u1b69\u1b6a\7\u014d\2\2\u1b6a\u1b6b"+
		"\7\u00ca\2\2\u1b6b\u1b6c\5\u0222\u0112\2\u1b6c\u1b6d\7\u0122\2\2\u1b6d"+
		"\u1b6e\7n\2\2\u1b6e\u1b6f\5\u0568\u02b5\2\u1b6f\u1ba0\3\2\2\2\u1b70\u1b71"+
		"\7\u009b\2\2\u1b71\u1b72\7\u016b\2\2\u1b72\u1b73\7\u014d\2\2\u1b73\u1b74"+
		"\7\u00b4\2\2\u1b74\u1b75\5\u0222\u0112\2\u1b75\u1b76\7\u0122\2\2\u1b76"+
		"\u1b77\7n\2\2\u1b77\u1b78\5\u0568\u02b5\2\u1b78\u1ba0\3\2\2\2\u1b79\u1b7a"+
		"\7\u009b\2\2\u1b7a\u1b7b\7G\2\2\u1b7b\u1b7c\7\u00bf\2\2\u1b7c\u1b7d\7"+
		"\u0185\2\2\u1b7d\u1b7e\5\u054c\u02a7\2\u1b7e\u1b7f\7\u0122\2\2\u1b7f\u1b80"+
		"\7n\2\2\u1b80\u1b81\5\u0568\u02b5\2\u1b81\u1ba0\3\2\2\2\u1b82\u1b83\7"+
		"\u009b\2\2\u1b83\u1b84\7\u0153\2\2\u1b84\u1b85\5\u054c\u02a7\2\u1b85\u1b86"+
		"\7\u0122\2\2\u1b86\u1b87\7n\2\2\u1b87\u1b88\5\u0568\u02b5\2\u1b88\u1ba0"+
		"\3\2\2\2\u1b89\u1b8a\7\u009b\2\2\u1b8a\u1b8b\7\u00d7\2\2\u1b8b\u1b8c\7"+
		"\u016d\2\2\u1b8c\u1b8d\5\u054c\u02a7\2\u1b8d\u1b8e\7\u0122\2\2\u1b8e\u1b8f"+
		"\7n\2\2\u1b8f\u1b90\5\u0568\u02b5\2\u1b90\u1ba0\3\2\2\2\u1b91\u1b92\7"+
		"\u009b\2\2\u1b92\u1b93\7\u01cd\2\2\u1b93\u1b94\5\u054c\u02a7\2\u1b94\u1b95"+
		"\7\u0122\2\2\u1b95\u1b96\7n\2\2\u1b96\u1b97\5\u0568\u02b5\2\u1b97\u1ba0"+
		"\3\2\2\2\u1b98\u1b99\7\u009b\2\2\u1b99\u1b9a\7\u01cc\2\2\u1b9a\u1b9b\5"+
		"\u054c\u02a7\2\u1b9b\u1b9c\7\u0122\2\2\u1b9c\u1b9d\7n\2\2\u1b9d\u1b9e"+
		"\5\u0568\u02b5\2\u1b9e\u1ba0\3\2\2\2\u1b9f\u1ae8\3\2\2\2\u1b9f\u1aef\3"+
		"\2\2\2\u1b9f\u1af6\3\2\2\2\u1b9f\u1afd\3\2\2\2\u1b9f\u1b04\3\2\2\2\u1b9f"+
		"\u1b0b\3\2\2\2\u1b9f\u1b12\3\2\2\2\u1b9f\u1b1a\3\2\2\2\u1b9f\u1b22\3\2"+
		"\2\2\u1b9f\u1b29\3\2\2\2\u1b9f\u1b33\3\2\2\2\u1b9f\u1b3d\3\2\2\2\u1b9f"+
		"\u1b44\3\2\2\2\u1b9f\u1b4b\3\2\2\2\u1b9f\u1b52\3\2\2\2\u1b9f\u1b59\3\2"+
		"\2\2\u1b9f\u1b60\3\2\2\2\u1b9f\u1b67\3\2\2\2\u1b9f\u1b70\3\2\2\2\u1b9f"+
		"\u1b79\3\2\2\2\u1b9f\u1b82\3\2\2\2\u1b9f\u1b89\3\2\2\2\u1b9f\u1b91\3\2"+
		"\2\2\u1b9f\u1b98\3\2\2\2\u1ba0\u0301\3\2\2\2\u1ba1\u1ba2\7\66\2\2\u1ba2"+
		"\u1ba3\7\u01cd\2\2\u1ba3\u1ba4\5\u054c\u02a7\2\u1ba4\u1ba5\5\u0304\u0183"+
		"\2\u1ba5\u1ba6\5\u02ae\u0158\2\u1ba6\u0303\3\2\2\2\u1ba7\u1baa\5\u0306"+
		"\u0184\2\u1ba8\u1baa\3\2\2\2\u1ba9\u1ba7\3\2\2\2\u1ba9\u1ba8\3\2\2\2\u1baa"+
		"\u0305\3\2\2\2\u1bab\u1bac\7F\2\2\u1bac\u1bad\7l\2\2\u1bad\u1bb2\5\u0446"+
		"\u0224\2\u1bae\u1baf\7F\2\2\u1baf\u1bb0\7!\2\2\u1bb0\u1bb2\7\u0166\2\2"+
		"\u1bb1\u1bab\3\2\2\2\u1bb1\u1bae\3\2\2\2\u1bb2\u0307\3\2\2\2\u1bb3\u1bb4"+
		"\7\u009b\2\2\u1bb4\u1bb5\7\u01cd\2\2\u1bb5\u1bb6\5\u054c\u02a7\2\u1bb6"+
		"\u1bb7\7\u0155\2\2\u1bb7\u1bb8\5\u01e2\u00f2\2\u1bb8\u1bcf\3\2\2\2\u1bb9"+
		"\u1bba\7\u009b\2\2\u1bba\u1bbb\7\u01cd\2\2\u1bbb\u1bbc\5\u054c\u02a7\2"+
		"\u1bbc\u1bbd\7\u0096\2\2\u1bbd\u1bbe\7l\2\2\u1bbe\u1bbf\5\u0446\u0224"+
		"\2\u1bbf\u1bcf\3\2\2\2\u1bc0\u1bc1\7\u009b\2\2\u1bc1\u1bc2\7\u01cd\2\2"+
		"\u1bc2\u1bc3\5\u054c\u02a7\2\u1bc3\u1bc4\7\u0155\2\2\u1bc4\u1bc5\7l\2"+
		"\2\u1bc5\u1bc6\5\u0446\u0224\2\u1bc6\u1bcf\3\2\2\2\u1bc7\u1bc8\7\u009b"+
		"\2\2\u1bc8\u1bc9\7\u01cd\2\2\u1bc9\u1bca\5\u054c\u02a7\2\u1bca\u1bcb\7"+
		"\u00d0\2\2\u1bcb\u1bcc\7l\2\2\u1bcc\u1bcd\5\u0446\u0224\2\u1bcd\u1bcf"+
		"\3\2\2\2\u1bce\u1bb3\3\2\2\2\u1bce\u1bb9\3\2\2\2\u1bce\u1bc0\3\2\2\2\u1bce"+
		"\u1bc7\3\2\2\2\u1bcf\u0309\3\2\2\2\u1bd0\u1bd1\7\66\2\2\u1bd1\u1bd2\7"+
		"\u01cc\2\2\u1bd2\u1bd3\5\u054c\u02a7\2\u1bd3\u1bd4\7\u00b5\2\2\u1bd4\u1bd5"+
		"\5\u055e\u02b0\2\u1bd5\u1bd6\7\u01cd\2\2\u1bd6\u1bd7\5\u030c\u0187\2\u1bd7"+
		"\u1bd8\5\u02ae\u0158\2\u1bd8\u030b\3\2\2\2\u1bd9\u1bde\5\u030e\u0188\2"+
		"\u1bda\u1bdb\7\b\2\2\u1bdb\u1bdd\5\u030e\u0188\2\u1bdc\u1bda\3\2\2\2\u1bdd"+
		"\u1be0\3\2\2\2\u1bde\u1bdc\3\2\2\2\u1bde\u1bdf\3\2\2\2\u1bdf\u030d\3\2"+
		"\2\2\u1be0\u1bde\3\2\2\2\u1be1\u1be2\5\u0572\u02ba\2\u1be2\u030f\3\2\2"+
		"\2\u1be3\u1be4\7\u009b\2\2\u1be4\u1be5\7\u01cc\2\2\u1be5\u1be6\5\u054c"+
		"\u02a7\2\u1be6\u1be7\7\u0155\2\2\u1be7\u1be8\5\u01e2\u00f2\2\u1be8\u1c09"+
		"\3\2\2\2\u1be9\u1bea\7\u009b\2\2\u1bea\u1beb\7\u01cc\2\2\u1beb\u1bec\5"+
		"\u054c\u02a7\2\u1bec\u1bed\7\u00b5\2\2\u1bed\u1bee\5\u055e\u02b0\2\u1bee"+
		"\u1c09\3\2\2\2\u1bef\u1bf0\7\u009b\2\2\u1bf0\u1bf1\7\u01cc\2\2\u1bf1\u1bf2"+
		"\5\u054c\u02a7\2\u1bf2\u1bf3\7\u0139\2\2\u1bf3\u1bf4\7\u01cd\2\2\u1bf4"+
		"\u1bf5\5\u02ae\u0158\2\u1bf5\u1c09\3\2\2\2\u1bf6\u1bf7\7\u009b\2\2\u1bf7"+
		"\u1bf8\7\u01cc\2\2\u1bf8\u1bf9\5\u054c\u02a7\2\u1bf9\u1bfa\7\u0155\2\2"+
		"\u1bfa\u1bfb\7\u01cd\2\2\u1bfb\u1bfc\5\u030c\u0187\2\u1bfc\u1bfd\5\u02ae"+
		"\u0158\2\u1bfd\u1c09\3\2\2\2\u1bfe\u1bff\7\u009b\2\2\u1bff\u1c00\7\u01cc"+
		"\2\2\u1c00\u1c01\5\u054c\u02a7\2\u1c01\u1c02\7\u00d2\2\2\u1c02\u1c09\3"+
		"\2\2\2\u1c03\u1c04\7\u009b\2\2\u1c04\u1c05\7\u01cc\2\2\u1c05\u1c06\5\u054c"+
		"\u02a7\2\u1c06\u1c07\7\u00cb\2\2\u1c07\u1c09\3\2\2\2\u1c08\u1be3\3\2\2"+
		"\2\u1c08\u1be9\3\2\2\2\u1c08\u1bef\3\2\2\2\u1c08\u1bf6\3\2\2\2\u1c08\u1bfe"+
		"\3\2\2\2\u1c08\u1c03\3\2\2\2\u1c09\u0311\3\2\2\2\u1c0a\u1c0b\7\u00d0\2"+
		"\2\u1c0b\u1c0c\7\u01cc\2\2\u1c0c\u1c0d\5\u054c\u02a7\2\u1c0d\u1c0e\5|"+
		"?\2\u1c0e\u1c17\3\2\2\2\u1c0f\u1c10\7\u00d0\2\2\u1c10\u1c11\7\u01cc\2"+
		"\2\u1c11\u1c12\7\u00ed\2\2\u1c12\u1c13\7\u0194\2\2\u1c13\u1c14\5\u054c"+
		"\u02a7\2\u1c14\u1c15\5|?\2\u1c15\u1c17\3\2\2\2\u1c16\u1c0a\3\2\2\2\u1c16"+
		"\u1c0f\3\2\2\2\u1c17\u0313\3\2\2\2\u1c18\u1c19\7\66\2\2\u1c19\u1c1a\5"+
		"\u0280\u0141\2\u1c1a\u1c1b\7\u0149\2\2\u1c1b\u1c1c\5\u054c\u02a7\2\u1c1c"+
		"\u1c1d\7\'\2\2\u1c1d\u1c1e\7]\2\2\u1c1e\u1c1f\5\u031e\u0190\2\u1c1f\u1c20"+
		"\7n\2\2\u1c20\u1c21\5\u0548\u02a5\2\u1c21\u1c22\5\u0458\u022d\2\u1c22"+
		"\u1c23\7A\2\2\u1c23\u1c24\5\u0320\u0191\2\u1c24\u1c25\5\u0316\u018c\2"+
		"\u1c25\u0315\3\2\2\2\u1c26\u1c2d\7\u0116\2\2\u1c27\u1c2d\5\u031a\u018e"+
		"\2\u1c28\u1c29\7\4\2\2\u1c29\u1c2a\5\u0318\u018d\2\u1c2a\u1c2b\7\5\2\2"+
		"\u1c2b\u1c2d\3\2\2\2\u1c2c\u1c26\3\2\2\2\u1c2c\u1c27\3\2\2\2\u1c2c\u1c28"+
		"\3\2\2\2\u1c2d\u0317\3\2\2\2\u1c2e\u1c33\5\u031c\u018f\2\u1c2f\u1c30\7"+
		"\t\2\2\u1c30\u1c32\5\u031c\u018f\2\u1c31\u1c2f\3\2\2\2\u1c32\u1c35\3\2"+
		"\2\2\u1c33\u1c31\3\2\2\2\u1c33\u1c34\3\2\2\2\u1c34\u0319\3\2\2\2\u1c35"+
		"\u1c33\3\2\2\2\u1c36\u1c3c\5\u03d0\u01e9\2\u1c37\u1c3c\5\u039e\u01d0\2"+
		"\u1c38\u1c3c\5\u03be\u01e0\2\u1c39\u1c3c\5\u03b0\u01d9\2\u1c3a\u1c3c\5"+
		"\u0322\u0192\2\u1c3b\u1c36\3\2\2\2\u1c3b\u1c37\3\2\2\2\u1c3b\u1c38\3\2"+
		"\2\2\u1c3b\u1c39\3\2\2\2\u1c3b\u1c3a\3\2\2\2\u1c3c\u031b\3\2\2\2\u1c3d"+
		"\u1c40\5\u031a\u018e\2\u1c3e\u1c40\3\2\2\2\u1c3f\u1c3d\3\2\2\2\u1c3f\u1c3e"+
		"\3\2\2\2\u1c40\u031d\3\2\2\2\u1c41\u1c42\t\37\2\2\u1c42\u031f\3\2\2\2"+
		"\u1c43\u1c47\7\u00fa\2\2\u1c44\u1c47\7\u009a\2\2\u1c45\u1c47\3\2\2\2\u1c46"+
		"\u1c43\3\2\2\2\u1c46\u1c44\3\2\2\2\u1c46\u1c45\3\2\2\2\u1c47\u0321\3\2"+
		"\2\2\u1c48\u1c49\7\u0117\2\2\u1c49\u1c4a\5\u056c\u02b7\2\u1c4a\u1c4b\5"+
		"\u0324\u0193\2\u1c4b\u0323\3\2\2\2\u1c4c\u1c4d\7\b\2\2\u1c4d\u1c50\5\u055e"+
		"\u02b0\2\u1c4e\u1c50\3\2\2\2\u1c4f\u1c4c\3\2\2\2\u1c4f\u1c4e\3\2\2\2\u1c50"+
		"\u0325\3\2\2\2\u1c51\u1c52\7\u0104\2\2\u1c52\u1c53\5\u056c\u02b7\2\u1c53"+
		"\u0327\3\2\2\2\u1c54\u1c55\7\u0176\2\2\u1c55\u1c59\5\u056c\u02b7\2\u1c56"+
		"\u1c57\7\u0176\2\2\u1c57\u1c59\7\13\2\2\u1c58\u1c54\3\2\2\2\u1c58\u1c56"+
		"\3\2\2\2\u1c59\u0329\3\2\2\2\u1c5a\u1c5b\7\u0092\2\2\u1c5b\u1c5c\5\u032c"+
		"\u0197\2\u1c5c\u1c5d\5\u0334\u019b\2\u1c5d\u1c8d\3\2\2\2\u1c5e\u1c5f\7"+
		"\u00a3\2\2\u1c5f\u1c60\5\u032c\u0197\2\u1c60\u1c61\5\u0332\u019a\2\u1c61"+
		"\u1c8d\3\2\2\2\u1c62\u1c63\7\u015c\2\2\u1c63\u1c64\7\u016c\2\2\u1c64\u1c8d"+
		"\5\u0332\u019a\2\u1c65\u1c66\7\u00b2\2\2\u1c66\u1c67\5\u032c\u0197\2\u1c67"+
		"\u1c68\5\u0334\u019b\2\u1c68\u1c8d\3\2\2\2\u1c69\u1c6a\7\u01cf\2\2\u1c6a"+
		"\u1c6b\5\u032c\u0197\2\u1c6b\u1c6c\5\u0334\u019b\2\u1c6c\u1c8d\3\2\2\2"+
		"\u1c6d\u1c6e\7\u0147\2\2\u1c6e\u1c6f\5\u032c\u0197\2\u1c6f\u1c70\5\u0334"+
		"\u019b\2\u1c70\u1c8d\3\2\2\2\u1c71\u1c72\7\u014a\2\2\u1c72\u1c8d\5\u056c"+
		"\u02b7\2\u1c73\u1c74\7\u013c\2\2\u1c74\u1c75\7\u014a\2\2\u1c75\u1c8d\5"+
		"\u056c\u02b7\2\u1c76\u1c77\7\u013c\2\2\u1c77\u1c8d\5\u056c\u02b7\2\u1c78"+
		"\u1c79\7\u0147\2\2\u1c79\u1c7a\5\u032c\u0197\2\u1c7a\u1c7b\7n\2\2\u1c7b"+
		"\u1c7c\7\u014a\2\2\u1c7c\u1c7d\5\u056c\u02b7\2\u1c7d\u1c8d\3\2\2\2\u1c7e"+
		"\u1c7f\7\u0147\2\2\u1c7f\u1c80\5\u032c\u0197\2\u1c80\u1c81\7n\2\2\u1c81"+
		"\u1c82\5\u056c\u02b7\2\u1c82\u1c8d\3\2\2\2\u1c83\u1c84\7\u012a\2\2\u1c84"+
		"\u1c85\7\u016c\2\2\u1c85\u1c8d\5\u055e\u02b0\2\u1c86\u1c87\7\u00b2\2\2"+
		"\u1c87\u1c88\7\u012b\2\2\u1c88\u1c8d\5\u055e\u02b0\2\u1c89\u1c8a\7\u0147"+
		"\2\2\u1c8a\u1c8b\7\u012b\2\2\u1c8b\u1c8d\5\u055e\u02b0\2\u1c8c\u1c5a\3"+
		"\2\2\2\u1c8c\u1c5e\3\2\2\2\u1c8c\u1c62\3\2\2\2\u1c8c\u1c65\3\2\2\2\u1c8c"+
		"\u1c69\3\2\2\2\u1c8c\u1c6d\3\2\2\2\u1c8c\u1c71\3\2\2\2\u1c8c\u1c73\3\2"+
		"\2\2\u1c8c\u1c76\3\2\2\2\u1c8c\u1c78\3\2\2\2\u1c8c\u1c7e\3\2\2\2\u1c8c"+
		"\u1c83\3\2\2\2\u1c8c\u1c86\3\2\2\2\u1c8c\u1c89\3\2\2\2\u1c8d\u032b\3\2"+
		"\2\2\u1c8e\u1c92\7\u0184\2\2\u1c8f\u1c92\7\u016c\2\2\u1c90\u1c92\3\2\2"+
		"\2\u1c91\u1c8e\3\2\2\2\u1c91\u1c8f\3\2\2\2\u1c91\u1c90\3\2\2\2\u1c92\u032d"+
		"\3\2\2\2\u1c93\u1c94\7\u00fc\2\2\u1c94\u1c95\7\u0103\2\2\u1c95\u1c9e\5"+
		"N(\2\u1c96\u1c97\7\u0134\2\2\u1c97\u1c9e\7^\2\2\u1c98\u1c99\7\u0134\2"+
		"\2\u1c99\u1c9e\7\u0186\2\2\u1c9a\u1c9e\7>\2\2\u1c9b\u1c9c\7Z\2\2\u1c9c"+
		"\u1c9e\7>\2\2\u1c9d\u1c93\3\2\2\2\u1c9d\u1c96\3\2\2\2\u1c9d\u1c98\3\2"+
		"\2\2\u1c9d\u1c9a\3\2\2\2\u1c9d\u1c9b\3\2\2\2\u1c9e\u032f\3\2\2\2\u1c9f"+
		"\u1ca6\5\u032e\u0198\2\u1ca0\u1ca2\7\b\2\2\u1ca1\u1ca0\3\2\2\2\u1ca1\u1ca2"+
		"\3\2\2\2\u1ca2\u1ca3\3\2\2\2\u1ca3\u1ca5\5\u032e\u0198\2\u1ca4\u1ca1\3"+
		"\2\2\2\u1ca5\u1ca8\3\2\2\2\u1ca6\u1ca4\3\2\2\2\u1ca6\u1ca7\3\2\2\2\u1ca7"+
		"\u0331\3\2\2\2\u1ca8\u1ca6\3\2\2\2\u1ca9\u1cac\5\u0330\u0199\2\u1caa\u1cac"+
		"\3\2\2\2\u1cab\u1ca9\3\2\2\2\u1cab\u1caa\3\2\2\2\u1cac\u0333\3\2\2\2\u1cad"+
		"\u1caf\7$\2\2\u1cae\u1cb0\7\u0115\2\2\u1caf\u1cae\3\2\2\2\u1caf\u1cb0"+
		"\3\2\2\2\u1cb0\u1cb1\3\2\2\2\u1cb1\u1cb4\7\u00aa\2\2\u1cb2\u1cb4\3\2\2"+
		"\2\u1cb3\u1cad\3\2\2\2\u1cb3\u1cb2\3\2\2\2\u1cb4\u0335\3\2\2\2\u1cb5\u1cb8"+
		"\7\66\2\2\u1cb6\u1cb7\7_\2\2\u1cb7\u1cb9\7\u013f\2\2\u1cb8\u1cb6\3\2\2"+
		"\2\u1cb8\u1cb9\3\2\2\2\u1cb9\u1cba\3\2\2\2\u1cba\u1cc8\5\u00be`\2\u1cbb"+
		"\u1cbc\7\u0180\2\2\u1cbc\u1cbd\5\u0548\u02a5\2\u1cbd\u1cbe\5\u00e6t\2"+
		"\u1cbe\u1cbf\5\u0086D\2\u1cbf\u1cc9\3\2\2\2\u1cc0\u1cc1\7\u0137\2\2\u1cc1"+
		"\u1cc2\7\u0180\2\2\u1cc2\u1cc3\5\u0548\u02a5\2\u1cc3\u1cc4\7\4\2\2\u1cc4"+
		"\u1cc5\5\u00e8u\2\u1cc5\u1cc6\7\5\2\2\u1cc6\u1cc7\5\u0086D\2\u1cc7\u1cc9"+
		"\3\2\2\2\u1cc8\u1cbb\3\2\2\2\u1cc8\u1cc0\3\2\2\2\u1cc9\u1cca\3\2\2\2\u1cca"+
		"\u1ccb\7\'\2\2\u1ccb\u1ccc\5\u03d0\u01e9\2\u1ccc\u1ccd\5\u0338\u019d\2"+
		"\u1ccd\u0337\3\2\2\2\u1cce\u1cd0\7z\2\2\u1ccf\u1cd1\t \2\2\u1cd0\u1ccf"+
		"\3\2\2\2\u1cd0\u1cd1\3\2\2\2\u1cd1\u1cd2\3\2\2\2\u1cd2\u1cd3\7\61\2\2"+
		"\u1cd3\u1cd6\7\u011f\2\2\u1cd4\u1cd6\3\2\2\2\u1cd5\u1cce\3\2\2\2\u1cd5"+
		"\u1cd4\3\2\2\2\u1cd6\u0339\3\2\2\2\u1cd7\u1cd8\7\u0105\2\2\u1cd8\u1cd9"+
		"\5\u0550\u02a9\2\u1cd9\u033b\3\2\2\2\u1cda\u1cdb\7\66\2\2\u1cdb\u1cdc"+
		"\7\u00c0\2\2\u1cdc\u1cdd\5\u054c\u02a7\2\u1cdd\u1cde\5\22\n\2\u1cde\u1cdf"+
		"\5\u033e\u01a0\2\u1cdf\u033d\3\2\2\2\u1ce0\u1ce3\5\u0340\u01a1\2\u1ce1"+
		"\u1ce3\3\2\2\2\u1ce2\u1ce0\3\2\2\2\u1ce2\u1ce1\3\2\2\2\u1ce3\u033f\3\2"+
		"\2\2\u1ce4\u1ce6\5\u0342\u01a2\2\u1ce5\u1ce4\3\2\2\2\u1ce6\u1ce7\3\2\2"+
		"\2\u1ce7\u1ce5\3\2\2\2\u1ce7\u1ce8\3\2\2\2\u1ce8\u0341\3\2\2\2\u1ce9\u1cea"+
		"\5\u0344\u01a3\2\u1cea\u1cee\5\u0346\u01a4\2\u1ceb\u1cef\5\u0564\u02b3"+
		"\2\u1cec\u1cef\5P)\2\u1ced\u1cef\7=\2\2\u1cee\u1ceb\3\2\2\2\u1cee\u1cec"+
		"\3\2\2\2\u1cee\u1ced\3\2\2\2\u1cef\u0343\3\2\2\2\u1cf0\u1cf9\5\u0574\u02bb"+
		"\2\u1cf1\u1cf2\7\u00b5\2\2\u1cf2\u1cf9\7W\2\2\u1cf3\u1cf9\7\u00d3\2\2"+
		"\u1cf4\u1cf9\7\u0107\2\2\u1cf5\u1cf9\7\u0122\2\2\u1cf6\u1cf9\7\u0167\2"+
		"\2\u1cf7\u1cf9\7\u0169\2\2\u1cf8\u1cf0\3\2\2\2\u1cf8\u1cf1\3\2\2\2\u1cf8"+
		"\u1cf3\3\2\2\2\u1cf8\u1cf4\3\2\2\2\u1cf8\u1cf5\3\2\2\2\u1cf8\u1cf6\3\2"+
		"\2\2\u1cf8\u1cf7\3\2\2\2\u1cf9\u0345\3\2\2\2\u1cfa\u1cfd\7\f\2\2\u1cfb"+
		"\u1cfd\3\2\2\2\u1cfc\u1cfa\3\2\2\2\u1cfc\u1cfb\3\2\2\2\u1cfd\u0347\3\2"+
		"\2\2\u1cfe\u1cff\7\u009b\2\2\u1cff\u1d00\7\u00c0\2\2\u1d00\u1d07\5\u054c"+
		"\u02a7\2\u1d01\u1d02\7z\2\2\u1d02\u1d08\5\u033e\u01a0\2\u1d03\u1d08\5"+
		"\u033e\u01a0\2\u1d04\u1d05\7\u0155\2\2\u1d05\u1d06\7\u0167\2\2\u1d06\u1d08"+
		"\5\u054c\u02a7\2\u1d07\u1d01\3\2\2\2\u1d07\u1d03\3\2\2\2\u1d07\u1d04\3"+
		"\2\2\2\u1d08\u0349\3\2\2\2\u1d09\u1d0a\7\u009b\2\2\u1d0a\u1d0b\7\u00c0"+
		"\2\2\u1d0b\u1d0c\5\u054c\u02a7\2\u1d0c\u1d0d\5^\60\2\u1d0d\u034b\3\2\2"+
		"\2\u1d0e\u1d0f\7\u00d0\2\2\u1d0f\u1d12\7\u00c0\2\2\u1d10\u1d11\7\u00ed"+
		"\2\2\u1d11\u1d13\7\u0194\2\2\u1d12\u1d10\3\2\2\2\u1d12\u1d13\3\2\2\2\u1d13"+
		"\u1d14\3\2\2\2\u1d14\u1d1a\5\u054c\u02a7\2\u1d15\u1d16\5\22\n\2\u1d16"+
		"\u1d17\7\4\2\2\u1d17\u1d18\5\u034e\u01a8\2\u1d18\u1d19\7\5\2\2\u1d19\u1d1b"+
		"\3\2\2\2\u1d1a\u1d15\3\2\2\2\u1d1a\u1d1b\3\2\2\2\u1d1b\u034d\3\2\2\2\u1d1c"+
		"\u1d21\5\u0350\u01a9\2\u1d1d\u1d1e\7\b\2\2\u1d1e\u1d20\5\u0350\u01a9\2"+
		"\u1d1f\u1d1d\3\2\2\2\u1d20\u1d23\3\2\2\2\u1d21\u1d1f\3\2\2\2\u1d21\u1d22"+
		"\3\2\2\2\u1d22\u034f\3\2\2\2\u1d23\u1d21\3\2\2\2\u1d24\u1d25\7\u00e2\2"+
		"\2\u1d25\u0351\3\2\2\2\u1d26\u1d27\7\u009b\2\2\u1d27\u1d28\7}\2\2\u1d28"+
		"\u1d29\5\u0222\u0112\2\u1d29\u1d2a\7\u0139\2\2\u1d2a\u1d2b\7\u017f\2\2"+
		"\u1d2b\u0353\3\2\2\2\u1d2c\u1d2d\7\u009b\2\2\u1d2d\u1d2e\7\u0165\2\2\u1d2e"+
		"\u1d2f\t!\2\2\u1d2f\u1d30\5D#\2\u1d30\u0355\3\2\2\2\u1d31\u1d32\7\66\2"+
		"\2\u1d32\u1d33\7\u00ce\2\2\u1d33\u1d34\5\u0222\u0112\2\u1d34\u1d35\5\u035a"+
		"\u01ae\2\u1d35\u1d36\5\u0470\u0239\2\u1d36\u1d37\5\u00d0i\2\u1d37\u0357"+
		"\3\2\2\2\u1d38\u1d39\7\u009b\2\2\u1d39\u1d3a\7\u00ce\2\2\u1d3a\u1d50\5"+
		"\u0222\u0112\2\u1d3b\u1d51\5z>\2\u1d3c\u1d3d\7\u00d0\2\2\u1d3d\u1d3e\7"+
		"Z\2\2\u1d3e\u1d51\7[\2\2\u1d3f\u1d40\7\u0155\2\2\u1d40\u1d41\7Z\2\2\u1d41"+
		"\u1d51\7[\2\2\u1d42\u1d43\7\u0096\2\2\u1d43\u1d51\5\u00e0q\2\u1d44\u1d45"+
		"\7\u00d0\2\2\u1d45\u1d48\7\65\2\2\u1d46\u1d47\7\u00ed\2\2\u1d47\u1d49"+
		"\7\u0194\2\2\u1d48\u1d46\3\2\2\2\u1d48\u1d49\3\2\2\2\u1d49\u1d4a\3\2\2"+
		"\2\u1d4a\u1d4b\5\u054c\u02a7\2\u1d4b\u1d4c\5|?\2\u1d4c\u1d51\3\2\2\2\u1d4d"+
		"\u1d4e\7\u017c\2\2\u1d4e\u1d4f\7\65\2\2\u1d4f\u1d51\5\u054c\u02a7\2\u1d50"+
		"\u1d3b\3\2\2\2\u1d50\u1d3c\3\2\2\2\u1d50\u1d3f\3\2\2\2\u1d50\u1d42\3\2"+
		"\2\2\u1d50\u1d44\3\2\2\2\u1d50\u1d4d\3\2\2\2\u1d51\u0359\3\2\2\2\u1d52"+
		"\u1d55\7\'\2\2\u1d53\u1d55\3\2\2\2\u1d54\u1d52\3\2\2\2\u1d54\u1d53\3\2"+
		"\2\2\u1d55\u035b\3\2\2\2\u1d56\u1d57\7\u009b\2\2\u1d57\u1d58\7\u016b\2"+
		"\2\u1d58\u1d59\7\u014d\2\2\u1d59\u1d5a\7\u00ca\2\2\u1d5a\u1d5b\5\u0222"+
		"\u0112\2\u1d5b\u1d5c\5\u01e2\u00f2\2\u1d5c\u035d\3\2\2\2\u1d5d\u1d5e\7"+
		"\u009b\2\2\u1d5e\u1d5f\7\u016b\2\2\u1d5f\u1d60\7\u014d\2\2\u1d60\u1d61"+
		"\7\u00b4\2\2\u1d61\u1d62\5\u0222\u0112\2\u1d62\u1d63\7\u0096\2\2\u1d63"+
		"\u1d64\7\u0109\2\2\u1d64\u1d65\7F\2\2\u1d65\u1d66\5\u054a\u02a6\2\u1d66"+
		"\u1d67\5\u0360\u01b1\2\u1d67\u1d68\5\u0220\u0111\2\u1d68\u1da6\3\2\2\2"+
		"\u1d69\u1d6a\7\u009b\2\2\u1d6a\u1d6b\7\u016b\2\2\u1d6b\u1d6c\7\u014d\2"+
		"\2\u1d6c\u1d6d\7\u00b4\2\2\u1d6d\u1d6e\5\u0222\u0112\2\u1d6e\u1d6f\7\u009b"+
		"\2\2\u1d6f\u1d70\7\u0109\2\2\u1d70\u1d71\7F\2\2\u1d71\u1d72\5\u054a\u02a6"+
		"\2\u1d72\u1d73\5\u0360\u01b1\2\u1d73\u1d74\5\u0220\u0111\2\u1d74\u1da6"+
		"\3\2\2\2\u1d75\u1d76\7\u009b\2\2\u1d76\u1d77\7\u016b\2\2\u1d77\u1d78\7"+
		"\u014d\2\2\u1d78\u1d79\7\u00b4\2\2\u1d79\u1d7a\5\u0222\u0112\2\u1d7a\u1d7b"+
		"\7\u009b\2\2\u1d7b\u1d7c\7\u0109\2\2\u1d7c\u1d7d\7\u013f\2\2\u1d7d\u1d7e"+
		"\5\u0222\u0112\2\u1d7e\u1d7f\5\u0360\u01b1\2\u1d7f\u1d80\5\u0222\u0112"+
		"\2\u1d80\u1da6\3\2\2\2\u1d81\u1d82\7\u009b\2\2\u1d82\u1d83\7\u016b\2\2"+
		"\u1d83\u1d84\7\u014d\2\2\u1d84\u1d85\7\u00b4\2\2\u1d85\u1d86\5\u0222\u0112"+
		"\2\u1d86\u1d87\7\u009b\2\2\u1d87\u1d88\7\u0109\2\2\u1d88\u1d89\7F\2\2"+
		"\u1d89\u1d8a\5\u054a\u02a6\2\u1d8a\u1d8b\7\u013f\2\2\u1d8b\u1d8c\5\u0222"+
		"\u0112\2\u1d8c\u1d8d\5\u0360\u01b1\2\u1d8d\u1d8e\5\u0222\u0112\2\u1d8e"+
		"\u1da6\3\2\2\2\u1d8f\u1d90\7\u009b\2\2\u1d90\u1d91\7\u016b\2\2\u1d91\u1d92"+
		"\7\u014d\2\2\u1d92\u1d93\7\u00b4\2\2\u1d93\u1d94\5\u0222\u0112\2\u1d94"+
		"\u1d95\7\u00d0\2\2\u1d95\u1d96\7\u0109\2\2\u1d96\u1d97\7F\2\2\u1d97\u1d98"+
		"\5\u054a\u02a6\2\u1d98\u1da6\3\2\2\2\u1d99\u1d9a\7\u009b\2\2\u1d9a\u1d9b"+
		"\7\u016b\2\2\u1d9b\u1d9c\7\u014d\2\2\u1d9c\u1d9d\7\u00b4\2\2\u1d9d\u1d9e"+
		"\5\u0222\u0112\2\u1d9e\u1d9f\7\u00d0\2\2\u1d9f\u1da0\7\u0109\2\2\u1da0"+
		"\u1da1\7\u00ed\2\2\u1da1\u1da2\7\u0194\2\2\u1da2\u1da3\7F\2\2\u1da3\u1da4"+
		"\5\u054a\u02a6\2\u1da4\u1da6\3\2\2\2\u1da5\u1d5d\3\2\2\2\u1da5\u1d69\3"+
		"\2\2\2\u1da5\u1d75\3\2\2\2\u1da5\u1d81\3\2\2\2\u1da5\u1d8f\3\2\2\2\u1da5"+
		"\u1d99\3\2\2\2\u1da6\u035f\3\2\2\2\u1da7\u1da8\7z\2\2\u1da8\u0361\3\2"+
		"\2\2\u1da9\u1daa\7\66\2\2\u1daa\u1dab\5\u01fe\u0100\2\u1dab\u1dac\7\u00b9"+
		"\2\2\u1dac\u1dad\5\u0222\u0112\2\u1dad\u1dae\7F\2\2\u1dae\u1daf\5\u055e"+
		"\u02b0\2\u1daf\u1db0\7n\2\2\u1db0\u1db1\5\u055e\u02b0\2\u1db1\u1db2\7"+
		"H\2\2\u1db2\u1db3\5\u0222\u0112\2\u1db3\u0363\3\2\2\2\u1db4\u1db5\7\u00af"+
		"\2\2\u1db5\u1db6\5\u0378\u01bd\2\u1db6\u1db7\5\u0548\u02a5\2\u1db7\u1db8"+
		"\5\u0366\u01b4\2\u1db8\u1dc2\3\2\2\2\u1db9\u1dba\7\u00af\2\2\u1dba\u1dc2"+
		"\5\u0378\u01bd\2\u1dbb\u1dbc\7\u00af\2\2\u1dbc\u1dbd\5\u0378\u01bd\2\u1dbd"+
		"\u1dbe\5\u054c\u02a7\2\u1dbe\u1dbf\7]\2\2\u1dbf\u1dc0\5\u0548\u02a5\2"+
		"\u1dc0\u1dc2\3\2\2\2\u1dc1\u1db4\3\2\2\2\u1dc1\u1db9\3\2\2\2\u1dc1\u1dbb"+
		"\3\2\2\2\u1dc2\u0365\3\2\2\2\u1dc3\u1dc4\7u\2\2\u1dc4\u1dc7\5\u054c\u02a7"+
		"\2\u1dc5\u1dc7\3\2\2\2\u1dc6\u1dc3\3\2\2\2\u1dc6\u1dc5\3\2\2\2\u1dc7\u0367"+
		"\3\2\2\2\u1dc8\u1dc9\7\u017a\2\2\u1dc9\u1dca\5\u037a\u01be\2\u1dca\u1dcb"+
		"\5\u037c\u01bf\2\u1dcb\u1dcc\5\u0378\u01bd\2\u1dcc\u1dcd\5\u0376\u01bc"+
		"\2\u1dcd\u1dce\5\u0384\u01c3\2\u1dce\u1dd6\3\2\2\2\u1dcf\u1dd0\7\u017a"+
		"\2\2\u1dd0\u1dd1\7\4\2\2\u1dd1\u1dd2\5\u036c\u01b7\2\u1dd2\u1dd3\7\5\2"+
		"\2\u1dd3\u1dd4\5\u0384\u01c3\2\u1dd4\u1dd6\3\2\2\2\u1dd5\u1dc8\3\2\2\2"+
		"\u1dd5\u1dcf\3\2\2\2\u1dd6\u0369\3\2\2\2\u1dd7\u1dd8\5\u036e\u01b8\2\u1dd8"+
		"\u1dd9\5\u0378\u01bd\2\u1dd9\u1dda\5\u0384\u01c3\2\u1dda\u1de2\3\2\2\2"+
		"\u1ddb\u1ddc\5\u036e\u01b8\2\u1ddc\u1ddd\7\4\2\2\u1ddd\u1dde\5\u036c\u01b7"+
		"\2\u1dde\u1ddf\7\5\2\2\u1ddf\u1de0\5\u0384\u01c3\2\u1de0\u1de2\3\2\2\2"+
		"\u1de1\u1dd7\3\2\2\2\u1de1\u1ddb\3\2\2\2\u1de2\u036b\3\2\2\2\u1de3\u1de8"+
		"\5\u0370\u01b9\2\u1de4\u1de5\7\b\2\2\u1de5\u1de7\5\u0370\u01b9\2\u1de6"+
		"\u1de4\3\2\2\2\u1de7\u1dea\3\2\2\2\u1de8\u1de6\3\2\2\2\u1de8\u1de9\3\2"+
		"\2\2\u1de9\u036d\3\2\2\2\u1dea\u1de8\3\2\2\2\u1deb\u1dec\t\"\2\2\u1dec"+
		"\u036f\3\2\2\2\u1ded\u1dee\5\u0372\u01ba\2\u1dee\u1def\5\u0374\u01bb\2"+
		"\u1def\u0371\3\2\2\2\u1df0\u1df3\5\u0570\u02b9\2\u1df1\u1df3\5\u036e\u01b8"+
		"\2\u1df2\u1df0\3\2\2\2\u1df2\u1df1\3\2\2\2\u1df3\u0373\3\2\2\2\u1df4\u1df8"+
		"\5P)\2\u1df5\u1df8\5\u0134\u009b\2\u1df6\u1df8\3\2\2\2\u1df7\u1df4\3\2"+
		"\2\2\u1df7\u1df5\3\2\2\2\u1df7\u1df6\3\2\2\2\u1df8\u0375\3\2\2\2\u1df9"+
		"\u1dfc\5\u036e\u01b8\2\u1dfa\u1dfc\3\2\2\2\u1dfb\u1df9\3\2\2\2\u1dfb\u1dfa"+
		"\3\2\2\2\u1dfc\u0377\3\2\2\2\u1dfd\u1e00\7\u0091\2\2\u1dfe\u1e00\3\2\2"+
		"\2\u1dff\u1dfd\3\2\2\2\u1dff\u1dfe\3\2\2\2\u1e00\u0379\3\2\2\2\u1e01\u1e04"+
		"\7\u0082\2\2\u1e02\u1e04\3\2\2\2\u1e03\u1e01\3\2\2\2\u1e03\u1e02\3\2\2"+
		"\2\u1e04\u037b\3\2\2\2\u1e05\u1e08\7\u0081\2\2\u1e06\u1e08\3\2\2\2\u1e07"+
		"\u1e05\3\2\2\2\u1e07\u1e06\3\2\2\2\u1e08\u037d\3\2\2\2\u1e09\u1e0a\7\4"+
		"\2\2\u1e0a\u1e0b\5\u054a\u02a6\2\u1e0b\u1e0c\7\5\2\2\u1e0c\u1e0f\3\2\2"+
		"\2\u1e0d\u1e0f\3\2\2\2\u1e0e\u1e09\3\2\2\2\u1e0e\u1e0d\3\2\2\2\u1e0f\u037f"+
		"\3\2\2\2\u1e10\u1e11\5\u0548\u02a5\2\u1e11\u1e12\5\u037e\u01c0\2\u1e12"+
		"\u0381\3\2\2\2\u1e13\u1e18\5\u0380\u01c1\2\u1e14\u1e15\7\b\2\2\u1e15\u1e17"+
		"\5\u0380\u01c1\2\u1e16\u1e14\3\2\2\2\u1e17\u1e1a\3\2\2\2\u1e18\u1e16\3"+
		"\2\2\2\u1e18\u1e19\3\2\2\2\u1e19\u0383\3\2\2\2\u1e1a\u1e18\3\2\2\2\u1e1b"+
		"\u1e1e\5\u0382\u01c2\2\u1e1c\u1e1e\3\2\2\2\u1e1d\u1e1b\3\2\2\2\u1e1d\u1e1c"+
		"\3\2\2\2\u1e1e\u0385\3\2\2\2\u1e1f\u1e20\7\u00dc\2\2\u1e20\u1e30\5\u0388"+
		"\u01c5\2\u1e21\u1e22\7\u00dc\2\2\u1e22\u1e23\5\u036e\u01b8\2\u1e23\u1e24"+
		"\5\u0378\u01bd\2\u1e24\u1e25\5\u0388\u01c5\2\u1e25\u1e30\3\2\2\2\u1e26"+
		"\u1e27\7\u00dc\2\2\u1e27\u1e28\7\u0091\2\2\u1e28\u1e30\5\u0388\u01c5\2"+
		"\u1e29\u1e2a\7\u00dc\2\2\u1e2a\u1e2b\7\4\2\2\u1e2b\u1e2c\5\u038a\u01c6"+
		"\2\u1e2c\u1e2d\7\5\2\2\u1e2d\u1e2e\5\u0388\u01c5\2\u1e2e\u1e30\3\2\2\2"+
		"\u1e2f\u1e1f\3\2\2\2\u1e2f\u1e21\3\2\2\2\u1e2f\u1e26\3\2\2\2\u1e2f\u1e29"+
		"\3\2\2\2\u1e30\u0387\3\2\2\2\u1e31\u1e3b\5\u03d0\u01e9\2\u1e32\u1e3b\5"+
		"\u039e\u01d0\2\u1e33\u1e3b\5\u03be\u01e0\2\u1e34\u1e3b\5\u03b0\u01d9\2"+
		"\u1e35\u1e3b\5\u03c8\u01e5\2\u1e36\u1e3b\5\u0118\u008d\2\u1e37\u1e3b\5"+
		"\u011e\u0090\2\u1e38\u1e3b\5\u0124\u0093\2\u1e39\u1e3b\5\u0398\u01cd\2"+
		"\u1e3a\u1e31\3\2\2\2\u1e3a\u1e32\3\2\2\2\u1e3a\u1e33\3\2\2\2\u1e3a\u1e34"+
		"\3\2\2\2\u1e3a\u1e35\3\2\2\2\u1e3a\u1e36\3\2\2\2\u1e3a\u1e37\3\2\2\2\u1e3a"+
		"\u1e38\3\2\2\2\u1e3a\u1e39\3\2\2\2\u1e3b\u0389\3\2\2\2\u1e3c\u1e41\5\u038c"+
		"\u01c7\2\u1e3d\u1e3e\7\b\2\2\u1e3e\u1e40\5\u038c\u01c7\2\u1e3f\u1e3d\3"+
		"\2\2\2\u1e40\u1e43\3\2\2\2\u1e41\u1e3f\3\2\2\2\u1e41\u1e42\3\2\2\2\u1e42"+
		"\u038b\3\2\2\2\u1e43\u1e41\3\2\2\2\u1e44\u1e45\5\u038e\u01c8\2\u1e45\u1e46"+
		"\5\u0390\u01c9\2\u1e46\u038d\3\2\2\2\u1e47\u1e4a\5\u0570\u02b9\2\u1e48"+
		"\u1e4a\5\u036e\u01b8\2\u1e49\u1e47\3\2\2\2\u1e49\u1e48\3\2\2\2\u1e4a\u038f"+
		"\3\2\2\2\u1e4b\u1e4f\5P)\2\u1e4c\u1e4f\5\u0134\u009b\2\u1e4d\u1e4f\3\2"+
		"\2\2\u1e4e\u1e4b\3\2\2\2\u1e4e\u1e4c\3\2\2\2\u1e4e\u1e4d\3\2\2\2\u1e4f"+
		"\u0391\3\2\2\2\u1e50\u1e51\7\u012a\2\2\u1e51\u1e52\5\u054c\u02a7\2\u1e52"+
		"\u1e53\5\u0394\u01cb\2\u1e53\u1e54\7\'\2\2\u1e54\u1e55\5\u0396\u01cc\2"+
		"\u1e55\u0393\3\2\2\2\u1e56\u1e57\7\4\2\2\u1e57\u1e58\5\u0516\u028c\2\u1e58"+
		"\u1e59\7\5\2\2\u1e59\u1e5c\3\2\2\2\u1e5a\u1e5c\3\2\2\2\u1e5b\u1e56\3\2"+
		"\2\2\u1e5b\u1e5a\3\2\2\2\u1e5c\u0395\3\2\2\2\u1e5d\u1e62\5\u03d0\u01e9"+
		"\2\u1e5e\u1e62\5\u039e\u01d0\2\u1e5f\u1e62\5\u03be\u01e0\2\u1e60\u1e62"+
		"\5\u03b0\u01d9\2\u1e61\u1e5d\3\2\2\2\u1e61\u1e5e\3\2\2\2\u1e61\u1e5f\3"+
		"\2\2\2\u1e61\u1e60\3\2\2\2\u1e62\u0397\3\2\2\2\u1e63\u1e64\7\u00db\2\2"+
		"\u1e64\u1e65\5\u054c\u02a7\2\u1e65\u1e66\5\u039a\u01ce\2\u1e66\u1e7f\3"+
		"\2\2\2\u1e67\u1e68\7\66\2\2\u1e68\u1e69\5\u00be`\2\u1e69\u1e6a\7l\2\2"+
		"\u1e6a\u1e6b\5\u011a\u008e\2\u1e6b\u1e6c\7\'\2\2\u1e6c\u1e6d\7\u00db\2"+
		"\2\u1e6d\u1e6e\5\u054c\u02a7\2\u1e6e\u1e6f\5\u039a\u01ce\2\u1e6f\u1e70"+
		"\5\u011c\u008f\2\u1e70\u1e7f\3\2\2\2\u1e71\u1e72\7\66\2\2\u1e72\u1e73"+
		"\5\u00be`\2\u1e73\u1e74\7l\2\2\u1e74\u1e75\7\u00ed\2\2\u1e75\u1e76\7Z"+
		"\2\2\u1e76\u1e77\7\u0194\2\2\u1e77\u1e78\5\u011a\u008e\2\u1e78\u1e79\7"+
		"\'\2\2\u1e79\u1e7a\7\u00db\2\2\u1e7a\u1e7b\5\u054c\u02a7\2\u1e7b\u1e7c"+
		"\5\u039a\u01ce\2\u1e7c\u1e7d\5\u011c\u008f\2\u1e7d\u1e7f\3\2\2\2\u1e7e"+
		"\u1e63\3\2\2\2\u1e7e\u1e67\3\2\2\2\u1e7e\u1e71\3\2\2\2\u1e7f\u0399\3\2"+
		"\2\2\u1e80\u1e81\7\4\2\2\u1e81\u1e82\5\u0510\u0289\2\u1e82\u1e83\7\5\2"+
		"\2\u1e83\u1e86\3\2\2\2\u1e84\u1e86\3\2\2\2\u1e85\u1e80\3\2\2\2\u1e85\u1e84"+
		"\3\2\2\2\u1e86\u039b\3\2\2\2\u1e87\u1e88\7\u00c2\2\2\u1e88\u1e92\5\u054c"+
		"\u02a7\2\u1e89\u1e8a\7\u00c2\2\2\u1e8a\u1e8b\7\u012a\2\2\u1e8b\u1e92\5"+
		"\u054c\u02a7\2\u1e8c\u1e8d\7\u00c2\2\2\u1e8d\u1e92\7!\2\2\u1e8e\u1e8f"+
		"\7\u00c2\2\2\u1e8f\u1e90\7\u012a\2\2\u1e90\u1e92\7!\2\2\u1e91\u1e87\3"+
		"\2\2\2\u1e91\u1e89\3\2\2\2\u1e91\u1e8c\3\2\2\2\u1e91\u1e8e\3\2\2\2\u1e92"+
		"\u039d\3\2\2\2\u1e93\u1e94\5\u03ea\u01f6\2\u1e94\u1e95\7\u00f9\2\2\u1e95"+
		"\u1e96\7O\2\2\u1e96\u1e97\5\u03a0\u01d1\2\u1e97\u1e98\5\u03a2\u01d2\2"+
		"\u1e98\u1e99\5\u03aa\u01d6\2\u1e99\u1e9a\5\u03ae\u01d8\2\u1e9a\u039f\3"+
		"\2\2\2\u1e9b\u1e9e\5\u0548\u02a5\2\u1e9c\u1e9d\7\'\2\2\u1e9d\u1e9f\5\u056c"+
		"\u02b7\2\u1e9e\u1e9c\3\2\2\2\u1e9e\u1e9f\3\2\2\2\u1e9f\u03a1\3\2\2\2\u1ea0"+
		"\u1eb4\5\u03d0\u01e9\2\u1ea1\u1ea2\7\u01d8\2\2\u1ea2\u1ea3\5\u03a4\u01d3"+
		"\2\u1ea3\u1ea4\7\u01cb\2\2\u1ea4\u1ea5\5\u03d0\u01e9\2\u1ea5\u1eb4\3\2"+
		"\2\2\u1ea6\u1ea7\7\4\2\2\u1ea7\u1ea8\5\u03a6\u01d4\2\u1ea8\u1ead\7\5\2"+
		"\2\u1ea9\u1eaa\7\u01d8\2\2\u1eaa\u1eab\5\u03a4\u01d3\2\u1eab\u1eac\7\u01cb"+
		"\2\2\u1eac\u1eae\3\2\2\2\u1ead\u1ea9\3\2\2\2\u1ead\u1eae\3\2\2\2\u1eae"+
		"\u1eaf\3\2\2\2\u1eaf\u1eb0\5\u03d0\u01e9\2\u1eb0\u1eb4\3\2\2\2\u1eb1\u1eb2"+
		"\7=\2\2\u1eb2\u1eb4\7\u01ae\2\2\u1eb3\u1ea0\3\2\2\2\u1eb3\u1ea1\3\2\2"+
		"\2\u1eb3\u1ea6\3\2\2\2\u1eb3\u1eb1\3\2\2\2\u1eb4\u03a3\3\2\2\2\u1eb5\u1eb6"+
		"\t#\2\2\u1eb6\u03a5\3\2\2\2\u1eb7\u1ebc\5\u03a8\u01d5\2\u1eb8\u1eb9\7"+
		"\b\2\2\u1eb9\u1ebb\5\u03a8\u01d5\2\u1eba\u1eb8\3\2\2\2\u1ebb\u1ebe\3\2"+
		"\2\2\u1ebc\u1eba\3\2\2\2\u1ebc\u1ebd\3\2\2\2\u1ebd\u03a7\3\2\2\2\u1ebe"+
		"\u1ebc\3\2\2\2\u1ebf\u1ec0\5\u056c\u02b7\2\u1ec0\u1ec1\5\u053e\u02a0\2"+
		"\u1ec1\u03a9\3\2\2\2\u1ec2\u1ec3\7]\2\2\u1ec3\u1ec4\7\u01d9\2\2\u1ec4"+
		"\u1ec5\5\u03ac\u01d7\2\u1ec5\u1ecc\7A\2\2\u1ec6\u1ec7\7\u0179\2\2\u1ec7"+
		"\u1ec8\7\u0155\2\2\u1ec8\u1ec9\5\u03c0\u01e1\2\u1ec9\u1eca\5\u0458\u022d"+
		"\2\u1eca\u1ecd\3\2\2\2\u1ecb\u1ecd\7\u0116\2\2\u1ecc\u1ec6\3\2\2\2\u1ecc"+
		"\u1ecb\3\2\2\2\u1ecd\u1ed0\3\2\2\2\u1ece\u1ed0\3\2\2\2\u1ecf\u1ec2\3\2"+
		"\2\2\u1ecf\u1ece\3\2\2\2\u1ed0\u03ab\3\2\2\2\u1ed1\u1ed2\7\4\2\2\u1ed2"+
		"\u1ed3\5\u026c\u0137\2\u1ed3\u1ed4\7\5\2\2\u1ed4\u1ed5\5\u0458\u022d\2"+
		"\u1ed5\u1edb\3\2\2\2\u1ed6\u1ed7\7]\2\2\u1ed7\u1ed8\7\65\2\2\u1ed8\u1edb"+
		"\5\u054c\u02a7\2\u1ed9\u1edb\3\2\2\2\u1eda\u1ed1\3\2\2\2\u1eda\u1ed6\3"+
		"\2\2\2\u1eda\u1ed9\3\2\2\2\u1edb\u03ad\3\2\2\2\u1edc\u1edd\7g\2\2\u1edd"+
		"\u1ee0\5\u0542\u02a2\2\u1ede\u1ee0\3\2\2\2\u1edf\u1edc\3\2\2\2\u1edf\u1ede"+
		"\3\2\2\2\u1ee0\u03af\3\2\2\2\u1ee1\u1ee2\5\u03ea\u01f6\2\u1ee2\u1ee3\7"+
		"\u00c7\2\2\u1ee3\u1ee4\7H\2\2\u1ee4\u1ee5\5\u0448\u0225\2\u1ee5\u1ee6"+
		"\5\u03b2\u01da\2\u1ee6\u1ee7\5\u045a\u022e\2\u1ee7\u1ee8\5\u03ae\u01d8"+
		"\2\u1ee8\u03b1\3\2\2\2\u1ee9\u1eea\7u\2\2\u1eea\u1eed\5\u0436\u021c\2"+
		"\u1eeb\u1eed\3\2\2\2\u1eec\u1ee9\3\2\2\2\u1eec\u1eeb\3\2\2\2\u1eed\u03b3"+
		"\3\2\2\2\u1eee\u1eef\7\u0108\2\2\u1eef\u1ef0\5\u03f2\u01fa\2\u1ef0\u1ef1"+
		"\5\u0446\u0224\2\u1ef1\u1ef2\5\u03b6\u01dc\2\u1ef2\u1ef3\5\u03ba\u01de"+
		"\2\u1ef3\u03b5\3\2\2\2\u1ef4\u1ef5\7L\2\2\u1ef5\u1ef6\5\u03b8\u01dd\2"+
		"\u1ef6\u1ef7\7\u010f\2\2\u1ef7\u1efa\3\2\2\2\u1ef8\u1efa\3\2\2\2\u1ef9"+
		"\u1ef4\3\2\2\2\u1ef9\u1ef8\3\2\2\2\u1efa\u03b7\3\2\2\2\u1efb\u1efc\7\u0094"+
		"\2\2\u1efc\u1f08\t$\2\2\u1efd\u1efe\7\u01a6\2\2\u1efe\u1f08\t$\2\2\u1eff"+
		"\u1f04\7\u0156\2\2\u1f00\u1f01\7\u0179\2\2\u1f01\u1f05\7\u00da\2\2\u1f02"+
		"\u1f03\7\u01a6\2\2\u1f03\u1f05\7\u00da\2\2\u1f04\u1f00\3\2\2\2\u1f04\u1f02"+
		"\3\2\2\2\u1f04\u1f05\3\2\2\2\u1f05\u1f08\3\2\2\2\u1f06\u1f08\7\u00da\2"+
		"\2\u1f07\u1efb\3\2\2\2\u1f07\u1efd\3\2\2\2\u1f07\u1eff\3\2\2\2\u1f07\u1f06"+
		"\3\2\2\2\u1f08\u03b9\3\2\2\2\u1f09\u1f0c\7\u0118\2\2\u1f0a\u1f0c\3\2\2"+
		"\2\u1f0b\u1f09\3\2\2\2\u1f0b\u1f0a\3\2\2\2\u1f0c\u03bb\3\2\2\2\u1f0d\u1f12"+
		"\7\u0118\2\2\u1f0e\u1f0f\7\u01da\2\2\u1f0f\u1f12\7\u01db\2\2\u1f10\u1f12"+
		"\3\2\2\2\u1f11\u1f0d\3\2\2\2\u1f11\u1f0e\3\2\2\2\u1f11\u1f10\3\2\2\2\u1f12"+
		"\u03bd\3\2\2\2\u1f13\u1f14\5\u03ea\u01f6\2\u1f14\u1f15\7\u0179\2\2\u1f15"+
		"\u1f16\5\u0448\u0225\2\u1f16\u1f17\7\u0155\2\2\u1f17\u1f18\5\u03c0\u01e1"+
		"\2\u1f18\u1f19\5\u0434\u021b\2\u1f19\u1f1a\5\u045a\u022e\2\u1f1a\u1f1b"+
		"\5\u03ae\u01d8\2\u1f1b\u03bf\3\2\2\2\u1f1c\u1f21\5\u03c2\u01e2\2\u1f1d"+
		"\u1f1e\7\b\2\2\u1f1e\u1f20\5\u03c2\u01e2\2\u1f1f\u1f1d\3\2\2\2\u1f20\u1f23"+
		"\3\2\2\2\u1f21\u1f1f\3\2\2\2\u1f21\u1f22\3\2\2\2\u1f22\u03c1\3\2\2\2\u1f23"+
		"\u1f21\3\2\2\2\u1f24\u1f25\5\u03c4\u01e3\2\u1f25\u1f26\7\f\2\2\u1f26\u1f27"+
		"\5\u049c\u024f\2\u1f27\u1f2f\3\2\2\2\u1f28\u1f29\7\4\2\2\u1f29\u1f2a\5"+
		"\u03c6\u01e4\2\u1f2a\u1f2b\7\5\2\2\u1f2b\u1f2c\7\f\2\2\u1f2c\u1f2d\5\u049c"+
		"\u024f\2\u1f2d\u1f2f\3\2\2\2\u1f2e\u1f24\3\2\2\2\u1f2e\u1f28\3\2\2\2\u1f2f"+
		"\u03c3\3\2\2\2\u1f30\u1f31\5\u056c\u02b7\2\u1f31\u1f32\5\u053e\u02a0\2"+
		"\u1f32\u03c5\3\2\2\2\u1f33\u1f38\5\u03c4\u01e3\2\u1f34\u1f35\7\b\2\2\u1f35"+
		"\u1f37\5\u03c4\u01e3\2\u1f36\u1f34\3\2\2\2\u1f37\u1f3a\3\2\2\2\u1f38\u1f36"+
		"\3\2\2\2\u1f38\u1f39\3\2\2\2\u1f39\u03c7\3\2\2\2\u1f3a\u1f38\3\2\2\2\u1f3b"+
		"\u1f3c\7\u00c3\2\2\u1f3c\u1f3d\5\u03ca\u01e6\2\u1f3d\u1f3e\5\u03cc\u01e7"+
		"\2\u1f3e\u1f3f\7\u00bd\2\2\u1f3f\u1f40\5\u03ce\u01e8\2\u1f40\u1f41\7F"+
		"\2\2\u1f41\u1f42\5\u03d0\u01e9\2\u1f42\u03c9\3\2\2\2\u1f43\u1f44\5\u054c"+
		"\u02a7\2\u1f44\u03cb\3\2\2\2\u1f45\u1f46\7\u0115\2\2\u1f46\u1f4b\7\u014c"+
		"\2\2\u1f47\u1f4b\7\u014c\2\2\u1f48\u1f4b\7|\2\2\u1f49\u1f4b\7\u00f8\2"+
		"\2\u1f4a\u1f45\3\2\2\2\u1f4a\u1f47\3\2\2\2\u1f4a\u1f48\3\2\2\2\u1f4a\u1f49"+
		"\3\2\2\2\u1f4b\u1f4e\3\2\2\2\u1f4c\u1f4a\3\2\2\2\u1f4c\u1f4d\3\2\2\2\u1f4d"+
		"\u03cd\3\2\2\2\u1f4e\u1f4c\3\2\2\2\u1f4f\u1f55\3\2\2\2\u1f50\u1f51\7z"+
		"\2\2\u1f51\u1f55\7\u00ea\2\2\u1f52\u1f53\7\u0183\2\2\u1f53\u1f55\7\u00ea"+
		"\2\2\u1f54\u1f4f\3\2\2\2\u1f54\u1f50\3\2\2\2\u1f54\u1f52\3\2\2\2\u1f55"+
		"\u03cf\3\2\2\2\u1f56\u1f59\5\u03d4\u01eb\2\u1f57\u1f59\5\u03d2\u01ea\2"+
		"\u1f58\u1f56\3\2\2\2\u1f58\u1f57\3\2\2\2\u1f59\u03d1\3\2\2\2\u1f5a\u1f5b"+
		"\7\4\2\2\u1f5b\u1f5c\5\u03d4\u01eb\2\u1f5c\u1f5d\7\5\2\2\u1f5d\u1f63\3"+
		"\2\2\2\u1f5e\u1f5f\7\4\2\2\u1f5f\u1f60\5\u03d2\u01ea\2\u1f60\u1f61\7\5"+
		"\2\2\u1f61\u1f63\3\2\2\2\u1f62\u1f5a\3\2\2\2\u1f62\u1f5e\3\2\2\2\u1f63"+
		"\u03d3\3\2\2\2\u1f64\u1f65\5\u03d6\u01ec\2\u1f65\u1f6c\5\u03fa\u01fe\2"+
		"\u1f66\u1f67\5\u0426\u0214\2\u1f67\u1f68\5\u0404\u0203\2\u1f68\u1f6d\3"+
		"\2\2\2\u1f69\u1f6a\5\u0402\u0202\2\u1f6a\u1f6b\5\u0428\u0215\2\u1f6b\u1f6d"+
		"\3\2\2\2\u1f6c\u1f66\3\2\2\2\u1f6c\u1f69\3\2\2\2\u1f6c\u1f6d\3\2\2\2\u1f6d"+
		"\u1f7a\3\2\2\2\u1f6e\u1f6f\5\u03e2\u01f2\2\u1f6f\u1f70\5\u03d6\u01ec\2"+
		"\u1f70\u1f77\5\u03fa\u01fe\2\u1f71\u1f72\5\u0426\u0214\2\u1f72\u1f73\5"+
		"\u0404\u0203\2\u1f73\u1f78\3\2\2\2\u1f74\u1f75\5\u0402\u0202\2\u1f75\u1f76"+
		"\5\u0428\u0215\2\u1f76\u1f78\3\2\2\2\u1f77\u1f71\3\2\2\2\u1f77\u1f74\3"+
		"\2\2\2\u1f77\u1f78\3\2\2\2\u1f78\u1f7a\3\2\2\2\u1f79\u1f64\3\2\2\2\u1f79"+
		"\u1f6e\3\2\2\2\u1f7a\u03d5\3\2\2\2\u1f7b\u1f7e\5\u03d8\u01ed\2\u1f7c\u1f7e"+
		"\5\u03d2\u01ea\2\u1f7d\u1f7b\3\2\2\2\u1f7d\u1f7c\3\2\2\2\u1f7e\u03d7\3"+
		"\2\2\2\u1f7f\u1f87\7h\2\2\u1f80\u1f81\5\u03f8\u01fd\2\u1f81\u1f82\5\u03ec"+
		"\u01f7\2\u1f82\u1f83\5\u0540\u02a1\2\u1f83\u1f88\3\2\2\2\u1f84\u1f85\5"+
		"\u03f6\u01fc\2\u1f85\u1f86\5\u0542\u02a2\2\u1f86\u1f88\3\2\2\2\u1f87\u1f80"+
		"\3\2\2\2\u1f87\u1f84\3\2\2\2\u1f88\u1f89\3\2\2\2\u1f89\u1f8a\5\u03ec\u01f7"+
		"\2\u1f8a\u1f8b\5\u0434\u021b\2\u1f8b\u1f8c\5\u0458\u022d\2\u1f8c\u1f8d"+
		"\5\u0416\u020c\2\u1f8d\u1f8e\5\u0424\u0213\2\u1f8e\u1f8f\5\u04e8\u0275"+
		"\2\u1f8f\u1f90\5\u03da\u01ee\2\u1f90\u1f9b\3\2\2\2\u1f91\u1f9b\5\u0432"+
		"\u021a\2\u1f92\u1f93\7l\2\2\u1f93\u1f9b\5\u0444\u0223\2\u1f94\u1f95\5"+
		"\u03d2\u01ea\2\u1f95\u1f98\5\u03e0\u01f1\2\u1f96\u1f99\5\u03d8\u01ed\2"+
		"\u1f97\u1f99\5\u03d2\u01ea\2\u1f98\u1f96\3\2\2\2\u1f98\u1f97\3\2\2\2\u1f99"+
		"\u1f9b\3\2\2\2\u1f9a\u1f7f\3\2\2\2\u1f9a\u1f91\3\2\2\2\u1f9a\u1f92\3\2"+
		"\2\2\u1f9a\u1f94\3\2\2\2\u1f9b\u1fa3\3\2\2\2\u1f9c\u1f9f\5\u03e0\u01f1"+
		"\2\u1f9d\u1fa0\5\u03d8\u01ed\2\u1f9e\u1fa0\5\u03d2\u01ea\2\u1f9f\u1f9d"+
		"\3\2\2\2\u1f9f\u1f9e\3\2\2\2\u1fa0\u1fa2\3\2\2\2\u1fa1\u1f9c\3\2\2\2\u1fa2"+
		"\u1fa5\3\2\2\2\u1fa3\u1fa1\3\2\2\2\u1fa3\u1fa4\3\2\2\2\u1fa4\u03d9\3\2"+
		"\2\2\u1fa5\u1fa3\3\2\2\2\u1fa6\u1fa7\7u\2\2\u1fa7\u1fa8\7e\2\2\u1fa8\u1fab"+
		"\5\u03dc\u01ef\2\u1fa9\u1fab\3\2\2\2\u1faa\u1fa6\3\2\2\2\u1faa\u1fa9\3"+
		"\2\2\2\u1fab\u03db\3\2\2\2\u1fac\u1fad\t%\2\2\u1fad\u03dd\3\2\2\2\u1fae"+
		"\u1fb2\7r\2\2\u1faf\u1fb2\7N\2\2\u1fb0\u1fb2\7C\2\2\u1fb1\u1fae\3\2\2"+
		"\2\u1fb1\u1faf\3\2\2\2\u1fb1\u1fb0\3\2\2\2\u1fb2\u03df\3\2\2\2\u1fb3\u1fb4"+
		"\5\u03de\u01f0\2\u1fb4\u1fb5\5\u03f4\u01fb\2\u1fb5\u03e1\3\2\2\2\u1fb6"+
		"\u1fb8\7z\2\2\u1fb7\u1fb9\7\u0137\2\2\u1fb8\u1fb7\3\2\2\2\u1fb8\u1fb9"+
		"\3\2\2\2\u1fb9\u1fba\3\2\2\2\u1fba\u1fbb\5\u03e4\u01f3\2\u1fbb\u03e3\3"+
		"\2\2\2\u1fbc\u1fc1\5\u03e6\u01f4\2\u1fbd\u1fbe\7\b\2\2\u1fbe\u1fc0\5\u03e6"+
		"\u01f4\2\u1fbf\u1fbd\3\2\2\2\u1fc0\u1fc3\3\2\2\2\u1fc1\u1fbf\3\2\2\2\u1fc1"+
		"\u1fc2\3\2\2\2\u1fc2\u03e5\3\2\2\2\u1fc3\u1fc1\3\2\2\2\u1fc4\u1fc5\5\u054c"+
		"\u02a7\2\u1fc5\u1fc6\5\u037e\u01c0\2\u1fc6\u1fc7\7\'\2\2\u1fc7\u1fc8\5"+
		"\u03e8\u01f5\2\u1fc8\u1fc9\7\4\2\2\u1fc9\u1fca\5\u0396\u01cc\2\u1fca\u1fcb"+
		"\7\5\2\2\u1fcb\u03e7\3\2\2\2\u1fcc\u1fd1\7\u010b\2\2\u1fcd\u1fce\7Z\2"+
		"\2\u1fce\u1fd1\7\u010b\2\2\u1fcf\u1fd1\3\2\2\2\u1fd0\u1fcc\3\2\2\2\u1fd0"+
		"\u1fcd\3\2\2\2\u1fd0\u1fcf\3\2\2\2\u1fd1\u03e9\3\2\2\2\u1fd2\u1fd5\5\u03e2"+
		"\u01f2\2\u1fd3\u1fd5\3\2\2\2\u1fd4\u1fd2\3\2\2\2\u1fd4\u1fd3\3\2\2\2\u1fd5"+
		"\u03eb\3\2\2\2\u1fd6\u1fdb\7O\2\2\u1fd7\u1fd8\5\u03ee\u01f8\2\u1fd8\u1fd9"+
		"\5\u03f0\u01f9\2\u1fd9\u1fdc\3\2\2\2\u1fda\u1fdc\5\u062a\u0316\2\u1fdb"+
		"\u1fd7\3\2\2\2\u1fdb\u1fda\3\2\2\2\u1fdc\u1fdf\3\2\2\2\u1fdd\u1fdf\3\2"+
		"\2\2\u1fde\u1fd6\3\2\2\2\u1fde\u1fdd\3\2\2\2\u1fdf\u03ed\3\2\2\2\u1fe0"+
		"\u1fe3\3\2\2\2\u1fe1\u1fe3\7\u0162\2\2\u1fe2\u1fe0\3\2\2\2\u1fe2\u1fe1"+
		"\3\2\2\2\u1fe3\u03ef\3\2\2\2\u1fe4\u1fe6\t&\2\2\u1fe5\u1fe4\3\2\2\2\u1fe5"+
		"\u1fe6\3\2\2\2\u1fe6\u1fe7\3\2\2\2\u1fe7\u1fe8\t\r\2\2\u1fe8\u1fe9\5\u03f2"+
		"\u01fa\2\u1fe9\u1fea\5\u0548\u02a5\2\u1fea\u1ff3\3\2\2\2\u1feb\u1fec\7"+
		"\u0177\2\2\u1fec\u1fed\5\u03f2\u01fa\2\u1fed\u1fee\5\u0548\u02a5\2\u1fee"+
		"\u1ff3\3\2\2\2\u1fef\u1ff0\7l\2\2\u1ff0\u1ff3\5\u0548\u02a5\2\u1ff1\u1ff3"+
		"\5\u0548\u02a5\2\u1ff2\u1fe5\3\2\2\2\u1ff2\u1feb\3\2\2\2\u1ff2\u1fef\3"+
		"\2\2\2\u1ff2\u1ff1\3\2\2\2\u1ff3\u03f1\3\2\2\2\u1ff4\u1ff7\7l\2\2\u1ff5"+
		"\u1ff7\3\2\2\2\u1ff6\u1ff4\3\2\2\2\u1ff6\u1ff5\3\2\2\2\u1ff7\u03f3\3\2"+
		"\2\2\u1ff8\u1ffc\7!\2\2\u1ff9\u1ffc\7@\2\2\u1ffa\u1ffc\3\2\2\2\u1ffb\u1ff8"+
		"\3\2\2\2\u1ffb\u1ff9\3\2\2\2\u1ffb\u1ffa\3\2\2\2\u1ffc\u03f5\3\2\2\2\u1ffd"+
		"\u2003\7@\2\2\u1ffe\u1fff\7]\2\2\u1fff\u2000\7\4\2\2\u2000\u2001\5\u0510"+
		"\u0289\2\u2001\u2002\7\5\2\2\u2002\u2004\3\2\2\2\u2003\u1ffe\3\2\2\2\u2003"+
		"\u2004\3\2\2\2\u2004\u03f7\3\2\2\2\u2005\u2008\7!\2\2\u2006\u2008\3\2"+
		"\2\2\u2007\u2005\3\2\2\2\u2007\u2006\3\2\2\2\u2008\u03f9\3\2\2\2\u2009"+
		"\u200c\5\u03fc\u01ff\2\u200a\u200c\3\2\2\2\u200b\u2009\3\2\2\2\u200b\u200a"+
		"\3\2\2\2\u200c\u03fb\3\2\2\2\u200d\u200e\7`\2\2\u200e\u200f\7\u00a4\2"+
		"\2\u200f\u2010\5\u03fe\u0200\2\u2010\u03fd\3\2\2\2\u2011\u2016\5\u0400"+
		"\u0201\2\u2012\u2013\7\b\2\2\u2013\u2015\5\u0400\u0201\2\u2014\u2012\3"+
		"\2\2\2\u2015\u2018\3\2\2\2\u2016\u2014\3\2\2\2\u2016\u2017\3\2\2\2\u2017"+
		"\u03ff\3\2\2\2\u2018\u2016\3\2\2\2\u2019\u201d\5\u049c\u024f\2\u201a\u201b"+
		"\7u\2\2\u201b\u201e\5\u050c\u0287\2\u201c\u201e\5\u027a\u013e\2\u201d"+
		"\u201a\3\2\2\2\u201d\u201c\3\2\2\2\u201e\u201f\3\2\2\2\u201f\u2020\5\u027c"+
		"\u013f\2\u2020\u0401\3\2\2\2\u2021\u2023\5\u0406\u0204\2\u2022\u2024\5"+
		"\u0408\u0205\2\u2023\u2022\3\2\2\2\u2023\u2024\3\2\2\2\u2024\u202a\3\2"+
		"\2\2\u2025\u2027\5\u0408\u0205\2\u2026\u2028\5\u0406\u0204\2\u2027\u2026"+
		"\3\2\2\2\u2027\u2028\3\2\2\2\u2028\u202a\3\2\2\2\u2029\u2021\3\2\2\2\u2029"+
		"\u2025\3\2\2\2\u202a\u0403\3\2\2\2\u202b\u202e\5\u0402\u0202\2\u202c\u202e"+
		"\3\2\2\2\u202d\u202b\3\2\2\2\u202d\u202c\3\2\2\2\u202e\u0405\3\2\2\2\u202f"+
		"\u2030\7W\2\2\u2030\u2033\5\u040a\u0206\2\u2031\u2032\7\b\2\2\u2032\u2034"+
		"\5\u040c\u0207\2\u2033\u2031\3\2\2\2\u2033\u2034\3\2\2\2\u2034\u2047\3"+
		"\2\2\2\u2035\u2036\7E\2\2\u2036\u2044\5\u0414\u020b\2\u2037\u2038\5\u040e"+
		"\u0208\2\u2038\u203c\5\u0412\u020a\2\u2039\u203d\7^\2\2\u203a\u203b\7"+
		"z\2\2\u203b\u203d\7\u01dc\2\2\u203c\u2039\3\2\2\2\u203c\u203a\3\2\2\2"+
		"\u203d\u2045\3\2\2\2\u203e\u2042\5\u0412\u020a\2\u203f\u2043\7^\2\2\u2040"+
		"\u2041\7z\2\2\u2041\u2043\7\u01dc\2\2\u2042\u203f\3\2\2\2\u2042\u2040"+
		"\3\2\2\2\u2043\u2045\3\2\2\2\u2044\u2037\3\2\2\2\u2044\u203e\3\2\2\2\u2045"+
		"\u2047\3\2\2\2\u2046\u202f\3\2\2\2\u2046\u2035\3\2\2\2\u2047\u0407\3\2"+
		"\2\2\u2048\u204d\7\\\2\2\u2049\u204e\5\u040c\u0207\2\u204a\u204b\5\u040e"+
		"\u0208\2\u204b\u204c\5\u0412\u020a\2\u204c\u204e\3\2\2\2\u204d\u2049\3"+
		"\2\2\2\u204d\u204a\3\2\2\2\u204e\u0409\3\2\2\2\u204f\u2052\5\u049c\u024f"+
		"\2\u2050\u2052\7!\2\2\u2051\u204f\3\2\2\2\u2051\u2050\3\2\2\2\u2052\u040b"+
		"\3\2\2\2\u2053\u2054\5\u049c\u024f\2\u2054\u040d\3\2\2\2\u2055\u205b\5"+
		"\u04c6\u0264\2\u2056\u2057\7\16\2\2\u2057\u205b\5\u0410\u0209\2\u2058"+
		"\u2059\7\17\2\2\u2059\u205b\5\u0410\u0209\2\u205a\u2055\3\2\2\2\u205a"+
		"\u2056\3\2\2\2\u205a\u2058\3\2\2\2\u205b\u040f\3\2\2\2\u205c\u205f\5\u055c"+
		"\u02af\2\u205d\u205f\5\u055a\u02ae\2\u205e\u205c\3\2\2\2\u205e\u205d\3"+
		"\2\2\2\u205f\u0411\3\2\2\2\u2060\u2061\t\'\2\2\u2061\u0413\3\2\2\2\u2062"+
		"\u2063\t(\2\2\u2063\u0415\3\2\2\2\u2064\u2065\7J\2\2\u2065\u2066\7\u00a4"+
		"\2\2\u2066\u2069\5\u0418\u020d\2\u2067\u2069\3\2\2\2\u2068\u2064\3\2\2"+
		"\2\u2068\u2067\3\2\2\2\u2069\u0417\3\2\2\2\u206a\u206f\5\u041a\u020e\2"+
		"\u206b\u206c\7\b\2\2\u206c\u206e\5\u041a\u020e\2\u206d\u206b\3\2\2\2\u206e"+
		"\u2071\3\2\2\2\u206f\u206d\3\2\2\2\u206f\u2070\3\2\2\2\u2070\u0419\3\2"+
		"\2\2\u2071\u206f\3\2\2\2\u2072\u2078\5\u049c\u024f\2\u2073\u2078\5\u041c"+
		"\u020f\2\u2074\u2078\5\u0420\u0211\2\u2075\u2078\5\u041e\u0210\2\u2076"+
		"\u2078\5\u0422\u0212\2\u2077\u2072\3\2\2\2\u2077\u2073\3\2\2\2\u2077\u2074"+
		"\3\2\2\2\u2077\u2075\3\2\2\2\u2077\u2076\3\2\2\2\u2078\u041b\3\2\2\2\u2079"+
		"\u207a\7\4\2\2\u207a\u207b\7\5\2\2\u207b\u041d\3\2\2\2\u207c\u207d\7\u01dd"+
		"\2\2\u207d\u207e\7\4\2\2\u207e\u207f\5\u0510\u0289\2\u207f\u2080\7\5\2"+
		"\2\u2080\u041f\3\2\2\2\u2081\u2082\7\u01de\2\2\u2082\u2083\7\4\2\2\u2083"+
		"\u2084\5\u0510\u0289\2\u2084\u2085\7\5\2\2\u2085\u0421\3\2\2\2\u2086\u2087"+
		"\7\u01df\2\2\u2087\u2088\7\u01e0\2\2\u2088\u2089\7\4\2\2\u2089\u208a\5"+
		"\u0418\u020d\2\u208a\u208b\7\5\2\2\u208b\u0423\3\2\2\2\u208c\u208d\7K"+
		"\2\2\u208d\u2090\5\u049c\u024f\2\u208e\u2090\3\2\2\2\u208f\u208c\3\2\2"+
		"\2\u208f\u208e\3\2\2\2\u2090\u0425\3\2\2\2\u2091\u2096\5\u042a\u0216\2"+
		"\u2092\u2093\7F\2\2\u2093\u2094\7\u0134\2\2\u2094\u2096\7^\2\2\u2095\u2091"+
		"\3\2\2\2\u2095\u2092\3\2\2\2\u2096\u0427\3\2\2\2\u2097\u209a\5\u0426\u0214"+
		"\2\u2098\u209a\3\2\2\2\u2099\u2097\3\2\2\2\u2099\u2098\3\2\2\2\u209a\u0429"+
		"\3\2\2\2\u209b\u209d\5\u042c\u0217\2\u209c\u209b\3\2\2\2\u209d\u209e\3"+
		"\2\2\2\u209e\u209c\3\2\2\2\u209e\u209f\3\2\2\2\u209f\u042b\3\2\2\2\u20a0"+
		"\u20a1\5\u042e\u0218\2\u20a1\u20a2\5\u0430\u0219\2\u20a2\u20a3\5\u03bc"+
		"\u01df\2\u20a3\u042d\3\2\2\2\u20a4\u20ae\7F\2\2\u20a5\u20a6\7\u0115\2"+
		"\2\u20a6\u20a8\7\u00fd\2\2\u20a7\u20a5\3\2\2\2\u20a7\u20a8\3\2\2\2\u20a8"+
		"\u20a9\3\2\2\2\u20a9\u20af\7\u0179\2\2\u20aa\u20ac\7\u00fd\2\2\u20ab\u20aa"+
		"\3\2\2\2\u20ab\u20ac\3\2\2\2\u20ac\u20ad\3\2\2\2\u20ad\u20af\7\u0156\2"+
		"\2\u20ae\u20a7\3\2\2\2\u20ae\u20ab\3\2\2\2\u20af\u042f\3\2\2\2\u20b0\u20b1"+
		"\7\u011b\2\2\u20b1\u20b4\5\u0546\u02a4\2\u20b2\u20b4\3\2\2\2\u20b3\u20b0"+
		"\3\2\2\2\u20b3\u20b2\3\2\2\2\u20b4\u0431\3\2\2\2\u20b5\u20b6\7\u01ae\2"+
		"\2\u20b6\u20b7\7\4\2\2\u20b7\u20b8\5\u0510\u0289\2\u20b8\u20c0\7\5\2\2"+
		"\u20b9\u20ba\7\b\2\2\u20ba\u20bb\7\4\2\2\u20bb\u20bc\5\u0510\u0289\2\u20bc"+
		"\u20bd\7\5\2\2\u20bd\u20bf\3\2\2\2\u20be\u20b9\3\2\2\2\u20bf\u20c2\3\2"+
		"\2\2\u20c0\u20be\3\2\2\2\u20c0\u20c1\3\2\2\2\u20c1\u0433\3\2\2\2\u20c2"+
		"\u20c0\3\2\2\2\u20c3\u20c4\7H\2\2\u20c4\u20c7\5\u0436\u021c\2\u20c5\u20c7"+
		"\3\2\2\2\u20c6\u20c3\3\2\2\2\u20c6\u20c5\3\2\2\2\u20c7\u0435\3\2\2\2\u20c8"+
		"\u20cd\5\u0438\u021d\2\u20c9\u20ca\7\b\2\2\u20ca\u20cc\5\u0438\u021d\2"+
		"\u20cb\u20c9\3\2\2\2\u20cc\u20cf\3\2\2\2\u20cd\u20cb\3\2\2\2\u20cd\u20ce"+
		"\3\2\2\2\u20ce\u0437\3\2\2\2\u20cf\u20cd\3\2\2\2\u20d0\u20d1\5\u0444\u0223"+
		"\2\u20d1\u20d3\5\u043c\u021f\2\u20d2\u20d4\5\u044a\u0226\2\u20d3\u20d2"+
		"\3\2\2\2\u20d3\u20d4\3\2\2\2\u20d4\u2102\3\2\2\2\u20d5\u20d6\5\u044e\u0228"+
		"\2\u20d6\u20d7\5\u043e\u0220\2\u20d7\u2102\3\2\2\2\u20d8\u20d9\5\u0462"+
		"\u0232\2\u20d9\u20da\5\u043c\u021f\2\u20da\u2102\3\2\2\2\u20db\u20dc\5"+
		"\u03d2\u01ea\2\u20dc\u20dd\5\u043c\u021f\2\u20dd\u2102\3\2\2\2\u20de\u20e8"+
		"\7T\2\2\u20df\u20e0\5\u0462\u0232\2\u20e0\u20e1\5\u043c\u021f\2\u20e1"+
		"\u20e9\3\2\2\2\u20e2\u20e3\5\u044e\u0228\2\u20e3\u20e4\5\u043e\u0220\2"+
		"\u20e4\u20e9\3\2\2\2\u20e5\u20e6\5\u03d2\u01ea\2\u20e6\u20e7\5\u043c\u021f"+
		"\2\u20e7\u20e9\3\2\2\2\u20e8\u20df\3\2\2\2\u20e8\u20e2\3\2\2\2\u20e8\u20e5"+
		"\3\2\2\2\u20e9\u2102\3\2\2\2\u20ea\u20eb\7\4\2\2\u20eb\u20fc\5\u0438\u021d"+
		"\2\u20ec\u20ed\7\177\2\2\u20ed\u20ee\7\u0087\2\2\u20ee\u20fd\5\u0438\u021d"+
		"\2\u20ef\u20f1\7\u008a\2\2\u20f0\u20f2\5\u0440\u0221\2\u20f1\u20f0\3\2"+
		"\2\2\u20f1\u20f2\3\2\2\2\u20f2\u20f3\3\2\2\2\u20f3\u20f4\7\u0087\2\2\u20f4"+
		"\u20fd\5\u0438\u021d\2\u20f5\u20f7\5\u0440\u0221\2\u20f6\u20f5\3\2\2\2"+
		"\u20f6\u20f7\3\2\2\2\u20f7\u20f8\3\2\2\2\u20f8\u20f9\7\u0087\2\2\u20f9"+
		"\u20fa\5\u0438\u021d\2\u20fa\u20fb\5\u0442\u0222\2\u20fb\u20fd\3\2\2\2"+
		"\u20fc\u20ec\3\2\2\2\u20fc\u20ef\3\2\2\2\u20fc\u20f6\3\2\2\2\u20fc\u20fd"+
		"\3\2\2\2\u20fd\u20fe\3\2\2\2\u20fe\u20ff\7\5\2\2\u20ff\u2100\5\u043c\u021f"+
		"\2\u2100\u2102\3\2\2\2\u2101\u20d0\3\2\2\2\u2101\u20d5\3\2\2\2\u2101\u20d8"+
		"\3\2\2\2\u2101\u20db\3\2\2\2\u2101\u20de\3\2\2\2\u2101\u20ea\3\2\2\2\u2102"+
		"\u2115\3\2\2\2\u2103\u2104\7\177\2\2\u2104\u2105\7\u0087\2\2\u2105\u2114"+
		"\5\u0438\u021d\2\u2106\u2108\7\u008a\2\2\u2107\u2109\5\u0440\u0221\2\u2108"+
		"\u2107\3\2\2\2\u2108\u2109\3\2\2\2\u2109\u210a\3\2\2\2\u210a\u210b\7\u0087"+
		"\2\2\u210b\u2114\5\u0438\u021d\2\u210c\u210e\5\u0440\u0221\2\u210d\u210c"+
		"\3\2\2\2\u210d\u210e\3\2\2\2\u210e\u210f\3\2\2\2\u210f\u2110\7\u0087\2"+
		"\2\u2110\u2111\5\u0438\u021d\2\u2111\u2112\5\u0442\u0222\2\u2112\u2114"+
		"\3\2\2\2\u2113\u2103\3\2\2\2\u2113\u2106\3\2\2\2\u2113\u210d\3\2\2\2\u2114"+
		"\u2117\3\2\2\2\u2115\u2113\3\2\2\2\u2115\u2116\3\2\2\2\u2116\u0439\3\2"+
		"\2\2\u2117\u2115\3\2\2\2\u2118\u211a\7\'\2\2\u2119\u2118\3\2\2\2\u2119"+
		"\u211a\3\2\2\2\u211a\u211b\3\2\2\2\u211b\u2120\5\u056c\u02b7\2\u211c\u211d"+
		"\7\4\2\2\u211d\u211e\5\u054a\u02a6\2\u211e\u211f\7\5\2\2\u211f\u2121\3"+
		"\2\2\2\u2120\u211c\3\2\2\2\u2120\u2121\3\2\2\2\u2121\u043b\3\2\2\2\u2122"+
		"\u2125\5\u043a\u021e\2\u2123\u2125\3\2\2\2\u2124\u2122\3\2\2\2\u2124\u2123"+
		"\3\2\2\2\u2125\u043d\3\2\2\2\u2126\u2134\5\u043a\u021e\2\u2127\u2129\7"+
		"\'\2\2\u2128\u212a\5\u056c\u02b7\2\u2129\u2128\3\2\2\2\u2129\u212a\3\2"+
		"\2\2\u212a\u212d\3\2\2\2\u212b\u212d\5\u056c\u02b7\2\u212c\u2127\3\2\2"+
		"\2\u212c\u212b\3\2\2\2\u212d\u212e\3\2\2\2\u212e\u212f\7\4\2\2\u212f\u2130"+
		"\5\u045e\u0230\2\u2130\u2131\7\5\2\2\u2131\u2134\3\2\2\2\u2132\u2134\3"+
		"\2\2\2\u2133\u2126\3\2\2\2\u2133\u212c\3\2\2\2\u2133\u2132\3\2\2\2\u2134"+
		"\u043f\3\2\2\2\u2135\u2137\t)\2\2\u2136\u2138\7\u008c\2\2\u2137\u2136"+
		"\3\2\2\2\u2137\u2138\3\2\2\2\u2138\u0441\3\2\2\2\u2139\u213a\7u\2\2\u213a"+
		"\u213b\7\4\2\2\u213b\u213c\5\u054a\u02a6\2\u213c\u213d\7\5\2\2\u213d\u2141"+
		"\3\2\2\2\u213e\u213f\7]\2\2\u213f\u2141\5\u049c\u024f\2\u2140\u2139\3"+
		"\2\2\2\u2140\u213e\3\2\2\2\u2141\u0443\3\2\2\2\u2142\u2144\5\u0548\u02a5"+
		"\2\u2143\u2145\7\13\2\2\u2144\u2143\3\2\2\2\u2144\u2145\3\2\2\2\u2145"+
		"\u214f\3\2\2\2\u2146\u214c\7^\2\2\u2147\u214d\5\u0548\u02a5\2\u2148\u2149"+
		"\7\4\2\2\u2149\u214a\5\u0548\u02a5\2\u214a\u214b\7\5\2\2\u214b\u214d\3"+
		"\2\2\2\u214c\u2147\3\2\2\2\u214c\u2148\3\2\2\2\u214d\u214f\3\2\2\2\u214e"+
		"\u2142\3\2\2\2\u214e\u2146\3\2\2\2\u214f\u0445\3\2\2\2\u2150\u2155\5\u0444"+
		"\u0223\2\u2151\u2152\7\b\2\2\u2152\u2154\5\u0444\u0223\2\u2153\u2151\3"+
		"\2\2\2\u2154\u2157\3\2\2\2\u2155\u2153\3\2\2\2\u2155\u2156\3\2\2\2\u2156"+
		"\u0447\3\2\2\2\u2157\u2155\3\2\2\2\u2158\u215d\5\u0444\u0223\2\u2159\u215b"+
		"\7\'\2\2\u215a\u2159\3\2\2\2\u215a\u215b\3\2\2\2\u215b\u215c\3\2\2\2\u215c"+
		"\u215e\5\u056c\u02b7\2\u215d\u215a\3\2\2\2\u215d\u215e\3\2\2\2\u215e\u0449"+
		"\3\2\2\2\u215f\u2160\7\u01e1\2\2\u2160\u2161\5\u0552\u02aa\2\u2161\u2162"+
		"\7\4\2\2\u2162\u2163\5\u0510\u0289\2\u2163\u2164\7\5\2\2\u2164\u2165\5"+
		"\u044c\u0227\2\u2165\u044b\3\2\2\2\u2166\u2167\7\u013e\2\2\u2167\u2168"+
		"\7\4\2\2\u2168\u2169\5\u049c\u024f\2\u2169\u216a\7\5\2\2\u216a\u216d\3"+
		"\2\2\2\u216b\u216d\3\2\2\2\u216c\u2166\3\2\2\2\u216c\u216b\3\2\2\2\u216d"+
		"\u044d\3\2\2\2\u216e\u216f\5\u04ce\u0268\2\u216f\u2170\5\u0456\u022c\2"+
		"\u2170\u2179\3\2\2\2\u2171\u2172\7\u0148\2\2\u2172\u2173\7H\2\2\u2173"+
		"\u2174\7\4\2\2\u2174\u2175\5\u0452\u022a\2\u2175\u2176\7\5\2\2\u2176\u2177"+
		"\5\u0456\u022c\2\u2177\u2179\3\2\2\2\u2178\u216e\3\2\2\2\u2178\u2171\3"+
		"\2\2\2\u2179\u044f\3\2\2\2\u217a\u217b\5\u04ce\u0268\2\u217b\u217c\5\u0454"+
		"\u022b\2\u217c\u0451\3\2\2\2\u217d\u2182\5\u0450\u0229\2\u217e\u217f\7"+
		"\b\2\2\u217f\u2181\5\u0450\u0229\2\u2180\u217e\3\2\2\2\u2181\u2184\3\2"+
		"\2\2\u2182\u2180\3\2\2\2\u2182\u2183\3\2\2\2\u2183\u0453\3\2\2\2\u2184"+
		"\u2182\3\2\2\2\u2185\u2186\7\'\2\2\u2186\u2187\7\4\2\2\u2187\u2188\5\u045e"+
		"\u0230\2\u2188\u2189\7\5\2\2\u2189\u218c\3\2\2\2\u218a\u218c\3\2\2\2\u218b"+
		"\u2185\3\2\2\2\u218b\u218a\3\2\2\2\u218c\u0455\3\2\2\2\u218d\u218e\7z"+
		"\2\2\u218e\u2191\7\u01e2\2\2\u218f\u2191\3\2\2\2\u2190\u218d\3\2\2\2\u2190"+
		"\u218f\3\2\2\2\u2191\u0457\3\2\2\2\u2192\u2193\7x\2\2\u2193\u2196\5\u049c"+
		"\u024f\2\u2194\u2196\3\2\2\2\u2195\u2192\3\2\2\2\u2195\u2194\3\2\2\2\u2196"+
		"\u0459\3\2\2\2\u2197\u219c\7x\2\2\u2198\u2199\7\u01ba\2\2\u2199\u219a"+
		"\7\u011b\2\2\u219a\u219d\5\u03ca\u01e6\2\u219b\u219d\5\u049c\u024f\2\u219c"+
		"\u2198\3\2\2\2\u219c\u219b\3\2\2\2\u219d\u21a0\3\2\2\2\u219e\u21a0\3\2"+
		"\2\2\u219f\u2197\3\2\2\2\u219f\u219e\3\2\2\2\u21a0\u045b\3\2\2\2\u21a1"+
		"\u21a4\5\u045e\u0230\2\u21a2\u21a4\3\2\2\2\u21a3\u21a1\3\2\2\2\u21a3\u21a2"+
		"\3\2\2\2\u21a4\u045d\3\2\2\2\u21a5\u21aa\5\u0460\u0231\2\u21a6\u21a7\7"+
		"\b\2\2\u21a7\u21a9\5\u0460\u0231\2\u21a8\u21a6\3\2\2\2\u21a9\u21ac\3\2"+
		"\2\2\u21aa\u21a8\3\2\2\2\u21aa\u21ab\3\2\2\2\u21ab\u045f\3\2\2\2\u21ac"+
		"\u21aa\3\2\2\2\u21ad\u21ae\5\u056c\u02b7\2\u21ae\u21af\5\u0470\u0239\2"+
		"\u21af\u21b0\5~@\2\u21b0\u0461\3\2\2\2\u21b1\u21b2\7\u01e3\2\2\u21b2\u21c2"+
		"\7\4\2\2\u21b3\u21b4\5\u04c6\u0264\2\u21b4\u21b5\5\u04e0\u0271\2\u21b5"+
		"\u21b6\7\u01e4\2\2\u21b6\u21b7\5\u0464\u0233\2\u21b7\u21c3\3\2\2\2\u21b8"+
		"\u21b9\7\u01e5\2\2\u21b9\u21ba\7\4\2\2\u21ba\u21bb\5\u046c\u0237\2\u21bb"+
		"\u21bc\7\5\2\2\u21bc\u21bd\7\b\2\2\u21bd\u21be\5\u04c6\u0264\2\u21be\u21bf"+
		"\5\u04e0\u0271\2\u21bf\u21c0\7\u01e4\2\2\u21c0\u21c1\5\u0464\u0233\2\u21c1"+
		"\u21c3\3\2\2\2\u21c2\u21b3\3\2\2\2\u21c2\u21b8\3\2\2\2\u21c3\u21c4\3\2"+
		"\2\2\u21c4\u21c5\7\5\2\2\u21c5\u0463\3\2\2\2\u21c6\u21cb\5\u0466\u0234"+
		"\2\u21c7\u21c8\7\b\2\2\u21c8\u21ca\5\u0466\u0234\2\u21c9\u21c7\3\2\2\2"+
		"\u21ca\u21cd\3\2\2\2\u21cb\u21c9\3\2\2\2\u21cb\u21cc\3\2\2\2\u21cc\u0465"+
		"\3\2\2\2\u21cd\u21cb\3\2\2\2\u21ce\u21d5\5\u056c\u02b7\2\u21cf\u21d1\5"+
		"\u0470\u0239\2\u21d0\u21d2\5\u0468\u0235\2\u21d1\u21d0\3\2\2\2\u21d1\u21d2"+
		"\3\2\2\2\u21d2\u21d6\3\2\2\2\u21d3\u21d4\7F\2\2\u21d4\u21d6\7\u01e2\2"+
		"\2\u21d5\u21cf\3\2\2\2\u21d5\u21d3\3\2\2\2\u21d6\u0467\3\2\2\2\u21d7\u21d9"+
		"\5\u046a\u0236\2\u21d8\u21d7\3\2\2\2\u21d9\u21da\3\2\2\2\u21da\u21d8\3"+
		"\2\2\2\u21da\u21db\3\2\2\2\u21db\u0469\3\2\2\2\u21dc\u21dd\7=\2\2\u21dd"+
		"\u21e5\5\u049c\u024f\2\u21de\u21df\5\u0574\u02bb\2\u21df\u21e0\5\u049c"+
		"\u024f\2\u21e0\u21e5\3\2\2\2\u21e1\u21e2\7Z\2\2\u21e2\u21e5\7[\2\2\u21e3"+
		"\u21e5\7[\2\2\u21e4\u21dc\3\2\2\2\u21e4\u21de\3\2\2\2\u21e4\u21e1\3\2"+
		"\2\2\u21e4\u21e3\3\2\2\2\u21e5\u046b\3\2\2\2\u21e6\u21eb\5\u046e\u0238"+
		"\2\u21e7\u21e8\7\b\2\2\u21e8\u21ea\5\u046e\u0238\2\u21e9\u21e7\3\2\2\2"+
		"\u21ea\u21ed\3\2\2\2\u21eb\u21e9\3\2\2\2\u21eb\u21ec\3\2\2\2\u21ec\u046d"+
		"\3\2\2\2\u21ed\u21eb\3\2\2\2\u21ee\u21ef\5\u04c4\u0263\2\u21ef\u21f0\7"+
		"\'\2\2\u21f0\u21f1\5\u0572\u02ba\2\u21f1\u21f5\3\2\2\2\u21f2\u21f3\7="+
		"\2\2\u21f3\u21f5\5\u04c4\u0263\2\u21f4\u21ee\3\2\2\2\u21f4\u21f2\3\2\2"+
		"\2\u21f5\u046f\3\2\2\2\u21f6\u21f8\7\u01a7\2\2\u21f7\u21f6\3\2\2\2\u21f7"+
		"\u21f8\3\2\2\2\u21f8\u21f9\3\2\2\2\u21f9\u2202\5\u0474\u023b\2\u21fa\u2203"+
		"\5\u0472\u023a\2\u21fb\u2200\7&\2\2\u21fc\u21fd\7\6\2\2\u21fd\u21fe\5"+
		"\u055c\u02af\2\u21fe\u21ff\7\7\2\2\u21ff\u2201\3\2\2\2\u2200\u21fc\3\2"+
		"\2\2\u2200\u2201\3\2\2\2\u2201\u2203\3\2\2\2\u2202\u21fa\3\2\2\2\u2202"+
		"\u21fb\3\2\2\2\u2203\u2209\3\2\2\2\u2204\u2205\5\u0548\u02a5\2\u2205\u2206"+
		"\7\35\2\2\u2206\u2207\t*\2\2\u2207\u2209\3\2\2\2\u2208\u21f7\3\2\2\2\u2208"+
		"\u2204\3\2\2\2\u2209\u0471\3\2\2\2\u220a\u220c\7\6\2\2\u220b\u220d\5\u055c"+
		"\u02af\2\u220c\u220b\3\2\2\2\u220c\u220d\3\2\2\2\u220d\u220e\3\2\2\2\u220e"+
		"\u2210\7\7\2\2\u220f\u220a\3\2\2\2\u2210\u2213\3\2\2\2\u2211\u220f\3\2"+
		"\2\2\u2211\u2212\3\2\2\2\u2212\u0473\3\2\2\2\u2213\u2211\3\2\2\2\u2214"+
		"\u2222\5\u0478\u023d\2\u2215\u2222\5\u047c\u023f\2\u2216\u2222\5\u0480"+
		"\u0241\2\u2217\u2222\5\u0488\u0245\2\u2218\u2222\5\u0490\u0249\2\u2219"+
		"\u221f\5\u0492\u024a\2\u221a\u2220\5\u0496\u024c\2\u221b\u221c\7\4\2\2"+
		"\u221c\u221d\5\u055c\u02af\2\u221d\u221e\7\5\2\2\u221e\u2220\3\2\2\2\u221f"+
		"\u221a\3\2\2\2\u221f\u221b\3\2\2\2\u2220\u2222\3\2\2\2\u2221\u2214\3\2"+
		"\2\2\u2221\u2215\3\2\2\2\u2221\u2216\3\2\2\2\u2221\u2217\3\2\2\2\u2221"+
		"\u2218\3\2\2\2\u2221\u2219\3\2\2\2\u2222\u0475\3\2\2\2\u2223\u2228\5\u047c"+
		"\u023f\2\u2224\u2228\5\u0482\u0242\2\u2225\u2228\5\u048a\u0246\2\u2226"+
		"\u2228\5\u0490\u0249\2\u2227\u2223\3\2\2\2\u2227\u2224\3\2\2\2\u2227\u2225"+
		"\3\2\2\2\u2227\u2226\3\2\2\2\u2228\u0477\3\2\2\2\u2229\u222b\5\u056e\u02b8"+
		"\2\u222a\u222c\5\u0224\u0113\2\u222b\u222a\3\2\2\2\u222b\u222c\3\2\2\2"+
		"\u222c\u222d\3\2\2\2\u222d\u222e\5\u047a\u023e\2\u222e\u0479\3\2\2\2\u222f"+
		"\u2230\7\4\2\2\u2230\u2231\5\u0510\u0289\2\u2231\u2232\7\5\2\2\u2232\u2235"+
		"\3\2\2\2\u2233\u2235\3\2\2\2\u2234\u222f\3\2\2\2\u2234\u2233\3\2\2\2\u2235"+
		"\u047b\3\2\2\2\u2236\u2247\7\u0199\2\2\u2237\u2247\7\u019a\2\2\u2238\u2247"+
		"\7\u01a8\2\2\u2239\u2247\7\u018c\2\2\u223a\u2247\7\u01a5\2\2\u223b\u223c"+
		"\7\u0196\2\2\u223c\u2247\5\u047e\u0240\2\u223d\u223e\7\u00cf\2\2\u223e"+
		"\u2247\7\u01a4\2\2\u223f\u2240\7\u0193\2\2\u2240\u2247\5\u047a\u023e\2"+
		"\u2241\u2242\7\u0192\2\2\u2242\u2247\5\u047a\u023e\2\u2243\u2244\7\u01a1"+
		"\2\2\u2244\u2247\5\u047a\u023e\2\u2245\u2247\7\u018e\2\2\u2246\u2236\3"+
		"\2\2\2\u2246\u2237\3\2\2\2\u2246\u2238\3\2\2\2\u2246\u2239\3\2\2\2\u2246"+
		"\u223a\3\2\2\2\u2246\u223b\3\2\2\2\u2246\u223d\3\2\2\2\u2246\u223f\3\2"+
		"\2\2\u2246\u2241\3\2\2\2\u2246\u2243\3\2\2\2\u2246\u2245\3\2\2\2\u2247"+
		"\u047d\3\2\2\2\u2248\u2249\7\4\2\2\u2249\u224a\5\u055c\u02af\2\u224a\u224b"+
		"\7\5\2\2\u224b\u224e\3\2\2\2\u224c\u224e\3\2\2\2\u224d\u2248\3\2\2\2\u224d"+
		"\u224c\3\2\2\2\u224e\u047f\3\2\2\2\u224f\u2252\5\u0484\u0243\2\u2250\u2252"+
		"\5\u0486\u0244\2\u2251\u224f\3\2\2\2\u2251\u2250\3\2\2\2\u2252\u0481\3"+
		"\2\2\2\u2253\u2256\5\u0484\u0243\2\u2254\u2256\5\u0486\u0244\2\u2255\u2253"+
		"\3\2\2\2\u2255\u2254\3\2\2\2\u2256\u0483\3\2\2\2\u2257\u2258\7\u018d\2"+
		"\2\u2258\u2259\5\u048e\u0248\2\u2259\u225a\7\4\2\2\u225a\u225b\5\u0510"+
		"\u0289\2\u225b\u225c\7\5\2\2\u225c\u0485\3\2\2\2\u225d\u225e\7\u018d\2"+
		"\2\u225e\u225f\5\u048e\u0248\2\u225f\u0487\3\2\2\2\u2260\u2265\5\u048c"+
		"\u0247\2\u2261\u2262\7\4\2\2\u2262\u2263\5\u055c\u02af\2\u2263\u2264\7"+
		"\5\2\2\u2264\u2266\3\2\2\2\u2265\u2261\3\2\2\2\u2265\u2266\3\2\2\2\u2266"+
		"\u0489\3\2\2\2\u2267\u226c\5\u048c\u0247\2\u2268\u2269\7\4\2\2\u2269\u226a"+
		"\5\u055c\u02af\2\u226a\u226b\7\5\2\2\u226b\u226d\3\2\2\2\u226c\u2268\3"+
		"\2\2\2\u226c\u226d\3\2\2\2\u226d\u048b\3\2\2\2\u226e\u226f\t+\2\2\u226f"+
		"\u2275\5\u048e\u0248\2\u2270\u2275\7\u01af\2\2\u2271\u2272\7\u019d\2\2"+
		"\u2272\u2273\t,\2\2\u2273\u2275\5\u048e\u0248\2\u2274\u226e\3\2\2\2\u2274"+
		"\u2270\3\2\2\2\u2274\u2271\3\2\2\2\u2275\u048d\3\2\2\2\u2276\u2279\7\u017e"+
		"\2\2\u2277\u2279\3\2\2\2\u2278\u2276\3\2\2\2\u2278\u2277\3\2\2\2\u2279"+
		"\u048f\3\2\2\2\u227a\u227f\t-\2\2\u227b\u227c\7\4\2\2\u227c\u227d\5\u055c"+
		"\u02af\2\u227d\u227e\7\5\2\2\u227e\u2280\3\2\2\2\u227f\u227b\3\2\2\2\u227f"+
		"\u2280\3\2\2\2\u2280\u2281\3\2\2\2\u2281\u2282\5\u0494\u024b\2\u2282\u0491"+
		"\3\2\2\2\u2283\u2284\7\u019b\2\2\u2284\u0493\3\2\2\2\u2285\u2286\7z\2"+
		"\2\u2286\u2287\7\u01aa\2\2\u2287\u228d\7\u018a\2\2\u2288\u2289\7\u0183"+
		"\2\2\u2289\u228a\7\u01aa\2\2\u228a\u228d\7\u018a\2\2\u228b\u228d\3\2\2"+
		"\2\u228c\u2285\3\2\2\2\u228c\u2288\3\2\2\2\u228c\u228b\3\2\2\2\u228d\u0495"+
		"\3\2\2\2\u228e\u22a9\7\u0188\2\2\u228f\u22a9\7\u0110\2\2\u2290\u22a9\7"+
		"\u00c1\2\2\u2291\u22a9\7\u00eb\2\2\u2292\u22a9\7\u010d\2\2\u2293\u22a9"+
		"\5\u0498\u024d\2\u2294\u2295\7\u0188\2\2\u2295\u2296\7n\2\2\u2296\u22a9"+
		"\7\u0110\2\2\u2297\u2298\7\u00c1\2\2\u2298\u229c\7n\2\2\u2299\u229d\7"+
		"\u00eb\2\2\u229a\u229d\7\u010d\2\2\u229b\u229d\5\u0498\u024d\2\u229c\u2299"+
		"\3\2\2\2\u229c\u229a\3\2\2\2\u229c\u229b\3\2\2\2\u229d\u22a9\3\2\2\2\u229e"+
		"\u229f\7\u00eb\2\2\u229f\u22a2\7n\2\2\u22a0\u22a3\7\u010d\2\2\u22a1\u22a3"+
		"\5\u0498\u024d\2\u22a2\u22a0\3\2\2\2\u22a2\u22a1\3\2\2\2\u22a3\u22a9\3"+
		"\2\2\2\u22a4\u22a5\7\u010d\2\2\u22a5\u22a6\7n\2\2\u22a6\u22a9\5\u0498"+
		"\u024d\2\u22a7\u22a9\3\2\2\2\u22a8\u228e\3\2\2\2\u22a8\u228f\3\2\2\2\u22a8"+
		"\u2290\3\2\2\2\u22a8\u2291\3\2\2\2\u22a8\u2292\3\2\2\2\u22a8\u2293\3\2"+
		"\2\2\u22a8\u2294\3\2\2\2\u22a8\u2297\3\2\2\2\u22a8\u229e\3\2\2\2\u22a8"+
		"\u22a4\3\2\2\2\u22a8\u22a7\3\2\2\2\u22a9\u0497\3\2\2\2\u22aa\u22af\7\u014e"+
		"\2\2\u22ab\u22ac\7\4\2\2\u22ac\u22ad\5\u055c\u02af\2\u22ad\u22ae\7\5\2"+
		"\2\u22ae\u22b0\3\2\2\2\u22af\u22ab\3\2\2\2\u22af\u22b0\3\2\2\2\u22b0\u0499"+
		"\3\2\2\2\u22b1\u22b2\7\u00d6\2\2\u22b2\u22b5\5\u049c\u024f\2\u22b3\u22b5"+
		"\3\2\2\2\u22b4\u22b1\3\2\2\2\u22b4\u22b3\3\2\2\2\u22b5\u049b\3\2\2\2\u22b6"+
		"\u22b7\5\u049e\u0250\2\u22b7\u049d\3\2\2\2\u22b8\u22ba\5\u04a0\u0251\2"+
		"\u22b9\u22bb\5\u050a\u0286\2\u22ba\u22b9\3\2\2\2\u22ba\u22bb\3\2\2\2\u22bb"+
		"\u049f\3\2\2\2\u22bc\u22c1\5\u04a2\u0252\2\u22bd\u22be\t.\2\2\u22be\u22c0"+
		"\5\u04a2\u0252\2\u22bf\u22bd\3\2\2\2\u22c0\u22c3\3\2\2\2\u22c1\u22bf\3"+
		"\2\2\2\u22c1\u22c2\3\2\2\2\u22c2\u04a1\3\2\2\2\u22c3\u22c1\3\2\2\2\u22c4"+
		"\u22c9\5\u04a4\u0253\2\u22c5\u22c6\7_\2\2\u22c6\u22c8\5\u04a4\u0253\2"+
		"\u22c7\u22c5\3\2\2\2\u22c8\u22cb\3\2\2\2\u22c9\u22c7\3\2\2\2\u22c9\u22ca"+
		"\3\2\2\2\u22ca\u04a3\3\2\2\2\u22cb\u22c9\3\2\2\2\u22cc\u22d1\5\u04a6\u0254"+
		"\2\u22cd\u22ce\7$\2\2\u22ce\u22d0\5\u04a6\u0254\2\u22cf\u22cd\3\2\2\2"+
		"\u22d0\u22d3\3\2\2\2\u22d1\u22cf\3\2\2\2\u22d1\u22d2\3\2\2\2\u22d2\u04a5"+
		"\3\2\2\2\u22d3\u22d1\3\2\2\2\u22d4\u22da\5\u04a8\u0255\2\u22d5\u22d7\7"+
		"Z\2\2\u22d6\u22d5\3\2\2\2\u22d6\u22d7\3\2\2\2\u22d7\u22d8\3\2\2\2\u22d8"+
		"\u22d9\7L\2\2\u22d9\u22db\5\u052a\u0296\2\u22da\u22d6\3\2\2\2\u22da\u22db"+
		"\3\2\2\2\u22db\u04a7\3\2\2\2\u22dc\u22de\7Z\2\2\u22dd\u22dc\3\2\2\2\u22dd"+
		"\u22de\3\2\2\2\u22de\u22df\3\2\2\2\u22df\u22e0\5\u04aa\u0256\2\u22e0\u04a9"+
		"\3\2\2\2\u22e1\u22e3\5\u04ac\u0257\2\u22e2\u22e4\t/\2\2\u22e3\u22e2\3"+
		"\2\2\2\u22e3\u22e4\3\2\2\2\u22e4\u04ab\3\2\2\2\u22e5\u22fd\5\u04ae\u0258"+
		"\2\u22e6\u22e8\7\u0085\2\2\u22e7\u22e9\7Z\2\2\u22e8\u22e7\3\2\2\2\u22e8"+
		"\u22e9\3\2\2\2\u22e9\u22fb\3\2\2\2\u22ea\u22fc\7[\2\2\u22eb\u22fc\7q\2"+
		"\2\u22ec\u22fc\7D\2\2\u22ed\u22fc\7\u0175\2\2\u22ee\u22ef\7@\2\2\u22ef"+
		"\u22f0\7H\2\2\u22f0\u22fc\5\u049c\u024f\2\u22f1\u22f2\7\u011b\2\2\u22f2"+
		"\u22f3\7\4\2\2\u22f3\u22f4\5\u0516\u028c\2\u22f4\u22f5\7\5\2\2\u22f5\u22fc"+
		"\3\2\2\2\u22f6\u22fc\7\u00cd\2\2\u22f7\u22f9\5\u0520\u0291\2\u22f8\u22f7"+
		"\3\2\2\2\u22f8\u22f9\3\2\2\2\u22f9\u22fa\3\2\2\2\u22fa\u22fc\7\u01e7\2"+
		"\2\u22fb\u22ea\3\2\2\2\u22fb\u22eb\3\2\2\2\u22fb\u22ec\3\2\2\2\u22fb\u22ed"+
		"\3\2\2\2\u22fb\u22ee\3\2\2\2\u22fb\u22f1\3\2\2\2\u22fb\u22f6\3\2\2\2\u22fb"+
		"\u22f8\3\2\2\2\u22fc\u22fe\3\2\2\2\u22fd\u22e6\3\2\2\2\u22fd\u22fe\3\2"+
		"\2\2\u22fe\u04ad\3\2\2\2\u22ff\u230b\5\u04b0\u0259\2\u2300\u2301\t\60"+
		"\2\2\u2301\u230c\5\u04b0\u0259\2\u2302\u2303\5\u050e\u0288\2\u2303\u2309"+
		"\5\u0504\u0283\2\u2304\u230a\5\u03d2\u01ea\2\u2305\u2306\7\4\2\2\u2306"+
		"\u2307\5\u049c\u024f\2\u2307\u2308\7\5\2\2\u2308\u230a\3\2\2\2\u2309\u2304"+
		"\3\2\2\2\u2309\u2305\3\2\2\2\u230a\u230c\3\2\2\2\u230b\u2300\3\2\2\2\u230b"+
		"\u2302\3\2\2\2\u230b\u230c\3\2\2\2\u230c\u04af\3\2\2\2\u230d\u231e\5\u04b2"+
		"\u025a\2\u230e\u2310\7Z\2\2\u230f\u230e\3\2\2\2\u230f\u2310\3\2\2\2\u2310"+
		"\u2319\3\2\2\2\u2311\u231a\7\u0089\2\2\u2312\u231a\7\u0083\2\2\u2313\u2314"+
		"\7\u0090\2\2\u2314\u231a\7n\2\2\u2315\u2317\7\u018b\2\2\u2316\u2318\7"+
		"k\2\2\u2317\u2316\3\2\2\2\u2317\u2318\3\2\2\2\u2318\u231a\3\2\2\2\u2319"+
		"\u2311\3\2\2\2\u2319\u2312\3\2\2\2\u2319\u2313\3\2\2\2\u2319\u2315\3\2"+
		"\2\2\u231a\u231b\3\2\2\2\u231b\u231c\5\u04b2\u025a\2\u231c\u231d\5\u049a"+
		"\u024e\2\u231d\u231f\3\2\2\2\u231e\u230f\3\2\2\2\u231e\u231f\3\2\2\2\u231f"+
		"\u04b1\3\2\2\2\u2320\u2326\5\u04b4\u025b\2\u2321\u2322\5\u050a\u0286\2"+
		"\u2322\u2323\5\u04b4\u025b\2\u2323\u2325\3\2\2\2\u2324\u2321\3\2\2\2\u2325"+
		"\u2328\3\2\2\2\u2326\u2324\3\2\2\2\u2326\u2327\3\2\2\2\u2327\u04b3\3\2"+
		"\2\2\u2328\u2326\3\2\2\2\u2329\u232b\5\u050a\u0286\2\u232a\u2329\3\2\2"+
		"\2\u232a\u232b\3\2\2\2\u232b\u232c\3\2\2\2\u232c\u232d\5\u04b6\u025c\2"+
		"\u232d\u04b5\3\2\2\2\u232e\u2333\5\u04b8\u025d\2\u232f\u2330\t\61\2\2"+
		"\u2330\u2332\5\u04b8\u025d\2\u2331\u232f\3\2\2\2\u2332\u2335\3\2\2\2\u2333"+
		"\u2331\3\2\2\2\u2333\u2334\3\2\2\2\u2334\u04b7\3\2\2\2\u2335\u2333\3\2"+
		"\2\2\u2336\u233b\5\u04ba\u025e\2\u2337\u2338\t\62\2\2\u2338\u233a\5\u04ba"+
		"\u025e\2\u2339\u2337\3\2\2\2\u233a\u233d\3\2\2\2\u233b\u2339\3\2\2\2\u233b"+
		"\u233c\3\2\2\2\u233c\u04b9\3\2\2\2\u233d\u233b\3\2\2\2\u233e\u2341\5\u04bc"+
		"\u025f\2\u233f\u2340\7\21\2\2\u2340\u2342\5\u049c\u024f\2\u2341\u233f"+
		"\3\2\2\2\u2341\u2342\3\2\2\2\u2342\u04bb\3\2\2\2\u2343\u2345\t\61\2\2"+
		"\u2344\u2343\3\2\2\2\u2344\u2345\3\2\2\2\u2345\u2346\3\2\2\2\u2346\u2347"+
		"\5\u04be\u0260\2\u2347\u04bd\3\2\2\2\u2348\u234d\5\u04c0\u0261\2\u2349"+
		"\u234a\7\u009f\2\2\u234a\u234b\7\u01aa\2\2\u234b\u234c\7\u018a\2\2\u234c"+
		"\u234e\5\u049c\u024f\2\u234d\u2349\3\2\2\2\u234d\u234e\3\2\2\2\u234e\u04bf"+
		"\3\2\2\2\u234f\u2352\5\u04c2\u0262\2\u2350\u2351\7\62\2\2\u2351\u2353"+
		"\5\u0222\u0112\2\u2352\u2350\3\2\2\2\u2352\u2353\3\2\2\2\u2353\u04c1\3"+
		"\2\2\2\u2354\u2359\5\u04c6\u0264\2\u2355\u2356\7\34\2\2\u2356\u2358\5"+
		"\u0470\u0239\2\u2357\u2355\3\2\2\2\u2358\u235b\3\2\2\2\u2359\u2357\3\2"+
		"\2\2\u2359\u235a\3\2\2\2\u235a\u04c3\3\2\2\2\u235b\u2359\3\2\2\2\u235c"+
		"\u235d\b\u0263\1\2\u235d\u2364\5\u04c6\u0264\2\u235e\u235f\t\61\2\2\u235f"+
		"\u2364\5\u04c4\u0263\13\u2360\u2361\5\u050a\u0286\2\u2361\u2362\5\u04c4"+
		"\u0263\5\u2362\u2364\3\2\2\2\u2363\u235c\3\2\2\2\u2363\u235e\3\2\2\2\u2363"+
		"\u2360\3\2\2\2\u2364\u238c\3\2\2\2\u2365\u2366\f\n\2\2\u2366\u2367\7\21"+
		"\2\2\u2367\u238b\5\u04c4\u0263\13\u2368\u2369\f\t\2\2\u2369\u236a\t\62"+
		"\2\2\u236a\u238b\5\u04c4\u0263\n\u236b\u236c\f\b\2\2\u236c\u236d\t\61"+
		"\2\2\u236d\u238b\5\u04c4\u0263\t\u236e\u236f\f\7\2\2\u236f\u2370\5\u050a"+
		"\u0286\2\u2370\u2371\5\u04c4\u0263\b\u2371\u238b\3\2\2\2\u2372\u2373\f"+
		"\6\2\2\u2373\u2374\t\60\2\2\u2374\u238b\5\u04c4\u0263\7\u2375\u2376\f"+
		"\f\2\2\u2376\u2377\7\34\2\2\u2377\u238b\5\u0470\u0239\2\u2378\u2379\f"+
		"\4\2\2\u2379\u238b\5\u050a\u0286\2\u237a\u237b\f\3\2\2\u237b\u237d\7\u0085"+
		"\2\2\u237c\u237e\7Z\2\2\u237d\u237c\3\2\2\2\u237d\u237e\3\2\2\2\u237e"+
		"\u2388\3\2\2\2\u237f\u2380\7@\2\2\u2380\u2381\7H\2\2\u2381\u2389\5\u04c4"+
		"\u0263\2\u2382\u2383\7\u011b\2\2\u2383\u2384\7\4\2\2\u2384\u2385\5\u0516"+
		"\u028c\2\u2385\u2386\7\5\2\2\u2386\u2389\3\2\2\2\u2387\u2389\7\u00cd\2"+
		"\2\u2388\u237f\3\2\2\2\u2388\u2382\3\2\2\2\u2388\u2387\3\2\2\2\u2389\u238b"+
		"\3\2\2\2\u238a\u2365\3\2\2\2\u238a\u2368\3\2\2\2\u238a\u236b\3\2\2\2\u238a"+
		"\u236e\3\2\2\2\u238a\u2372\3\2\2\2\u238a\u2375\3\2\2\2\u238a\u2378\3\2"+
		"\2\2\u238a\u237a\3\2\2\2\u238b\u238e\3\2\2\2\u238c\u238a\3\2\2\2\u238c"+
		"\u238d\3\2\2\2\u238d\u04c5\3\2\2\2\u238e\u238c\3\2\2\2\u238f\u2390\7\u0194"+
		"\2\2\u2390\u23b5\5\u03d2\u01ea\2\u2391\u2394\7&\2\2\u2392\u2395\5\u03d2"+
		"\u01ea\2\u2393\u2395\5\u0518\u028d\2\u2394\u2392\3\2\2\2\u2394\u2393\3"+
		"\2\2\2\u2395\u23b5\3\2\2\2\u2396\u2397\7\36\2\2\u2397\u23b5\5\u053e\u02a0"+
		"\2\u2398\u2399\7\u01df\2\2\u2399\u239a\7\4\2\2\u239a\u239b\5\u0510\u0289"+
		"\2\u239b\u239c\7\5\2\2\u239c\u23b5\3\2\2\2\u239d\u239e\7s\2\2\u239e\u23b5"+
		"\5\u03d2\u01ea\2\u239f\u23b5\5\u0536\u029c\2\u23a0\u23b5\5\u0554\u02ab"+
		"\2\u23a1\u23b5\5\u04c8\u0265\2\u23a2\u23b5\7\37\2\2\u23a3\u23a4\7\4\2"+
		"\2\u23a4\u23a5\5\u049c\u024f\2\u23a5\u23a6\7\5\2\2\u23a6\u23a7\5\u053e"+
		"\u02a0\2\u23a7\u23b5\3\2\2\2\u23a8\u23b5\5\u052c\u0297\2\u23a9\u23b5\5"+
		"\u04cc\u0267\2\u23aa\u23ac\5\u03d2\u01ea\2\u23ab\u23ad\5\u053c\u029f\2"+
		"\u23ac\u23ab\3\2\2\2\u23ac\u23ad\3\2\2\2\u23ad\u23b5\3\2\2\2\u23ae\u23b5"+
		"\5\u0500\u0281\2\u23af\u23b5\5\u0502\u0282\2\u23b0\u23b1\5\u04fe\u0280"+
		"\2\u23b1\u23b2\7\u008e\2\2\u23b2\u23b3\5\u04fe\u0280\2\u23b3\u23b5\3\2"+
		"\2\2\u23b4\u238f\3\2\2\2\u23b4\u2391\3\2\2\2\u23b4\u2396\3\2\2\2\u23b4"+
		"\u2398\3\2\2\2\u23b4\u239d\3\2\2\2\u23b4\u239f\3\2\2\2\u23b4\u23a0\3\2"+
		"\2\2\u23b4\u23a1\3\2\2\2\u23b4\u23a2\3\2\2\2\u23b4\u23a3\3\2\2\2\u23b4"+
		"\u23a8\3\2\2\2\u23b4\u23a9\3\2\2\2\u23b4\u23aa\3\2\2\2\u23b4\u23ae\3\2"+
		"\2\2\u23b4\u23af\3\2\2\2\u23b4\u23b0\3\2\2\2\u23b5\u04c7\3\2\2\2\u23b6"+
		"\u23b7\7\u022b\2\2\u23b7\u04c9\3\2\2\2\u23b8\u23b9\5\u0552\u02aa\2\u23b9"+
		"\u23cc\7\4\2\2\u23ba\u23be\5\u0512\u028a\2\u23bb\u23bc\7\b\2\2\u23bc\u23bd"+
		"\7v\2\2\u23bd\u23bf\5\u0514\u028b\2\u23be\u23bb\3\2\2\2\u23be\u23bf\3"+
		"\2\2\2\u23bf\u23c0\3\2\2\2\u23c0\u23c1\5\u03fa\u01fe\2\u23c1\u23cd\3\2"+
		"\2\2\u23c2\u23c3\7v\2\2\u23c3\u23c4\5\u0514\u028b\2\u23c4\u23c5\5\u03fa"+
		"\u01fe\2\u23c5\u23cd\3\2\2\2\u23c6\u23c7\t\63\2\2\u23c7\u23c8\5\u0512"+
		"\u028a\2\u23c8\u23c9\5\u03fa\u01fe\2\u23c9\u23cd\3\2\2\2\u23ca\u23cd\7"+
		"\13\2\2\u23cb\u23cd\3\2\2\2\u23cc\u23ba\3\2\2\2\u23cc\u23c2\3\2\2\2\u23cc"+
		"\u23c6\3\2\2\2\u23cc\u23ca\3\2\2\2\u23cc\u23cb\3\2\2\2\u23cd\u23ce\3\2"+
		"\2\2\u23ce\u23cf\7\5\2\2\u23cf\u04cb\3\2\2\2\u23d0\u23d1\5\u04ca\u0266"+
		"\2\u23d1\u23d2\5\u04e4\u0273\2\u23d2\u23d3\5\u04e6\u0274\2\u23d3\u23d4"+
		"\5\u04ee\u0278\2\u23d4\u23d7\3\2\2\2\u23d5\u23d7\5\u04d0\u0269\2\u23d6"+
		"\u23d0\3\2\2\2\u23d6\u23d5\3\2\2\2\u23d7\u04cd\3\2\2\2\u23d8\u23db\5\u04ca"+
		"\u0266\2\u23d9\u23db\5\u04d0\u0269\2\u23da\u23d8\3\2\2\2\u23da\u23d9\3"+
		"\2\2\2\u23db\u04cf\3\2\2\2\u23dc\u23dd\7}\2\2\u23dd\u23de\7F\2\2\u23de"+
		"\u23df\7\4\2\2\u23df\u23e0\5\u049c\u024f\2\u23e0\u23e1\7\5\2\2\u23e1\u248e"+
		"\3\2\2\2\u23e2\u248e\78\2\2\u23e3\u23e8\7:\2\2\u23e4\u23e5\7\4\2\2\u23e5"+
		"\u23e6\5\u055c\u02af\2\u23e6\u23e7\7\5\2\2\u23e7\u23e9\3\2\2\2\u23e8\u23e4"+
		"\3\2\2\2\u23e8\u23e9\3\2\2\2\u23e9\u248e\3\2\2\2\u23ea\u23ef\7;\2\2\u23eb"+
		"\u23ec\7\4\2\2\u23ec\u23ed\5\u055c\u02af\2\u23ed\u23ee\7\5\2\2\u23ee\u23f0"+
		"\3\2\2\2\u23ef\u23eb\3\2\2\2\u23ef\u23f0\3\2\2\2\u23f0\u248e\3\2\2\2\u23f1"+
		"\u23f6\7X\2\2\u23f2\u23f3\7\4\2\2\u23f3\u23f4\5\u055c\u02af\2\u23f4\u23f5"+
		"\7\5\2\2\u23f5\u23f7\3\2\2\2\u23f6\u23f2\3\2\2\2\u23f6\u23f7\3\2\2\2\u23f7"+
		"\u248e\3\2\2\2\u23f8\u23fd\7Y\2\2\u23f9\u23fa\7\4\2\2\u23fa\u23fb\5\u055c"+
		"\u02af\2\u23fb\u23fc\7\5\2\2\u23fc\u23fe\3\2\2\2\u23fd\u23f9\3\2\2\2\u23fd"+
		"\u23fe\3\2\2\2\u23fe\u248e\3\2\2\2\u23ff\u248e\79\2\2\u2400\u248e\7<\2"+
		"\2\u2401\u248e\7i\2\2\u2402\u248e\7t\2\2\u2403\u248e\7\67\2\2\u2404\u248e"+
		"\7\u0080\2\2\u2405\u2406\7\60\2\2\u2406\u2407\7\4\2\2\u2407\u2408\5\u049c"+
		"\u024f\2\u2408\u2409\7\'\2\2\u2409\u240a\5\u0470\u0239\2\u240a\u240b\7"+
		"\5\2\2\u240b\u248e\3\2\2\2\u240c\u240d\7\u0195\2\2\u240d\u240e\7\4\2\2"+
		"\u240e\u240f\5\u051c\u028f\2\u240f\u2410\7\5\2\2\u2410\u248e\3\2\2\2\u2411"+
		"\u2412\7\u01f2\2\2\u2412\u2413\7\4\2\2\u2413\u2416\5\u049c\u024f\2\u2414"+
		"\u2415\7\b\2\2\u2415\u2417\5\u0520\u0291\2\u2416\u2414\3\2\2\2\u2416\u2417"+
		"\3\2\2\2\u2417\u2418\3\2\2\2\u2418\u2419\7\5\2\2\u2419\u248e\3\2\2\2\u241a"+
		"\u241b\7\u01a2\2\2\u241b\u241c\7\4\2\2\u241c\u241d\5\u0522\u0292\2\u241d"+
		"\u241e\7\5\2\2\u241e\u248e\3\2\2\2\u241f\u2420\7\u01a3\2\2\u2420\u2421"+
		"\7\4\2\2\u2421\u2422\5\u0524\u0293\2\u2422\u2423\7\5\2\2\u2423\u248e\3"+
		"\2\2\2\u2424\u2425\7\u01a9\2\2\u2425\u2426\7\4\2\2\u2426\u2427\5\u0526"+
		"\u0294\2\u2427\u2428\7\5\2\2\u2428\u248e\3\2\2\2\u2429\u242a\7\u01ac\2"+
		"\2\u242a\u242b\7\4\2\2\u242b\u242c\5\u049c\u024f\2\u242c\u242d\7\'\2\2"+
		"\u242d\u242e\5\u0470\u0239\2\u242e\u242f\7\5\2\2\u242f\u248e\3\2\2\2\u2430"+
		"\u2431\7\u01ad\2\2\u2431\u2433\7\4\2\2\u2432\u2434\t\64\2\2\u2433\u2432"+
		"\3\2\2\2\u2433\u2434\3\2\2\2\u2434\u2435\3\2\2\2\u2435\u2436\5\u0528\u0295"+
		"\2\u2436\u2437\7\5\2\2\u2437\u248e\3\2\2\2\u2438\u2439\7\u01a0\2\2\u2439"+
		"\u243a\7\4\2\2\u243a\u243b\5\u049c\u024f\2\u243b\u243c\7\b\2\2\u243c\u243d"+
		"\5\u049c\u024f\2\u243d\u243e\7\5\2\2\u243e\u248e\3\2\2\2\u243f\u2440\7"+
		"\u0191\2\2\u2440\u2441\7\4\2\2\u2441\u2442\5\u0510\u0289\2\u2442\u2443"+
		"\7\5\2\2\u2443\u248e\3\2\2\2\u2444\u2445\7\u0197\2\2\u2445\u2446\7\4\2"+
		"\2\u2446\u2447\5\u0510\u0289\2\u2447\u2448\7\5\2\2\u2448\u248e\3\2\2\2"+
		"\u2449\u244a\7\u019c\2\2\u244a\u244b\7\4\2\2\u244b\u244c\5\u0510\u0289"+
		"\2\u244c\u244d\7\5\2\2\u244d\u248e\3\2\2\2\u244e\u244f\7\u01b1\2\2\u244f"+
		"\u2450\7\4\2\2\u2450\u2451\5\u0510\u0289\2\u2451\u2452\7\5\2\2\u2452\u248e"+
		"\3\2\2\2\u2453\u2454\7\u01b2\2\2\u2454\u2455\7\4\2\2\u2455\u2456\7\u0112"+
		"\2\2\u2456\u245c\5\u0572\u02ba\2\u2457\u245a\7\b\2\2\u2458\u245b\5\u04d6"+
		"\u026c\2\u2459\u245b\5\u0510\u0289\2\u245a\u2458\3\2\2\2\u245a\u2459\3"+
		"\2\2\2\u245b\u245d\3\2\2\2\u245c\u2457\3\2\2\2\u245c\u245d\3\2\2\2\u245d"+
		"\u245e\3\2\2\2\u245e\u245f\7\5\2\2\u245f\u248e\3\2\2\2\u2460\u2461\7\u01b3"+
		"\2\2\u2461\u2462\7\4\2\2\u2462\u2463\5\u04c6\u0264\2\u2463\u2464\5\u04e0"+
		"\u0271\2\u2464\u2465\7\5\2\2\u2465\u248e\3\2\2\2\u2466\u2467\7\u01b4\2"+
		"\2\u2467\u2468\7\4\2\2\u2468\u2469\5\u04d8\u026d\2\u2469\u246a\7\5\2\2"+
		"\u246a\u248e\3\2\2\2\u246b\u246c\7\u01b5\2\2\u246c\u246d\7\4\2\2\u246d"+
		"\u246e\5\u04dc\u026f\2\u246e\u246f\5\u049c\u024f\2\u246f\u2470\5\u04de"+
		"\u0270\2\u2470\u2471\7\5\2\2\u2471\u248e\3\2\2\2\u2472\u2473\7\u01b6\2"+
		"\2\u2473\u2474\7\4\2\2\u2474\u2475\7\u0112\2\2\u2475\u2478\5\u0572\u02ba"+
		"\2\u2476\u2477\7\b\2\2\u2477\u2479\5\u049c\u024f\2\u2478\u2476\3\2\2\2"+
		"\u2478\u2479\3\2\2\2\u2479\u247a\3\2\2\2\u247a\u247b\7\5\2\2\u247b\u248e"+
		"\3\2\2\2\u247c\u247d\7\u01b7\2\2\u247d\u247e\7\4\2\2\u247e\u247f\7\u0187"+
		"\2\2\u247f\u2480\5\u049c\u024f\2\u2480\u2481\7\b\2\2\u2481\u2482\5\u04d2"+
		"\u026a\2\u2482\u2483\5\u04d4\u026b\2\u2483\u2484\7\5\2\2\u2484\u248e\3"+
		"\2\2\2\u2485\u2486\7\u01b8\2\2\u2486\u2487\7\4\2\2\u2487\u2488\5\u04dc"+
		"\u026f\2\u2488\u2489\5\u049c\u024f\2\u2489\u248a\7\'\2\2\u248a\u248b\5"+
		"\u0474\u023b\2\u248b\u248c\7\5\2\2\u248c\u248e\3\2\2\2\u248d\u23dc\3\2"+
		"\2\2\u248d\u23e2\3\2\2\2\u248d\u23e3\3\2\2\2\u248d\u23ea\3\2\2\2\u248d"+
		"\u23f1\3\2\2\2\u248d\u23f8\3\2\2\2\u248d\u23ff\3\2\2\2\u248d\u2400\3\2"+
		"\2\2\u248d\u2401\3\2\2\2\u248d\u2402\3\2\2\2\u248d\u2403\3\2\2\2\u248d"+
		"\u2404\3\2\2\2\u248d\u2405\3\2\2\2\u248d\u240c\3\2\2\2\u248d\u2411\3\2"+
		"\2\2\u248d\u241a\3\2\2\2\u248d\u241f\3\2\2\2\u248d\u2424\3\2\2\2\u248d"+
		"\u2429\3\2\2\2\u248d\u2430\3\2\2\2\u248d\u2438\3\2\2\2\u248d\u243f\3\2"+
		"\2\2\u248d\u2444\3\2\2\2\u248d\u2449\3\2\2\2\u248d\u244e\3\2\2\2\u248d"+
		"\u2453\3\2\2\2\u248d\u2460\3\2\2\2\u248d\u2466\3\2\2\2\u248d\u246b\3\2"+
		"\2\2\u248d\u2472\3\2\2\2\u248d\u247c\3\2\2\2\u248d\u2485\3\2\2\2\u248e"+
		"\u04d1\3\2\2\2\u248f\u2490\7\u017f\2\2\u2490\u2495\5\u049c\u024f\2\u2491"+
		"\u2492\7\u017f\2\2\u2492\u2493\7\u0115\2\2\u2493\u2495\7\u01cb\2\2\u2494"+
		"\u248f\3\2\2\2\u2494\u2491\3\2\2\2\u2495\u04d3\3\2\2\2\u2496\u2497\7\b"+
		"\2\2\u2497\u2498\7\u015b\2\2\u2498\u24a2\7\u0189\2\2\u2499\u249a\7\b\2"+
		"\2\u249a\u249b\7\u015b\2\2\u249b\u24a2\7\u0115\2\2\u249c\u249d\7\b\2\2"+
		"\u249d\u249e\7\u015b\2\2\u249e\u249f\7\u0115\2\2\u249f\u24a2\7\u01cb\2"+
		"\2\u24a0\u24a2\3\2\2\2\u24a1\u2496\3\2\2\2\u24a1\u2499\3\2\2\2\u24a1\u249c"+
		"\3\2\2\2\u24a1\u24a0\3\2\2\2\u24a2\u04d5\3\2\2\2\u24a3\u24a4\7\u01b0\2"+
		"\2\u24a4\u24a5\7\4\2\2\u24a5\u24a6\5\u04d8\u026d\2\u24a6\u24a7\7\5\2\2"+
		"\u24a7\u04d7\3\2\2\2\u24a8\u24ad\5\u04da\u026e\2\u24a9\u24aa\7\b\2\2\u24aa"+
		"\u24ac\5\u04da\u026e\2\u24ab\u24a9\3\2\2\2\u24ac\u24af\3\2\2\2\u24ad\u24ab"+
		"\3\2\2\2\u24ad\u24ae\3\2\2\2\u24ae\u04d9\3\2\2\2\u24af\u24ad\3\2\2\2\u24b0"+
		"\u24b3\5\u049c\u024f\2\u24b1\u24b2\7\'\2\2\u24b2\u24b4\5\u0572\u02ba\2"+
		"\u24b3\u24b1\3\2\2\2\u24b3\u24b4\3\2\2\2\u24b4\u04db\3\2\2\2\u24b5\u24b6"+
		"\t\65\2\2\u24b6\u04dd\3\2\2\2\u24b7\u24b8\7\u012c\2\2\u24b8\u24bd\7\u0182"+
		"\2\2\u24b9\u24ba\7\u0163\2\2\u24ba\u24bd\7\u0182\2\2\u24bb\u24bd\3\2\2"+
		"\2\u24bc\u24b7\3\2\2\2\u24bc\u24b9\3\2\2\2\u24bc\u24bb\3\2\2\2\u24bd\u04df"+
		"\3\2\2\2\u24be\u24bf\7\u0126\2\2\u24bf\u24ce\5\u04c6\u0264\2\u24c0\u24c1"+
		"\7\u0126\2\2\u24c1\u24c2\5\u04c6\u0264\2\u24c2\u24c3\5\u04e2\u0272\2\u24c3"+
		"\u24ce\3\2\2\2\u24c4\u24c5\7\u0126\2\2\u24c5\u24c6\5\u04e2\u0272\2\u24c6"+
		"\u24c7\5\u04c6\u0264\2\u24c7\u24ce\3\2\2\2\u24c8\u24c9\7\u0126\2\2\u24c9"+
		"\u24ca\5\u04e2\u0272\2\u24ca\u24cb\5\u04c6\u0264\2\u24cb\u24cc\5\u04e2"+
		"\u0272\2\u24cc\u24ce\3\2\2\2\u24cd\u24be\3\2\2\2\u24cd\u24c0\3\2\2\2\u24cd"+
		"\u24c4\3\2\2\2\u24cd\u24c8\3\2\2\2\u24ce\u04e1\3\2\2\2\u24cf\u24d0\7\u00a4"+
		"\2\2\u24d0\u24d1\t\66\2\2\u24d1\u04e3\3\2\2\2\u24d2\u24d3\7\u01e8\2\2"+
		"\u24d3\u24d4\7J\2\2\u24d4\u24d5\7\4\2\2\u24d5\u24d6\5\u03fc\u01ff\2\u24d6"+
		"\u24d7\7\5\2\2\u24d7\u24da\3\2\2\2\u24d8\u24da\3\2\2\2\u24d9\u24d2\3\2"+
		"\2\2\u24d9\u24d8\3\2\2\2\u24da\u04e5\3\2\2\2\u24db\u24dc\7\u01e9\2\2\u24dc"+
		"\u24dd\7\4\2\2\u24dd\u24de\7x\2\2\u24de\u24df\5\u049c\u024f\2\u24df\u24e0"+
		"\7\5\2\2\u24e0\u24e3\3\2\2\2\u24e1\u24e3\3\2\2\2\u24e2\u24db\3\2\2\2\u24e2"+
		"\u24e1\3\2\2\2\u24e3\u04e7\3\2\2\2\u24e4\u24e5\7y\2\2\u24e5\u24e8\5\u04ea"+
		"\u0276\2\u24e6\u24e8\3\2\2\2\u24e7\u24e4\3\2\2\2\u24e7\u24e6\3\2\2\2\u24e8"+
		"\u04e9\3\2\2\2\u24e9\u24ee\5\u04ec\u0277\2\u24ea\u24eb\7\b\2\2\u24eb\u24ed"+
		"\5\u04ec\u0277\2\u24ec\u24ea\3\2\2\2\u24ed\u24f0\3\2\2\2\u24ee\u24ec\3"+
		"\2\2\2\u24ee\u24ef\3\2\2\2\u24ef\u04eb\3\2\2\2\u24f0\u24ee\3\2\2\2\u24f1"+
		"\u24f2\5\u056c\u02b7\2\u24f2\u24f3\7\'\2\2\u24f3\u24f4\5\u04f0\u0279\2"+
		"\u24f4\u04ed\3\2\2\2\u24f5\u24f8\7\u008d\2\2\u24f6\u24f9\5\u04f0\u0279"+
		"\2\u24f7\u24f9\5\u056c\u02b7\2\u24f8\u24f6\3\2\2\2\u24f8\u24f7\3\2\2\2"+
		"\u24f9\u24fc\3\2\2\2\u24fa\u24fc\3\2\2\2\u24fb\u24f5\3\2\2\2\u24fb\u24fa"+
		"\3\2\2\2\u24fc\u04ef\3\2\2\2\u24fd\u24fe\7\4\2\2\u24fe\u24ff\5\u04f2\u027a"+
		"\2\u24ff\u2500\5\u04f4\u027b\2\u2500\u2501\5\u03fa\u01fe\2\u2501\u2502"+
		"\5\u04f6\u027c\2\u2502\u2503\7\5\2\2\u2503\u04f1\3\2\2\2\u2504\u2507\5"+
		"\u056c\u02b7\2\u2505\u2507\3\2\2\2\u2506\u2504\3\2\2\2\u2506\u2505\3\2"+
		"\2\2\u2507\u04f3\3\2\2\2\u2508\u2509\7\u0125\2\2\u2509\u250a\7\u00a4\2"+
		"\2\u250a\u250d\5\u0510\u0289\2\u250b\u250d\3\2\2\2\u250c\u2508\3\2\2\2"+
		"\u250c\u250b\3\2\2\2\u250d\u04f5\3\2\2\2\u250e\u250f\7\u0133\2\2\u250f"+
		"\u2510\5\u04f8\u027d\2\u2510\u2511\5\u04fc\u027f\2\u2511\u251c\3\2\2\2"+
		"\u2512\u2513\7\u0148\2\2\u2513\u2514\5\u04f8\u027d\2\u2514\u2515\5\u04fc"+
		"\u027f\2\u2515\u251c\3\2\2\2\u2516\u2517\7\u01ea\2\2\u2517\u2518\5\u04f8"+
		"\u027d\2\u2518\u2519\5\u04fc\u027f\2\u2519\u251c\3\2\2\2\u251a\u251c\3"+
		"\2\2\2\u251b\u250e\3\2\2\2\u251b\u2512\3\2\2\2\u251b\u2516\3\2\2\2\u251b"+
		"\u251a\3\2\2\2\u251c\u04f7\3\2\2\2\u251d\u2524\5\u04fa\u027e\2\u251e\u251f"+
		"\7\u018b\2\2\u251f\u2520\5\u04fa\u027e\2\u2520\u2521\7$\2\2\u2521\u2522"+
		"\5\u04fa\u027e\2\u2522\u2524\3\2\2\2\u2523\u251d\3\2\2\2\u2523\u251e\3"+
		"\2\2\2\u2524\u04f9\3\2\2\2\u2525\u2526\7\u0172\2\2\u2526\u252d\t\67\2"+
		"\2\u2527\u2528\7\u01ba\2\2\u2528\u252d\7\u01a6\2\2\u2529\u252a\5\u049c"+
		"\u024f\2\u252a\u252b\t\67\2\2\u252b\u252d\3\2\2\2\u252c\u2525\3\2\2\2"+
		"\u252c\u2527\3\2\2\2\u252c\u2529\3\2\2\2\u252d\u04fb\3\2\2\2\u252e\u2535"+
		"\7\u00d8\2\2\u252f\u2530\7\u01ba\2\2\u2530\u2536\7\u01a6\2\2\u2531\u2536"+
		"\7J\2\2\u2532\u2536\7\u01dc\2\2\u2533\u2534\7\u0115\2\2\u2534\u2536\7"+
		"\u01eb\2\2\u2535\u252f\3\2\2\2\u2535\u2531\3\2\2\2\u2535\u2532\3\2\2\2"+
		"\u2535\u2533\3\2\2\2\u2536\u2539\3\2\2\2\u2537\u2539\3\2\2\2\u2538\u252e"+
		"\3\2\2\2\u2538\u2537\3\2\2\2\u2539\u04fd\3\2\2\2\u253a\u253b\7\u01a6\2"+
		"\2\u253b\u253d\7\4\2\2\u253c\u253e\5\u0510\u0289\2\u253d\u253c\3\2\2\2"+
		"\u253d\u253e\3\2\2\2\u253e\u253f\3\2\2\2\u253f\u2547\7\5\2\2\u2540\u2541"+
		"\7\4\2\2\u2541\u2542\5\u0510\u0289\2\u2542\u2543\7\b\2\2\u2543\u2544\5"+
		"\u049c\u024f\2\u2544\u2545\7\5\2\2\u2545\u2547\3\2\2\2\u2546\u253a\3\2"+
		"\2\2\u2546\u2540\3\2\2\2\u2547\u04ff\3\2\2\2\u2548\u2549\7\u01a6\2\2\u2549"+
		"\u254b\7\4\2\2\u254a\u254c\5\u0510\u0289\2\u254b\u254a\3\2\2\2\u254b\u254c"+
		"\3\2\2\2\u254c\u254d\3\2\2\2\u254d\u254e\7\5\2\2\u254e\u0501\3\2\2\2\u254f"+
		"\u2550\7\4\2\2\u2550\u2551\5\u0510\u0289\2\u2551\u2552\7\b\2\2\u2552\u2553"+
		"\5\u049c\u024f\2\u2553\u2554\7\5\2\2\u2554\u0503\3\2\2\2\u2555\u2556\t"+
		"8\2\2\u2556\u0505\3\2\2\2\u2557\u255a\7 \2\2\u2558\u255a\5\u0508\u0285"+
		"\2\u2559\u2557\3\2\2\2\u2559\u2558\3\2\2\2\u255a\u0507\3\2\2\2\u255b\u255c"+
		"\t9\2\2\u255c\u0509\3\2\2\2\u255d\u2564\7 \2\2\u255e\u255f\7\u011e\2\2"+
		"\u255f\u2560\7\4\2\2\u2560\u2561\5\u02c2\u0162\2\u2561\u2562\7\5\2\2\u2562"+
		"\u2564\3\2\2\2\u2563\u255d\3\2\2\2\u2563\u255e\3\2\2\2\u2564\u050b\3\2"+
		"\2\2\u2565\u256c\5\u0506\u0284\2\u2566\u2567\7\u011e\2\2\u2567\u2568\7"+
		"\4\2\2\u2568\u2569\5\u02c2\u0162\2\u2569\u256a\7\5\2\2\u256a\u256c\3\2"+
		"\2\2\u256b\u2565\3\2\2\2\u256b\u2566\3\2\2\2\u256c\u050d\3\2\2\2\u256d"+
		"\u257a\5\u0506\u0284\2\u256e\u256f\7\u011e\2\2\u256f\u2570\7\4\2\2\u2570"+
		"\u2571\5\u02c2\u0162\2\u2571\u2572\7\5\2\2\u2572\u257a\3\2\2\2\u2573\u257a"+
		"\7\u0089\2\2\u2574\u2575\7Z\2\2\u2575\u257a\7\u0089\2\2\u2576\u257a\7"+
		"\u0083\2\2\u2577\u2578\7Z\2\2\u2578\u257a\7\u0083\2\2\u2579\u256d\3\2"+
		"\2\2\u2579\u256e\3\2\2\2\u2579\u2573\3\2\2\2\u2579\u2574\3\2\2\2\u2579"+
		"\u2576\3\2\2\2\u2579\u2577\3\2\2\2\u257a\u050f\3\2\2\2\u257b\u2580\5\u049c"+
		"\u024f\2\u257c\u257d\7\b\2\2\u257d\u257f\5\u049c\u024f\2\u257e\u257c\3"+
		"\2\2\2\u257f\u2582\3\2\2\2\u2580\u257e\3\2\2\2\u2580\u2581\3\2\2\2\u2581"+
		"\u0511\3\2\2\2\u2582\u2580\3\2\2\2\u2583\u2588\5\u0514\u028b\2\u2584\u2585"+
		"\7\b\2\2\u2585\u2587\5\u0514\u028b\2\u2586\u2584\3\2\2\2\u2587\u258a\3"+
		"\2\2\2\u2588\u2586\3\2\2\2\u2588\u2589\3\2\2\2\u2589\u0513\3\2\2\2\u258a"+
		"\u2588\3\2\2\2\u258b\u2591\5\u049c\u024f\2\u258c\u258d\5\u0292\u014a\2"+
		"\u258d\u258e\t:\2\2\u258e\u258f\5\u049c\u024f\2\u258f\u2591\3\2\2\2\u2590"+
		"\u258b\3\2\2\2\u2590\u258c\3\2\2\2\u2591\u0515\3\2\2\2\u2592\u2597\5\u0470"+
		"\u0239\2\u2593\u2594\7\b\2\2\u2594\u2596\5\u0470\u0239\2\u2595\u2593\3"+
		"\2\2\2\u2596\u2599\3\2\2\2\u2597\u2595\3\2\2\2\u2597\u2598\3\2\2\2\u2598"+
		"\u0517\3\2\2\2\u2599\u2597\3\2\2\2\u259a\u259d\7\6\2\2\u259b\u259e\5\u0510"+
		"\u0289\2\u259c\u259e\5\u051a\u028e\2\u259d\u259b\3\2\2\2\u259d\u259c\3"+
		"\2\2\2\u259d\u259e\3\2\2\2\u259e\u259f\3\2\2\2\u259f\u25a0\7\7\2\2\u25a0"+
		"\u0519\3\2\2\2\u25a1\u25a6\5\u0518\u028d\2\u25a2\u25a3\7\b\2\2\u25a3\u25a5"+
		"\5\u0518\u028d\2\u25a4\u25a2\3\2\2\2\u25a5\u25a8\3\2\2\2\u25a6\u25a4\3"+
		"\2\2\2\u25a6\u25a7\3\2\2\2\u25a7\u051b\3\2\2\2\u25a8\u25a6\3\2\2\2\u25a9"+
		"\u25aa\5\u051e\u0290\2\u25aa\u25ab\7H\2\2\u25ab\u25ac\5\u049c\u024f\2"+
		"\u25ac\u25af\3\2\2\2\u25ad\u25af\3\2\2\2\u25ae\u25a9\3\2\2\2\u25ae\u25ad"+
		"\3\2\2\2\u25af\u051d\3\2\2\2\u25b0\u25b9\5\u0574\u02bb\2\u25b1\u25b9\7"+
		"\u0188\2\2\u25b2\u25b9\7\u0110\2\2\u25b3\u25b9\7\u00c1\2\2\u25b4\u25b9"+
		"\7\u00eb\2\2\u25b5\u25b9\7\u010d\2\2\u25b6\u25b9\7\u014e\2\2\u25b7\u25b9"+
		"\5\u055e\u02b0\2\u25b8\u25b0\3\2\2\2\u25b8\u25b1\3\2\2\2\u25b8\u25b2\3"+
		"\2\2\2\u25b8\u25b3\3\2\2\2\u25b8\u25b4\3\2\2\2\u25b8\u25b5\3\2\2\2\u25b8"+
		"\u25b6\3\2\2\2\u25b8\u25b7\3\2\2\2\u25b9\u051f\3\2\2\2\u25ba\u25bb\t;"+
		"\2\2\u25bb\u0521\3\2\2\2\u25bc\u25bd\5\u049c\u024f\2\u25bd\u25be\7c\2"+
		"\2\u25be\u25bf\5\u049c\u024f\2\u25bf\u25c0\7H\2\2\u25c0\u25c3\5\u049c"+
		"\u024f\2\u25c1\u25c2\7F\2\2\u25c2\u25c4\5\u049c\u024f\2\u25c3\u25c1\3"+
		"\2\2\2\u25c3\u25c4\3\2\2\2\u25c4\u0523\3\2\2\2\u25c5\u25c6\5\u04c4\u0263"+
		"\2\u25c6\u25c7\7L\2\2\u25c7\u25c8\5\u04c4\u0263\2\u25c8\u25cb\3\2\2\2"+
		"\u25c9\u25cb\3\2\2\2\u25ca\u25c5\3\2\2\2\u25ca\u25c9\3\2\2\2\u25cb\u0525"+
		"\3\2\2\2\u25cc\u25cd\5\u049c\u024f\2\u25cd\u25ce\7H\2\2\u25ce\u25cf\5"+
		"\u049c\u024f\2\u25cf\u25d0\7F\2\2\u25d0\u25d1\5\u049c\u024f\2\u25d1\u25e9"+
		"\3\2\2\2\u25d2\u25d3\5\u049c\u024f\2\u25d3\u25d4\7F\2\2\u25d4\u25d5\5"+
		"\u049c\u024f\2\u25d5\u25d6\7H\2\2\u25d6\u25d7\5\u049c\u024f\2\u25d7\u25e9"+
		"\3\2\2\2\u25d8\u25d9\5\u049c\u024f\2\u25d9\u25da\7H\2\2\u25da\u25db\5"+
		"\u049c\u024f\2\u25db\u25e9\3\2\2\2\u25dc\u25dd\5\u049c\u024f\2\u25dd\u25de"+
		"\7F\2\2\u25de\u25df\5\u049c\u024f\2\u25df\u25e9\3\2\2\2\u25e0\u25e1\5"+
		"\u049c\u024f\2\u25e1\u25e2\7\u0090\2\2\u25e2\u25e3\5\u049c\u024f\2\u25e3"+
		"\u25e4\7\u00d6\2\2\u25e4\u25e5\5\u049c\u024f\2\u25e5\u25e9\3\2\2\2\u25e6"+
		"\u25e9\5\u0510\u0289\2\u25e7\u25e9\3\2\2\2\u25e8\u25cc\3\2\2\2\u25e8\u25d2"+
		"\3\2\2\2\u25e8\u25d8\3\2\2\2\u25e8\u25dc\3\2\2\2\u25e8\u25e0\3\2\2\2\u25e8"+
		"\u25e6\3\2\2\2\u25e8\u25e7\3\2\2\2\u25e9\u0527\3\2\2\2\u25ea\u25eb\5\u049c"+
		"\u024f\2\u25eb\u25ec\7H\2\2\u25ec\u25ed\5\u0510\u0289\2\u25ed\u25f2\3"+
		"\2\2\2\u25ee\u25ef\7H\2\2\u25ef\u25f2\5\u0510\u0289\2\u25f0\u25f2\5\u0510"+
		"\u0289\2\u25f1\u25ea\3\2\2\2\u25f1\u25ee\3\2\2\2\u25f1\u25f0\3\2\2\2\u25f2"+
		"\u0529\3\2\2\2\u25f3\u25f9\5\u03d2\u01ea\2\u25f4\u25f5\7\4\2\2\u25f5\u25f6"+
		"\5\u0510\u0289\2\u25f6\u25f7\7\5\2\2\u25f7\u25f9\3\2\2\2\u25f8\u25f3\3"+
		"\2\2\2\u25f8\u25f4\3\2\2\2\u25f9\u052b\3\2\2\2\u25fa\u25fb\7/\2\2\u25fb"+
		"\u25fc\5\u0534\u029b\2\u25fc\u25fd\5\u052e\u0298\2\u25fd\u25fe\5\u0532"+
		"\u029a\2\u25fe\u25ff\7\u01cf\2\2\u25ff\u052d\3\2\2\2\u2600\u2602\5\u0530"+
		"\u0299\2\u2601\u2600\3\2\2\2\u2602\u2603\3\2\2\2\u2603\u2601\3\2\2\2\u2603"+
		"\u2604\3\2\2\2\u2604\u052f\3\2\2\2\u2605\u2606\7w\2\2\u2606\u2607\5\u049c"+
		"\u024f\2\u2607\u2608\7m\2\2\u2608\u2609\5\u049c\u024f\2\u2609\u0531\3"+
		"\2\2\2\u260a\u260b\7B\2\2\u260b\u260e\5\u049c\u024f\2\u260c\u260e\3\2"+
		"\2\2\u260d\u260a\3\2\2\2\u260d\u260c\3\2\2\2\u260e\u0533\3\2\2\2\u260f"+
		"\u2612\5\u049c\u024f\2\u2610\u2612\3\2\2\2\u2611\u260f\3\2\2\2\u2611\u2610"+
		"\3\2\2\2\u2612\u0535\3\2\2\2\u2613\u2615\5\u056c\u02b7\2\u2614\u2616\5"+
		"\u053c\u029f\2\u2615\u2614\3\2\2\2\u2615\u2616\3\2\2\2\u2616\u0537\3\2"+
		"\2\2\u2617\u261a\7\r\2\2\u2618\u261b\5\u054e\u02a8\2\u2619\u261b\7\13"+
		"\2\2\u261a\u2618\3\2\2\2\u261a\u2619\3\2\2\2\u261b\u2627\3\2\2\2\u261c"+
		"\u2622\7\6\2\2\u261d\u2623\5\u049c\u024f\2\u261e\u261f\5\u053a\u029e\2"+
		"\u261f\u2620\7\n\2\2\u2620\u2621\5\u053a\u029e\2\u2621\u2623\3\2\2\2\u2622"+
		"\u261d\3\2\2\2\u2622\u261e\3\2\2\2\u2623\u2624\3\2\2\2\u2624\u2625\7\7"+
		"\2\2\u2625\u2627\3\2\2\2\u2626\u2617\3\2\2\2\u2626\u261c\3\2\2\2\u2627"+
		"\u0539\3\2\2\2\u2628\u262b\5\u049c\u024f\2\u2629\u262b\3\2\2\2\u262a\u2628"+
		"\3\2\2\2\u262a\u2629\3\2\2\2\u262b\u053b\3\2\2\2\u262c\u262e\5\u0538\u029d"+
		"\2\u262d\u262c\3\2\2\2\u262e\u262f\3\2\2\2\u262f\u262d\3\2\2\2\u262f\u2630"+
		"\3\2\2\2\u2630\u053d\3\2\2\2\u2631\u2633\5\u0538\u029d\2\u2632\u2631\3"+
		"\2\2\2\u2633\u2636\3\2\2\2\u2634\u2632\3\2\2\2\u2634\u2635\3\2\2\2\u2635"+
		"\u053f\3\2\2\2\u2636\u2634\3\2\2\2\u2637\u263a\5\u0542\u02a2\2\u2638\u263a"+
		"\3\2\2\2\u2639\u2637\3\2\2\2\u2639\u2638\3\2\2\2\u263a\u0541\3\2\2\2\u263b"+
		"\u2640\5\u0544\u02a3\2\u263c\u263d\7\b\2\2\u263d\u263f\5\u0544\u02a3\2"+
		"\u263e\u263c\3\2\2\2\u263f\u2642\3\2\2\2\u2640\u263e\3\2\2\2\u2640\u2641"+
		"\3\2\2\2\u2641\u0543\3\2\2\2\u2642\u2640\3\2\2\2\u2643\u2648\5\u049c\u024f"+
		"\2\u2644\u2645\7\'\2\2\u2645\u2649\5\u0572\u02ba\2\u2646\u2649\5\u0574"+
		"\u02bb\2\u2647\u2649\3\2\2\2\u2648\u2644\3\2\2\2\u2648\u2646\3\2\2\2\u2648"+
		"\u2647\3\2\2\2\u2649\u264c\3\2\2\2\u264a\u264c\7\13\2\2\u264b\u2643\3"+
		"\2\2\2\u264b\u264a\3\2\2\2\u264c\u0545\3\2\2\2\u264d\u2652\5\u0548\u02a5"+
		"\2\u264e\u264f\7\b\2\2\u264f\u2651\5\u0548\u02a5\2\u2650\u264e\3\2\2\2"+
		"\u2651\u2654\3\2\2\2\u2652\u2650\3\2\2\2\u2652\u2653\3\2\2\2\u2653\u0547"+
		"\3\2\2\2\u2654\u2652\3\2\2\2\u2655\u2657\5\u056c\u02b7\2\u2656\u2658\5"+
		"\u053c\u029f\2\u2657\u2656\3\2\2\2\u2657\u2658\3\2\2\2\u2658\u0549\3\2"+
		"\2\2\u2659\u265e\5\u054c\u02a7\2\u265a\u265b\7\b\2\2\u265b\u265d\5\u054c"+
		"\u02a7\2\u265c\u265a\3\2\2\2\u265d\u2660\3\2\2\2\u265e\u265c\3\2\2\2\u265e"+
		"\u265f\3\2\2\2\u265f\u054b\3\2\2\2\u2660\u265e\3\2\2\2\u2661\u2662\5\u056c"+
		"\u02b7\2\u2662\u054d\3\2\2\2\u2663\u2664\5\u0572\u02ba\2\u2664\u054f\3"+
		"\2\2\2\u2665\u2666\5\u055e\u02b0\2\u2666\u0551\3\2\2\2\u2667\u266c\5\u056e"+
		"\u02b8\2\u2668\u2669\5\u056c\u02b7\2\u2669\u266a\5\u053c\u029f\2\u266a"+
		"\u266c\3\2\2\2\u266b\u2667\3\2\2\2\u266b\u2668\3\2\2\2\u266c\u0553\3\2"+
		"\2\2\u266d\u268e\5\u055c\u02af\2\u266e\u268e\5\u055a\u02ae\2\u266f\u268e"+
		"\5\u055e\u02b0\2\u2670\u268e\5\u0558\u02ad\2\u2671\u268e\5\u0556\u02ac"+
		"\2\u2672\u267a\5\u0552\u02aa\2\u2673\u267b\5\u055e\u02b0\2\u2674\u2675"+
		"\7\4\2\2\u2675\u2676\5\u0512\u028a\2\u2676\u2677\5\u03fa\u01fe\2\u2677"+
		"\u2678\7\5\2\2\u2678\u2679\5\u055e\u02b0\2\u2679\u267b\3\2\2\2\u267a\u2673"+
		"\3\2\2\2\u267a\u2674\3\2\2\2\u267b\u268e\3\2\2\2\u267c\u267d\5\u0476\u023c"+
		"\2\u267d\u267e\5\u055e\u02b0\2\u267e\u268e\3\2\2\2\u267f\u2688\5\u0492"+
		"\u024a\2\u2680\u2681\5\u055e\u02b0\2\u2681\u2682\5\u0496\u024c\2\u2682"+
		"\u2689\3\2\2\2\u2683\u2684\7\4\2\2\u2684\u2685\5\u055c\u02af\2\u2685\u2686"+
		"\7\5\2\2\u2686\u2687\5\u055e\u02b0\2\u2687\u2689\3\2\2\2\u2688\u2680\3"+
		"\2\2\2\u2688\u2683\3\2\2\2\u2689\u268e\3\2\2\2\u268a\u268e\7q\2\2\u268b"+
		"\u268e\7D\2\2\u268c\u268e\7[\2\2\u268d\u266d\3\2\2\2\u268d\u266e\3\2\2"+
		"\2\u268d\u266f\3\2\2\2\u268d\u2670\3\2\2\2\u268d\u2671\3\2\2\2\u268d\u2672"+
		"\3\2\2\2\u268d\u267c\3\2\2\2\u268d\u267f\3\2\2\2\u268d\u268a\3\2\2\2\u268d"+
		"\u268b\3\2\2\2\u268d\u268c\3\2\2\2\u268e\u0555\3\2\2\2\u268f\u2690\7\u0224"+
		"\2\2\u2690\u0557\3\2\2\2\u2691\u2692\7\u0220\2\2\u2692\u0559\3\2\2\2\u2693"+
		"\u2694\7\u022a\2\2\u2694\u055b\3\2\2\2\u2695\u2696\7\u0228\2\2\u2696\u055d"+
		"\3\2\2\2\u2697\u2698\5\u0560\u02b1\2\u2698\u2699\5\u0562\u02b2\2\u2699"+
		"\u055f\3\2\2\2\u269a\u26a6\7\u021b\2\2\u269b\u26a6\7\u021d\2\2\u269c\u26a0"+
		"\7\u021f\2\2\u269d\u269f\7\u023b\2\2\u269e\u269d\3\2\2\2\u269f\u26a2\3"+
		"\2\2\2\u26a0\u269e\3\2\2\2\u26a0\u26a1\3\2\2\2\u26a1\u26a3\3\2\2\2\u26a2"+
		"\u26a0\3\2\2\2\u26a3\u26a6\7\u023c\2\2\u26a4\u26a6\7\u0235\2\2\u26a5\u269a"+
		"\3\2\2\2\u26a5\u269b\3\2\2\2\u26a5\u269c\3\2\2\2\u26a5\u26a4\3\2\2\2\u26a6"+
		"\u0561\3\2\2\2\u26a7\u26a8\7\u01f0\2\2\u26a8\u26ab\5\u0560\u02b1\2\u26a9"+
		"\u26ab\3\2\2\2\u26aa\u26a7\3\2\2\2\u26aa\u26a9\3\2\2\2\u26ab\u0563\3\2"+
		"\2\2\u26ac\u26b2\5\u055c\u02af\2\u26ad\u26ae\7\16\2\2\u26ae\u26b2\5\u055c"+
		"\u02af\2\u26af\u26b0\7\17\2\2\u26b0\u26b2\5\u055c\u02af\2\u26b1\u26ac"+
		"\3\2\2\2\u26b1\u26ad\3\2\2\2\u26b1\u26af\3\2\2\2\u26b2\u0565\3\2\2\2\u26b3"+
		"\u26b4\5\u0568\u02b5\2\u26b4\u0567\3\2\2\2\u26b5\u26b9\5\u0570\u02b9\2"+
		"\u26b6\u26b9\7<\2\2\u26b7\u26b9\7i\2\2\u26b8\u26b5\3\2\2\2\u26b8\u26b6"+
		"\3\2\2\2\u26b8\u26b7\3\2\2\2\u26b9\u0569\3\2\2\2\u26ba\u26bf\5\u0568\u02b5"+
		"\2\u26bb\u26bc\7\b\2\2\u26bc\u26be\5\u0568\u02b5\2\u26bd\u26bb\3\2\2\2"+
		"\u26be\u26c1\3\2\2\2\u26bf\u26bd\3\2\2\2\u26bf\u26c0\3\2\2\2\u26c0\u056b"+
		"\3\2\2\2\u26c1\u26bf\3\2\2\2\u26c2\u26c7\5\u0574\u02bb\2\u26c3\u26c7\5"+
		"\u0578\u02bd\2\u26c4\u26c7\5\u057a\u02be\2\u26c5\u26c7\5\u0654\u032b\2"+
		"\u26c6\u26c2\3\2\2\2\u26c6\u26c3\3\2\2\2\u26c6\u26c4\3\2\2\2\u26c6\u26c5"+
		"\3\2\2\2\u26c7\u056d\3\2\2\2\u26c8\u26cd\5\u0574\u02bb\2\u26c9\u26cd\5"+
		"\u0578\u02bd\2\u26ca\u26cd\5\u0654\u032b\2\u26cb\u26cd\5\u057c\u02bf\2"+
		"\u26cc\u26c8\3\2\2\2\u26cc\u26c9\3\2\2\2\u26cc\u26ca\3\2\2\2\u26cc\u26cb"+
		"\3\2\2\2\u26cd\u056f\3\2\2\2\u26ce\u26d3\5\u0574\u02bb\2\u26cf\u26d3\5"+
		"\u0578\u02bd\2\u26d0\u26d3\5\u057a\u02be\2\u26d1\u26d3\5\u057c\u02bf\2"+
		"\u26d2\u26ce\3\2\2\2\u26d2\u26cf\3\2\2\2\u26d2\u26d0\3\2\2\2\u26d2\u26d1"+
		"\3\2\2\2\u26d3\u0571\3\2\2\2\u26d4\u26db\5\u0574\u02bb\2\u26d5\u26db\5"+
		"\u0654\u032b\2\u26d6\u26db\5\u0578\u02bd\2\u26d7\u26db\5\u057a\u02be\2"+
		"\u26d8\u26db\5\u057c\u02bf\2\u26d9\u26db\5\u057e\u02c0\2\u26da\u26d4\3"+
		"\2\2\2\u26da\u26d5\3\2\2\2\u26da\u26d6\3\2\2\2\u26da\u26d7\3\2\2\2\u26da"+
		"\u26d8\3\2\2\2\u26da\u26d9\3\2\2\2\u26db\u0573\3\2\2\2\u26dc\u26dd\7\u0212"+
		"\2\2\u26dd\u26e4\5\u0562\u02b2\2\u26de";
	private static final String _serializedATNSegment4 =
		"\u26e4\7\u0213\2\2\u26df\u26e4\7\u0217\2\2\u26e0\u26e4\5\u04c8\u0265\2"+
		"\u26e1\u26e4\5\u0576\u02bc\2\u26e2\u26e4\5\u0654\u032b\2\u26e3\u26dc\3"+
		"\2\2\2\u26e3\u26de\3\2\2\2\u26e3\u26df\3\2\2\2\u26e3\u26e0\3\2\2\2\u26e3"+
		"\u26e1\3\2\2\2\u26e3\u26e2\3\2\2\2\u26e4\u0575\3\2\2\2\u26e5\u26e6\7\u022c"+
		"\2\2\u26e6\u0577\3\2\2\2\u26e7\u26e8\t<\2\2\u26e8\u0579\3\2\2\2\u26e9"+
		"\u271d\7\u018b\2\2\u26ea\u271d\7\u018c\2\2\u26eb\u271d\5\u0480\u0241\2"+
		"\u26ec\u271d\7\u018e\2\2\u26ed\u271d\7\u018f\2\2\u26ee\u271d\5\u0488\u0245"+
		"\2\u26ef\u271d\7\u0191\2\2\u26f0\u271d\7\u0192\2\2\u26f1\u271d\7\u0193"+
		"\2\2\u26f2\u271d\7\u0194\2\2\u26f3\u271d\7\u0195\2\2\u26f4\u271d\7\u0196"+
		"\2\2\u26f5\u271d\7\u0197\2\2\u26f6\u271d\7\u01df\2\2\u26f7\u271d\7\u0198"+
		"\2\2\u26f8\u271d\7\u0199\2\2\u26f9\u271d\7\u019a\2\2\u26fa\u271d\7\u019b"+
		"\2\2\u26fb\u271d\7\u019c\2\2\u26fc\u271d\7\u019d\2\2\u26fd\u271d\7\u019e"+
		"\2\2\u26fe\u271d\7\u019f\2\2\u26ff\u271d\7\u01f2\2\2\u2700\u271d\7\u01a0"+
		"\2\2\u2701\u271d\5\u047c\u023f\2\u2702\u271d\7\u01ce\2\2\u2703\u271d\7"+
		"\u01a2\2\2\u2704\u271d\7\u01a3\2\2\u2705\u271d\7\u01a4\2\2\u2706\u271d"+
		"\7\u01a5\2\2\u2707\u271d\7\u01a6\2\2\u2708\u271d\7\u01a7\2\2\u2709\u271d"+
		"\7\u01a8\2\2\u270a\u271d\7\u01a9\2\2\u270b\u271d\7\u01aa\2\2\u270c\u271d"+
		"\7\u01ab\2\2\u270d\u271d\7\u01ac\2\2\u270e\u271d\7\u01ad\2\2\u270f\u271d"+
		"\7\u01ae\2\2\u2710\u271d\7\u01af\2\2\u2711\u271d\7\u01b0\2\2\u2712\u271d"+
		"\7\u01b1\2\2\u2713\u271d\7\u01b2\2\2\u2714\u271d\7\u01b3\2\2\u2715\u271d"+
		"\7\u01b4\2\2\u2716\u271d\7\u01e5\2\2\u2717\u271d\7\u01b5\2\2\u2718\u271d"+
		"\7\u01b6\2\2\u2719\u271d\7\u01b7\2\2\u271a\u271d\7\u01b8\2\2\u271b\u271d"+
		"\7\u01e3\2\2\u271c\u26e9\3\2\2\2\u271c\u26ea\3\2\2\2\u271c\u26eb\3\2\2"+
		"\2\u271c\u26ec\3\2\2\2\u271c\u26ed\3\2\2\2\u271c\u26ee\3\2\2\2\u271c\u26ef"+
		"\3\2\2\2\u271c\u26f0\3\2\2\2\u271c\u26f1\3\2\2\2\u271c\u26f2\3\2\2\2\u271c"+
		"\u26f3\3\2\2\2\u271c\u26f4\3\2\2\2\u271c\u26f5\3\2\2\2\u271c\u26f6\3\2"+
		"\2\2\u271c\u26f7\3\2\2\2\u271c\u26f8\3\2\2\2\u271c\u26f9\3\2\2\2\u271c"+
		"\u26fa\3\2\2\2\u271c\u26fb\3\2\2\2\u271c\u26fc\3\2\2\2\u271c\u26fd\3\2"+
		"\2\2\u271c\u26fe\3\2\2\2\u271c\u26ff\3\2\2\2\u271c\u2700\3\2\2\2\u271c"+
		"\u2701\3\2\2\2\u271c\u2702\3\2\2\2\u271c\u2703\3\2\2\2\u271c\u2704\3\2"+
		"\2\2\u271c\u2705\3\2\2\2\u271c\u2706\3\2\2\2\u271c\u2707\3\2\2\2\u271c"+
		"\u2708\3\2\2\2\u271c\u2709\3\2\2\2\u271c\u270a\3\2\2\2\u271c\u270b\3\2"+
		"\2\2\u271c\u270c\3\2\2\2\u271c\u270d\3\2\2\2\u271c\u270e\3\2\2\2\u271c"+
		"\u270f\3\2\2\2\u271c\u2710\3\2\2\2\u271c\u2711\3\2\2\2\u271c\u2712\3\2"+
		"\2\2\u271c\u2713\3\2\2\2\u271c\u2714\3\2\2\2\u271c\u2715\3\2\2\2\u271c"+
		"\u2716\3\2\2\2\u271c\u2717\3\2\2\2\u271c\u2718\3\2\2\2\u271c\u2719\3\2"+
		"\2\2\u271c\u271a\3\2\2\2\u271c\u271b\3\2\2\2\u271d\u057b\3\2\2\2\u271e"+
		"\u271f\t=\2\2\u271f\u057d\3\2\2\2\u2720\u2721\t>\2\2\u2721\u057f\3\2\2"+
		"\2\u2722\u2723\5\u0582\u02c2\2\u2723\u2724\5\u058c\u02c7\2\u2724\u2725"+
		"\5\u058a\u02c6\2\u2725\u0581\3\2\2\2\u2726\u2728\5\u0584\u02c3\2\u2727"+
		"\u2726\3\2\2\2\u2728\u272b\3\2\2\2\u2729\u2727\3\2\2\2\u2729\u272a\3\2"+
		"\2\2\u272a\u0583\3\2\2\2\u272b\u2729\3\2\2\2\u272c\u272d\5\u0586\u02c4"+
		"\2\u272d\u272e\7\u011f\2\2\u272e\u272f\7\u01f3\2\2\u272f\u2741\3\2\2\2"+
		"\u2730\u2731\5\u0586\u02c4\2\u2731\u2732\7\u01f4\2\2\u2732\u2733\5\u0588"+
		"\u02c5\2\u2733\u2741\3\2\2\2\u2734\u2735\5\u0586\u02c4\2\u2735\u2736\7"+
		"\u01f5\2\2\u2736\u2737\7\u01f6\2\2\u2737\u2741\3\2\2\2\u2738\u2739\5\u0586"+
		"\u02c4\2\u2739\u273a\7\u01f5\2\2\u273a\u273b\7\u01f7\2\2\u273b\u2741\3"+
		"\2\2\2\u273c\u273d\5\u0586\u02c4\2\u273d\u273e\7\u01f5\2\2\u273e\u273f"+
		"\7\u01f8\2\2\u273f\u2741\3\2\2\2\u2740\u272c\3\2\2\2\u2740\u2730\3\2\2"+
		"\2\u2740\u2734\3\2\2\2\u2740\u2738\3\2\2\2\u2740\u273c\3\2\2\2\u2741\u0585"+
		"\3\2\2\2\u2742\u2743\7 \2\2\u2743\u0587\3\2\2\2\u2744\u2749\5\u055e\u02b0"+
		"\2\u2745\u2749\5\u057e\u02c0\2\u2746\u2749\5\u0654\u032b\2\u2747\u2749"+
		"\5\u0578\u02bd\2\u2748\u2744\3\2\2\2\u2748\u2745\3\2\2\2\u2748\u2746\3"+
		"\2\2\2\u2748\u2747\3\2\2\2\u2749\u0589\3\2\2\2\u274a\u274d\3\2\2\2\u274b"+
		"\u274d\7\t\2\2\u274c\u274a\3\2\2\2\u274c\u274b\3\2\2\2\u274d\u058b\3\2"+
		"\2\2\u274e\u274f\5\u058e\u02c8\2\u274f\u2750\7\u00a3\2\2\u2750\u2751\5"+
		"\u05b8\u02dd\2\u2751\u2752\5\u0640\u0321\2\u2752\u2753\7\u01cf\2\2\u2753"+
		"\u2754\5\u064e\u0328\2\u2754\u058d\3\2\2\2\u2755\u275a\5\u064a\u0326\2"+
		"\u2756\u2758\5\u0590\u02c9\2\u2757\u2759\5\u0592\u02ca\2\u2758\u2757\3"+
		"\2\2\2\u2758\u2759\3\2\2\2\u2759\u275b\3\2\2\2\u275a\u2756\3\2\2\2\u275a"+
		"\u275b\3\2\2\2\u275b\u058f\3\2\2\2\u275c\u275d\7\u00c3\2\2\u275d\u0591"+
		"\3\2\2\2\u275e\u2760\5\u0596\u02cc\2\u275f\u275e\3\2\2\2\u2760\u2761\3"+
		"\2\2\2\u2761\u275f\3\2\2\2\u2761\u2762\3\2\2\2\u2762\u0593\3\2\2\2\u2763"+
		"\u2764\7\24\2\2\u2764\u2765\5\u0652\u032a\2\u2765\u2766\7\25\2\2\u2766"+
		"\u0595\3\2\2\2\u2767\u276b\5\u0598\u02cd\2\u2768\u276b\7\u00c3\2\2\u2769"+
		"\u276b\5\u0594\u02cb\2\u276a\u2767\3\2\2\2\u276a\u2768\3\2\2\2\u276a\u2769"+
		"\3\2\2\2\u276b\u0597\3\2\2\2\u276c\u277c\5\u05a8\u02d5\2\u276d\u276e\7"+
		"\u01f9\2\2\u276e\u276f\7F\2\2\u276f\u277d\5\u05a6\u02d4\2\u2770\u2771"+
		"\5\u05aa\u02d6\2\u2771\u2772\5\u05ac\u02d7\2\u2772\u2773\5\u05ae\u02d8"+
		"\2\u2773\u2774\5\u05b0\u02d9\2\u2774\u2775\5\u05b2\u02da\2\u2775\u277d"+
		"\3\2\2\2\u2776\u2777\5\u059a\u02ce\2\u2777\u2778\7\u00bd\2\2\u2778\u2779"+
		"\5\u059e\u02d0\2\u2779\u277a\5\u05a4\u02d3\2\u277a\u277b\5\u059c\u02cf"+
		"\2\u277b\u277d\3\2\2\2\u277c\u276d\3\2\2\2\u277c\u2770\3\2\2\2\u277c\u2776"+
		"\3\2\2\2\u277d\u277e\3\2\2\2\u277e\u277f\7\t\2\2\u277f\u0599\3\2\2\2\u2780"+
		"\u2785\3\2\2\2\u2781\u2782\7\u0115\2\2\u2782\u2785\7\u014c\2\2\u2783\u2785"+
		"\7\u014c\2\2\u2784\u2780\3\2\2\2\u2784\u2781\3\2\2\2\u2784\u2783\3\2\2"+
		"\2\u2785\u059b\3\2\2\2\u2786\u2787\5\u03d0\u01e9\2\u2787\u059d\3\2\2\2"+
		"\u2788\u278e\3\2\2\2\u2789\u278a\7\4\2\2\u278a\u278b\5\u05a0\u02d1\2\u278b"+
		"\u278c\7\5\2\2\u278c\u278e\3\2\2\2\u278d\u2788\3\2\2\2\u278d\u2789\3\2"+
		"\2\2\u278e\u059f\3\2\2\2\u278f\u2794\5\u05a2\u02d2\2\u2790\u2791\7\b\2"+
		"\2\u2791\u2793\5\u05a2\u02d2\2\u2792\u2790\3\2\2\2\u2793\u2796\3\2\2\2"+
		"\u2794\u2792\3\2\2\2\u2794\u2795\3\2\2\2\u2795\u05a1\3\2\2\2\u2796\u2794"+
		"\3\2\2\2\u2797\u2798\5\u05a8\u02d5\2\u2798\u2799\5\u05ac\u02d7\2\u2799"+
		"\u05a3\3\2\2\2\u279a\u279b\t?\2\2\u279b\u05a5\3\2\2\2\u279c\u279f\7\36"+
		"\2\2\u279d\u279f\5\u056c\u02b7\2\u279e\u279c\3\2\2\2\u279e\u279d\3\2\2"+
		"\2\u279f\u05a7\3\2\2\2\u27a0\u27a1\5\u0652\u032a\2\u27a1\u05a9\3\2\2\2"+
		"\u27a2\u27a5\3\2\2\2\u27a3\u27a5\7\u01fa\2\2\u27a4\u27a2\3\2\2\2\u27a4"+
		"\u27a3\3\2\2\2\u27a5\u05ab\3\2\2\2\u27a6\u27a7\5\u0470\u0239\2\u27a7\u05ad"+
		"\3\2\2\2\u27a8\u27ac\3\2\2\2\u27a9\u27aa\7\62\2\2\u27aa\u27ac\5\u0222"+
		"\u0112\2\u27ab\u27a8\3\2\2\2\u27ab\u27a9\3\2\2\2\u27ac\u05af\3\2\2\2\u27ad"+
		"\u27b1\3\2\2\2\u27ae\u27af\7Z\2\2\u27af\u27b1\7[\2\2\u27b0\u27ad\3\2\2"+
		"\2\u27b0\u27ae\3\2\2\2\u27b1\u05b1\3\2\2\2\u27b2\u27b7\3\2\2\2\u27b3\u27b4"+
		"\5\u05b4\u02db\2\u27b4\u27b5\5\u0656\u032c\2\u27b5\u27b7\3\2\2\2\u27b6"+
		"\u27b2\3\2\2\2\u27b6\u27b3\3\2\2\2\u27b7\u05b3\3\2\2\2\u27b8\u27bb\5\u05b6"+
		"\u02dc\2\u27b9\u27bb\7=\2\2\u27ba\u27b8\3\2\2\2\u27ba\u27b9\3\2\2\2\u27bb"+
		"\u05b5\3\2\2\2\u27bc\u27bd\t@\2\2\u27bd\u05b7\3\2\2\2\u27be\u27c0\5\u05ba"+
		"\u02de\2\u27bf\u27be\3\2\2\2\u27c0\u27c3\3\2\2\2\u27c1\u27bf\3\2\2\2\u27c1"+
		"\u27c2\3\2\2\2\u27c2\u05b9\3\2\2\2\u27c3\u27c1\3\2\2\2\u27c4\u27c5\5\u058c"+
		"\u02c7\2\u27c5\u27c6\7\t\2\2\u27c6\u27e0\3\2\2\2\u27c7\u27e0\5\u05fc\u02ff"+
		"\2\u27c8\u27e0\5\u0600\u0301\2\u27c9\u27e0\5\u05c2\u02e2\2\u27ca\u27e0"+
		"\5\u05d2\u02ea\2\u27cb\u27e0\5\u05d8\u02ed\2\u27cc\u27e0\5\u05e2\u02f2"+
		"\2\u27cd\u27e0\5\u05e4\u02f3\2\u27ce\u27e0\5\u05e6\u02f4\2\u27cf\u27e0"+
		"\5\u05f4\u02fb\2\u27d0\u27e0\5\u05f8\u02fd\2\u27d1\u27e0\5\u060c\u0307"+
		"\2\u27d2\u27e0\5\u0612\u030a\2\u27d3\u27e0\5\u0614\u030b\2\u27d4\u27e0"+
		"\5\u05bc\u02df\2\u27d5\u27e0\5\u05be\u02e0\2\u27d6\u27e0\5\u05c4\u02e3"+
		"\2\u27d7\u27e0\5\u061c\u030f\2\u27d8\u27e0\5\u0628\u0315\2\u27d9\u27e0"+
		"\5\u0630\u0319\2\u27da\u27e0\5\u0632\u031a\2\u27db\u27e0\5\u0634\u031b"+
		"\2\u27dc\u27e0\5\u0636\u031c\2\u27dd\u27e0\5\u0638\u031d\2\u27de\u27e0"+
		"\5\u063c\u031f\2\u27df\u27c4\3\2\2\2\u27df\u27c7\3\2\2\2\u27df\u27c8\3"+
		"\2\2\2\u27df\u27c9\3\2\2\2\u27df\u27ca\3\2\2\2\u27df\u27cb\3\2\2\2\u27df"+
		"\u27cc\3\2\2\2\u27df\u27cd\3\2\2\2\u27df\u27ce\3\2\2\2\u27df\u27cf\3\2"+
		"\2\2\u27df\u27d0\3\2\2\2\u27df\u27d1\3\2\2\2\u27df\u27d2\3\2\2\2\u27df"+
		"\u27d3\3\2\2\2\u27df\u27d4\3\2\2\2\u27df\u27d5\3\2\2\2\u27df\u27d6\3\2"+
		"\2\2\u27df\u27d7\3\2\2\2\u27df\u27d8\3\2\2\2\u27df\u27d9\3\2\2\2\u27df"+
		"\u27da\3\2\2\2\u27df\u27db\3\2\2\2\u27df\u27dc\3\2\2\2\u27df\u27dd\3\2"+
		"\2\2\u27df\u27de\3\2\2\2\u27e0\u05bb\3\2\2\2\u27e1\u27e2\7\u01fb\2\2\u27e2"+
		"\u27e3\5\u065a\u032e\2\u27e3\u27e4\7\t\2\2\u27e4\u05bd\3\2\2\2\u27e5\u27e6"+
		"\7\u01b9\2\2\u27e6\u27e7\5\u0652\u032a\2\u27e7\u27e8\7\4\2\2\u27e8\u27e9"+
		"\5\u05c0\u02e1\2\u27e9\u27ea\7\5\2\2\u27ea\u27eb\7\t\2\2\u27eb\u27f4\3"+
		"\2\2\2\u27ec\u27ed\7A\2\2\u27ed\u27ee\5\u0652\u032a\2\u27ee\u27ef\7\4"+
		"\2\2\u27ef\u27f0\5\u05c0\u02e1\2\u27f0\u27f1\7\5\2\2\u27f1\u27f2\7\t\2"+
		"\2\u27f2\u27f4\3\2\2\2\u27f3\u27e5\3\2\2\2\u27f3\u27ec\3\2\2\2\u27f4\u05bf"+
		"\3\2\2\2\u27f5\u27f8\3\2\2\2\u27f6\u27f8\5\u0510\u0289\2\u27f7\u27f5\3"+
		"\2\2\2\u27f7\u27f6\3\2\2\2\u27f8\u05c1\3\2\2\2\u27f9\u27fa\5\u05d0\u02e9"+
		"\2\u27fa\u27fb\5\u05b6\u02dc\2\u27fb\u27fc\5\u0656\u032c\2\u27fc\u27fd"+
		"\7\t\2\2\u27fd\u05c3\3\2\2\2\u27fe\u27ff\7\u01fc\2\2\u27ff\u2800\5\u05c6"+
		"\u02e4\2\u2800\u2801\7\u01fd\2\2\u2801\u2802\5\u05c8\u02e5\2\u2802\u2803"+
		"\7\t\2\2\u2803\u05c5\3\2\2\2\u2804\u2808\3\2\2\2\u2805\u2808\7\u01ba\2"+
		"\2\u2806\u2808\7\u01fe\2\2\u2807\u2804\3\2\2\2\u2807\u2805\3\2\2\2\u2807"+
		"\u2806\3\2\2\2\u2808\u05c7\3\2\2\2\u2809\u280e\5\u05ca\u02e6\2\u280a\u280b"+
		"\7\b\2\2\u280b\u280d\5\u05ca\u02e6\2\u280c\u280a\3\2\2\2\u280d\u2810\3"+
		"\2\2\2\u280e\u280c\3\2\2\2\u280e\u280f\3\2\2\2\u280f\u05c9\3\2\2\2\u2810"+
		"\u280e\3\2\2\2\u2811\u2812\5\u05ce\u02e8\2\u2812\u2813\5\u05b6\u02dc\2"+
		"\u2813\u2814\5\u05cc\u02e7\2\u2814\u05cb\3\2\2\2\u2815\u2816\5\u056c\u02b7"+
		"\2\u2816\u05cd\3\2\2\2\u2817\u2818\5\u05d0\u02e9\2\u2818\u05cf\3\2\2\2"+
		"\u2819\u281c\5\u0222\u0112\2\u281a\u281c\7\36\2\2\u281b\u2819\3\2\2\2"+
		"\u281b\u281a\3\2\2\2\u281c\u2823\3\2\2\2\u281d\u281e\7\6\2\2\u281e\u281f"+
		"\5\u065c\u032f\2\u281f\u2820\7\7\2\2\u2820\u2822\3\2\2\2\u2821\u281d\3"+
		"\2\2\2\u2822\u2825\3\2\2\2\u2823\u2821\3\2\2\2\u2823\u2824\3\2\2\2\u2824"+
		"\u05d1\3\2\2\2\u2825\u2823\3\2\2\2\u2826\u2827\7\u00ed\2\2\u2827\u2828"+
		"\5\u0658\u032d\2\u2828\u2829\7m\2\2\u2829\u282a\5\u05b8\u02dd\2\u282a"+
		"\u282b\5\u05d4\u02eb\2\u282b\u282c\5\u05d6\u02ec\2\u282c\u282d\7\u01cf"+
		"\2\2\u282d\u282e\7\u00ed\2\2\u282e\u282f\7\t\2\2\u282f\u05d3\3\2\2\2\u2830"+
		"\u2831\7\u01ff\2\2\u2831\u2832\5\u049c\u024f\2\u2832\u2833\7m\2\2\u2833"+
		"\u2834\5\u05b8\u02dd\2\u2834\u2836\3\2\2\2\u2835\u2830\3\2\2\2\u2836\u2839"+
		"\3\2\2\2\u2837\u2835\3\2\2\2\u2837\u2838\3\2\2\2\u2838\u05d5\3\2\2\2\u2839"+
		"\u2837\3\2\2\2\u283a\u283e\3\2\2\2\u283b\u283c\7B\2\2\u283c\u283e\5\u05b8"+
		"\u02dd\2\u283d\u283a\3\2\2\2\u283d\u283b\3\2\2\2\u283e\u05d7\3\2\2\2\u283f"+
		"\u2840\7/\2\2\u2840\u2841\5\u05da\u02ee\2\u2841\u2842\5\u05dc\u02ef\2"+
		"\u2842\u2843\5\u05e0\u02f1\2\u2843\u2844\7\u01cf\2\2\u2844\u2845\7/\2"+
		"\2\u2845\u2846\7\t\2\2\u2846\u05d9\3\2\2\2\u2847\u284a\3\2\2\2\u2848\u284a"+
		"\5\u0656\u032c\2\u2849\u2847\3\2\2\2\u2849\u2848\3\2\2\2\u284a\u05db\3"+
		"\2\2\2\u284b\u284d\5\u05de\u02f0\2\u284c\u284b\3\2\2\2\u284d\u284e\3\2"+
		"\2\2\u284e\u284c\3\2\2\2\u284e\u284f\3\2\2\2\u284f\u05dd\3\2\2\2\u2850"+
		"\u2851\7w\2\2\u2851\u2852\5\u0510\u0289\2\u2852\u2853\7m\2\2\u2853\u2854"+
		"\5\u05b8\u02dd\2\u2854\u05df\3\2\2\2\u2855\u2859\3\2\2\2\u2856\u2857\7"+
		"B\2\2\u2857\u2859\5\u05b8\u02dd\2\u2858\u2855\3\2\2\2\u2858\u2856\3\2"+
		"\2\2\u2859\u05e1\3\2\2\2\u285a\u285b\5\u064c\u0327\2\u285b\u285c\5\u0610"+
		"\u0309\2\u285c\u05e3\3\2\2\2\u285d\u285e\5\u064c\u0327\2\u285e\u285f\7"+
		"\u0200\2\2\u285f\u2860\5\u065e\u0330\2\u2860\u2861\5\u0610\u0309\2\u2861"+
		"\u05e5\3\2\2\2\u2862\u2863\5\u064c\u0327\2\u2863\u2864\7F\2\2\u2864\u2865"+
		"\5\u05e8\u02f5\2\u2865\u2866\5\u0610\u0309\2\u2866\u05e7\3\2\2\2\u2867"+
		"\u2868\5\u05f2\u02fa\2\u2868\u2878\7L\2\2\u2869\u286a\5\u03ca\u01e6\2"+
		"\u286a\u286b\5\u05ec\u02f7\2\u286b\u2879\3\2\2\2\u286c\u2879\5\u03d0\u01e9"+
		"\2\u286d\u2879\5\u0386\u01c4\2\u286e\u286f\7\u00db\2\2\u286f\u2870\5\u049c"+
		"\u024f\2\u2870\u2871\5\u05ea\u02f6\2\u2871\u2879\3\2\2\2\u2872\u2873\5"+
		"\u05ee\u02f8\2\u2873\u2874\5\u049c\u024f\2\u2874\u2875\7\32\2\2\u2875"+
		"\u2876\5\u049c\u024f\2\u2876\u2877\5\u05f0\u02f9\2\u2877\u2879\3\2\2\2"+
		"\u2878\u2869\3\2\2\2\u2878\u286c\3\2\2\2\u2878\u286d\3\2\2\2\u2878\u286e"+
		"\3\2\2\2\u2878\u2872\3\2\2\2\u2879\u05e9\3\2\2\2\u287a\u287e\3\2\2\2\u287b"+
		"\u287c\7u\2\2\u287c\u287e\5\u0510\u0289\2\u287d\u287a\3\2\2\2\u287d\u287b"+
		"\3\2\2\2\u287e\u05eb\3\2\2\2\u287f\u288c\3\2\2\2\u2880\u2881\7\4\2\2\u2881"+
		"\u2886\5\u049c\u024f\2\u2882\u2883\7\b\2\2\u2883\u2885\5\u049c\u024f\2"+
		"\u2884\u2882\3\2\2\2\u2885\u2888\3\2\2\2\u2886\u2884\3\2\2\2\u2886\u2887"+
		"\3\2\2\2\u2887\u2889\3\2\2\2\u2888\u2886\3\2\2\2\u2889\u288a\7\5\2\2\u288a"+
		"\u288c\3\2\2\2\u288b\u287f\3\2\2\2\u288b\u2880\3\2\2\2\u288c\u05ed\3\2"+
		"\2\2\u288d\u2890\3\2\2\2\u288e\u2890\7\u0201\2\2\u288f\u288d\3\2\2\2\u288f"+
		"\u288e\3\2\2\2\u2890\u05ef\3\2\2\2\u2891\u2895\3\2\2\2\u2892\u2893\7\u00a4"+
		"\2\2\u2893\u2895\5\u049c\u024f\2\u2894\u2891\3\2\2\2\u2894\u2892\3\2\2"+
		"\2\u2895\u05f1\3\2\2\2\u2896\u2897\5\u0220\u0111\2\u2897\u05f3\3\2\2\2"+
		"\u2898\u2899\5\u064c\u0327\2\u2899\u289a\7\u0202\2\2\u289a\u289b\5\u05f2"+
		"\u02fa\2\u289b\u289c\5\u05f6\u02fc\2\u289c\u289d\7L\2\2\u289d\u289e\7"+
		"&\2\2\u289e\u289f\5\u049c\u024f\2\u289f\u28a0\5\u0610\u0309\2\u28a0\u05f5"+
		"\3\2\2\2\u28a1\u28a5\3\2\2\2\u28a2\u28a3\7\u0203\2\2\u28a3\u28a5\5\u055c"+
		"\u02af\2\u28a4\u28a1\3\2\2\2\u28a4\u28a2\3\2\2\2\u28a5\u05f7\3\2\2\2\u28a6"+
		"\u28a7\5\u05fa\u02fe\2\u28a7\u28a8\5\u064e\u0328\2\u28a8\u28a9\5\u0650"+
		"\u0329\2\u28a9\u28aa\7\t\2\2\u28aa\u05f9\3\2\2\2\u28ab\u28ac\tA\2\2\u28ac"+
		"\u05fb\3\2\2\2\u28ad\u28b9\7\u0205\2\2\u28ae\u28af\7\u0114\2\2\u28af\u28ba"+
		"\5\u0656\u032c\2\u28b0\u28b6\7\u0206\2\2\u28b1\u28b2\7\u00db\2\2\u28b2"+
		"\u28b3\5\u049c\u024f\2\u28b3\u28b4\5\u05ea\u02f6\2\u28b4\u28b7\3\2\2\2"+
		"\u28b5\u28b7\5\u03d0\u01e9\2\u28b6\u28b1\3\2\2\2\u28b6\u28b5\3\2\2\2\u28b7"+
		"\u28ba\3\2\2\2\u28b8\u28ba\5\u05fe\u0300\2\u28b9\u28ae\3\2\2\2\u28b9\u28b0"+
		"\3\2\2\2\u28b9\u28b8\3\2\2\2\u28ba\u28bb\3\2\2\2\u28bb\u28bc\7\t\2\2\u28bc"+
		"\u05fd\3\2\2\2\u28bd\u28c0\3\2\2\2\u28be\u28c0\5\u0656\u032c\2\u28bf\u28bd"+
		"\3\2\2\2\u28bf\u28be\3\2\2\2\u28c0\u05ff\3\2\2\2\u28c1\u28c2\7\u0207\2"+
		"\2\u28c2\u28c3\5\u0602\u0302\2\u28c3\u28c4\5\u055e\u02b0\2\u28c4\u28c5"+
		"\5\u0604\u0303\2\u28c5\u28c6\5\u0606\u0304\2\u28c6\u28c7\7\t\2\2\u28c7"+
		"\u28dc\3\2\2\2\u28c8\u28c9\7\u0207\2\2\u28c9\u28ca\5\u0602\u0302\2\u28ca"+
		"\u28cb\5\u0574\u02bb\2\u28cb\u28cc\5\u0606\u0304\2\u28cc\u28cd\7\t\2\2"+
		"\u28cd\u28dc\3\2\2\2\u28ce\u28cf\7\u0207\2\2\u28cf\u28d0\5\u0602\u0302"+
		"\2\u28d0\u28d1\7\u0208\2\2\u28d1\u28d2\5\u055e\u02b0\2\u28d2\u28d3\5\u0606"+
		"\u0304\2\u28d3\u28d4\7\t\2\2\u28d4\u28dc\3\2\2\2\u28d5\u28d6\7\u0207\2"+
		"\2\u28d6\u28d7\5\u0602\u0302\2\u28d7\u28d8\5\u0606\u0304\2\u28d8\u28d9"+
		"\7\t\2\2\u28d9\u28dc\3\2\2\2\u28da\u28dc\7\u0207\2\2\u28db\u28c1\3\2\2"+
		"\2\u28db\u28c8\3\2\2\2\u28db\u28ce\3\2\2\2\u28db\u28d5\3\2\2\2\u28db\u28da"+
		"\3\2\2\2\u28dc\u0601\3\2\2\2\u28dd\u28e6\3\2\2\2\u28de\u28e6\3\2\2\2\u28df"+
		"\u28e6\7\u0209\2\2\u28e0\u28e6\7\u020a\2\2\u28e1\u28e6\7\u020b\2\2\u28e2"+
		"\u28e6\7\u020c\2\2\u28e3\u28e6\7\u020d\2\2\u28e4\u28e6\7\u020e\2\2\u28e5"+
		"\u28dd\3\2\2\2\u28e5\u28de\3\2\2\2\u28e5\u28df\3\2\2\2\u28e5\u28e0\3\2"+
		"\2\2\u28e5\u28e1\3\2\2\2\u28e5\u28e2\3\2\2\2\u28e5\u28e3\3\2\2\2\u28e5"+
		"\u28e4\3\2\2\2\u28e6\u0603\3\2\2\2\u28e7\u28ef\3\2\2\2\u28e8\u28e9\7\b"+
		"\2\2\u28e9\u28eb\5\u049c\u024f\2\u28ea\u28e8\3\2\2\2\u28eb\u28ec\3\2\2"+
		"\2\u28ec\u28ea\3\2\2\2\u28ec\u28ed\3\2\2\2\u28ed\u28ef\3\2\2\2\u28ee\u28e7"+
		"\3\2\2\2\u28ee\u28ea\3\2\2\2\u28ef\u0605\3\2\2\2\u28f0\u28f4\3\2\2\2\u28f1"+
		"\u28f2\7u\2\2\u28f2\u28f4\5\u060a\u0306\2\u28f3\u28f0\3\2\2\2\u28f3\u28f1"+
		"\3\2\2\2\u28f4\u0607\3\2\2\2\u28f5\u28f6\5\u0574\u02bb\2\u28f6\u28f7\7"+
		"\f\2\2\u28f7\u28f8\5\u049c\u024f\2\u28f8\u0609\3\2\2\2\u28f9\u28fe\5\u0608"+
		"\u0305\2\u28fa\u28fb\7\b\2\2\u28fb\u28fd\5\u0608\u0305\2\u28fc\u28fa\3"+
		"\2\2\2\u28fd\u2900\3\2\2\2\u28fe\u28fc\3\2\2\2\u28fe\u28ff\3\2\2\2\u28ff"+
		"\u060b\3\2\2\2\u2900\u28fe\3\2\2\2\u2901\u2902\7\u020f\2\2\u2902\u2903"+
		"\5\u0656\u032c\2\u2903\u2904\5\u060e\u0308\2\u2904\u2905\7\t\2\2\u2905"+
		"\u060d\3\2\2\2\u2906\u290a\3\2\2\2\u2907\u2908\7\b\2\2\u2908\u290a\5\u0656"+
		"\u032c\2\u2909\u2906\3\2\2\2\u2909\u2907\3\2\2\2\u290a\u060f\3\2\2\2\u290b"+
		"\u290c\7\u0210\2\2\u290c\u290d\5\u05b8\u02dd\2\u290d\u290e\7\u01cf\2\2"+
		"\u290e\u290f\7\u0210\2\2\u290f\u2910\5\u064e\u0328\2\u2910\u2911\7\t\2"+
		"\2\u2911\u0611\3\2\2\2\u2912\u2913\5\u0660\u0331\2\u2913\u2914\7\t\2\2"+
		"\u2914\u0613\3\2\2\2\u2915\u2916\7\u00db\2\2\u2916\u291e\5\u049c\u024f"+
		"\2\u2917\u2918\5\u061a\u030e\2\u2918\u2919\5\u0616\u030c\2\u2919\u291f"+
		"\3\2\2\2\u291a\u291b\5\u0616\u030c\2\u291b\u291c\5\u061a\u030e\2\u291c"+
		"\u291f\3\2\2\2\u291d\u291f\3\2\2\2\u291e\u2917\3\2\2\2\u291e\u291a\3\2"+
		"\2\2\u291e\u291d\3\2\2\2\u291f\u2920\3\2\2\2\u2920\u2921\7\t\2\2\u2921"+
		"\u0615\3\2\2\2\u2922\u2926\3\2\2\2\u2923\u2924\7u\2\2\u2924\u2926\5\u0618"+
		"\u030d\2\u2925\u2922\3\2\2\2\u2925\u2923\3\2\2\2\u2926\u0617\3\2\2\2\u2927"+
		"\u292c\5\u049c\u024f\2\u2928\u2929\7\b\2\2\u2929\u292b\5\u049c\u024f\2"+
		"\u292a\u2928\3\2\2\2\u292b\u292e\3\2\2\2\u292c\u292a\3\2\2\2\u292c\u292d"+
		"\3\2\2\2\u292d\u0619\3\2\2\2\u292e\u292c\3\2\2\2\u292f\u2936\3\2\2\2\u2930"+
		"\u2932\7O\2\2\u2931\u2933\7\u0162\2\2\u2932\u2931\3\2\2\2\u2932\u2933"+
		"\3\2\2\2\u2933\u2934\3\2\2\2\u2934\u2936\5\u062a\u0316\2\u2935\u292f\3"+
		"\2\2\2\u2935\u2930\3\2\2\2\u2936\u061b\3\2\2\2\u2937\u2949\7\u0211\2\2"+
		"\u2938\u2939\5\u063e\u0320\2\u2939\u293a\5\u0624\u0313\2\u293a\u2940\7"+
		"F\2\2\u293b\u2941\5\u03d0\u01e9\2\u293c\u293d\7\u00db\2\2\u293d\u293e"+
		"\5\u0656\u032c\2\u293e\u293f\5\u0622\u0312\2\u293f\u2941\3\2\2\2\u2940"+
		"\u293b\3\2\2\2\u2940\u293c\3\2\2\2\u2941\u294a\3\2\2\2\u2942\u2947\5\u056c"+
		"\u02b7\2\u2943\u2944\7\4\2\2\u2944\u2945\5\u0620\u0311\2\u2945\u2946\7"+
		"\5\2\2\u2946\u2948\3\2\2\2\u2947\u2943\3\2\2\2\u2947\u2948\3\2\2\2\u2948"+
		"\u294a\3\2\2\2\u2949\u2938\3\2\2\2\u2949\u2942\3\2\2\2\u294a\u294b\3\2"+
		"\2\2\u294b\u294c\7\t\2\2\u294c\u061d\3\2\2\2\u294d\u294e\5\u056c\u02b7"+
		"\2\u294e\u294f\7\26\2\2\u294f\u2950\5\u049c\u024f\2\u2950\u2953\3\2\2"+
		"\2\u2951\u2953\5\u049c\u024f\2\u2952\u294d\3\2\2\2\u2952\u2951\3\2\2\2"+
		"\u2953\u061f\3\2\2\2\u2954\u2959\5\u061e\u0310\2\u2955\u2956\7\b\2\2\u2956"+
		"\u2958\5\u061e\u0310\2\u2957\u2955\3\2\2\2\u2958\u295b\3\2\2\2\u2959\u2957"+
		"\3\2\2\2\u2959\u295a\3\2\2\2\u295a\u0621\3\2\2\2\u295b\u2959\3\2\2\2\u295c"+
		"\u2960\3\2\2\2\u295d\u295e\7u\2\2\u295e\u2960\5\u0510\u0289\2\u295f\u295c"+
		"\3\2\2\2\u295f\u295d\3\2\2\2\u2960\u0623\3\2\2\2\u2961\u2966\3\2\2\2\u2962"+
		"\u2963\5\u0626\u0314\2\u2963\u2964\7\u014c\2\2\u2964\u2966\3\2\2\2\u2965"+
		"\u2961\3\2\2\2\u2965\u2962\3\2\2\2\u2966\u0625\3\2\2\2\u2967\u296a\3\2"+
		"\2\2\u2968\u296a\7\u0115\2\2\u2969\u2967\3\2\2\2\u2969\u2968\3\2\2\2\u296a"+
		"\u0627\3\2\2\2\u296b\u296c\7E\2\2\u296c\u296d\5\u062e\u0318\2\u296d\u296e"+
		"\5\u062c\u0317\2\u296e\u296f\5\u063e\u0320\2\u296f\u2970\7O\2\2\u2970"+
		"\u2971\5\u062a\u0316\2\u2971\u2972\7\t\2\2\u2972\u0629\3\2\2\2\u2973\u2974"+
		"\5\u0510\u0289\2\u2974\u062b\3\2\2\2\u2975\u2979\3\2\2\2\u2976\u2979\7"+
		"H\2\2\u2977\u2979\7L\2\2\u2978\u2975\3\2\2\2\u2978\u2976\3\2\2\2\u2978"+
		"\u2977\3\2\2\2\u2979\u062d\3\2\2\2\u297a\u298c\3\2\2\2\u297b\u298c\3\2"+
		"\2\2\u297c\u298c\7\u0114\2\2\u297d\u298c\7\u012d\2\2\u297e\u298c\7\u00e0"+
		"\2\2\u297f\u298c\7\u0101\2\2\u2980\u2981\7\u0093\2\2\u2981\u298c\5\u049c"+
		"\u024f\2\u2982\u2983\7\u013b\2\2\u2983\u298c\5\u049c\u024f\2\u2984\u298c"+
		"\5\u049c\u024f\2\u2985\u298c\7!\2\2\u2986\u2989\tB\2\2\u2987\u298a\5\u049c"+
		"\u024f\2\u2988\u298a\7!\2\2\u2989\u2987\3\2\2\2\u2989\u2988\3\2\2\2\u2989"+
		"\u298a\3\2\2\2\u298a\u298c\3\2\2\2\u298b\u297a\3\2\2\2\u298b\u297b\3\2"+
		"\2\2\u298b\u297c\3\2\2\2\u298b\u297d\3\2\2\2\u298b\u297e\3\2\2\2\u298b"+
		"\u297f\3\2\2\2\u298b\u2980\3\2\2\2\u298b\u2982\3\2\2\2\u298b\u2984\3\2"+
		"\2\2\u298b\u2985\3\2\2\2\u298b\u2986\3\2\2\2\u298c\u062f\3\2\2\2\u298d"+
		"\u298e\7\u0111\2\2\u298e\u298f\5\u062e\u0318\2\u298f\u2990\5\u063e\u0320"+
		"\2\u2990\u2991\7\t\2\2\u2991\u0631\3\2\2\2\u2992\u2993\7\u00ae\2\2\u2993"+
		"\u2994\5\u063e\u0320\2\u2994\u2995\7\t\2\2\u2995\u0633\3\2\2\2\u2996\u2997"+
		"\7[\2\2\u2997\u2998\7\t\2\2\u2998\u0635\3\2\2\2\u2999\u299a\7\u00b2\2"+
		"\2\u299a\u299b\5\u063a\u031e\2\u299b\u299c\7\t\2\2\u299c\u0637\3\2\2\2"+
		"\u299d\u299e\7\u0147\2\2\u299e\u299f\5\u063a\u031e\2\u299f\u29a0\7\t\2"+
		"\2\u29a0\u0639\3\2\2\2\u29a1\u29a3\7$\2\2\u29a2\u29a4\7\u0115\2\2\u29a3"+
		"\u29a2\3\2\2\2\u29a3\u29a4\3\2\2\2\u29a4\u29a5\3\2\2\2\u29a5\u29a8\7\u00aa"+
		"\2\2\u29a6\u29a8\3\2\2\2\u29a7\u29a1\3\2\2\2\u29a7\u29a6\3\2\2\2\u29a8"+
		"\u063b\3\2\2\2\u29a9\u29aa\7\u0155\2\2\u29aa\u29ab\5\u0222\u0112\2\u29ab"+
		"\u29ac\7n\2\2\u29ac\u29ad\7=\2\2\u29ad\u29ae\7\t\2\2\u29ae\u29b6\3\2\2"+
		"\2\u29af\u29b2\7\u0141\2\2\u29b0\u29b3\5\u0222\u0112\2\u29b1\u29b3\7!"+
		"\2\2\u29b2\u29b0\3\2\2\2\u29b2\u29b1\3\2\2\2\u29b3\u29b4\3\2\2\2\u29b4"+
		"\u29b6\7\t\2\2\u29b5\u29a9\3\2\2\2\u29b5\u29af\3\2\2\2\u29b6\u063d\3\2"+
		"\2\2\u29b7\u29ba\5\u056c\u02b7\2\u29b8\u29ba\7\36\2\2\u29b9\u29b7\3\2"+
		"\2\2\u29b9\u29b8\3\2\2\2\u29ba\u063f\3\2\2\2\u29bb\u29bf\3\2\2\2\u29bc"+
		"\u29bd\7\u020e\2\2\u29bd\u29bf\5\u0642\u0322\2\u29be\u29bb\3\2\2\2\u29be"+
		"\u29bc\3\2\2\2\u29bf\u0641\3\2\2\2\u29c0\u29c2\5\u0644\u0323\2\u29c1\u29c0"+
		"\3\2\2\2\u29c2\u29c3\3\2\2\2\u29c3\u29c1\3\2\2\2\u29c3\u29c4\3\2\2\2\u29c4"+
		"\u0643\3\2\2\2\u29c5\u29c6\7w\2\2\u29c6\u29c7\5\u0646\u0324\2\u29c7\u29c8"+
		"\7m\2\2\u29c8\u29c9\5\u05b8\u02dd\2\u29c9\u0645\3\2\2\2\u29ca\u29cf\5"+
		"\u0648\u0325\2\u29cb\u29cc\7_\2\2\u29cc\u29ce\5\u0648\u0325\2\u29cd\u29cb"+
		"\3\2\2\2\u29ce\u29d1\3\2\2\2\u29cf\u29cd\3\2\2\2\u29cf\u29d0\3\2\2\2\u29d0"+
		"\u0647\3\2\2\2\u29d1\u29cf\3\2\2\2\u29d2\u29d6\5\u0652\u032a\2\u29d3\u29d4"+
		"\7\u0208\2\2\u29d4\u29d6\5\u055e\u02b0\2\u29d5\u29d2\3\2\2\2\u29d5\u29d3"+
		"\3\2\2\2\u29d6\u0649\3\2\2\2\u29d7\u29da\3\2\2\2\u29d8\u29da\5\u0594\u02cb"+
		"\2\u29d9\u29d7\3\2\2\2\u29d9\u29d8\3\2\2\2\u29da\u064b\3\2\2\2\u29db\u29de"+
		"\3\2\2\2\u29dc\u29de\5\u0594\u02cb\2\u29dd\u29db\3\2\2\2\u29dd\u29dc\3"+
		"\2\2\2\u29de\u064d\3\2\2\2\u29df\u29e2\3\2\2\2\u29e0\u29e2\5\u0652\u032a"+
		"\2\u29e1\u29df\3\2\2\2\u29e1\u29e0\3\2\2\2\u29e2\u064f\3\2\2\2\u29e3\u29e4"+
		"\7w\2\2\u29e4\u29e7\5\u065a\u032e\2\u29e5\u29e7\3\2\2\2\u29e6\u29e3\3"+
		"\2\2\2\u29e6\u29e5\3\2\2\2\u29e7\u0651\3\2\2\2\u29e8\u29eb\5\u056c\u02b7"+
		"\2\u29e9\u29eb\5\u0654\u032b\2\u29ea\u29e8\3\2\2\2\u29ea\u29e9\3\2\2\2"+
		"\u29eb\u0653\3\2\2\2\u29ec\u29ed\tC\2\2\u29ed\u0655\3\2\2\2\u29ee\u29ef"+
		"\5\u0540\u02a1\2\u29ef\u29f0\5\u03ec\u01f7\2\u29f0\u29f1\5\u0434\u021b"+
		"\2\u29f1\u29f2\5\u0458\u022d\2\u29f2\u29f3\5\u0416\u020c\2\u29f3\u29f4"+
		"\5\u0424\u0213\2\u29f4\u29f5\5\u04e8\u0275\2\u29f5\u0657\3\2\2\2\u29f6"+
		"\u29f7\5\u0656\u032c\2\u29f7\u0659\3\2\2\2\u29f8\u29f9\5\u0656\u032c\2"+
		"\u29f9\u065b\3\2\2\2\u29fa\u29fb\5\u049c\u024f\2\u29fb\u065d\3\2\2\2\u29fc"+
		"\u29fd\5\u049c\u024f\2\u29fd\u065f\3\2\2\2\u29fe\u29ff\5\n\6\2\u29ff\u2a00"+
		"\5\u0662\u0332\2\u2a00\u0661\3\2\2\2\u2a01\u2a02\7O\2\2\u2a02\u2a03\5"+
		"\u03ee\u01f8\2\u2a03\u2a04\5\u062a\u0316\2\u2a04\u2a07\3\2\2\2\u2a05\u2a07"+
		"\3\2\2\2\u2a06\u2a01\3\2\2\2\u2a06\u2a05\3\2\2\2\u2a07\u0663\3\2\2\2\u02dd"+
		"\u066d\u0671\u06f3\u06f7\u0704\u0709\u070f\u0715\u0724\u0730\u0742\u0747"+
		"\u0751\u076a\u0779\u0790\u0793\u079e\u07a5\u07ab\u07b0\u07b9\u07bd\u07c9"+
		"\u07e8\u07ef\u07f7\u07fc\u0803\u0809\u081a\u081f\u0823\u0830\u0834\u0839"+
		"\u083e\u084a\u0853\u0860\u0865\u0870\u087b\u0880\u088b\u0896\u089f\u08a9"+
		"\u08b8\u08c4\u08c9\u08d0\u08db\u0a0f\u0a16\u0a1e\u0a23\u0a28\u0a2d\u0a35"+
		"\u0a3e\u0a45\u0a4f\u0a51\u0a56\u0a5c\u0a62\u0a64\u0a80\u0a8a\u0a97\u0aa3"+
		"\u0ab1\u0ab6\u0ace\u0ad4\u0ad9\u0ae0\u0ae5\u0b0b\u0b0f\u0b16\u0b1a\u0b21"+
		"\u0b2f\u0b36\u0b41\u0b62\u0b6c\u0b70\u0b77\u0b7e\u0b86\u0b8c\u0b90\u0b9a"+
		"\u0ba1\u0bac\u0bcc\u0bd4\u0bd9\u0be0\u0bea\u0bf4\u0c08\u0c17\u0c30\u0c35"+
		"\u0c3c\u0c43\u0c4e\u0c53\u0c5a\u0c65\u0c6d\u0c78\u0c88\u0c90\u0c94\u0ca2"+
		"\u0cb3\u0cb8\u0cbf\u0cc8\u0ccb\u0cd0\u0cd7\u0ce2\u0cef\u0cfc\u0d0e\u0d11"+
		"\u0d1a\u0d29\u0d38\u0d41\u0d48\u0d4f\u0d54\u0d72\u0d74\u0d78\u0d80\u0d87"+
		"\u0d95\u0d99\u0d9d\u0da2\u0da8\u0dac\u0db0\u0dc1\u0dcc\u0dd9\u0ddf\u0de8"+
		"\u0df1\u0dfb\u0e06\u0e74\u0e86\u0e8b\u0e8f\u0ea0\u0ea8\u0eaf\u0ebc\u0ec6"+
		"\u0ee8\u0eed\u0ef2\u0ef6\u0efe\u0f00\u0f3a\u0f4b\u0f53\u0f6a\u0f6e\u0f82"+
		"\u0fa7\u0fb0\u0fb5\u0fba\u0fbf\u0fc4\u0ff9\u0fff\u1006\u1010\u1015\u101a"+
		"\u102c\u1030\u103a\u1040\u1046\u104d\u1052\u1057\u1065\u1081\u1088\u1096"+
		"\u10a5\u111a\u1125\u112b\u1133\u113e\u1147\u114e\u1176\u117c\u1191\u11ad"+
		"\u11b1\u11b6\u11bf\u11c3\u11de\u11e5\u11f4\u1208\u121c\u1279\u1292\u1299"+
		"\u12a9\u12b2\u12b7\u12bd\u12c4\u12d2\u1367\u136b\u13c8\u13cd\u13d1\u13d7"+
		"\u141b\u1421\u143e\u144f\u1456\u1462\u149e\u14a5\u14ab\u14b1\u14cb\u14d1"+
		"\u14d7\u14e2\u14ee\u150b\u1532\u1536\u153a\u153e\u1543\u154a\u1558\u1565"+
		"\u156d\u1574\u157a\u157e\u1583\u158a\u1598\u159a\u15a1\u15a5\u15ae\u15b6"+
		"\u15bf\u15c1\u15c5\u15ce\u15d3\u15d9\u15de\u15e2\u15e7\u15f9\u15fe\u160d"+
		"\u1616\u1621\u1627\u164e\u1658\u165f\u166a\u1670\u167a\u1686\u168a\u16b0"+
		"\u16be\u16cc\u16e4\u16eb\u16f5\u1701\u1706\u172a\u1731\u1740\u176f\u1794"+
		"\u179f\u17b2\u17c4\u199a\u199e\u19a3\u19de\u19e2\u1abd\u1acc\u1ad7\u1ade"+
		"\u1b9f\u1ba9\u1bb1\u1bce\u1bde\u1c08\u1c16\u1c2c\u1c33\u1c3b\u1c3f\u1c46"+
		"\u1c4f\u1c58\u1c8c\u1c91\u1c9d\u1ca1\u1ca6\u1cab\u1caf\u1cb3\u1cb8\u1cc8"+
		"\u1cd0\u1cd5\u1ce2\u1ce7\u1cee\u1cf8\u1cfc\u1d07\u1d12\u1d1a\u1d21\u1d48"+
		"\u1d50\u1d54\u1da5\u1dc1\u1dc6\u1dd5\u1de1\u1de8\u1df2\u1df7\u1dfb\u1dff"+
		"\u1e03\u1e07\u1e0e\u1e18\u1e1d\u1e2f\u1e3a\u1e41\u1e49\u1e4e\u1e5b\u1e61"+
		"\u1e7e\u1e85\u1e91\u1e9e\u1ead\u1eb3\u1ebc\u1ecc\u1ecf\u1eda\u1edf\u1eec"+
		"\u1ef9\u1f04\u1f07\u1f0b\u1f11\u1f21\u1f2e\u1f38\u1f4a\u1f4c\u1f54\u1f58"+
		"\u1f62\u1f6c\u1f77\u1f79\u1f7d\u1f87\u1f98\u1f9a\u1f9f\u1fa3\u1faa\u1fb1"+
		"\u1fb8\u1fc1\u1fd0\u1fd4\u1fdb\u1fde\u1fe2\u1fe5\u1ff2\u1ff6\u1ffb\u2003"+
		"\u2007\u200b\u2016\u201d\u2023\u2027\u2029\u202d\u2033\u203c\u2042\u2044"+
		"\u2046\u204d\u2051\u205a\u205e\u2068\u206f\u2077\u208f\u2095\u2099\u209e"+
		"\u20a7\u20ab\u20ae\u20b3\u20c0\u20c6\u20cd\u20d3\u20e8\u20f1\u20f6\u20fc"+
		"\u2101\u2108\u210d\u2113\u2115\u2119\u2120\u2124\u2129\u212c\u2133\u2137"+
		"\u2140\u2144\u214c\u214e\u2155\u215a\u215d\u216c\u2178\u2182\u218b\u2190"+
		"\u2195\u219c\u219f\u21a3\u21aa\u21c2\u21cb\u21d1\u21d5\u21da\u21e4\u21eb"+
		"\u21f4\u21f7\u2200\u2202\u2208\u220c\u2211\u221f\u2221\u2227\u222b\u2234"+
		"\u2246\u224d\u2251\u2255\u2265\u226c\u2274\u2278\u227f\u228c\u229c\u22a2"+
		"\u22a8\u22af\u22b4\u22ba\u22c1\u22c9\u22d1\u22d6\u22da\u22dd\u22e3\u22e8"+
		"\u22f8\u22fb\u22fd\u2309\u230b\u230f\u2317\u2319\u231e\u2326\u232a\u2333"+
		"\u233b\u2341\u2344\u234d\u2352\u2359\u2363\u237d\u2388\u238a\u238c\u2394"+
		"\u23ac\u23b4\u23be\u23cc\u23d6\u23da\u23e8\u23ef\u23f6\u23fd\u2416\u2433"+
		"\u245a\u245c\u2478\u248d\u2494\u24a1\u24ad\u24b3\u24bc\u24cd\u24d9\u24e2"+
		"\u24e7\u24ee\u24f8\u24fb\u2506\u250c\u251b\u2523\u252c\u2535\u2538\u253d"+
		"\u2546\u254b\u2559\u2563\u256b\u2579\u2580\u2588\u2590\u2597\u259d\u25a6"+
		"\u25ae\u25b8\u25c3\u25ca\u25e8\u25f1\u25f8\u2603\u260d\u2611\u2615\u261a"+
		"\u2622\u2626\u262a\u262f\u2634\u2639\u2640\u2648\u264b\u2652\u2657\u265e"+
		"\u266b\u267a\u2688\u268d\u26a0\u26a5\u26aa\u26b1\u26b8\u26bf\u26c6\u26cc"+
		"\u26d2\u26da\u26e3\u271c\u2729\u2740\u2748\u274c\u2758\u275a\u2761\u276a"+
		"\u277c\u2784\u278d\u2794\u279e\u27a4\u27ab\u27b0\u27b6\u27ba\u27c1\u27df"+
		"\u27f3\u27f7\u2807\u280e\u281b\u2823\u2837\u283d\u2849\u284e\u2858\u2878"+
		"\u287d\u2886\u288b\u288f\u2894\u28a4\u28b6\u28b9\u28bf\u28db\u28e5\u28ec"+
		"\u28ee\u28f3\u28fe\u2909\u291e\u2925\u292c\u2932\u2935\u2940\u2947\u2949"+
		"\u2952\u2959\u295f\u2965\u2969\u2978\u2989\u298b\u29a3\u29a7\u29b2\u29b5"+
		"\u29b9\u29be\u29c3\u29cf\u29d5\u29d9\u29dd\u29e1\u29e6\u29ea\u2a06";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}